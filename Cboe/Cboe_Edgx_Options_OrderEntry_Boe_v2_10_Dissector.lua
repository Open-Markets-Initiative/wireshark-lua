-----------------------------------------------------------------------
-- Lua Script Wireshark Dissector
-- 
-- Please see end of file for rules and regulations
-----------------------------------------------------------------------

-- Cboe Edgx Options OrderEntry Boe 2.10 Protocol
local omi_cboe_edgx_options_orderentry_boe_v2_10 = Proto("Cboe.Edgx.Options.OrderEntry.Boe.v2.10.Lua", "Cboe Edgx Options OrderEntry Boe 2.10")

-- Protocol table
local cboe_edgx_options_orderentry_boe_v2_10 = {}

-----------------------------------------------------------------------
-- Declare Protocol Fields
-----------------------------------------------------------------------

-- Cboe Edgx Options OrderEntry Boe 2.10 Fields
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.account = ProtoField.new("Account", "cboe.edgx.options.orderentry.boe.v2.10.account", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.alloc_qty = ProtoField.new("Alloc Qty", "cboe.edgx.options.orderentry.boe.v2.10.allocqty", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.application_message_type = ProtoField.new("Application Message Type", "cboe.edgx.options.orderentry.boe.v2.10.applicationmessagetype", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.attributed_quote = ProtoField.new("Attributed Quote", "cboe.edgx.options.orderentry.boe.v2.10.attributedquote", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.auction_id = ProtoField.new("Auction Id", "cboe.edgx.options.orderentry.boe.v2.10.auctionid", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.auto_match = ProtoField.new("Auto Match", "cboe.edgx.options.orderentry.boe.v2.10.automatch", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.auto_match_price = ProtoField.new("Auto Match Price", "cboe.edgx.options.orderentry.boe.v2.10.automatchprice", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.base_liquidity_indicator = ProtoField.new("Base Liquidity Indicator", "cboe.edgx.options.orderentry.boe.v2.10.baseliquidityindicator", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.bitfields = ProtoField.new("Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.bitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_bitfield_count = ProtoField.new("Cancel Order Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_byte_1 = ProtoField.new("Cancel Order Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_byte_2 = ProtoField.new("Cancel Order Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_clearing_firm_exists = ProtoField.new("Cancel Order Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_exists = ProtoField.new("Cancel Order Mass Cancel Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelordermasscancelexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_id_exists = ProtoField.new("Cancel Order Mass Cancel Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelordermasscancelidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_inst_exists = ProtoField.new("Cancel Order Mass Cancel Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelordermasscancelinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_lockout_exists = ProtoField.new("Cancel Order Mass Cancel Lockout Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelordermasscancellockoutexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_optional_fields = ProtoField.new("Cancel Order Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_2_exists = ProtoField.new("Cancel Order Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_3_exists = ProtoField.new("Cancel Order Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_4_exists = ProtoField.new("Cancel Order Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_5_exists = ProtoField.new("Cancel Order Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_6_exists = ProtoField.new("Cancel Order Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_7_exists = ProtoField.new("Cancel Order Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_8_exists = ProtoField.new("Cancel Order Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_risk_root_exists = ProtoField.new("Cancel Order Risk Root Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderriskrootexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_routing_firm_id_exists = ProtoField.new("Cancel Order Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelorderroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_orig_on_reject = ProtoField.new("Cancel Orig On Reject", "cboe.edgx.options.orderentry.boe.v2.10.cancelorigonreject", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_reason = ProtoField.new("Cancel Reason", "cboe.edgx.options.orderentry.boe.v2.10.cancelreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_reject_reason = ProtoField.new("Cancel Reject Reason", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_alloc_qty_exists = ProtoField.new("Cancel Rejected Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_auction_id_exists = ProtoField.new("Cancel Rejected Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_bitfield_count = ProtoField.new("Cancel Rejected Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_1 = ProtoField.new("Cancel Rejected Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_10 = ProtoField.new("Cancel Rejected Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_11 = ProtoField.new("Cancel Rejected Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_12 = ProtoField.new("Cancel Rejected Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_13 = ProtoField.new("Cancel Rejected Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_14 = ProtoField.new("Cancel Rejected Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_15 = ProtoField.new("Cancel Rejected Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_16 = ProtoField.new("Cancel Rejected Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_17 = ProtoField.new("Cancel Rejected Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_2 = ProtoField.new("Cancel Rejected Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_3 = ProtoField.new("Cancel Rejected Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_4 = ProtoField.new("Cancel Rejected Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_5 = ProtoField.new("Cancel Rejected Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_6 = ProtoField.new("Cancel Rejected Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_7 = ProtoField.new("Cancel Rejected Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_8 = ProtoField.new("Cancel Rejected Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_9 = ProtoField.new("Cancel Rejected Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_capacity_exists = ProtoField.new("Cancel Rejected Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_cmta_number_exists = ProtoField.new("Cancel Rejected Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_corrected_size_exists = ProtoField.new("Cancel Rejected Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_cross_exclusion_indicator_exists = ProtoField.new("Cancel Rejected Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_cross_id_exists = ProtoField.new("Cancel Rejected Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_echo_text_exists = ProtoField.new("Cancel Rejected Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_exec_inst_exists = ProtoField.new("Cancel Rejected Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_give_up_firm_id_exists = ProtoField.new("Cancel Rejected Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_marketing_fee_code_exists = ProtoField.new("Cancel Rejected Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_mass_cancel_id_exists = ProtoField.new("Cancel Rejected Mass Cancel Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedmasscancelidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_maturity_date_exists = ProtoField.new("Cancel Rejected Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_max_remove_pct_exists = ProtoField.new("Cancel Rejected Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedmaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_min_qty_exists = ProtoField.new("Cancel Rejected Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_open_close_exists = ProtoField.new("Cancel Rejected Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_optional_fields = ProtoField.new("Cancel Rejected Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_ord_type_exists = ProtoField.new("Cancel Rejected Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_price_exists = ProtoField.new("Cancel Rejected Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_put_or_call_exists = ProtoField.new("Cancel Rejected Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists = ProtoField.new("Cancel Rejected Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists = ProtoField.new("Cancel Rejected Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists = ProtoField.new("Cancel Rejected Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists = ProtoField.new("Cancel Rejected Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists = ProtoField.new("Cancel Rejected Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists = ProtoField.new("Cancel Rejected Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists = ProtoField.new("Cancel Rejected Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists = ProtoField.new("Cancel Rejected Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_return_bitfields = ProtoField.new("Cancel Rejected Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_routing_firm_id_exists = ProtoField.new("Cancel Rejected Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_side_exists = ProtoField.new("Cancel Rejected Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_stop_px_exists = ProtoField.new("Cancel Rejected Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_strike_price_exists = ProtoField.new("Cancel Rejected Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_symbol_exists = ProtoField.new("Cancel Rejected Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_target_party_id_exists = ProtoField.new("Cancel Rejected Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_time_in_force_exists = ProtoField.new("Cancel Rejected Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancelled_order_count = ProtoField.new("Cancelled Order Count", "cboe.edgx.options.orderentry.boe.v2.10.cancelledordercount", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.capacity = ProtoField.new("Capacity", "cboe.edgx.options.orderentry.boe.v2.10.capacity", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cl_ord_id = ProtoField.new("Cl Ord Id", "cboe.edgx.options.orderentry.boe.v2.10.clordid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.clearing_account = ProtoField.new("Clearing Account", "cboe.edgx.options.orderentry.boe.v2.10.clearingaccount", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.clearing_firm = ProtoField.new("Clearing Firm", "cboe.edgx.options.orderentry.boe.v2.10.clearingfirm", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.clearing_optional_data = ProtoField.new("Clearing Optional Data", "cboe.edgx.options.orderentry.boe.v2.10.clearingoptionaldata", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.client_id_attr = ProtoField.new("Client Id Attr", "cboe.edgx.options.orderentry.boe.v2.10.clientidattr", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cmta_number = ProtoField.new("Cmta Number", "cboe.edgx.options.orderentry.boe.v2.10.cmtanumber", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_bitfield_count = ProtoField.new("Complex Instrument Accepted Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_1 = ProtoField.new("Complex Instrument Accepted Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_10 = ProtoField.new("Complex Instrument Accepted Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_11 = ProtoField.new("Complex Instrument Accepted Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_12 = ProtoField.new("Complex Instrument Accepted Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_13 = ProtoField.new("Complex Instrument Accepted Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_14 = ProtoField.new("Complex Instrument Accepted Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_15 = ProtoField.new("Complex Instrument Accepted Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_16 = ProtoField.new("Complex Instrument Accepted Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_17 = ProtoField.new("Complex Instrument Accepted Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_2 = ProtoField.new("Complex Instrument Accepted Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_3 = ProtoField.new("Complex Instrument Accepted Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_4 = ProtoField.new("Complex Instrument Accepted Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_5 = ProtoField.new("Complex Instrument Accepted Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_6 = ProtoField.new("Complex Instrument Accepted Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_7 = ProtoField.new("Complex Instrument Accepted Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_8 = ProtoField.new("Complex Instrument Accepted Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_9 = ProtoField.new("Complex Instrument Accepted Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_leg_cfi_code_exists = ProtoField.new("Complex Instrument Accepted Leg Cfi Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedlegcficodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_leg_maturity_date_exists = ProtoField.new("Complex Instrument Accepted Leg Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedlegmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_leg_strike_price_exists = ProtoField.new("Complex Instrument Accepted Leg Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedlegstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_optional_fields = ProtoField.new("Complex Instrument Accepted Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists = ProtoField.new("Complex Instrument Accepted Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_return_bitfields = ProtoField.new("Complex Instrument Accepted Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_bitfield_count = ProtoField.new("Complex Instrument Rejected Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_1 = ProtoField.new("Complex Instrument Rejected Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_10 = ProtoField.new("Complex Instrument Rejected Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_11 = ProtoField.new("Complex Instrument Rejected Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_12 = ProtoField.new("Complex Instrument Rejected Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_13 = ProtoField.new("Complex Instrument Rejected Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_14 = ProtoField.new("Complex Instrument Rejected Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_15 = ProtoField.new("Complex Instrument Rejected Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_16 = ProtoField.new("Complex Instrument Rejected Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_17 = ProtoField.new("Complex Instrument Rejected Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_2 = ProtoField.new("Complex Instrument Rejected Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_3 = ProtoField.new("Complex Instrument Rejected Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_4 = ProtoField.new("Complex Instrument Rejected Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_5 = ProtoField.new("Complex Instrument Rejected Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_6 = ProtoField.new("Complex Instrument Rejected Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_7 = ProtoField.new("Complex Instrument Rejected Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_8 = ProtoField.new("Complex Instrument Rejected Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_9 = ProtoField.new("Complex Instrument Rejected Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_optional_fields = ProtoField.new("Complex Instrument Rejected Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists = ProtoField.new("Complex Instrument Rejected Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_return_bitfields = ProtoField.new("Complex Instrument Rejected Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.contra_capacity = ProtoField.new("Contra Capacity", "cboe.edgx.options.orderentry.boe.v2.10.contracapacity", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.contra_trader = ProtoField.new("Contra Trader", "cboe.edgx.options.orderentry.boe.v2.10.contratrader", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.corrected_price = ProtoField.new("Corrected Price", "cboe.edgx.options.orderentry.boe.v2.10.correctedprice", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.corrected_size = ProtoField.new("Corrected Size", "cboe.edgx.options.orderentry.boe.v2.10.correctedsize", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_exclusion_indicator = ProtoField.new("Cross Exclusion Indicator", "cboe.edgx.options.orderentry.boe.v2.10.crossexclusionindicator", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_id = ProtoField.new("Cross Id", "cboe.edgx.options.orderentry.boe.v2.10.crossid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_account_exists = ProtoField.new("Cross Order Acknowledgment Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_alloc_qty_exists = ProtoField.new("Cross Order Acknowledgment Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_attributed_quote_exists = ProtoField.new("Cross Order Acknowledgment Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_auction_id_exists = ProtoField.new("Cross Order Acknowledgment Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_bitfield_count = ProtoField.new("Cross Order Acknowledgment Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_1 = ProtoField.new("Cross Order Acknowledgment Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_10 = ProtoField.new("Cross Order Acknowledgment Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_11 = ProtoField.new("Cross Order Acknowledgment Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_12 = ProtoField.new("Cross Order Acknowledgment Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_13 = ProtoField.new("Cross Order Acknowledgment Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_14 = ProtoField.new("Cross Order Acknowledgment Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_15 = ProtoField.new("Cross Order Acknowledgment Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_16 = ProtoField.new("Cross Order Acknowledgment Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_17 = ProtoField.new("Cross Order Acknowledgment Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_2 = ProtoField.new("Cross Order Acknowledgment Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_3 = ProtoField.new("Cross Order Acknowledgment Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_4 = ProtoField.new("Cross Order Acknowledgment Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_5 = ProtoField.new("Cross Order Acknowledgment Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_6 = ProtoField.new("Cross Order Acknowledgment Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_7 = ProtoField.new("Cross Order Acknowledgment Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_8 = ProtoField.new("Cross Order Acknowledgment Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_9 = ProtoField.new("Cross Order Acknowledgment Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_capacity_exists = ProtoField.new("Cross Order Acknowledgment Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_clearing_account_exists = ProtoField.new("Cross Order Acknowledgment Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_clearing_optional_data_exists = ProtoField.new("Cross Order Acknowledgment Clearing Optional Data Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentclearingoptionaldataexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_client_id_attr_exists = ProtoField.new("Cross Order Acknowledgment Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cmta_number_exists = ProtoField.new("Cross Order Acknowledgment Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cross_id_exists = ProtoField.new("Cross Order Acknowledgment Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cross_prioritization_exists = ProtoField.new("Cross Order Acknowledgment Cross Prioritization Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentcrossprioritizationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cross_type_exists = ProtoField.new("Cross Order Acknowledgment Cross Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentcrosstypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_equity_party_id_exists = ProtoField.new("Cross Order Acknowledgment Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_exec_inst_exists = ProtoField.new("Cross Order Acknowledgment Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_frequent_trader_id_exists = ProtoField.new("Cross Order Acknowledgment Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_give_up_firm_id_exists = ProtoField.new("Cross Order Acknowledgment Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_maturity_date_exists = ProtoField.new("Cross Order Acknowledgment Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_open_close_exists = ProtoField.new("Cross Order Acknowledgment Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_optional_fields = ProtoField.new("Cross Order Acknowledgment Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_order_qty_exists = ProtoField.new("Cross Order Acknowledgment Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_prevent_match_exists = ProtoField.new("Cross Order Acknowledgment Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_price_exists = ProtoField.new("Cross Order Acknowledgment Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_put_or_call_exists = ProtoField.new("Cross Order Acknowledgment Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists = ProtoField.new("Cross Order Acknowledgment Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_return_bitfields = ProtoField.new("Cross Order Acknowledgment Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_routing_firm_id_exists = ProtoField.new("Cross Order Acknowledgment Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_side_exists = ProtoField.new("Cross Order Acknowledgment Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_strike_price_exists = ProtoField.new("Cross Order Acknowledgment Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_symbol_exists = ProtoField.new("Cross Order Acknowledgment Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_target_party_id_exists = ProtoField.new("Cross Order Acknowledgment Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmenttargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_account_exists = ProtoField.new("Cross Order Cancelled Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_alloc_qty_exists = ProtoField.new("Cross Order Cancelled Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_attributed_quote_exists = ProtoField.new("Cross Order Cancelled Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_bitfield_count = ProtoField.new("Cross Order Cancelled Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_1 = ProtoField.new("Cross Order Cancelled Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_10 = ProtoField.new("Cross Order Cancelled Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_11 = ProtoField.new("Cross Order Cancelled Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_12 = ProtoField.new("Cross Order Cancelled Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_13 = ProtoField.new("Cross Order Cancelled Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_14 = ProtoField.new("Cross Order Cancelled Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_15 = ProtoField.new("Cross Order Cancelled Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_16 = ProtoField.new("Cross Order Cancelled Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_17 = ProtoField.new("Cross Order Cancelled Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_2 = ProtoField.new("Cross Order Cancelled Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_3 = ProtoField.new("Cross Order Cancelled Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_4 = ProtoField.new("Cross Order Cancelled Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_5 = ProtoField.new("Cross Order Cancelled Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_6 = ProtoField.new("Cross Order Cancelled Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_7 = ProtoField.new("Cross Order Cancelled Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_8 = ProtoField.new("Cross Order Cancelled Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_9 = ProtoField.new("Cross Order Cancelled Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_capacity_exists = ProtoField.new("Cross Order Cancelled Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_clearing_firm_exists = ProtoField.new("Cross Order Cancelled Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cmta_number_exists = ProtoField.new("Cross Order Cancelled Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cross_id_exists = ProtoField.new("Cross Order Cancelled Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cross_prioritization_exists = ProtoField.new("Cross Order Cancelled Cross Prioritization Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledcrossprioritizationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cross_type_exists = ProtoField.new("Cross Order Cancelled Cross Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledcrosstypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_equity_party_id_exists = ProtoField.new("Cross Order Cancelled Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_exec_inst_exists = ProtoField.new("Cross Order Cancelled Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_frequent_trader_id_exists = ProtoField.new("Cross Order Cancelled Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_give_up_firm_id_exists = ProtoField.new("Cross Order Cancelled Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_maturity_date_exists = ProtoField.new("Cross Order Cancelled Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_optional_fields = ProtoField.new("Cross Order Cancelled Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_order_qty_exists = ProtoField.new("Cross Order Cancelled Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_prevent_match_exists = ProtoField.new("Cross Order Cancelled Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_price_exists = ProtoField.new("Cross Order Cancelled Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_put_or_call_exists = ProtoField.new("Cross Order Cancelled Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists = ProtoField.new("Cross Order Cancelled Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_return_bitfields = ProtoField.new("Cross Order Cancelled Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_routing_firm_id_exists = ProtoField.new("Cross Order Cancelled Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_strike_price_exists = ProtoField.new("Cross Order Cancelled Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_symbol_exists = ProtoField.new("Cross Order Cancelled Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_target_party_id_exists = ProtoField.new("Cross Order Cancelled Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_attributed_quote_exists = ProtoField.new("Cross Order Rejected Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_bitfield_count = ProtoField.new("Cross Order Rejected Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_1 = ProtoField.new("Cross Order Rejected Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_10 = ProtoField.new("Cross Order Rejected Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_11 = ProtoField.new("Cross Order Rejected Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_12 = ProtoField.new("Cross Order Rejected Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_13 = ProtoField.new("Cross Order Rejected Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_14 = ProtoField.new("Cross Order Rejected Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_15 = ProtoField.new("Cross Order Rejected Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_16 = ProtoField.new("Cross Order Rejected Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_17 = ProtoField.new("Cross Order Rejected Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_2 = ProtoField.new("Cross Order Rejected Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_3 = ProtoField.new("Cross Order Rejected Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_4 = ProtoField.new("Cross Order Rejected Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_5 = ProtoField.new("Cross Order Rejected Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_6 = ProtoField.new("Cross Order Rejected Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_7 = ProtoField.new("Cross Order Rejected Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_8 = ProtoField.new("Cross Order Rejected Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_9 = ProtoField.new("Cross Order Rejected Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_cross_id_exists = ProtoField.new("Cross Order Rejected Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_cross_prioritization_exists = ProtoField.new("Cross Order Rejected Cross Prioritization Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedcrossprioritizationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_cross_type_exists = ProtoField.new("Cross Order Rejected Cross Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedcrosstypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_equity_party_id_exists = ProtoField.new("Cross Order Rejected Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_exec_inst_exists = ProtoField.new("Cross Order Rejected Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_frequent_trader_id_exists = ProtoField.new("Cross Order Rejected Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_maturity_date_exists = ProtoField.new("Cross Order Rejected Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_optional_fields = ProtoField.new("Cross Order Rejected Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_order_qty_exists = ProtoField.new("Cross Order Rejected Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_prevent_match_exists = ProtoField.new("Cross Order Rejected Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_price_exists = ProtoField.new("Cross Order Rejected Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_put_or_call_exists = ProtoField.new("Cross Order Rejected Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists = ProtoField.new("Cross Order Rejected Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists = ProtoField.new("Cross Order Rejected Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists = ProtoField.new("Cross Order Rejected Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists = ProtoField.new("Cross Order Rejected Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists = ProtoField.new("Cross Order Rejected Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists = ProtoField.new("Cross Order Rejected Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists = ProtoField.new("Cross Order Rejected Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists = ProtoField.new("Cross Order Rejected Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_return_bitfields = ProtoField.new("Cross Order Rejected Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_routing_firm_id_exists = ProtoField.new("Cross Order Rejected Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_strike_price_exists = ProtoField.new("Cross Order Rejected Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_symbol_exists = ProtoField.new("Cross Order Rejected Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_target_party_id_exists = ProtoField.new("Cross Order Rejected Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_prioritization = ProtoField.new("Cross Prioritization", "cboe.edgx.options.orderentry.boe.v2.10.crossprioritization", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_type = ProtoField.new("Cross Type", "cboe.edgx.options.orderentry.boe.v2.10.crosstype", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.custom_group_id = ProtoField.new("Custom Group Id", "cboe.edgx.options.orderentry.boe.v2.10.customgroupid", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.display_indicator = ProtoField.new("Display Indicator", "cboe.edgx.options.orderentry.boe.v2.10.displayindicator", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.display_price = ProtoField.new("Display Price", "cboe.edgx.options.orderentry.boe.v2.10.displayprice", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.display_range = ProtoField.new("Display Range", "cboe.edgx.options.orderentry.boe.v2.10.displayrange", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.drill_thru_protection = ProtoField.new("Drill Thru Protection", "cboe.edgx.options.orderentry.boe.v2.10.drillthruprotection", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.echo_text = ProtoField.new("Echo Text", "cboe.edgx.options.orderentry.boe.v2.10.echotext", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_buy_clearing_firm = ProtoField.new("Equity Buy Clearing Firm", "cboe.edgx.options.orderentry.boe.v2.10.equitybuyclearingfirm", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_ex_destination = ProtoField.new("Equity Ex Destination", "cboe.edgx.options.orderentry.boe.v2.10.equityexdestination", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_leg_short_sell = ProtoField.new("Equity Leg Short Sell", "cboe.edgx.options.orderentry.boe.v2.10.equitylegshortsell", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_party_id = ProtoField.new("Equity Party Id", "cboe.edgx.options.orderentry.boe.v2.10.equitypartyid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_sell_clearing_firm = ProtoField.new("Equity Sell Clearing Firm", "cboe.edgx.options.orderentry.boe.v2.10.equitysellclearingfirm", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_trade_price = ProtoField.new("Equity Trade Price", "cboe.edgx.options.orderentry.boe.v2.10.equitytradeprice", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_trade_size = ProtoField.new("Equity Trade Size", "cboe.edgx.options.orderentry.boe.v2.10.equitytradesize", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_trade_venue = ProtoField.new("Equity Trade Venue", "cboe.edgx.options.orderentry.boe.v2.10.equitytradevenue", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_transact_time = ProtoField.new("Equity Transact Time", "cboe.edgx.options.orderentry.boe.v2.10.equitytransacttime", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.ex_destination = ProtoField.new("Ex Destination", "cboe.edgx.options.orderentry.boe.v2.10.exdestination", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.exec_id = ProtoField.new("Exec Id", "cboe.edgx.options.orderentry.boe.v2.10.execid", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.exec_inst = ProtoField.new("Exec Inst", "cboe.edgx.options.orderentry.boe.v2.10.execinst", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.exec_ref_id = ProtoField.new("Exec Ref Id", "cboe.edgx.options.orderentry.boe.v2.10.execrefid", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.expire_time = ProtoField.new("Expire Time", "cboe.edgx.options.orderentry.boe.v2.10.expiretime", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.fee_code = ProtoField.new("Fee Code", "cboe.edgx.options.orderentry.boe.v2.10.feecode", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.frequent_trader_id = ProtoField.new("Frequent Trader Id", "cboe.edgx.options.orderentry.boe.v2.10.frequenttraderid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.give_up_firm_id = ProtoField.new("Give Up Firm Id", "cboe.edgx.options.orderentry.boe.v2.10.giveupfirmid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_priority = ProtoField.new("Last Priority", "cboe.edgx.options.orderentry.boe.v2.10.lastpriority", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_px = ProtoField.new("Last Px", "cboe.edgx.options.orderentry.boe.v2.10.lastpx", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_received_sequence_number = ProtoField.new("Last Received Sequence Number", "cboe.edgx.options.orderentry.boe.v2.10.lastreceivedsequencenumber", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_shares = ProtoField.new("Last Shares", "cboe.edgx.options.orderentry.boe.v2.10.lastshares", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leaves_qty = ProtoField.new("Leaves Qty", "cboe.edgx.options.orderentry.boe.v2.10.leavesqty", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leg_cfi_code = ProtoField.new("Leg Cfi Code", "cboe.edgx.options.orderentry.boe.v2.10.legcficode", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leg_maturity_date = ProtoField.new("Leg Maturity Date", "cboe.edgx.options.orderentry.boe.v2.10.legmaturitydate", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leg_strike_price = ProtoField.new("Leg Strike Price", "cboe.edgx.options.orderentry.boe.v2.10.legstrikeprice", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_response_status = ProtoField.new("Login Response Status", "cboe.edgx.options.orderentry.boe.v2.10.loginresponsestatus", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_response_text = ProtoField.new("Login Response Text", "cboe.edgx.options.orderentry.boe.v2.10.loginresponsetext", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.logout_reason = ProtoField.new("Logout Reason", "cboe.edgx.options.orderentry.boe.v2.10.logoutreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.logout_reason_text = ProtoField.new("Logout Reason Text", "cboe.edgx.options.orderentry.boe.v2.10.logoutreasontext", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.marketing_fee_code = ProtoField.new("Marketing Fee Code", "cboe.edgx.options.orderentry.boe.v2.10.marketingfeecode", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel = ProtoField.new("Mass Cancel", "cboe.edgx.options.orderentry.boe.v2.10.masscancel", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_id = ProtoField.new("Mass Cancel Id", "cboe.edgx.options.orderentry.boe.v2.10.masscancelid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_inst = ProtoField.new("Mass Cancel Inst", "cboe.edgx.options.orderentry.boe.v2.10.masscancelinst", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_lockout = ProtoField.new("Mass Cancel Lockout", "cboe.edgx.options.orderentry.boe.v2.10.masscancellockout", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.matching_unit = ProtoField.new("Matching Unit", "cboe.edgx.options.orderentry.boe.v2.10.matchingunit", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.maturity_date = ProtoField.new("Maturity Date", "cboe.edgx.options.orderentry.boe.v2.10.maturitydate", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.max_floor = ProtoField.new("Max Floor", "cboe.edgx.options.orderentry.boe.v2.10.maxfloor", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.max_remove_pct = ProtoField.new("Max Remove Pct", "cboe.edgx.options.orderentry.boe.v2.10.maxremovepct", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message = ProtoField.new("Message", "cboe.edgx.options.orderentry.boe.v2.10.message", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message_header = ProtoField.new("Message Header", "cboe.edgx.options.orderentry.boe.v2.10.messageheader", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message_length = ProtoField.new("Message Length", "cboe.edgx.options.orderentry.boe.v2.10.messagelength", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message_type = ProtoField.new("Message Type", "cboe.edgx.options.orderentry.boe.v2.10.messagetype", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.min_qty = ProtoField.new("Min Qty", "cboe.edgx.options.orderentry.boe.v2.10.minqty", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_bitfield_count = ProtoField.new("Modify Order Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_byte_1 = ProtoField.new("Modify Order Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_byte_2 = ProtoField.new("Modify Order Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_cancel_orig_on_reject_exists = ProtoField.new("Modify Order Cancel Orig On Reject Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyordercancelorigonrejectexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_clearing_firm_exists = ProtoField.new("Modify Order Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_exec_inst_exists = ProtoField.new("Modify Order Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_frequent_trader_id_exists = ProtoField.new("Modify Order Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_max_floor_exists = ProtoField.new("Modify Order Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyordermaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_optional_fields = ProtoField.new("Modify Order Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_ord_type_exists = ProtoField.new("Modify Order Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_order_qty_exists = ProtoField.new("Modify Order Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_price_exists = ProtoField.new("Modify Order Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_2_exists = ProtoField.new("Modify Order Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_4_exists = ProtoField.new("Modify Order Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_5_exists = ProtoField.new("Modify Order Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_7_exists = ProtoField.new("Modify Order Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_8_exists = ProtoField.new("Modify Order Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_routing_firm_id_exists = ProtoField.new("Modify Order Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_side_exists = ProtoField.new("Modify Order Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyordersideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_stop_px_exists = ProtoField.new("Modify Order Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.modifyorderstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_reject_reason = ProtoField.new("Modify Reject Reason", "cboe.edgx.options.orderentry.boe.v2.10.modifyrejectreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.multi_class_sprd = ProtoField.new("Multi Class Sprd", "cboe.edgx.options.orderentry.boe.v2.10.multiclasssprd", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_bitfield_count = ProtoField.new("New Complex Instrument Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_byte_1 = ProtoField.new("New Complex Instrument Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_clearing_firm_exists = ProtoField.new("New Complex Instrument Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_leg_cfi_code_exists = ProtoField.new("New Complex Instrument Leg Cfi Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentlegcficodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_leg_maturity_date_exists = ProtoField.new("New Complex Instrument Leg Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentlegmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_leg_strike_price_exists = ProtoField.new("New Complex Instrument Leg Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentlegstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_optional_fields = ProtoField.new("New Complex Instrument Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_5_exists = ProtoField.new("New Complex Instrument Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_6_exists = ProtoField.new("New Complex Instrument Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_7_exists = ProtoField.new("New Complex Instrument Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_8_exists = ProtoField.new("New Complex Instrument Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_account_exists = ProtoField.new("New Order Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_attributed_quote_exists = ProtoField.new("New Order Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_auction_id_exists = ProtoField.new("New Order Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_bitfield_count = ProtoField.new("New Order Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.neworderbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_1 = ProtoField.new("New Order Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_2 = ProtoField.new("New Order Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_3 = ProtoField.new("New Order Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_4 = ProtoField.new("New Order Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_5 = ProtoField.new("New Order Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_6 = ProtoField.new("New Order Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_7 = ProtoField.new("New Order Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_8 = ProtoField.new("New Order Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_9 = ProtoField.new("New Order Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.neworderbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_capacity_exists = ProtoField.new("New Order Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_clearing_account_exists = ProtoField.new("New Order Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_clearing_firm_exists = ProtoField.new("New Order Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_clearing_optional_data_exists = ProtoField.new("New Order Clearing Optional Data Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderclearingoptionaldataexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_client_id_attr_exists = ProtoField.new("New Order Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cmta_number_exists = ProtoField.new("New Order Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_account_exists = ProtoField.new("New Order Cross Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_attributed_quote_exists = ProtoField.new("New Order Cross Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_auto_match_exists = ProtoField.new("New Order Cross Auto Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossautomatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_auto_match_price_exists = ProtoField.new("New Order Cross Auto Match Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossautomatchpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_bitfield_count = ProtoField.new("New Order Cross Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_1 = ProtoField.new("New Order Cross Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_2 = ProtoField.new("New Order Cross Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_3 = ProtoField.new("New Order Cross Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_4 = ProtoField.new("New Order Cross Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_clearing_account_exists = ProtoField.new("New Order Cross Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_clearing_optional_data_exists = ProtoField.new("New Order Cross Clearing Optional Data Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossclearingoptionaldataexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_client_id_attr_exists = ProtoField.new("New Order Cross Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_cmta_number_exists = ProtoField.new("New Order Cross Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrosscmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_buy_clearing_firm_exists = ProtoField.new("New Order Cross Equity Buy Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossequitybuyclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_sell_clearing_firm_exists = ProtoField.new("New Order Cross Equity Sell Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossequitysellclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_trade_price_exists = ProtoField.new("New Order Cross Equity Trade Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossequitytradepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_trade_size_exists = ProtoField.new("New Order Cross Equity Trade Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossequitytradesizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_trade_venue_exists = ProtoField.new("New Order Cross Equity Trade Venue Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossequitytradevenueexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_transact_time_exists = ProtoField.new("New Order Cross Equity Transact Time Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossequitytransacttimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_exec_inst_exists = ProtoField.new("New Order Cross Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_frequent_trader_id_exists = ProtoField.new("New Order Cross Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_last_priority_exists = ProtoField.new("New Order Cross Last Priority Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrosslastpriorityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_maturity_date_exists = ProtoField.new("New Order Cross Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_account_exists = ProtoField.new("New Order Cross Multileg Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_attributed_quote_exists = ProtoField.new("New Order Cross Multileg Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_auto_match_exists = ProtoField.new("New Order Cross Multileg Auto Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegautomatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_auto_match_price_exists = ProtoField.new("New Order Cross Multileg Auto Match Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegautomatchpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_bitfield_count = ProtoField.new("New Order Cross Multileg Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_1 = ProtoField.new("New Order Cross Multileg Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_2 = ProtoField.new("New Order Cross Multileg Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_3 = ProtoField.new("New Order Cross Multileg Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_4 = ProtoField.new("New Order Cross Multileg Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_5 = ProtoField.new("New Order Cross Multileg Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_clearing_account_exists = ProtoField.new("New Order Cross Multileg Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_clearing_optional_data_exists = ProtoField.new("New Order Cross Multileg Clearing Optional Data Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegclearingoptionaldataexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_client_id_attr_exists = ProtoField.new("New Order Cross Multileg Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_cmta_number_exists = ProtoField.new("New Order Cross Multileg Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_drill_thru_protection_exists = ProtoField.new("New Order Cross Multileg Drill Thru Protection Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegdrillthruprotectionexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_buy_clearing_firm_exists = ProtoField.new("New Order Cross Multileg Equity Buy Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitybuyclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_ex_destination_exists = ProtoField.new("New Order Cross Multileg Equity Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequityexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_leg_short_sell_exists = ProtoField.new("New Order Cross Multileg Equity Leg Short Sell Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitylegshortsellexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_party_id_exists = ProtoField.new("New Order Cross Multileg Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_sell_clearing_firm_exists = ProtoField.new("New Order Cross Multileg Equity Sell Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitysellclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_trade_price_exists = ProtoField.new("New Order Cross Multileg Equity Trade Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitytradepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_trade_size_exists = ProtoField.new("New Order Cross Multileg Equity Trade Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitytradesizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_trade_venue_exists = ProtoField.new("New Order Cross Multileg Equity Trade Venue Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitytradevenueexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_transact_time_exists = ProtoField.new("New Order Cross Multileg Equity Transact Time Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegequitytransacttimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_exec_inst_exists = ProtoField.new("New Order Cross Multileg Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_frequent_trader_id_exists = ProtoField.new("New Order Cross Multileg Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_last_priority_exists = ProtoField.new("New Order Cross Multileg Last Priority Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultileglastpriorityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_optional_fields = ProtoField.new("New Order Cross Multileg Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_ors_exists = ProtoField.new("New Order Cross Multileg Ors Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegorsexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_prevent_match_exists = ProtoField.new("New Order Cross Multileg Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_2_exists = ProtoField.new("New Order Cross Multileg Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_3_exists = ProtoField.new("New Order Cross Multileg Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_4_exists = ProtoField.new("New Order Cross Multileg Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_5_exists = ProtoField.new("New Order Cross Multileg Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_6_exists = ProtoField.new("New Order Cross Multileg Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_7_exists = ProtoField.new("New Order Cross Multileg Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_8_exists = ProtoField.new("New Order Cross Multileg Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_routing_firm_id_exists = ProtoField.new("New Order Cross Multileg Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_session_eligibility_exists = ProtoField.new("New Order Cross Multileg Session Eligibility Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegsessioneligibilityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_symbol_exists = ProtoField.new("New Order Cross Multileg Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_target_party_id_exists = ProtoField.new("New Order Cross Multileg Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_optional_fields = ProtoField.new("New Order Cross Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_ors_exists = ProtoField.new("New Order Cross Ors Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossorsexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_prevent_match_exists = ProtoField.new("New Order Cross Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrosspreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_put_or_call_exists = ProtoField.new("New Order Cross Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_1_exists = ProtoField.new("New Order Cross Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_4_exists = ProtoField.new("New Order Cross Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_5_exists = ProtoField.new("New Order Cross Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_6_exists = ProtoField.new("New Order Cross Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_7_exists = ProtoField.new("New Order Cross Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_8_exists = ProtoField.new("New Order Cross Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_routing_firm_id_exists = ProtoField.new("New Order Cross Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_session_eligibility_exists = ProtoField.new("New Order Cross Session Eligibility Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrosssessioneligibilityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_strike_price_exists = ProtoField.new("New Order Cross Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_symbol_exists = ProtoField.new("New Order Cross Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrosssymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_target_party_id_exists = ProtoField.new("New Order Cross Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercrosstargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_custom_group_id_exists = ProtoField.new("New Order Custom Group Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordercustomgroupidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_discretion_amount_exists = ProtoField.new("New Order Discretion Amount Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderdiscretionamountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_display_indicator_exists = ProtoField.new("New Order Display Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderdisplayindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_display_range_exists = ProtoField.new("New Order Display Range Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderdisplayrangeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_echo_text_exists = ProtoField.new("New Order Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ex_destination_exists = ProtoField.new("New Order Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_exec_inst_exists = ProtoField.new("New Order Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_expire_time_exists = ProtoField.new("New Order Expire Time Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ext_exec_inst_exists = ProtoField.new("New Order Ext Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderextexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_frequent_trader_id_exists = ProtoField.new("New Order Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_locate_reqd_exists = ProtoField.new("New Order Locate Reqd Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderlocatereqdexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_maturity_date_exists = ProtoField.new("New Order Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordermaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_max_floor_exists = ProtoField.new("New Order Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordermaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_max_remove_pct_exists = ProtoField.new("New Order Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordermaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_min_qty_exists = ProtoField.new("New Order Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_open_close_exists = ProtoField.new("New Order Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_optional_fields = ProtoField.new("New Order Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.neworderoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ord_type_exists = ProtoField.new("New Order Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_order_origin_exists = ProtoField.new("New Order Order Origin Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderorderoriginexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ors_exists = ProtoField.new("New Order Ors Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderorsexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_peg_difference_exists = ProtoField.new("New Order Peg Difference Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderpegdifferenceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_prevent_match_exists = ProtoField.new("New Order Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_price_exists = ProtoField.new("New Order Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_price_type_exists = ProtoField.new("New Order Price Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderpricetypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_put_or_call_exists = ProtoField.new("New Order Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_1_exists = ProtoField.new("New Order Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_3_exists = ProtoField.new("New Order Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_4_exists = ProtoField.new("New Order Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_5_exists = ProtoField.new("New Order Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_6_exists = ProtoField.new("New Order Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_7_exists = ProtoField.new("New Order Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_8_exists = ProtoField.new("New Order Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_risk_reset_exists = ProtoField.new("New Order Risk Reset Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderriskresetexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_rout_strategy_exists = ProtoField.new("New Order Rout Strategy Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderroutstrategyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_route_delivery_method_exists = ProtoField.new("New Order Route Delivery Method Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderroutedeliverymethodexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_routing_firm_id_exists = ProtoField.new("New Order Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_routing_inst_exists = ProtoField.new("New Order Routing Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderroutinginstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_session_eligibility_exists = ProtoField.new("New Order Session Eligibility Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordersessioneligibilityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_stop_px_exists = ProtoField.new("New Order Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_strike_price_exists = ProtoField.new("New Order Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.neworderstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_symbol_exists = ProtoField.new("New Order Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordersymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_symbol_sfx_exists = ProtoField.new("New Order Symbol Sfx Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordersymbolsfxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_target_party_id_exists = ProtoField.new("New Order Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordertargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_time_in_force_exists = ProtoField.new("New Order Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.newordertimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.no_of_securities = ProtoField.new("No Of Securities", "cboe.edgx.options.orderentry.boe.v2.10.noofsecurities", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.no_unspecified_unit_replay = ProtoField.new("No Unspecified Unit Replay", "cboe.edgx.options.orderentry.boe.v2.10.nounspecifiedunitreplay", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_param_groups = ProtoField.new("Number Of Param Groups", "cboe.edgx.options.orderentry.boe.v2.10.numberofparamgroups", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_quote_results = ProtoField.new("Number Of Quote Results", "cboe.edgx.options.orderentry.boe.v2.10.numberofquoteresults", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_quote_updates = ProtoField.new("Number Of Quote Updates", "cboe.edgx.options.orderentry.boe.v2.10.numberofquoteupdates", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_short_quote_updates = ProtoField.new("Number Of Short Quote Updates", "cboe.edgx.options.orderentry.boe.v2.10.numberofshortquoteupdates", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_units = ProtoField.new("Number Of Units", "cboe.edgx.options.orderentry.boe.v2.10.numberofunits", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.open_close = ProtoField.new("Open Close", "cboe.edgx.options.orderentry.boe.v2.10.openclose", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.ord_type = ProtoField.new("Ord Type", "cboe.edgx.options.orderentry.boe.v2.10.ordtype", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_account_exists = ProtoField.new("Order Acknowledgment Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_alloc_qty_exists = ProtoField.new("Order Acknowledgment Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_attributed_quote_exists = ProtoField.new("Order Acknowledgment Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_auction_id_exists = ProtoField.new("Order Acknowledgment Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_base_liquidity_indicator_exists = ProtoField.new("Order Acknowledgment Base Liquidity Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbaseliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_bitfield_count = ProtoField.new("Order Acknowledgment Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_1 = ProtoField.new("Order Acknowledgment Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_10 = ProtoField.new("Order Acknowledgment Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_11 = ProtoField.new("Order Acknowledgment Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_12 = ProtoField.new("Order Acknowledgment Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_13 = ProtoField.new("Order Acknowledgment Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_14 = ProtoField.new("Order Acknowledgment Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_15 = ProtoField.new("Order Acknowledgment Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_16 = ProtoField.new("Order Acknowledgment Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_17 = ProtoField.new("Order Acknowledgment Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_2 = ProtoField.new("Order Acknowledgment Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_3 = ProtoField.new("Order Acknowledgment Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_4 = ProtoField.new("Order Acknowledgment Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_5 = ProtoField.new("Order Acknowledgment Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_6 = ProtoField.new("Order Acknowledgment Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_7 = ProtoField.new("Order Acknowledgment Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_8 = ProtoField.new("Order Acknowledgment Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_9 = ProtoField.new("Order Acknowledgment Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_capacity_exists = ProtoField.new("Order Acknowledgment Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_clearing_account_exists = ProtoField.new("Order Acknowledgment Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_clearing_firm_exists = ProtoField.new("Order Acknowledgment Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_clearing_optional_data_exists = ProtoField.new("Order Acknowledgment Clearing Optional Data Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentclearingoptionaldataexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_client_id_attr_exists = ProtoField.new("Order Acknowledgment Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_contra_capacity_exists = ProtoField.new("Order Acknowledgment Contra Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentcontracapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_corrected_size_exists = ProtoField.new("Order Acknowledgment Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_cross_exclusion_indicator_exists = ProtoField.new("Order Acknowledgment Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_cross_id_exists = ProtoField.new("Order Acknowledgment Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_display_indicator_exists = ProtoField.new("Order Acknowledgment Display Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentdisplayindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_display_price_exists = ProtoField.new("Order Acknowledgment Display Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentdisplaypriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_drill_thru_protection_exists = ProtoField.new("Order Acknowledgment Drill Thru Protection Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentdrillthruprotectionexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_echo_text_exists = ProtoField.new("Order Acknowledgment Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_equity_party_id_exists = ProtoField.new("Order Acknowledgment Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_ex_destination_exists = ProtoField.new("Order Acknowledgment Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_exec_inst_exists = ProtoField.new("Order Acknowledgment Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_expire_time_exists = ProtoField.new("Order Acknowledgment Expire Time Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_frequent_trader_id_exists = ProtoField.new("Order Acknowledgment Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_give_up_firm_id_exists = ProtoField.new("Order Acknowledgment Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_last_px_exists = ProtoField.new("Order Acknowledgment Last Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentlastpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_last_shares_exists = ProtoField.new("Order Acknowledgment Last Shares Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentlastsharesexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_leaves_qty_exists = ProtoField.new("Order Acknowledgment Leaves Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentleavesqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_marketing_fee_code_exists = ProtoField.new("Order Acknowledgment Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_maturity_date_exists = ProtoField.new("Order Acknowledgment Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_max_floor_exists = ProtoField.new("Order Acknowledgment Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentmaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_max_remove_pct_exists = ProtoField.new("Order Acknowledgment Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentmaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_min_qty_exists = ProtoField.new("Order Acknowledgment Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_multi_class_sprd_exists = ProtoField.new("Order Acknowledgment Multi Class Sprd Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentmulticlasssprdexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_open_close_exists = ProtoField.new("Order Acknowledgment Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_optional_fields = ProtoField.new("Order Acknowledgment Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_ord_type_exists = ProtoField.new("Order Acknowledgment Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_order_origin_exists = ProtoField.new("Order Acknowledgment Order Origin Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentorderoriginexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_order_qty_exists = ProtoField.new("Order Acknowledgment Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_orig_cl_ord_id_exists = ProtoField.new("Order Acknowledgment Orig Cl Ord Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentorigclordidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_peg_difference_exists = ProtoField.new("Order Acknowledgment Peg Difference Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentpegdifferenceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_prevent_match_exists = ProtoField.new("Order Acknowledgment Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_price_exists = ProtoField.new("Order Acknowledgment Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_price_type_exists = ProtoField.new("Order Acknowledgment Price Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentpricetypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_put_or_call_exists = ProtoField.new("Order Acknowledgment Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_1_exists = ProtoField.new("Order Acknowledgment Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists = ProtoField.new("Order Acknowledgment Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists = ProtoField.new("Order Acknowledgment Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists = ProtoField.new("Order Acknowledgment Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists = ProtoField.new("Order Acknowledgment Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists = ProtoField.new("Order Acknowledgment Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists = ProtoField.new("Order Acknowledgment Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists = ProtoField.new("Order Acknowledgment Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_return_bitfields = ProtoField.new("Order Acknowledgment Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_rout_strategy_exists = ProtoField.new("Order Acknowledgment Rout Strategy Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentroutstrategyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_route_delivery_method_exists = ProtoField.new("Order Acknowledgment Route Delivery Method Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentroutedeliverymethodexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_routing_firm_id_exists = ProtoField.new("Order Acknowledgment Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_routing_inst_exists = ProtoField.new("Order Acknowledgment Routing Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentroutinginstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_secondary_order_id_exists = ProtoField.new("Order Acknowledgment Secondary Order Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentsecondaryorderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_session_eligibility_exists = ProtoField.new("Order Acknowledgment Session Eligibility Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentsessioneligibilityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_side_exists = ProtoField.new("Order Acknowledgment Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_stop_px_exists = ProtoField.new("Order Acknowledgment Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_strategy_id_exists = ProtoField.new("Order Acknowledgment Strategy Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentstrategyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_strike_price_exists = ProtoField.new("Order Acknowledgment Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_sub_liquidity_indicator_exists = ProtoField.new("Order Acknowledgment Sub Liquidity Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentsubliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_symbol_exists = ProtoField.new("Order Acknowledgment Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_target_party_id_exists = ProtoField.new("Order Acknowledgment Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmenttargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_time_in_force_exists = ProtoField.new("Order Acknowledgment Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmenttimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_working_price_exists = ProtoField.new("Order Acknowledgment Working Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentworkingpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_account_exists = ProtoField.new("Order Cancelled Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_alloc_qty_exists = ProtoField.new("Order Cancelled Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_attributed_quote_exists = ProtoField.new("Order Cancelled Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_auction_id_exists = ProtoField.new("Order Cancelled Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_base_liquidity_indicator_exists = ProtoField.new("Order Cancelled Base Liquidity Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbaseliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_bitfield_count = ProtoField.new("Order Cancelled Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_1 = ProtoField.new("Order Cancelled Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_10 = ProtoField.new("Order Cancelled Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_11 = ProtoField.new("Order Cancelled Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_12 = ProtoField.new("Order Cancelled Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_13 = ProtoField.new("Order Cancelled Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_14 = ProtoField.new("Order Cancelled Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_15 = ProtoField.new("Order Cancelled Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_16 = ProtoField.new("Order Cancelled Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_17 = ProtoField.new("Order Cancelled Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_2 = ProtoField.new("Order Cancelled Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_3 = ProtoField.new("Order Cancelled Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_4 = ProtoField.new("Order Cancelled Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_5 = ProtoField.new("Order Cancelled Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_6 = ProtoField.new("Order Cancelled Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_7 = ProtoField.new("Order Cancelled Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_8 = ProtoField.new("Order Cancelled Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_9 = ProtoField.new("Order Cancelled Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_capacity_exists = ProtoField.new("Order Cancelled Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_clearing_account_exists = ProtoField.new("Order Cancelled Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_clearing_firm_exists = ProtoField.new("Order Cancelled Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_cmta_number_exists = ProtoField.new("Order Cancelled Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_contra_capacity_exists = ProtoField.new("Order Cancelled Contra Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledcontracapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_corrected_size_exists = ProtoField.new("Order Cancelled Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_cross_exclusion_indicator_exists = ProtoField.new("Order Cancelled Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_cross_id_exists = ProtoField.new("Order Cancelled Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_display_indicator_exists = ProtoField.new("Order Cancelled Display Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelleddisplayindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_display_price_exists = ProtoField.new("Order Cancelled Display Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelleddisplaypriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_echo_text_exists = ProtoField.new("Order Cancelled Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_equity_party_id_exists = ProtoField.new("Order Cancelled Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_ex_destination_exists = ProtoField.new("Order Cancelled Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_exec_inst_exists = ProtoField.new("Order Cancelled Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_expire_time_exists = ProtoField.new("Order Cancelled Expire Time Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_frequent_trader_id_exists = ProtoField.new("Order Cancelled Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_give_up_firm_id_exists = ProtoField.new("Order Cancelled Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_last_px_exists = ProtoField.new("Order Cancelled Last Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledlastpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_last_shares_exists = ProtoField.new("Order Cancelled Last Shares Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledlastsharesexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_leaves_qty_exists = ProtoField.new("Order Cancelled Leaves Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledleavesqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_marketing_fee_code_exists = ProtoField.new("Order Cancelled Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_maturity_date_exists = ProtoField.new("Order Cancelled Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_max_floor_exists = ProtoField.new("Order Cancelled Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledmaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_max_remove_pct_exists = ProtoField.new("Order Cancelled Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledmaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_min_qty_exists = ProtoField.new("Order Cancelled Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_multi_class_sprd_exists = ProtoField.new("Order Cancelled Multi Class Sprd Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledmulticlasssprdexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_open_close_exists = ProtoField.new("Order Cancelled Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_optional_fields = ProtoField.new("Order Cancelled Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_ord_type_exists = ProtoField.new("Order Cancelled Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_order_origin_exists = ProtoField.new("Order Cancelled Order Origin Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledorderoriginexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_order_qty_exists = ProtoField.new("Order Cancelled Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_orig_cl_ord_id_exists = ProtoField.new("Order Cancelled Orig Cl Ord Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledorigclordidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_prevent_match_exists = ProtoField.new("Order Cancelled Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_price_exists = ProtoField.new("Order Cancelled Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_price_type_exists = ProtoField.new("Order Cancelled Price Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledpricetypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_put_or_call_exists = ProtoField.new("Order Cancelled Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists = ProtoField.new("Order Cancelled Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists = ProtoField.new("Order Cancelled Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists = ProtoField.new("Order Cancelled Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists = ProtoField.new("Order Cancelled Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists = ProtoField.new("Order Cancelled Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists = ProtoField.new("Order Cancelled Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists = ProtoField.new("Order Cancelled Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists = ProtoField.new("Order Cancelled Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_return_bitfields = ProtoField.new("Order Cancelled Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_rout_strategy_exists = ProtoField.new("Order Cancelled Rout Strategy Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledroutstrategyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_route_delivery_method_exists = ProtoField.new("Order Cancelled Route Delivery Method Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledroutedeliverymethodexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_routing_firm_id_exists = ProtoField.new("Order Cancelled Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_routing_inst_exists = ProtoField.new("Order Cancelled Routing Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledroutinginstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_secondary_order_id_exists = ProtoField.new("Order Cancelled Secondary Order Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledsecondaryorderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_side_exists = ProtoField.new("Order Cancelled Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_stop_px_exists = ProtoField.new("Order Cancelled Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_strategy_id_exists = ProtoField.new("Order Cancelled Strategy Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledstrategyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_strike_price_exists = ProtoField.new("Order Cancelled Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_symbol_exists = ProtoField.new("Order Cancelled Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_target_party_id_exists = ProtoField.new("Order Cancelled Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_time_in_force_exists = ProtoField.new("Order Cancelled Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_working_price_exists = ProtoField.new("Order Cancelled Working Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledworkingpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_account_exists = ProtoField.new("Order Execution Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_alloc_qty_exists = ProtoField.new("Order Execution Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_attributed_quote_exists = ProtoField.new("Order Execution Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_auction_id_exists = ProtoField.new("Order Execution Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_avg_px_exists = ProtoField.new("Order Execution Avg Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionavgpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_bitfield_count = ProtoField.new("Order Execution Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_1 = ProtoField.new("Order Execution Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_10 = ProtoField.new("Order Execution Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_11 = ProtoField.new("Order Execution Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_12 = ProtoField.new("Order Execution Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_13 = ProtoField.new("Order Execution Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_14 = ProtoField.new("Order Execution Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_15 = ProtoField.new("Order Execution Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_16 = ProtoField.new("Order Execution Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_17 = ProtoField.new("Order Execution Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_2 = ProtoField.new("Order Execution Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_3 = ProtoField.new("Order Execution Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_4 = ProtoField.new("Order Execution Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_5 = ProtoField.new("Order Execution Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_6 = ProtoField.new("Order Execution Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_7 = ProtoField.new("Order Execution Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_8 = ProtoField.new("Order Execution Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_9 = ProtoField.new("Order Execution Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_capacity_exists = ProtoField.new("Order Execution Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_clearing_account_exists = ProtoField.new("Order Execution Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_clearing_firm_exists = ProtoField.new("Order Execution Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_clearing_optional_data_exists = ProtoField.new("Order Execution Clearing Optional Data Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionclearingoptionaldataexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_client_id_attr_exists = ProtoField.new("Order Execution Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cmta_number_exists = ProtoField.new("Order Execution Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_contra_capacity_exists = ProtoField.new("Order Execution Contra Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncontracapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_contra_trader_exists = ProtoField.new("Order Execution Contra Trader Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncontratraderexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_corrected_size_exists = ProtoField.new("Order Execution Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_exclusion_indicator_exists = ProtoField.new("Order Execution Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_id_exists = ProtoField.new("Order Execution Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_prioritization_exists = ProtoField.new("Order Execution Cross Prioritization Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncrossprioritizationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_type_exists = ProtoField.new("Order Execution Cross Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncrosstypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cum_qty_exists = ProtoField.new("Order Execution Cum Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutioncumqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_day_avg_px_exists = ProtoField.new("Order Execution Day Avg Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiondayavgpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_day_cum_qty_exists = ProtoField.new("Order Execution Day Cum Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiondaycumqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_day_order_qty_exists = ProtoField.new("Order Execution Day Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiondayorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_display_indicator_exists = ProtoField.new("Order Execution Display Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiondisplayindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_drill_thru_protection_exists = ProtoField.new("Order Execution Drill Thru Protection Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiondrillthruprotectionexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_echo_text_exists = ProtoField.new("Order Execution Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_equity_party_id_exists = ProtoField.new("Order Execution Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_ex_destination_exists = ProtoField.new("Order Execution Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_exec_inst_exists = ProtoField.new("Order Execution Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_fee_code_exists = ProtoField.new("Order Execution Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_floor_trader_acronym_exists = ProtoField.new("Order Execution Floor Trader Acronym Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionfloortraderacronymexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_frequent_trader_id_exists = ProtoField.new("Order Execution Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_give_up_firm_id_exists = ProtoField.new("Order Execution Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiongiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_marketing_fee_code_exists = ProtoField.new("Order Execution Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_maturity_date_exists = ProtoField.new("Order Execution Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_max_floor_exists = ProtoField.new("Order Execution Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionmaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_max_remove_pct_exists = ProtoField.new("Order Execution Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionmaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_min_qty_exists = ProtoField.new("Order Execution Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_multi_class_sprd_exists = ProtoField.new("Order Execution Multi Class Sprd Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionmulticlasssprdexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_multileg_reporting_type_exists = ProtoField.new("Order Execution Multileg Reporting Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionmultilegreportingtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_open_close_exists = ProtoField.new("Order Execution Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_ord_type_exists = ProtoField.new("Order Execution Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_order_origin_exists = ProtoField.new("Order Execution Order Origin Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionorderoriginexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_order_qty_exists = ProtoField.new("Order Execution Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_prevent_match_exists = ProtoField.new("Order Execution Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_price_exists = ProtoField.new("Order Execution Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_price_type_exists = ProtoField.new("Order Execution Price Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionpricetypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_put_or_call_exists = ProtoField.new("Order Execution Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists = ProtoField.new("Order Execution Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists = ProtoField.new("Order Execution Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists = ProtoField.new("Order Execution Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists = ProtoField.new("Order Execution Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists = ProtoField.new("Order Execution Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists = ProtoField.new("Order Execution Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists = ProtoField.new("Order Execution Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists = ProtoField.new("Order Execution Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_return_bitfields = ProtoField.new("Order Execution Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_rout_strategy_exists = ProtoField.new("Order Execution Rout Strategy Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionroutstrategyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_route_delivery_method_exists = ProtoField.new("Order Execution Route Delivery Method Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionroutedeliverymethodexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_routing_firm_id_exists = ProtoField.new("Order Execution Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_routing_inst_exists = ProtoField.new("Order Execution Routing Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionroutinginstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_secondary_exec_id_exists = ProtoField.new("Order Execution Secondary Exec Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionsecondaryexecidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_sender_location_id_exists = ProtoField.new("Order Execution Sender Location Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionsenderlocationidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_side_exists = ProtoField.new("Order Execution Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_stop_px_exists = ProtoField.new("Order Execution Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_strategy_id_exists = ProtoField.new("Order Execution Strategy Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionstrategyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_strike_price_exists = ProtoField.new("Order Execution Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_symbol_exists = ProtoField.new("Order Execution Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutionsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_target_party_id_exists = ProtoField.new("Order Execution Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiontargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_time_in_force_exists = ProtoField.new("Order Execution Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiontimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_trade_through_alert_type_exists = ProtoField.new("Order Execution Trade Through Alert Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderexecutiontradethroughalerttypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_id = ProtoField.new("Order Id", "cboe.edgx.options.orderentry.boe.v2.10.orderid", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_account_exists = ProtoField.new("Order Modified Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_alloc_qty_exists = ProtoField.new("Order Modified Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_attributed_quote_exists = ProtoField.new("Order Modified Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_auction_id_exists = ProtoField.new("Order Modified Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_base_liquidity_indicator_exists = ProtoField.new("Order Modified Base Liquidity Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbaseliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_bitfield_count = ProtoField.new("Order Modified Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_1 = ProtoField.new("Order Modified Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_10 = ProtoField.new("Order Modified Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_11 = ProtoField.new("Order Modified Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_12 = ProtoField.new("Order Modified Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_13 = ProtoField.new("Order Modified Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_14 = ProtoField.new("Order Modified Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_15 = ProtoField.new("Order Modified Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_16 = ProtoField.new("Order Modified Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_17 = ProtoField.new("Order Modified Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_2 = ProtoField.new("Order Modified Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_3 = ProtoField.new("Order Modified Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_4 = ProtoField.new("Order Modified Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_5 = ProtoField.new("Order Modified Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_6 = ProtoField.new("Order Modified Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_7 = ProtoField.new("Order Modified Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_8 = ProtoField.new("Order Modified Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_9 = ProtoField.new("Order Modified Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_capacity_exists = ProtoField.new("Order Modified Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_clearing_account_exists = ProtoField.new("Order Modified Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_clearing_firm_exists = ProtoField.new("Order Modified Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_clearing_optional_data_exists = ProtoField.new("Order Modified Clearing Optional Data Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedclearingoptionaldataexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_client_id_attr_exists = ProtoField.new("Order Modified Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_contra_capacity_exists = ProtoField.new("Order Modified Contra Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedcontracapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_corrected_size_exists = ProtoField.new("Order Modified Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_cross_exclusion_indicator_exists = ProtoField.new("Order Modified Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_cross_id_exists = ProtoField.new("Order Modified Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_display_indicator_exists = ProtoField.new("Order Modified Display Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifieddisplayindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_display_price_exists = ProtoField.new("Order Modified Display Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifieddisplaypriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_drill_thru_protection_exists = ProtoField.new("Order Modified Drill Thru Protection Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifieddrillthruprotectionexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_echo_text_exists = ProtoField.new("Order Modified Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_equity_party_id_exists = ProtoField.new("Order Modified Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_ex_destination_exists = ProtoField.new("Order Modified Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_exec_inst_exists = ProtoField.new("Order Modified Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_expire_time_exists = ProtoField.new("Order Modified Expire Time Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_frequent_trader_id_exists = ProtoField.new("Order Modified Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_give_up_firm_id_exists = ProtoField.new("Order Modified Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_last_px_exists = ProtoField.new("Order Modified Last Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedlastpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_last_shares_exists = ProtoField.new("Order Modified Last Shares Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedlastsharesexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_leaves_qty_exists = ProtoField.new("Order Modified Leaves Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedleavesqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_marketing_fee_code_exists = ProtoField.new("Order Modified Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_maturity_date_exists = ProtoField.new("Order Modified Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_max_floor_exists = ProtoField.new("Order Modified Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedmaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_max_remove_pct_exists = ProtoField.new("Order Modified Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedmaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_min_qty_exists = ProtoField.new("Order Modified Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_multi_class_sprd_exists = ProtoField.new("Order Modified Multi Class Sprd Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedmulticlasssprdexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_open_close_exists = ProtoField.new("Order Modified Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_optional_fields = ProtoField.new("Order Modified Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_ord_type_exists = ProtoField.new("Order Modified Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_order_origin_exists = ProtoField.new("Order Modified Order Origin Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedorderoriginexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_order_qty_exists = ProtoField.new("Order Modified Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_orig_cl_ord_id_exists = ProtoField.new("Order Modified Orig Cl Ord Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedorigclordidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_peg_difference_exists = ProtoField.new("Order Modified Peg Difference Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedpegdifferenceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_prevent_match_exists = ProtoField.new("Order Modified Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_price_exists = ProtoField.new("Order Modified Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_price_type_exists = ProtoField.new("Order Modified Price Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedpricetypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_put_or_call_exists = ProtoField.new("Order Modified Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_1_exists = ProtoField.new("Order Modified Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists = ProtoField.new("Order Modified Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists = ProtoField.new("Order Modified Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists = ProtoField.new("Order Modified Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists = ProtoField.new("Order Modified Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists = ProtoField.new("Order Modified Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists = ProtoField.new("Order Modified Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists = ProtoField.new("Order Modified Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_return_bitfields = ProtoField.new("Order Modified Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_rout_strategy_exists = ProtoField.new("Order Modified Rout Strategy Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedroutstrategyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_route_delivery_method_exists = ProtoField.new("Order Modified Route Delivery Method Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedroutedeliverymethodexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_routing_firm_id_exists = ProtoField.new("Order Modified Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_routing_inst_exists = ProtoField.new("Order Modified Routing Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedroutinginstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_secondary_order_id_exists = ProtoField.new("Order Modified Secondary Order Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedsecondaryorderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_session_eligibility_exists = ProtoField.new("Order Modified Session Eligibility Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedsessioneligibilityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_side_exists = ProtoField.new("Order Modified Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_stop_px_exists = ProtoField.new("Order Modified Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_strategy_id_exists = ProtoField.new("Order Modified Strategy Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedstrategyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_strike_price_exists = ProtoField.new("Order Modified Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_sub_liquidity_indicator_exists = ProtoField.new("Order Modified Sub Liquidity Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedsubliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_symbol_exists = ProtoField.new("Order Modified Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_target_party_id_exists = ProtoField.new("Order Modified Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_time_in_force_exists = ProtoField.new("Order Modified Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_working_price_exists = ProtoField.new("Order Modified Working Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedworkingpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_origin = ProtoField.new("Order Origin", "cboe.edgx.options.orderentry.boe.v2.10.orderorigin", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_qty = ProtoField.new("Order Qty", "cboe.edgx.options.orderentry.boe.v2.10.orderqty", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_reject_reason = ProtoField.new("Order Reject Reason", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_account_exists = ProtoField.new("Order Rejected Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_alloc_qty_exists = ProtoField.new("Order Rejected Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_attributed_quote_exists = ProtoField.new("Order Rejected Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_auction_id_exists = ProtoField.new("Order Rejected Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_bitfield_count = ProtoField.new("Order Rejected Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_1 = ProtoField.new("Order Rejected Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_10 = ProtoField.new("Order Rejected Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_11 = ProtoField.new("Order Rejected Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_12 = ProtoField.new("Order Rejected Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_13 = ProtoField.new("Order Rejected Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_14 = ProtoField.new("Order Rejected Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_15 = ProtoField.new("Order Rejected Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_16 = ProtoField.new("Order Rejected Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_17 = ProtoField.new("Order Rejected Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_2 = ProtoField.new("Order Rejected Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_3 = ProtoField.new("Order Rejected Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_4 = ProtoField.new("Order Rejected Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_5 = ProtoField.new("Order Rejected Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_6 = ProtoField.new("Order Rejected Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_7 = ProtoField.new("Order Rejected Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_8 = ProtoField.new("Order Rejected Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_9 = ProtoField.new("Order Rejected Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_capacity_exists = ProtoField.new("Order Rejected Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_clearing_account_exists = ProtoField.new("Order Rejected Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_clearing_firm_exists = ProtoField.new("Order Rejected Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_client_id_attr_exists = ProtoField.new("Order Rejected Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_cmta_number_exists = ProtoField.new("Order Rejected Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_contra_capacity_exists = ProtoField.new("Order Rejected Contra Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedcontracapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_corrected_size_exists = ProtoField.new("Order Rejected Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_cross_exclusion_indicator_exists = ProtoField.new("Order Rejected Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_cross_id_exists = ProtoField.new("Order Rejected Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_display_indicator_exists = ProtoField.new("Order Rejected Display Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejecteddisplayindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_echo_text_exists = ProtoField.new("Order Rejected Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_equity_party_id_exists = ProtoField.new("Order Rejected Equity Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedequitypartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_ex_destination_exists = ProtoField.new("Order Rejected Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_exec_inst_exists = ProtoField.new("Order Rejected Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_frequent_trader_id_exists = ProtoField.new("Order Rejected Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_give_up_firm_id_exists = ProtoField.new("Order Rejected Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_marketing_fee_code_exists = ProtoField.new("Order Rejected Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_maturity_date_exists = ProtoField.new("Order Rejected Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_max_floor_exists = ProtoField.new("Order Rejected Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedmaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_max_remove_pct_exists = ProtoField.new("Order Rejected Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedmaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_min_qty_exists = ProtoField.new("Order Rejected Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_multi_class_sprd_exists = ProtoField.new("Order Rejected Multi Class Sprd Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedmulticlasssprdexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_open_close_exists = ProtoField.new("Order Rejected Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_optional_fields = ProtoField.new("Order Rejected Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_ord_type_exists = ProtoField.new("Order Rejected Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_order_origin_exists = ProtoField.new("Order Rejected Order Origin Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedorderoriginexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_order_qty_exists = ProtoField.new("Order Rejected Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_peg_difference_exists = ProtoField.new("Order Rejected Peg Difference Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedpegdifferenceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_prevent_match_exists = ProtoField.new("Order Rejected Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_price_exists = ProtoField.new("Order Rejected Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_price_type_exists = ProtoField.new("Order Rejected Price Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedpricetypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_put_or_call_exists = ProtoField.new("Order Rejected Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists = ProtoField.new("Order Rejected Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists = ProtoField.new("Order Rejected Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists = ProtoField.new("Order Rejected Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists = ProtoField.new("Order Rejected Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists = ProtoField.new("Order Rejected Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists = ProtoField.new("Order Rejected Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists = ProtoField.new("Order Rejected Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists = ProtoField.new("Order Rejected Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_return_bitfields = ProtoField.new("Order Rejected Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_rout_strategy_exists = ProtoField.new("Order Rejected Rout Strategy Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedroutstrategyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_route_delivery_method_exists = ProtoField.new("Order Rejected Route Delivery Method Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedroutedeliverymethodexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_routing_firm_id_exists = ProtoField.new("Order Rejected Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_routing_inst_exists = ProtoField.new("Order Rejected Routing Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedroutinginstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_secondary_order_id_exists = ProtoField.new("Order Rejected Secondary Order Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedsecondaryorderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_session_eligibility_exists = ProtoField.new("Order Rejected Session Eligibility Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedsessioneligibilityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_side_exists = ProtoField.new("Order Rejected Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_stop_px_exists = ProtoField.new("Order Rejected Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_strategy_id_exists = ProtoField.new("Order Rejected Strategy Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedstrategyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_strike_price_exists = ProtoField.new("Order Rejected Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_symbol_exists = ProtoField.new("Order Rejected Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_target_party_id_exists = ProtoField.new("Order Rejected Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_time_in_force_exists = ProtoField.new("Order Rejected Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_account_exists = ProtoField.new("Order Restated Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_alloc_qty_exists = ProtoField.new("Order Restated Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_attributed_quote_exists = ProtoField.new("Order Restated Attributed Quote Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedattributedquoteexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_auction_id_exists = ProtoField.new("Order Restated Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_base_liquidity_indicator_exists = ProtoField.new("Order Restated Base Liquidity Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbaseliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_bitfield_count = ProtoField.new("Order Restated Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_1 = ProtoField.new("Order Restated Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_10 = ProtoField.new("Order Restated Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_11 = ProtoField.new("Order Restated Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_12 = ProtoField.new("Order Restated Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_13 = ProtoField.new("Order Restated Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_14 = ProtoField.new("Order Restated Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_15 = ProtoField.new("Order Restated Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_16 = ProtoField.new("Order Restated Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_17 = ProtoField.new("Order Restated Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_2 = ProtoField.new("Order Restated Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_3 = ProtoField.new("Order Restated Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_4 = ProtoField.new("Order Restated Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_5 = ProtoField.new("Order Restated Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_6 = ProtoField.new("Order Restated Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_7 = ProtoField.new("Order Restated Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_8 = ProtoField.new("Order Restated Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_9 = ProtoField.new("Order Restated Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_capacity_exists = ProtoField.new("Order Restated Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_clearing_account_exists = ProtoField.new("Order Restated Clearing Account Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_clearing_firm_exists = ProtoField.new("Order Restated Clearing Firm Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_client_id_attr_exists = ProtoField.new("Order Restated Client Id Attr Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedclientidattrexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_cmta_number_exists = ProtoField.new("Order Restated Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_contra_capacity_exists = ProtoField.new("Order Restated Contra Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedcontracapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_corrected_size_exists = ProtoField.new("Order Restated Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_cross_exclusion_indicator_exists = ProtoField.new("Order Restated Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_cross_id_exists = ProtoField.new("Order Restated Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_display_indicator_exists = ProtoField.new("Order Restated Display Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestateddisplayindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_display_price_exists = ProtoField.new("Order Restated Display Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestateddisplaypriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_echo_text_exists = ProtoField.new("Order Restated Echo Text Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedechotextexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_ex_destination_exists = ProtoField.new("Order Restated Ex Destination Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedexdestinationexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_exec_inst_exists = ProtoField.new("Order Restated Exec Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_expire_time_exists = ProtoField.new("Order Restated Expire Time Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_frequent_trader_id_exists = ProtoField.new("Order Restated Frequent Trader Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_give_up_firm_id_exists = ProtoField.new("Order Restated Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_last_px_exists = ProtoField.new("Order Restated Last Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedlastpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_last_shares_exists = ProtoField.new("Order Restated Last Shares Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedlastsharesexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_leaves_qty_exists = ProtoField.new("Order Restated Leaves Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedleavesqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_marketing_fee_code_exists = ProtoField.new("Order Restated Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_maturity_date_exists = ProtoField.new("Order Restated Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_max_floor_exists = ProtoField.new("Order Restated Max Floor Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedmaxfloorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_max_remove_pct_exists = ProtoField.new("Order Restated Max Remove Pct Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedmaxremovepctexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_min_qty_exists = ProtoField.new("Order Restated Min Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_multi_class_sprd_exists = ProtoField.new("Order Restated Multi Class Sprd Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedmulticlasssprdexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_open_close_exists = ProtoField.new("Order Restated Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_optional_fields = ProtoField.new("Order Restated Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_ord_type_exists = ProtoField.new("Order Restated Ord Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_order_origin_exists = ProtoField.new("Order Restated Order Origin Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedorderoriginexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_order_qty_exists = ProtoField.new("Order Restated Order Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_orig_cl_ord_id_exists = ProtoField.new("Order Restated Orig Cl Ord Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedorigclordidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_peg_difference_exists = ProtoField.new("Order Restated Peg Difference Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedpegdifferenceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_prevent_match_exists = ProtoField.new("Order Restated Prevent Match Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_price_exists = ProtoField.new("Order Restated Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_price_type_exists = ProtoField.new("Order Restated Price Type Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedpricetypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_put_or_call_exists = ProtoField.new("Order Restated Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists = ProtoField.new("Order Restated Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists = ProtoField.new("Order Restated Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists = ProtoField.new("Order Restated Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists = ProtoField.new("Order Restated Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists = ProtoField.new("Order Restated Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists = ProtoField.new("Order Restated Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists = ProtoField.new("Order Restated Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists = ProtoField.new("Order Restated Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_return_bitfields = ProtoField.new("Order Restated Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_rout_strategy_exists = ProtoField.new("Order Restated Rout Strategy Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedroutstrategyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_route_delivery_method_exists = ProtoField.new("Order Restated Route Delivery Method Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedroutedeliverymethodexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_routing_firm_id_exists = ProtoField.new("Order Restated Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_routing_inst_exists = ProtoField.new("Order Restated Routing Inst Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedroutinginstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_secondary_order_id_exists = ProtoField.new("Order Restated Secondary Order Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedsecondaryorderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_side_exists = ProtoField.new("Order Restated Side Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_stop_px_exists = ProtoField.new("Order Restated Stop Px Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_strategy_id_exists = ProtoField.new("Order Restated Strategy Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedstrategyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_strike_price_exists = ProtoField.new("Order Restated Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_symbol_exists = ProtoField.new("Order Restated Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_target_party_id_exists = ProtoField.new("Order Restated Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedtargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_time_in_force_exists = ProtoField.new("Order Restated Time In Force Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_working_price_exists = ProtoField.new("Order Restated Working Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedworkingpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.orig_cl_ord_id = ProtoField.new("Orig Cl Ord Id", "cboe.edgx.options.orderentry.boe.v2.10.origclordid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.orig_time = ProtoField.new("Orig Time", "cboe.edgx.options.orderentry.boe.v2.10.origtime", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.ors = ProtoField.new("Ors", "cboe.edgx.options.orderentry.boe.v2.10.ors", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.packet = ProtoField.new("Packet", "cboe.edgx.options.orderentry.boe.v2.10.packet", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group = ProtoField.new("Param Group", "cboe.edgx.options.orderentry.boe.v2.10.paramgroup", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group_length = ProtoField.new("Param Group Length", "cboe.edgx.options.orderentry.boe.v2.10.paramgrouplength", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group_type = ProtoField.new("Param Group Type", "cboe.edgx.options.orderentry.boe.v2.10.paramgrouptype", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_header = ProtoField.new("Param Header", "cboe.edgx.options.orderentry.boe.v2.10.paramheader", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.parameter = ProtoField.new("Parameter", "cboe.edgx.options.orderentry.boe.v2.10.parameter", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.password = ProtoField.new("Password", "cboe.edgx.options.orderentry.boe.v2.10.password", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.posting_instruction = ProtoField.new("Posting Instruction", "cboe.edgx.options.orderentry.boe.v2.10.postinginstruction", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.prevent_match = ProtoField.new("Prevent Match", "cboe.edgx.options.orderentry.boe.v2.10.preventmatch", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.price = ProtoField.new("Price", "cboe.edgx.options.orderentry.boe.v2.10.price", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.price_type = ProtoField.new("Price Type", "cboe.edgx.options.orderentry.boe.v2.10.pricetype", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_reject_reason = ProtoField.new("Purge Reject Reason", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_bitfield_count = ProtoField.new("Purge Rejected Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_1 = ProtoField.new("Purge Rejected Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_10 = ProtoField.new("Purge Rejected Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_11 = ProtoField.new("Purge Rejected Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_12 = ProtoField.new("Purge Rejected Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_13 = ProtoField.new("Purge Rejected Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_14 = ProtoField.new("Purge Rejected Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_15 = ProtoField.new("Purge Rejected Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_16 = ProtoField.new("Purge Rejected Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_17 = ProtoField.new("Purge Rejected Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_2 = ProtoField.new("Purge Rejected Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_3 = ProtoField.new("Purge Rejected Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_4 = ProtoField.new("Purge Rejected Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_5 = ProtoField.new("Purge Rejected Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_6 = ProtoField.new("Purge Rejected Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_7 = ProtoField.new("Purge Rejected Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_8 = ProtoField.new("Purge Rejected Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_9 = ProtoField.new("Purge Rejected Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_mass_cancel_id_exists = ProtoField.new("Purge Rejected Mass Cancel Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedmasscancelidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_optional_fields = ProtoField.new("Purge Rejected Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists = ProtoField.new("Purge Rejected Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists = ProtoField.new("Purge Rejected Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists = ProtoField.new("Purge Rejected Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists = ProtoField.new("Purge Rejected Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists = ProtoField.new("Purge Rejected Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists = ProtoField.new("Purge Rejected Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists = ProtoField.new("Purge Rejected Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists = ProtoField.new("Purge Rejected Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_return_bitfields = ProtoField.new("Purge Rejected Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.put_or_call = ProtoField.new("Put Or Call", "cboe.edgx.options.orderentry.boe.v2.10.putorcall", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_liquidity_indicator = ProtoField.new("Quote Liquidity Indicator", "cboe.edgx.options.orderentry.boe.v2.10.quoteliquidityindicator", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_reject_reason = ProtoField.new("Quote Reject Reason", "cboe.edgx.options.orderentry.boe.v2.10.quoterejectreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_restatement_reason = ProtoField.new("Quote Restatement Reason", "cboe.edgx.options.orderentry.boe.v2.10.quoterestatementreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_result = ProtoField.new("Quote Result", "cboe.edgx.options.orderentry.boe.v2.10.quoteresult", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_result_group = ProtoField.new("Quote Result Group", "cboe.edgx.options.orderentry.boe.v2.10.quoteresultgroup", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update = ProtoField.new("Quote Update", "cboe.edgx.options.orderentry.boe.v2.10.quoteupdate", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_id = ProtoField.new("Quote Update Id", "cboe.edgx.options.orderentry.boe.v2.10.quoteupdateid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_12 = ProtoField.new("Reserved 12", "cboe.edgx.options.orderentry.boe.v2.10.reserved12", ftypes.BYTES)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_15 = ProtoField.new("Reserved 15", "cboe.edgx.options.orderentry.boe.v2.10.reserved15", ftypes.BYTES)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_17 = ProtoField.new("Reserved 17", "cboe.edgx.options.orderentry.boe.v2.10.reserved17", ftypes.BYTES)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_2 = ProtoField.new("Reserved 2", "cboe.edgx.options.orderentry.boe.v2.10.reserved2", ftypes.BYTES)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_3 = ProtoField.new("Reserved 3", "cboe.edgx.options.orderentry.boe.v2.10.reserved3", ftypes.BYTES)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_4 = ProtoField.new("Reserved 4", "cboe.edgx.options.orderentry.boe.v2.10.reserved4", ftypes.BYTES)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_6 = ProtoField.new("Reserved 6", "cboe.edgx.options.orderentry.boe.v2.10.reserved6", ftypes.BYTES)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_internal = ProtoField.new("Reserved Internal", "cboe.edgx.options.orderentry.boe.v2.10.reservedinternal", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.restatement_reason = ProtoField.new("Restatement Reason", "cboe.edgx.options.orderentry.boe.v2.10.restatementreason", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.return_bitfields = ProtoField.new("Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.returnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.revised_legs = ProtoField.new("Revised Legs", "cboe.edgx.options.orderentry.boe.v2.10.revisedlegs", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_reset = ProtoField.new("Risk Reset", "cboe.edgx.options.orderentry.boe.v2.10.riskreset", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_reset_result = ProtoField.new("Risk Reset Result", "cboe.edgx.options.orderentry.boe.v2.10.riskresetresult", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_root = ProtoField.new("Risk Root", "cboe.edgx.options.orderentry.boe.v2.10.riskroot", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_status_id = ProtoField.new("Risk Status Id", "cboe.edgx.options.orderentry.boe.v2.10.riskstatusid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.rout_strategy = ProtoField.new("Rout Strategy", "cboe.edgx.options.orderentry.boe.v2.10.routstrategy", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.route_delivery_method = ProtoField.new("Route Delivery Method", "cboe.edgx.options.orderentry.boe.v2.10.routedeliverymethod", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.routing_firm_id = ProtoField.new("Routing Firm Id", "cboe.edgx.options.orderentry.boe.v2.10.routingfirmid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.routing_inst = ProtoField.new("Routing Inst", "cboe.edgx.options.orderentry.boe.v2.10.routinginst", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.secondary_order_id = ProtoField.new("Secondary Order Id", "cboe.edgx.options.orderentry.boe.v2.10.secondaryorderid", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.send_time = ProtoField.new("Send Time", "cboe.edgx.options.orderentry.boe.v2.10.sendtime", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.sequence_number = ProtoField.new("Sequence Number", "cboe.edgx.options.orderentry.boe.v2.10.sequencenumber", ftypes.UINT32)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.session_eligibility = ProtoField.new("Session Eligibility", "cboe.edgx.options.orderentry.boe.v2.10.sessioneligibility", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.session_sub_id = ProtoField.new("Session Sub Id", "cboe.edgx.options.orderentry.boe.v2.10.sessionsubid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.short_quote_update = ProtoField.new("Short Quote Update", "cboe.edgx.options.orderentry.boe.v2.10.shortquoteupdate", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.side = ProtoField.new("Side", "cboe.edgx.options.orderentry.boe.v2.10.side", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.start_of_message = ProtoField.new("Start Of Message", "cboe.edgx.options.orderentry.boe.v2.10.startofmessage", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.stop_px = ProtoField.new("Stop Px", "cboe.edgx.options.orderentry.boe.v2.10.stoppx", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.strategy_id = ProtoField.new("Strategy Id", "cboe.edgx.options.orderentry.boe.v2.10.strategyid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.strike_price = ProtoField.new("Strike Price", "cboe.edgx.options.orderentry.boe.v2.10.strikeprice", ftypes.INT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.sub_liquidity_indicator = ProtoField.new("Sub Liquidity Indicator", "cboe.edgx.options.orderentry.boe.v2.10.subliquidityindicator", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.symbol = ProtoField.new("Symbol", "cboe.edgx.options.orderentry.boe.v2.10.symbol", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.target_party_id = ProtoField.new("Target Party Id", "cboe.edgx.options.orderentry.boe.v2.10.targetpartyid", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.text = ProtoField.new("Text", "cboe.edgx.options.orderentry.boe.v2.10.text", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.time_in_force = ProtoField.new("Time In Force", "cboe.edgx.options.orderentry.boe.v2.10.timeinforce", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_auction_id_exists = ProtoField.new("Trade Cancel Or Correct Auction Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectauctionidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_bitfield_count = ProtoField.new("Trade Cancel Or Correct Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_1 = ProtoField.new("Trade Cancel Or Correct Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_10 = ProtoField.new("Trade Cancel Or Correct Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_11 = ProtoField.new("Trade Cancel Or Correct Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_12 = ProtoField.new("Trade Cancel Or Correct Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_13 = ProtoField.new("Trade Cancel Or Correct Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_14 = ProtoField.new("Trade Cancel Or Correct Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_15 = ProtoField.new("Trade Cancel Or Correct Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_16 = ProtoField.new("Trade Cancel Or Correct Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_17 = ProtoField.new("Trade Cancel Or Correct Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_2 = ProtoField.new("Trade Cancel Or Correct Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_3 = ProtoField.new("Trade Cancel Or Correct Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_4 = ProtoField.new("Trade Cancel Or Correct Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_5 = ProtoField.new("Trade Cancel Or Correct Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_6 = ProtoField.new("Trade Cancel Or Correct Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_7 = ProtoField.new("Trade Cancel Or Correct Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_8 = ProtoField.new("Trade Cancel Or Correct Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_9 = ProtoField.new("Trade Cancel Or Correct Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_capacity_exists = ProtoField.new("Trade Cancel Or Correct Capacity Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_cmta_number_exists = ProtoField.new("Trade Cancel Or Correct Cmta Number Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_corrected_size_exists = ProtoField.new("Trade Cancel Or Correct Corrected Size Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_cross_exclusion_indicator_exists = ProtoField.new("Trade Cancel Or Correct Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_cross_id_exists = ProtoField.new("Trade Cancel Or Correct Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_give_up_firm_id_exists = ProtoField.new("Trade Cancel Or Correct Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_marketing_fee_code_exists = ProtoField.new("Trade Cancel Or Correct Marketing Fee Code Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectmarketingfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_maturity_date_exists = ProtoField.new("Trade Cancel Or Correct Maturity Date Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_open_close_exists = ProtoField.new("Trade Cancel Or Correct Open Close Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_optional_fields = ProtoField.new("Trade Cancel Or Correct Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_put_or_call_exists = ProtoField.new("Trade Cancel Or Correct Put Or Call Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectputorcallexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_return_bitfields = ProtoField.new("Trade Cancel Or Correct Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_routing_firm_id_exists = ProtoField.new("Trade Cancel Or Correct Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_strike_price_exists = ProtoField.new("Trade Cancel Or Correct Strike Price Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectstrikepriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_sub_liquidity_indicator_exists = ProtoField.new("Trade Cancel Or Correct Sub Liquidity Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectsubliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_symbol_exists = ProtoField.new("Trade Cancel Or Correct Symbol Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_target_party_id_exists = ProtoField.new("Trade Cancel Or Correct Target Party Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrecttargetpartyidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.transact_time = ProtoField.new("Transact Time", "cboe.edgx.options.orderentry.boe.v2.10.transacttime", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.transaction_time = ProtoField.new("Transaction Time", "cboe.edgx.options.orderentry.boe.v2.10.transactiontime", ftypes.UINT64)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_number = ProtoField.new("Unit Number", "cboe.edgx.options.orderentry.boe.v2.10.unitnumber", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_sequence = ProtoField.new("Unit Sequence", "cboe.edgx.options.orderentry.boe.v2.10.unitsequence", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_sequences = ProtoField.new("Unit Sequences", "cboe.edgx.options.orderentry.boe.v2.10.unitsequences", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_alloc_qty_exists = ProtoField.new("User Modify Rejected Alloc Qty Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedallocqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_bitfield_count = ProtoField.new("User Modify Rejected Bitfield Count", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbitfieldcount", ftypes.UINT8)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_1 = ProtoField.new("User Modify Rejected Byte 1", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte1", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_10 = ProtoField.new("User Modify Rejected Byte 10", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte10", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_11 = ProtoField.new("User Modify Rejected Byte 11", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte11", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_12 = ProtoField.new("User Modify Rejected Byte 12", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte12", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_13 = ProtoField.new("User Modify Rejected Byte 13", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte13", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_14 = ProtoField.new("User Modify Rejected Byte 14", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte14", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_15 = ProtoField.new("User Modify Rejected Byte 15", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte15", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_16 = ProtoField.new("User Modify Rejected Byte 16", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte16", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_17 = ProtoField.new("User Modify Rejected Byte 17", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte17", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_2 = ProtoField.new("User Modify Rejected Byte 2", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte2", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_3 = ProtoField.new("User Modify Rejected Byte 3", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte3", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_4 = ProtoField.new("User Modify Rejected Byte 4", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte4", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_5 = ProtoField.new("User Modify Rejected Byte 5", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte5", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_6 = ProtoField.new("User Modify Rejected Byte 6", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte6", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_7 = ProtoField.new("User Modify Rejected Byte 7", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte7", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_8 = ProtoField.new("User Modify Rejected Byte 8", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte8", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_9 = ProtoField.new("User Modify Rejected Byte 9", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedbyte9", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_cross_exclusion_indicator_exists = ProtoField.new("User Modify Rejected Cross Exclusion Indicator Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedcrossexclusionindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_cross_id_exists = ProtoField.new("User Modify Rejected Cross Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedcrossidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_give_up_firm_id_exists = ProtoField.new("User Modify Rejected Give Up Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedgiveupfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_optional_fields = ProtoField.new("User Modify Rejected Optional Fields", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedoptionalfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists = ProtoField.new("User Modify Rejected Reserved Bit 1 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists = ProtoField.new("User Modify Rejected Reserved Bit 2 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists = ProtoField.new("User Modify Rejected Reserved Bit 3 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists = ProtoField.new("User Modify Rejected Reserved Bit 4 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists = ProtoField.new("User Modify Rejected Reserved Bit 5 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists = ProtoField.new("User Modify Rejected Reserved Bit 6 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists = ProtoField.new("User Modify Rejected Reserved Bit 7 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists = ProtoField.new("User Modify Rejected Reserved Bit 8 Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_return_bitfields = ProtoField.new("User Modify Rejected Return Bitfields", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedreturnbitfields", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_routing_firm_id_exists = ProtoField.new("User Modify Rejected Routing Firm Id Exists", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedroutingfirmidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.username = ProtoField.new("Username", "cboe.edgx.options.orderentry.boe.v2.10.username", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.working_price = ProtoField.new("Working Price", "cboe.edgx.options.orderentry.boe.v2.10.workingprice", ftypes.UINT64)

-- Cboe Edgx Options OrderEntry Boe 2.10 messages
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_message = ProtoField.new("Cancel Order Message", "cboe.edgx.options.orderentry.boe.v2.10.cancelordermessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_message = ProtoField.new("Cancel Rejected Message", "cboe.edgx.options.orderentry.boe.v2.10.cancelrejectedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_message = ProtoField.new("Complex Instrument Accepted Message", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentacceptedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_message = ProtoField.new("Complex Instrument Rejected Message", "cboe.edgx.options.orderentry.boe.v2.10.complexinstrumentrejectedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_message = ProtoField.new("Cross Order Acknowledgment Message", "cboe.edgx.options.orderentry.boe.v2.10.crossorderacknowledgmentmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_message = ProtoField.new("Cross Order Cancelled Message", "cboe.edgx.options.orderentry.boe.v2.10.crossordercancelledmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_message = ProtoField.new("Cross Order Rejected Message", "cboe.edgx.options.orderentry.boe.v2.10.crossorderrejectedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_request_message = ProtoField.new("Login Request Message", "cboe.edgx.options.orderentry.boe.v2.10.loginrequestmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_response_message = ProtoField.new("Login Response Message", "cboe.edgx.options.orderentry.boe.v2.10.loginresponsemessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.logout_message = ProtoField.new("Logout Message", "cboe.edgx.options.orderentry.boe.v2.10.logoutmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_acknowledgment_message = ProtoField.new("Mass Cancel Acknowledgment Message", "cboe.edgx.options.orderentry.boe.v2.10.masscancelacknowledgmentmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_message = ProtoField.new("Modify Order Message", "cboe.edgx.options.orderentry.boe.v2.10.modifyordermessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_message = ProtoField.new("New Complex Instrument Message", "cboe.edgx.options.orderentry.boe.v2.10.newcomplexinstrumentmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_complex_message = ProtoField.new("New Order Complex Message", "cboe.edgx.options.orderentry.boe.v2.10.newordercomplexmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_message = ProtoField.new("New Order Cross Message", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_message = ProtoField.new("New Order Cross Multileg Message", "cboe.edgx.options.orderentry.boe.v2.10.newordercrossmultilegmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_message = ProtoField.new("New Order Message", "cboe.edgx.options.orderentry.boe.v2.10.newordermessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_message = ProtoField.new("Order Acknowledgment Message", "cboe.edgx.options.orderentry.boe.v2.10.orderacknowledgmentmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_message = ProtoField.new("Order Cancelled Message", "cboe.edgx.options.orderentry.boe.v2.10.ordercancelledmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_message = ProtoField.new("Order Modified Message", "cboe.edgx.options.orderentry.boe.v2.10.ordermodifiedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_message = ProtoField.new("Order Rejected Message", "cboe.edgx.options.orderentry.boe.v2.10.orderrejectedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_message = ProtoField.new("Order Restated Message", "cboe.edgx.options.orderentry.boe.v2.10.orderrestatedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_order_message = ProtoField.new("Purge Order Message", "cboe.edgx.options.orderentry.boe.v2.10.purgeordermessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_message = ProtoField.new("Purge Rejected Message", "cboe.edgx.options.orderentry.boe.v2.10.purgerejectedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_cancelled_message = ProtoField.new("Quote Cancelled Message", "cboe.edgx.options.orderentry.boe.v2.10.quotecancelledmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_execution_message = ProtoField.new("Quote Execution Message", "cboe.edgx.options.orderentry.boe.v2.10.quoteexecutionmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_restated_message = ProtoField.new("Quote Restated Message", "cboe.edgx.options.orderentry.boe.v2.10.quoterestatedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_acknowledgment_message = ProtoField.new("Quote Update Acknowledgment Message", "cboe.edgx.options.orderentry.boe.v2.10.quoteupdateacknowledgmentmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_message = ProtoField.new("Quote Update Message", "cboe.edgx.options.orderentry.boe.v2.10.quoteupdatemessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_rejected_message = ProtoField.new("Quote Update Rejected Message", "cboe.edgx.options.orderentry.boe.v2.10.quoteupdaterejectedmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reset_risk_acknowledgment_message = ProtoField.new("Reset Risk Acknowledgment Message", "cboe.edgx.options.orderentry.boe.v2.10.resetriskacknowledgmentmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_reset_message = ProtoField.new("Risk Reset Message", "cboe.edgx.options.orderentry.boe.v2.10.riskresetmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.short_quote_update_message = ProtoField.new("Short Quote Update Message", "cboe.edgx.options.orderentry.boe.v2.10.shortquoteupdatemessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_message = ProtoField.new("Trade Cancel Or Correct Message", "cboe.edgx.options.orderentry.boe.v2.10.tradecancelorcorrectmessage", ftypes.STRING)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_message = ProtoField.new("User Modify Rejected Message", "cboe.edgx.options.orderentry.boe.v2.10.usermodifyrejectedmessage", ftypes.STRING)

-- Cboe Edgx Options OrderEntry Boe 2.10 generated fields
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group_index = ProtoField.new("Param Group Index", "cboe.edgx.options.orderentry.boe.v2.10.paramgroupindex", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_result_group_index = ProtoField.new("Quote Result Group Index", "cboe.edgx.options.orderentry.boe.v2.10.quoteresultgroupindex", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_index = ProtoField.new("Quote Update Index", "cboe.edgx.options.orderentry.boe.v2.10.quoteupdateindex", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.short_quote_update_index = ProtoField.new("Short Quote Update Index", "cboe.edgx.options.orderentry.boe.v2.10.shortquoteupdateindex", ftypes.UINT16)
omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_sequence_index = ProtoField.new("Unit Sequence Index", "cboe.edgx.options.orderentry.boe.v2.10.unitsequenceindex", ftypes.UINT16)

-----------------------------------------------------------------------
-- Declare Dissection Options
-----------------------------------------------------------------------

local show = {}

-- Cboe Edgx Options OrderEntry Boe 2.10 Element Dissection Options
show.cancel_order_byte_1 = true
show.cancel_order_byte_2 = true
show.cancel_order_message = true
show.cancel_order_optional_fields = true
show.cancel_rejected_byte_1 = true
show.cancel_rejected_byte_10 = true
show.cancel_rejected_byte_11 = true
show.cancel_rejected_byte_12 = true
show.cancel_rejected_byte_13 = true
show.cancel_rejected_byte_14 = true
show.cancel_rejected_byte_15 = true
show.cancel_rejected_byte_16 = true
show.cancel_rejected_byte_17 = true
show.cancel_rejected_byte_2 = true
show.cancel_rejected_byte_3 = true
show.cancel_rejected_byte_4 = true
show.cancel_rejected_byte_5 = true
show.cancel_rejected_byte_6 = true
show.cancel_rejected_byte_7 = true
show.cancel_rejected_byte_8 = true
show.cancel_rejected_byte_9 = true
show.cancel_rejected_message = true
show.cancel_rejected_optional_fields = true
show.cancel_rejected_return_bitfields = true
show.complex_instrument_accepted_byte_1 = true
show.complex_instrument_accepted_byte_10 = true
show.complex_instrument_accepted_byte_11 = true
show.complex_instrument_accepted_byte_12 = true
show.complex_instrument_accepted_byte_13 = true
show.complex_instrument_accepted_byte_14 = true
show.complex_instrument_accepted_byte_15 = true
show.complex_instrument_accepted_byte_16 = true
show.complex_instrument_accepted_byte_17 = true
show.complex_instrument_accepted_byte_2 = true
show.complex_instrument_accepted_byte_3 = true
show.complex_instrument_accepted_byte_4 = true
show.complex_instrument_accepted_byte_5 = true
show.complex_instrument_accepted_byte_6 = true
show.complex_instrument_accepted_byte_7 = true
show.complex_instrument_accepted_byte_8 = true
show.complex_instrument_accepted_byte_9 = true
show.complex_instrument_accepted_message = true
show.complex_instrument_accepted_optional_fields = true
show.complex_instrument_accepted_return_bitfields = true
show.complex_instrument_rejected_byte_1 = true
show.complex_instrument_rejected_byte_10 = true
show.complex_instrument_rejected_byte_11 = true
show.complex_instrument_rejected_byte_12 = true
show.complex_instrument_rejected_byte_13 = true
show.complex_instrument_rejected_byte_14 = true
show.complex_instrument_rejected_byte_15 = true
show.complex_instrument_rejected_byte_16 = true
show.complex_instrument_rejected_byte_17 = true
show.complex_instrument_rejected_byte_2 = true
show.complex_instrument_rejected_byte_3 = true
show.complex_instrument_rejected_byte_4 = true
show.complex_instrument_rejected_byte_5 = true
show.complex_instrument_rejected_byte_6 = true
show.complex_instrument_rejected_byte_7 = true
show.complex_instrument_rejected_byte_8 = true
show.complex_instrument_rejected_byte_9 = true
show.complex_instrument_rejected_message = true
show.complex_instrument_rejected_optional_fields = true
show.complex_instrument_rejected_return_bitfields = true
show.cross_order_acknowledgment_byte_1 = true
show.cross_order_acknowledgment_byte_10 = true
show.cross_order_acknowledgment_byte_11 = true
show.cross_order_acknowledgment_byte_12 = true
show.cross_order_acknowledgment_byte_13 = true
show.cross_order_acknowledgment_byte_14 = true
show.cross_order_acknowledgment_byte_15 = true
show.cross_order_acknowledgment_byte_16 = true
show.cross_order_acknowledgment_byte_17 = true
show.cross_order_acknowledgment_byte_2 = true
show.cross_order_acknowledgment_byte_3 = true
show.cross_order_acknowledgment_byte_4 = true
show.cross_order_acknowledgment_byte_5 = true
show.cross_order_acknowledgment_byte_6 = true
show.cross_order_acknowledgment_byte_7 = true
show.cross_order_acknowledgment_byte_8 = true
show.cross_order_acknowledgment_byte_9 = true
show.cross_order_acknowledgment_message = true
show.cross_order_acknowledgment_optional_fields = true
show.cross_order_acknowledgment_return_bitfields = true
show.cross_order_cancelled_byte_1 = true
show.cross_order_cancelled_byte_10 = true
show.cross_order_cancelled_byte_11 = true
show.cross_order_cancelled_byte_12 = true
show.cross_order_cancelled_byte_13 = true
show.cross_order_cancelled_byte_14 = true
show.cross_order_cancelled_byte_15 = true
show.cross_order_cancelled_byte_16 = true
show.cross_order_cancelled_byte_17 = true
show.cross_order_cancelled_byte_2 = true
show.cross_order_cancelled_byte_3 = true
show.cross_order_cancelled_byte_4 = true
show.cross_order_cancelled_byte_5 = true
show.cross_order_cancelled_byte_6 = true
show.cross_order_cancelled_byte_7 = true
show.cross_order_cancelled_byte_8 = true
show.cross_order_cancelled_byte_9 = true
show.cross_order_cancelled_message = true
show.cross_order_cancelled_optional_fields = true
show.cross_order_cancelled_return_bitfields = true
show.cross_order_rejected_byte_1 = true
show.cross_order_rejected_byte_10 = true
show.cross_order_rejected_byte_11 = true
show.cross_order_rejected_byte_12 = true
show.cross_order_rejected_byte_13 = true
show.cross_order_rejected_byte_14 = true
show.cross_order_rejected_byte_15 = true
show.cross_order_rejected_byte_16 = true
show.cross_order_rejected_byte_17 = true
show.cross_order_rejected_byte_2 = true
show.cross_order_rejected_byte_3 = true
show.cross_order_rejected_byte_4 = true
show.cross_order_rejected_byte_5 = true
show.cross_order_rejected_byte_6 = true
show.cross_order_rejected_byte_7 = true
show.cross_order_rejected_byte_8 = true
show.cross_order_rejected_byte_9 = true
show.cross_order_rejected_message = true
show.cross_order_rejected_optional_fields = true
show.cross_order_rejected_return_bitfields = true
show.login_request_message = true
show.login_response_message = true
show.logout_message = true
show.mass_cancel_acknowledgment_message = true
show.message_header = true
show.modify_order_byte_1 = true
show.modify_order_byte_2 = true
show.modify_order_message = true
show.modify_order_optional_fields = true
show.new_complex_instrument_byte_1 = true
show.new_complex_instrument_message = true
show.new_complex_instrument_optional_fields = true
show.new_order_byte_1 = true
show.new_order_byte_2 = true
show.new_order_byte_3 = true
show.new_order_byte_4 = true
show.new_order_byte_5 = true
show.new_order_byte_6 = true
show.new_order_byte_7 = true
show.new_order_byte_8 = true
show.new_order_byte_9 = true
show.new_order_complex_message = true
show.new_order_cross_byte_1 = true
show.new_order_cross_byte_2 = true
show.new_order_cross_byte_3 = true
show.new_order_cross_byte_4 = true
show.new_order_cross_message = true
show.new_order_cross_multileg_byte_1 = true
show.new_order_cross_multileg_byte_2 = true
show.new_order_cross_multileg_byte_3 = true
show.new_order_cross_multileg_byte_4 = true
show.new_order_cross_multileg_byte_5 = true
show.new_order_cross_multileg_message = true
show.new_order_cross_multileg_optional_fields = true
show.new_order_cross_optional_fields = true
show.new_order_message = true
show.new_order_optional_fields = true
show.order_acknowledgment_byte_1 = true
show.order_acknowledgment_byte_10 = true
show.order_acknowledgment_byte_11 = true
show.order_acknowledgment_byte_12 = true
show.order_acknowledgment_byte_13 = true
show.order_acknowledgment_byte_14 = true
show.order_acknowledgment_byte_15 = true
show.order_acknowledgment_byte_16 = true
show.order_acknowledgment_byte_17 = true
show.order_acknowledgment_byte_2 = true
show.order_acknowledgment_byte_3 = true
show.order_acknowledgment_byte_4 = true
show.order_acknowledgment_byte_5 = true
show.order_acknowledgment_byte_6 = true
show.order_acknowledgment_byte_7 = true
show.order_acknowledgment_byte_8 = true
show.order_acknowledgment_byte_9 = true
show.order_acknowledgment_message = true
show.order_acknowledgment_optional_fields = true
show.order_acknowledgment_return_bitfields = true
show.order_cancelled_byte_1 = true
show.order_cancelled_byte_10 = true
show.order_cancelled_byte_11 = true
show.order_cancelled_byte_12 = true
show.order_cancelled_byte_13 = true
show.order_cancelled_byte_14 = true
show.order_cancelled_byte_15 = true
show.order_cancelled_byte_16 = true
show.order_cancelled_byte_17 = true
show.order_cancelled_byte_2 = true
show.order_cancelled_byte_3 = true
show.order_cancelled_byte_4 = true
show.order_cancelled_byte_5 = true
show.order_cancelled_byte_6 = true
show.order_cancelled_byte_7 = true
show.order_cancelled_byte_8 = true
show.order_cancelled_byte_9 = true
show.order_cancelled_message = true
show.order_cancelled_optional_fields = true
show.order_cancelled_return_bitfields = true
show.order_execution_byte_1 = true
show.order_execution_byte_10 = true
show.order_execution_byte_11 = true
show.order_execution_byte_12 = true
show.order_execution_byte_13 = true
show.order_execution_byte_14 = true
show.order_execution_byte_15 = true
show.order_execution_byte_16 = true
show.order_execution_byte_17 = true
show.order_execution_byte_2 = true
show.order_execution_byte_3 = true
show.order_execution_byte_4 = true
show.order_execution_byte_5 = true
show.order_execution_byte_6 = true
show.order_execution_byte_7 = true
show.order_execution_byte_8 = true
show.order_execution_byte_9 = true
show.order_execution_return_bitfields = true
show.order_modified_byte_1 = true
show.order_modified_byte_10 = true
show.order_modified_byte_11 = true
show.order_modified_byte_12 = true
show.order_modified_byte_13 = true
show.order_modified_byte_14 = true
show.order_modified_byte_15 = true
show.order_modified_byte_16 = true
show.order_modified_byte_17 = true
show.order_modified_byte_2 = true
show.order_modified_byte_3 = true
show.order_modified_byte_4 = true
show.order_modified_byte_5 = true
show.order_modified_byte_6 = true
show.order_modified_byte_7 = true
show.order_modified_byte_8 = true
show.order_modified_byte_9 = true
show.order_modified_message = true
show.order_modified_optional_fields = true
show.order_modified_return_bitfields = true
show.order_rejected_byte_1 = true
show.order_rejected_byte_10 = true
show.order_rejected_byte_11 = true
show.order_rejected_byte_12 = true
show.order_rejected_byte_13 = true
show.order_rejected_byte_14 = true
show.order_rejected_byte_15 = true
show.order_rejected_byte_16 = true
show.order_rejected_byte_17 = true
show.order_rejected_byte_2 = true
show.order_rejected_byte_3 = true
show.order_rejected_byte_4 = true
show.order_rejected_byte_5 = true
show.order_rejected_byte_6 = true
show.order_rejected_byte_7 = true
show.order_rejected_byte_8 = true
show.order_rejected_byte_9 = true
show.order_rejected_message = true
show.order_rejected_optional_fields = true
show.order_rejected_return_bitfields = true
show.order_restated_byte_1 = true
show.order_restated_byte_10 = true
show.order_restated_byte_11 = true
show.order_restated_byte_12 = true
show.order_restated_byte_13 = true
show.order_restated_byte_14 = true
show.order_restated_byte_15 = true
show.order_restated_byte_16 = true
show.order_restated_byte_17 = true
show.order_restated_byte_2 = true
show.order_restated_byte_3 = true
show.order_restated_byte_4 = true
show.order_restated_byte_5 = true
show.order_restated_byte_6 = true
show.order_restated_byte_7 = true
show.order_restated_byte_8 = true
show.order_restated_byte_9 = true
show.order_restated_message = true
show.order_restated_optional_fields = true
show.order_restated_return_bitfields = true
show.packet = true
show.param_group = true
show.param_header = true
show.purge_order_message = true
show.purge_rejected_byte_1 = true
show.purge_rejected_byte_10 = true
show.purge_rejected_byte_11 = true
show.purge_rejected_byte_12 = true
show.purge_rejected_byte_13 = true
show.purge_rejected_byte_14 = true
show.purge_rejected_byte_15 = true
show.purge_rejected_byte_16 = true
show.purge_rejected_byte_17 = true
show.purge_rejected_byte_2 = true
show.purge_rejected_byte_3 = true
show.purge_rejected_byte_4 = true
show.purge_rejected_byte_5 = true
show.purge_rejected_byte_6 = true
show.purge_rejected_byte_7 = true
show.purge_rejected_byte_8 = true
show.purge_rejected_byte_9 = true
show.purge_rejected_message = true
show.purge_rejected_optional_fields = true
show.purge_rejected_return_bitfields = true
show.quote_cancelled_message = true
show.quote_execution_message = true
show.quote_restated_message = true
show.quote_result_group = true
show.quote_update = true
show.quote_update_acknowledgment_message = true
show.quote_update_message = true
show.quote_update_rejected_message = true
show.reset_risk_acknowledgment_message = true
show.return_bitfields = true
show.risk_reset_message = true
show.short_quote_update = true
show.short_quote_update_message = true
show.trade_cancel_or_correct_byte_1 = true
show.trade_cancel_or_correct_byte_10 = true
show.trade_cancel_or_correct_byte_11 = true
show.trade_cancel_or_correct_byte_12 = true
show.trade_cancel_or_correct_byte_13 = true
show.trade_cancel_or_correct_byte_14 = true
show.trade_cancel_or_correct_byte_15 = true
show.trade_cancel_or_correct_byte_16 = true
show.trade_cancel_or_correct_byte_17 = true
show.trade_cancel_or_correct_byte_2 = true
show.trade_cancel_or_correct_byte_3 = true
show.trade_cancel_or_correct_byte_4 = true
show.trade_cancel_or_correct_byte_5 = true
show.trade_cancel_or_correct_byte_6 = true
show.trade_cancel_or_correct_byte_7 = true
show.trade_cancel_or_correct_byte_8 = true
show.trade_cancel_or_correct_byte_9 = true
show.trade_cancel_or_correct_message = true
show.trade_cancel_or_correct_optional_fields = true
show.trade_cancel_or_correct_return_bitfields = true
show.unit_sequence = true
show.unit_sequences = true
show.user_modify_rejected_byte_1 = true
show.user_modify_rejected_byte_10 = true
show.user_modify_rejected_byte_11 = true
show.user_modify_rejected_byte_12 = true
show.user_modify_rejected_byte_13 = true
show.user_modify_rejected_byte_14 = true
show.user_modify_rejected_byte_15 = true
show.user_modify_rejected_byte_16 = true
show.user_modify_rejected_byte_17 = true
show.user_modify_rejected_byte_2 = true
show.user_modify_rejected_byte_3 = true
show.user_modify_rejected_byte_4 = true
show.user_modify_rejected_byte_5 = true
show.user_modify_rejected_byte_6 = true
show.user_modify_rejected_byte_7 = true
show.user_modify_rejected_byte_8 = true
show.user_modify_rejected_byte_9 = true
show.user_modify_rejected_message = true
show.user_modify_rejected_optional_fields = true
show.user_modify_rejected_return_bitfields = true
show.bitfields = false
show.message = false
show.parameter = false

-- Register Cboe Edgx Options OrderEntry Boe 2.10 Show Options
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_byte_1 = Pref.bool("Show Cancel Order Byte 1", show.cancel_order_byte_1, "Parse and add Cancel Order Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_byte_2 = Pref.bool("Show Cancel Order Byte 2", show.cancel_order_byte_2, "Parse and add Cancel Order Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_message = Pref.bool("Show Cancel Order Message", show.cancel_order_message, "Parse and add Cancel Order Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_optional_fields = Pref.bool("Show Cancel Order Optional Fields", show.cancel_order_optional_fields, "Parse and add Cancel Order Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_1 = Pref.bool("Show Cancel Rejected Byte 1", show.cancel_rejected_byte_1, "Parse and add Cancel Rejected Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_10 = Pref.bool("Show Cancel Rejected Byte 10", show.cancel_rejected_byte_10, "Parse and add Cancel Rejected Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_11 = Pref.bool("Show Cancel Rejected Byte 11", show.cancel_rejected_byte_11, "Parse and add Cancel Rejected Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_12 = Pref.bool("Show Cancel Rejected Byte 12", show.cancel_rejected_byte_12, "Parse and add Cancel Rejected Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_13 = Pref.bool("Show Cancel Rejected Byte 13", show.cancel_rejected_byte_13, "Parse and add Cancel Rejected Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_14 = Pref.bool("Show Cancel Rejected Byte 14", show.cancel_rejected_byte_14, "Parse and add Cancel Rejected Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_15 = Pref.bool("Show Cancel Rejected Byte 15", show.cancel_rejected_byte_15, "Parse and add Cancel Rejected Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_16 = Pref.bool("Show Cancel Rejected Byte 16", show.cancel_rejected_byte_16, "Parse and add Cancel Rejected Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_17 = Pref.bool("Show Cancel Rejected Byte 17", show.cancel_rejected_byte_17, "Parse and add Cancel Rejected Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_2 = Pref.bool("Show Cancel Rejected Byte 2", show.cancel_rejected_byte_2, "Parse and add Cancel Rejected Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_3 = Pref.bool("Show Cancel Rejected Byte 3", show.cancel_rejected_byte_3, "Parse and add Cancel Rejected Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_4 = Pref.bool("Show Cancel Rejected Byte 4", show.cancel_rejected_byte_4, "Parse and add Cancel Rejected Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_5 = Pref.bool("Show Cancel Rejected Byte 5", show.cancel_rejected_byte_5, "Parse and add Cancel Rejected Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_6 = Pref.bool("Show Cancel Rejected Byte 6", show.cancel_rejected_byte_6, "Parse and add Cancel Rejected Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_7 = Pref.bool("Show Cancel Rejected Byte 7", show.cancel_rejected_byte_7, "Parse and add Cancel Rejected Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_8 = Pref.bool("Show Cancel Rejected Byte 8", show.cancel_rejected_byte_8, "Parse and add Cancel Rejected Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_9 = Pref.bool("Show Cancel Rejected Byte 9", show.cancel_rejected_byte_9, "Parse and add Cancel Rejected Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_message = Pref.bool("Show Cancel Rejected Message", show.cancel_rejected_message, "Parse and add Cancel Rejected Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_optional_fields = Pref.bool("Show Cancel Rejected Optional Fields", show.cancel_rejected_optional_fields, "Parse and add Cancel Rejected Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_return_bitfields = Pref.bool("Show Cancel Rejected Return Bitfields", show.cancel_rejected_return_bitfields, "Parse and add Cancel Rejected Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_1 = Pref.bool("Show Complex Instrument Accepted Byte 1", show.complex_instrument_accepted_byte_1, "Parse and add Complex Instrument Accepted Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_10 = Pref.bool("Show Complex Instrument Accepted Byte 10", show.complex_instrument_accepted_byte_10, "Parse and add Complex Instrument Accepted Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_11 = Pref.bool("Show Complex Instrument Accepted Byte 11", show.complex_instrument_accepted_byte_11, "Parse and add Complex Instrument Accepted Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_12 = Pref.bool("Show Complex Instrument Accepted Byte 12", show.complex_instrument_accepted_byte_12, "Parse and add Complex Instrument Accepted Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_13 = Pref.bool("Show Complex Instrument Accepted Byte 13", show.complex_instrument_accepted_byte_13, "Parse and add Complex Instrument Accepted Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_14 = Pref.bool("Show Complex Instrument Accepted Byte 14", show.complex_instrument_accepted_byte_14, "Parse and add Complex Instrument Accepted Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_15 = Pref.bool("Show Complex Instrument Accepted Byte 15", show.complex_instrument_accepted_byte_15, "Parse and add Complex Instrument Accepted Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_16 = Pref.bool("Show Complex Instrument Accepted Byte 16", show.complex_instrument_accepted_byte_16, "Parse and add Complex Instrument Accepted Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_17 = Pref.bool("Show Complex Instrument Accepted Byte 17", show.complex_instrument_accepted_byte_17, "Parse and add Complex Instrument Accepted Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_2 = Pref.bool("Show Complex Instrument Accepted Byte 2", show.complex_instrument_accepted_byte_2, "Parse and add Complex Instrument Accepted Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_3 = Pref.bool("Show Complex Instrument Accepted Byte 3", show.complex_instrument_accepted_byte_3, "Parse and add Complex Instrument Accepted Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_4 = Pref.bool("Show Complex Instrument Accepted Byte 4", show.complex_instrument_accepted_byte_4, "Parse and add Complex Instrument Accepted Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_5 = Pref.bool("Show Complex Instrument Accepted Byte 5", show.complex_instrument_accepted_byte_5, "Parse and add Complex Instrument Accepted Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_6 = Pref.bool("Show Complex Instrument Accepted Byte 6", show.complex_instrument_accepted_byte_6, "Parse and add Complex Instrument Accepted Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_7 = Pref.bool("Show Complex Instrument Accepted Byte 7", show.complex_instrument_accepted_byte_7, "Parse and add Complex Instrument Accepted Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_8 = Pref.bool("Show Complex Instrument Accepted Byte 8", show.complex_instrument_accepted_byte_8, "Parse and add Complex Instrument Accepted Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_9 = Pref.bool("Show Complex Instrument Accepted Byte 9", show.complex_instrument_accepted_byte_9, "Parse and add Complex Instrument Accepted Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_message = Pref.bool("Show Complex Instrument Accepted Message", show.complex_instrument_accepted_message, "Parse and add Complex Instrument Accepted Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_optional_fields = Pref.bool("Show Complex Instrument Accepted Optional Fields", show.complex_instrument_accepted_optional_fields, "Parse and add Complex Instrument Accepted Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_return_bitfields = Pref.bool("Show Complex Instrument Accepted Return Bitfields", show.complex_instrument_accepted_return_bitfields, "Parse and add Complex Instrument Accepted Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_1 = Pref.bool("Show Complex Instrument Rejected Byte 1", show.complex_instrument_rejected_byte_1, "Parse and add Complex Instrument Rejected Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_10 = Pref.bool("Show Complex Instrument Rejected Byte 10", show.complex_instrument_rejected_byte_10, "Parse and add Complex Instrument Rejected Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_11 = Pref.bool("Show Complex Instrument Rejected Byte 11", show.complex_instrument_rejected_byte_11, "Parse and add Complex Instrument Rejected Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_12 = Pref.bool("Show Complex Instrument Rejected Byte 12", show.complex_instrument_rejected_byte_12, "Parse and add Complex Instrument Rejected Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_13 = Pref.bool("Show Complex Instrument Rejected Byte 13", show.complex_instrument_rejected_byte_13, "Parse and add Complex Instrument Rejected Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_14 = Pref.bool("Show Complex Instrument Rejected Byte 14", show.complex_instrument_rejected_byte_14, "Parse and add Complex Instrument Rejected Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_15 = Pref.bool("Show Complex Instrument Rejected Byte 15", show.complex_instrument_rejected_byte_15, "Parse and add Complex Instrument Rejected Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_16 = Pref.bool("Show Complex Instrument Rejected Byte 16", show.complex_instrument_rejected_byte_16, "Parse and add Complex Instrument Rejected Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_17 = Pref.bool("Show Complex Instrument Rejected Byte 17", show.complex_instrument_rejected_byte_17, "Parse and add Complex Instrument Rejected Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_2 = Pref.bool("Show Complex Instrument Rejected Byte 2", show.complex_instrument_rejected_byte_2, "Parse and add Complex Instrument Rejected Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_3 = Pref.bool("Show Complex Instrument Rejected Byte 3", show.complex_instrument_rejected_byte_3, "Parse and add Complex Instrument Rejected Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_4 = Pref.bool("Show Complex Instrument Rejected Byte 4", show.complex_instrument_rejected_byte_4, "Parse and add Complex Instrument Rejected Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_5 = Pref.bool("Show Complex Instrument Rejected Byte 5", show.complex_instrument_rejected_byte_5, "Parse and add Complex Instrument Rejected Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_6 = Pref.bool("Show Complex Instrument Rejected Byte 6", show.complex_instrument_rejected_byte_6, "Parse and add Complex Instrument Rejected Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_7 = Pref.bool("Show Complex Instrument Rejected Byte 7", show.complex_instrument_rejected_byte_7, "Parse and add Complex Instrument Rejected Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_8 = Pref.bool("Show Complex Instrument Rejected Byte 8", show.complex_instrument_rejected_byte_8, "Parse and add Complex Instrument Rejected Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_9 = Pref.bool("Show Complex Instrument Rejected Byte 9", show.complex_instrument_rejected_byte_9, "Parse and add Complex Instrument Rejected Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_message = Pref.bool("Show Complex Instrument Rejected Message", show.complex_instrument_rejected_message, "Parse and add Complex Instrument Rejected Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_optional_fields = Pref.bool("Show Complex Instrument Rejected Optional Fields", show.complex_instrument_rejected_optional_fields, "Parse and add Complex Instrument Rejected Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_return_bitfields = Pref.bool("Show Complex Instrument Rejected Return Bitfields", show.complex_instrument_rejected_return_bitfields, "Parse and add Complex Instrument Rejected Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_1 = Pref.bool("Show Cross Order Acknowledgment Byte 1", show.cross_order_acknowledgment_byte_1, "Parse and add Cross Order Acknowledgment Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_10 = Pref.bool("Show Cross Order Acknowledgment Byte 10", show.cross_order_acknowledgment_byte_10, "Parse and add Cross Order Acknowledgment Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_11 = Pref.bool("Show Cross Order Acknowledgment Byte 11", show.cross_order_acknowledgment_byte_11, "Parse and add Cross Order Acknowledgment Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_12 = Pref.bool("Show Cross Order Acknowledgment Byte 12", show.cross_order_acknowledgment_byte_12, "Parse and add Cross Order Acknowledgment Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_13 = Pref.bool("Show Cross Order Acknowledgment Byte 13", show.cross_order_acknowledgment_byte_13, "Parse and add Cross Order Acknowledgment Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_14 = Pref.bool("Show Cross Order Acknowledgment Byte 14", show.cross_order_acknowledgment_byte_14, "Parse and add Cross Order Acknowledgment Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_15 = Pref.bool("Show Cross Order Acknowledgment Byte 15", show.cross_order_acknowledgment_byte_15, "Parse and add Cross Order Acknowledgment Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_16 = Pref.bool("Show Cross Order Acknowledgment Byte 16", show.cross_order_acknowledgment_byte_16, "Parse and add Cross Order Acknowledgment Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_17 = Pref.bool("Show Cross Order Acknowledgment Byte 17", show.cross_order_acknowledgment_byte_17, "Parse and add Cross Order Acknowledgment Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_2 = Pref.bool("Show Cross Order Acknowledgment Byte 2", show.cross_order_acknowledgment_byte_2, "Parse and add Cross Order Acknowledgment Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_3 = Pref.bool("Show Cross Order Acknowledgment Byte 3", show.cross_order_acknowledgment_byte_3, "Parse and add Cross Order Acknowledgment Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_4 = Pref.bool("Show Cross Order Acknowledgment Byte 4", show.cross_order_acknowledgment_byte_4, "Parse and add Cross Order Acknowledgment Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_5 = Pref.bool("Show Cross Order Acknowledgment Byte 5", show.cross_order_acknowledgment_byte_5, "Parse and add Cross Order Acknowledgment Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_6 = Pref.bool("Show Cross Order Acknowledgment Byte 6", show.cross_order_acknowledgment_byte_6, "Parse and add Cross Order Acknowledgment Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_7 = Pref.bool("Show Cross Order Acknowledgment Byte 7", show.cross_order_acknowledgment_byte_7, "Parse and add Cross Order Acknowledgment Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_8 = Pref.bool("Show Cross Order Acknowledgment Byte 8", show.cross_order_acknowledgment_byte_8, "Parse and add Cross Order Acknowledgment Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_9 = Pref.bool("Show Cross Order Acknowledgment Byte 9", show.cross_order_acknowledgment_byte_9, "Parse and add Cross Order Acknowledgment Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_message = Pref.bool("Show Cross Order Acknowledgment Message", show.cross_order_acknowledgment_message, "Parse and add Cross Order Acknowledgment Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_optional_fields = Pref.bool("Show Cross Order Acknowledgment Optional Fields", show.cross_order_acknowledgment_optional_fields, "Parse and add Cross Order Acknowledgment Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_return_bitfields = Pref.bool("Show Cross Order Acknowledgment Return Bitfields", show.cross_order_acknowledgment_return_bitfields, "Parse and add Cross Order Acknowledgment Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_1 = Pref.bool("Show Cross Order Cancelled Byte 1", show.cross_order_cancelled_byte_1, "Parse and add Cross Order Cancelled Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_10 = Pref.bool("Show Cross Order Cancelled Byte 10", show.cross_order_cancelled_byte_10, "Parse and add Cross Order Cancelled Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_11 = Pref.bool("Show Cross Order Cancelled Byte 11", show.cross_order_cancelled_byte_11, "Parse and add Cross Order Cancelled Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_12 = Pref.bool("Show Cross Order Cancelled Byte 12", show.cross_order_cancelled_byte_12, "Parse and add Cross Order Cancelled Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_13 = Pref.bool("Show Cross Order Cancelled Byte 13", show.cross_order_cancelled_byte_13, "Parse and add Cross Order Cancelled Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_14 = Pref.bool("Show Cross Order Cancelled Byte 14", show.cross_order_cancelled_byte_14, "Parse and add Cross Order Cancelled Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_15 = Pref.bool("Show Cross Order Cancelled Byte 15", show.cross_order_cancelled_byte_15, "Parse and add Cross Order Cancelled Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_16 = Pref.bool("Show Cross Order Cancelled Byte 16", show.cross_order_cancelled_byte_16, "Parse and add Cross Order Cancelled Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_17 = Pref.bool("Show Cross Order Cancelled Byte 17", show.cross_order_cancelled_byte_17, "Parse and add Cross Order Cancelled Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_2 = Pref.bool("Show Cross Order Cancelled Byte 2", show.cross_order_cancelled_byte_2, "Parse and add Cross Order Cancelled Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_3 = Pref.bool("Show Cross Order Cancelled Byte 3", show.cross_order_cancelled_byte_3, "Parse and add Cross Order Cancelled Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_4 = Pref.bool("Show Cross Order Cancelled Byte 4", show.cross_order_cancelled_byte_4, "Parse and add Cross Order Cancelled Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_5 = Pref.bool("Show Cross Order Cancelled Byte 5", show.cross_order_cancelled_byte_5, "Parse and add Cross Order Cancelled Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_6 = Pref.bool("Show Cross Order Cancelled Byte 6", show.cross_order_cancelled_byte_6, "Parse and add Cross Order Cancelled Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_7 = Pref.bool("Show Cross Order Cancelled Byte 7", show.cross_order_cancelled_byte_7, "Parse and add Cross Order Cancelled Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_8 = Pref.bool("Show Cross Order Cancelled Byte 8", show.cross_order_cancelled_byte_8, "Parse and add Cross Order Cancelled Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_9 = Pref.bool("Show Cross Order Cancelled Byte 9", show.cross_order_cancelled_byte_9, "Parse and add Cross Order Cancelled Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_message = Pref.bool("Show Cross Order Cancelled Message", show.cross_order_cancelled_message, "Parse and add Cross Order Cancelled Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_optional_fields = Pref.bool("Show Cross Order Cancelled Optional Fields", show.cross_order_cancelled_optional_fields, "Parse and add Cross Order Cancelled Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_return_bitfields = Pref.bool("Show Cross Order Cancelled Return Bitfields", show.cross_order_cancelled_return_bitfields, "Parse and add Cross Order Cancelled Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_1 = Pref.bool("Show Cross Order Rejected Byte 1", show.cross_order_rejected_byte_1, "Parse and add Cross Order Rejected Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_10 = Pref.bool("Show Cross Order Rejected Byte 10", show.cross_order_rejected_byte_10, "Parse and add Cross Order Rejected Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_11 = Pref.bool("Show Cross Order Rejected Byte 11", show.cross_order_rejected_byte_11, "Parse and add Cross Order Rejected Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_12 = Pref.bool("Show Cross Order Rejected Byte 12", show.cross_order_rejected_byte_12, "Parse and add Cross Order Rejected Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_13 = Pref.bool("Show Cross Order Rejected Byte 13", show.cross_order_rejected_byte_13, "Parse and add Cross Order Rejected Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_14 = Pref.bool("Show Cross Order Rejected Byte 14", show.cross_order_rejected_byte_14, "Parse and add Cross Order Rejected Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_15 = Pref.bool("Show Cross Order Rejected Byte 15", show.cross_order_rejected_byte_15, "Parse and add Cross Order Rejected Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_16 = Pref.bool("Show Cross Order Rejected Byte 16", show.cross_order_rejected_byte_16, "Parse and add Cross Order Rejected Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_17 = Pref.bool("Show Cross Order Rejected Byte 17", show.cross_order_rejected_byte_17, "Parse and add Cross Order Rejected Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_2 = Pref.bool("Show Cross Order Rejected Byte 2", show.cross_order_rejected_byte_2, "Parse and add Cross Order Rejected Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_3 = Pref.bool("Show Cross Order Rejected Byte 3", show.cross_order_rejected_byte_3, "Parse and add Cross Order Rejected Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_4 = Pref.bool("Show Cross Order Rejected Byte 4", show.cross_order_rejected_byte_4, "Parse and add Cross Order Rejected Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_5 = Pref.bool("Show Cross Order Rejected Byte 5", show.cross_order_rejected_byte_5, "Parse and add Cross Order Rejected Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_6 = Pref.bool("Show Cross Order Rejected Byte 6", show.cross_order_rejected_byte_6, "Parse and add Cross Order Rejected Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_7 = Pref.bool("Show Cross Order Rejected Byte 7", show.cross_order_rejected_byte_7, "Parse and add Cross Order Rejected Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_8 = Pref.bool("Show Cross Order Rejected Byte 8", show.cross_order_rejected_byte_8, "Parse and add Cross Order Rejected Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_9 = Pref.bool("Show Cross Order Rejected Byte 9", show.cross_order_rejected_byte_9, "Parse and add Cross Order Rejected Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_message = Pref.bool("Show Cross Order Rejected Message", show.cross_order_rejected_message, "Parse and add Cross Order Rejected Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_optional_fields = Pref.bool("Show Cross Order Rejected Optional Fields", show.cross_order_rejected_optional_fields, "Parse and add Cross Order Rejected Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_return_bitfields = Pref.bool("Show Cross Order Rejected Return Bitfields", show.cross_order_rejected_return_bitfields, "Parse and add Cross Order Rejected Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_login_request_message = Pref.bool("Show Login Request Message", show.login_request_message, "Parse and add Login Request Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_login_response_message = Pref.bool("Show Login Response Message", show.login_response_message, "Parse and add Login Response Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_logout_message = Pref.bool("Show Logout Message", show.logout_message, "Parse and add Logout Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_mass_cancel_acknowledgment_message = Pref.bool("Show Mass Cancel Acknowledgment Message", show.mass_cancel_acknowledgment_message, "Parse and add Mass Cancel Acknowledgment Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_message_header = Pref.bool("Show Message Header", show.message_header, "Parse and add Message Header to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_byte_1 = Pref.bool("Show Modify Order Byte 1", show.modify_order_byte_1, "Parse and add Modify Order Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_byte_2 = Pref.bool("Show Modify Order Byte 2", show.modify_order_byte_2, "Parse and add Modify Order Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_message = Pref.bool("Show Modify Order Message", show.modify_order_message, "Parse and add Modify Order Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_optional_fields = Pref.bool("Show Modify Order Optional Fields", show.modify_order_optional_fields, "Parse and add Modify Order Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_byte_1 = Pref.bool("Show New Complex Instrument Byte 1", show.new_complex_instrument_byte_1, "Parse and add New Complex Instrument Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_message = Pref.bool("Show New Complex Instrument Message", show.new_complex_instrument_message, "Parse and add New Complex Instrument Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_optional_fields = Pref.bool("Show New Complex Instrument Optional Fields", show.new_complex_instrument_optional_fields, "Parse and add New Complex Instrument Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_1 = Pref.bool("Show New Order Byte 1", show.new_order_byte_1, "Parse and add New Order Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_2 = Pref.bool("Show New Order Byte 2", show.new_order_byte_2, "Parse and add New Order Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_3 = Pref.bool("Show New Order Byte 3", show.new_order_byte_3, "Parse and add New Order Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_4 = Pref.bool("Show New Order Byte 4", show.new_order_byte_4, "Parse and add New Order Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_5 = Pref.bool("Show New Order Byte 5", show.new_order_byte_5, "Parse and add New Order Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_6 = Pref.bool("Show New Order Byte 6", show.new_order_byte_6, "Parse and add New Order Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_7 = Pref.bool("Show New Order Byte 7", show.new_order_byte_7, "Parse and add New Order Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_8 = Pref.bool("Show New Order Byte 8", show.new_order_byte_8, "Parse and add New Order Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_9 = Pref.bool("Show New Order Byte 9", show.new_order_byte_9, "Parse and add New Order Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_complex_message = Pref.bool("Show New Order Complex Message", show.new_order_complex_message, "Parse and add New Order Complex Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_1 = Pref.bool("Show New Order Cross Byte 1", show.new_order_cross_byte_1, "Parse and add New Order Cross Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_2 = Pref.bool("Show New Order Cross Byte 2", show.new_order_cross_byte_2, "Parse and add New Order Cross Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_3 = Pref.bool("Show New Order Cross Byte 3", show.new_order_cross_byte_3, "Parse and add New Order Cross Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_4 = Pref.bool("Show New Order Cross Byte 4", show.new_order_cross_byte_4, "Parse and add New Order Cross Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_message = Pref.bool("Show New Order Cross Message", show.new_order_cross_message, "Parse and add New Order Cross Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_1 = Pref.bool("Show New Order Cross Multileg Byte 1", show.new_order_cross_multileg_byte_1, "Parse and add New Order Cross Multileg Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_2 = Pref.bool("Show New Order Cross Multileg Byte 2", show.new_order_cross_multileg_byte_2, "Parse and add New Order Cross Multileg Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_3 = Pref.bool("Show New Order Cross Multileg Byte 3", show.new_order_cross_multileg_byte_3, "Parse and add New Order Cross Multileg Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_4 = Pref.bool("Show New Order Cross Multileg Byte 4", show.new_order_cross_multileg_byte_4, "Parse and add New Order Cross Multileg Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_5 = Pref.bool("Show New Order Cross Multileg Byte 5", show.new_order_cross_multileg_byte_5, "Parse and add New Order Cross Multileg Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_message = Pref.bool("Show New Order Cross Multileg Message", show.new_order_cross_multileg_message, "Parse and add New Order Cross Multileg Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_optional_fields = Pref.bool("Show New Order Cross Multileg Optional Fields", show.new_order_cross_multileg_optional_fields, "Parse and add New Order Cross Multileg Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_optional_fields = Pref.bool("Show New Order Cross Optional Fields", show.new_order_cross_optional_fields, "Parse and add New Order Cross Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_message = Pref.bool("Show New Order Message", show.new_order_message, "Parse and add New Order Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_optional_fields = Pref.bool("Show New Order Optional Fields", show.new_order_optional_fields, "Parse and add New Order Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_1 = Pref.bool("Show Order Acknowledgment Byte 1", show.order_acknowledgment_byte_1, "Parse and add Order Acknowledgment Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_10 = Pref.bool("Show Order Acknowledgment Byte 10", show.order_acknowledgment_byte_10, "Parse and add Order Acknowledgment Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_11 = Pref.bool("Show Order Acknowledgment Byte 11", show.order_acknowledgment_byte_11, "Parse and add Order Acknowledgment Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_12 = Pref.bool("Show Order Acknowledgment Byte 12", show.order_acknowledgment_byte_12, "Parse and add Order Acknowledgment Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_13 = Pref.bool("Show Order Acknowledgment Byte 13", show.order_acknowledgment_byte_13, "Parse and add Order Acknowledgment Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_14 = Pref.bool("Show Order Acknowledgment Byte 14", show.order_acknowledgment_byte_14, "Parse and add Order Acknowledgment Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_15 = Pref.bool("Show Order Acknowledgment Byte 15", show.order_acknowledgment_byte_15, "Parse and add Order Acknowledgment Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_16 = Pref.bool("Show Order Acknowledgment Byte 16", show.order_acknowledgment_byte_16, "Parse and add Order Acknowledgment Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_17 = Pref.bool("Show Order Acknowledgment Byte 17", show.order_acknowledgment_byte_17, "Parse and add Order Acknowledgment Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_2 = Pref.bool("Show Order Acknowledgment Byte 2", show.order_acknowledgment_byte_2, "Parse and add Order Acknowledgment Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_3 = Pref.bool("Show Order Acknowledgment Byte 3", show.order_acknowledgment_byte_3, "Parse and add Order Acknowledgment Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_4 = Pref.bool("Show Order Acknowledgment Byte 4", show.order_acknowledgment_byte_4, "Parse and add Order Acknowledgment Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_5 = Pref.bool("Show Order Acknowledgment Byte 5", show.order_acknowledgment_byte_5, "Parse and add Order Acknowledgment Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_6 = Pref.bool("Show Order Acknowledgment Byte 6", show.order_acknowledgment_byte_6, "Parse and add Order Acknowledgment Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_7 = Pref.bool("Show Order Acknowledgment Byte 7", show.order_acknowledgment_byte_7, "Parse and add Order Acknowledgment Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_8 = Pref.bool("Show Order Acknowledgment Byte 8", show.order_acknowledgment_byte_8, "Parse and add Order Acknowledgment Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_9 = Pref.bool("Show Order Acknowledgment Byte 9", show.order_acknowledgment_byte_9, "Parse and add Order Acknowledgment Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_message = Pref.bool("Show Order Acknowledgment Message", show.order_acknowledgment_message, "Parse and add Order Acknowledgment Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_optional_fields = Pref.bool("Show Order Acknowledgment Optional Fields", show.order_acknowledgment_optional_fields, "Parse and add Order Acknowledgment Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_return_bitfields = Pref.bool("Show Order Acknowledgment Return Bitfields", show.order_acknowledgment_return_bitfields, "Parse and add Order Acknowledgment Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_1 = Pref.bool("Show Order Cancelled Byte 1", show.order_cancelled_byte_1, "Parse and add Order Cancelled Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_10 = Pref.bool("Show Order Cancelled Byte 10", show.order_cancelled_byte_10, "Parse and add Order Cancelled Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_11 = Pref.bool("Show Order Cancelled Byte 11", show.order_cancelled_byte_11, "Parse and add Order Cancelled Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_12 = Pref.bool("Show Order Cancelled Byte 12", show.order_cancelled_byte_12, "Parse and add Order Cancelled Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_13 = Pref.bool("Show Order Cancelled Byte 13", show.order_cancelled_byte_13, "Parse and add Order Cancelled Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_14 = Pref.bool("Show Order Cancelled Byte 14", show.order_cancelled_byte_14, "Parse and add Order Cancelled Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_15 = Pref.bool("Show Order Cancelled Byte 15", show.order_cancelled_byte_15, "Parse and add Order Cancelled Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_16 = Pref.bool("Show Order Cancelled Byte 16", show.order_cancelled_byte_16, "Parse and add Order Cancelled Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_17 = Pref.bool("Show Order Cancelled Byte 17", show.order_cancelled_byte_17, "Parse and add Order Cancelled Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_2 = Pref.bool("Show Order Cancelled Byte 2", show.order_cancelled_byte_2, "Parse and add Order Cancelled Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_3 = Pref.bool("Show Order Cancelled Byte 3", show.order_cancelled_byte_3, "Parse and add Order Cancelled Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_4 = Pref.bool("Show Order Cancelled Byte 4", show.order_cancelled_byte_4, "Parse and add Order Cancelled Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_5 = Pref.bool("Show Order Cancelled Byte 5", show.order_cancelled_byte_5, "Parse and add Order Cancelled Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_6 = Pref.bool("Show Order Cancelled Byte 6", show.order_cancelled_byte_6, "Parse and add Order Cancelled Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_7 = Pref.bool("Show Order Cancelled Byte 7", show.order_cancelled_byte_7, "Parse and add Order Cancelled Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_8 = Pref.bool("Show Order Cancelled Byte 8", show.order_cancelled_byte_8, "Parse and add Order Cancelled Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_9 = Pref.bool("Show Order Cancelled Byte 9", show.order_cancelled_byte_9, "Parse and add Order Cancelled Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_message = Pref.bool("Show Order Cancelled Message", show.order_cancelled_message, "Parse and add Order Cancelled Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_optional_fields = Pref.bool("Show Order Cancelled Optional Fields", show.order_cancelled_optional_fields, "Parse and add Order Cancelled Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_return_bitfields = Pref.bool("Show Order Cancelled Return Bitfields", show.order_cancelled_return_bitfields, "Parse and add Order Cancelled Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_1 = Pref.bool("Show Order Execution Byte 1", show.order_execution_byte_1, "Parse and add Order Execution Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_10 = Pref.bool("Show Order Execution Byte 10", show.order_execution_byte_10, "Parse and add Order Execution Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_11 = Pref.bool("Show Order Execution Byte 11", show.order_execution_byte_11, "Parse and add Order Execution Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_12 = Pref.bool("Show Order Execution Byte 12", show.order_execution_byte_12, "Parse and add Order Execution Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_13 = Pref.bool("Show Order Execution Byte 13", show.order_execution_byte_13, "Parse and add Order Execution Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_14 = Pref.bool("Show Order Execution Byte 14", show.order_execution_byte_14, "Parse and add Order Execution Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_15 = Pref.bool("Show Order Execution Byte 15", show.order_execution_byte_15, "Parse and add Order Execution Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_16 = Pref.bool("Show Order Execution Byte 16", show.order_execution_byte_16, "Parse and add Order Execution Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_17 = Pref.bool("Show Order Execution Byte 17", show.order_execution_byte_17, "Parse and add Order Execution Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_2 = Pref.bool("Show Order Execution Byte 2", show.order_execution_byte_2, "Parse and add Order Execution Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_3 = Pref.bool("Show Order Execution Byte 3", show.order_execution_byte_3, "Parse and add Order Execution Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_4 = Pref.bool("Show Order Execution Byte 4", show.order_execution_byte_4, "Parse and add Order Execution Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_5 = Pref.bool("Show Order Execution Byte 5", show.order_execution_byte_5, "Parse and add Order Execution Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_6 = Pref.bool("Show Order Execution Byte 6", show.order_execution_byte_6, "Parse and add Order Execution Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_7 = Pref.bool("Show Order Execution Byte 7", show.order_execution_byte_7, "Parse and add Order Execution Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_8 = Pref.bool("Show Order Execution Byte 8", show.order_execution_byte_8, "Parse and add Order Execution Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_9 = Pref.bool("Show Order Execution Byte 9", show.order_execution_byte_9, "Parse and add Order Execution Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_return_bitfields = Pref.bool("Show Order Execution Return Bitfields", show.order_execution_return_bitfields, "Parse and add Order Execution Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_1 = Pref.bool("Show Order Modified Byte 1", show.order_modified_byte_1, "Parse and add Order Modified Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_10 = Pref.bool("Show Order Modified Byte 10", show.order_modified_byte_10, "Parse and add Order Modified Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_11 = Pref.bool("Show Order Modified Byte 11", show.order_modified_byte_11, "Parse and add Order Modified Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_12 = Pref.bool("Show Order Modified Byte 12", show.order_modified_byte_12, "Parse and add Order Modified Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_13 = Pref.bool("Show Order Modified Byte 13", show.order_modified_byte_13, "Parse and add Order Modified Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_14 = Pref.bool("Show Order Modified Byte 14", show.order_modified_byte_14, "Parse and add Order Modified Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_15 = Pref.bool("Show Order Modified Byte 15", show.order_modified_byte_15, "Parse and add Order Modified Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_16 = Pref.bool("Show Order Modified Byte 16", show.order_modified_byte_16, "Parse and add Order Modified Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_17 = Pref.bool("Show Order Modified Byte 17", show.order_modified_byte_17, "Parse and add Order Modified Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_2 = Pref.bool("Show Order Modified Byte 2", show.order_modified_byte_2, "Parse and add Order Modified Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_3 = Pref.bool("Show Order Modified Byte 3", show.order_modified_byte_3, "Parse and add Order Modified Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_4 = Pref.bool("Show Order Modified Byte 4", show.order_modified_byte_4, "Parse and add Order Modified Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_5 = Pref.bool("Show Order Modified Byte 5", show.order_modified_byte_5, "Parse and add Order Modified Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_6 = Pref.bool("Show Order Modified Byte 6", show.order_modified_byte_6, "Parse and add Order Modified Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_7 = Pref.bool("Show Order Modified Byte 7", show.order_modified_byte_7, "Parse and add Order Modified Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_8 = Pref.bool("Show Order Modified Byte 8", show.order_modified_byte_8, "Parse and add Order Modified Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_9 = Pref.bool("Show Order Modified Byte 9", show.order_modified_byte_9, "Parse and add Order Modified Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_message = Pref.bool("Show Order Modified Message", show.order_modified_message, "Parse and add Order Modified Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_optional_fields = Pref.bool("Show Order Modified Optional Fields", show.order_modified_optional_fields, "Parse and add Order Modified Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_return_bitfields = Pref.bool("Show Order Modified Return Bitfields", show.order_modified_return_bitfields, "Parse and add Order Modified Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_1 = Pref.bool("Show Order Rejected Byte 1", show.order_rejected_byte_1, "Parse and add Order Rejected Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_10 = Pref.bool("Show Order Rejected Byte 10", show.order_rejected_byte_10, "Parse and add Order Rejected Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_11 = Pref.bool("Show Order Rejected Byte 11", show.order_rejected_byte_11, "Parse and add Order Rejected Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_12 = Pref.bool("Show Order Rejected Byte 12", show.order_rejected_byte_12, "Parse and add Order Rejected Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_13 = Pref.bool("Show Order Rejected Byte 13", show.order_rejected_byte_13, "Parse and add Order Rejected Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_14 = Pref.bool("Show Order Rejected Byte 14", show.order_rejected_byte_14, "Parse and add Order Rejected Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_15 = Pref.bool("Show Order Rejected Byte 15", show.order_rejected_byte_15, "Parse and add Order Rejected Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_16 = Pref.bool("Show Order Rejected Byte 16", show.order_rejected_byte_16, "Parse and add Order Rejected Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_17 = Pref.bool("Show Order Rejected Byte 17", show.order_rejected_byte_17, "Parse and add Order Rejected Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_2 = Pref.bool("Show Order Rejected Byte 2", show.order_rejected_byte_2, "Parse and add Order Rejected Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_3 = Pref.bool("Show Order Rejected Byte 3", show.order_rejected_byte_3, "Parse and add Order Rejected Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_4 = Pref.bool("Show Order Rejected Byte 4", show.order_rejected_byte_4, "Parse and add Order Rejected Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_5 = Pref.bool("Show Order Rejected Byte 5", show.order_rejected_byte_5, "Parse and add Order Rejected Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_6 = Pref.bool("Show Order Rejected Byte 6", show.order_rejected_byte_6, "Parse and add Order Rejected Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_7 = Pref.bool("Show Order Rejected Byte 7", show.order_rejected_byte_7, "Parse and add Order Rejected Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_8 = Pref.bool("Show Order Rejected Byte 8", show.order_rejected_byte_8, "Parse and add Order Rejected Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_9 = Pref.bool("Show Order Rejected Byte 9", show.order_rejected_byte_9, "Parse and add Order Rejected Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_message = Pref.bool("Show Order Rejected Message", show.order_rejected_message, "Parse and add Order Rejected Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_optional_fields = Pref.bool("Show Order Rejected Optional Fields", show.order_rejected_optional_fields, "Parse and add Order Rejected Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_return_bitfields = Pref.bool("Show Order Rejected Return Bitfields", show.order_rejected_return_bitfields, "Parse and add Order Rejected Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_1 = Pref.bool("Show Order Restated Byte 1", show.order_restated_byte_1, "Parse and add Order Restated Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_10 = Pref.bool("Show Order Restated Byte 10", show.order_restated_byte_10, "Parse and add Order Restated Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_11 = Pref.bool("Show Order Restated Byte 11", show.order_restated_byte_11, "Parse and add Order Restated Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_12 = Pref.bool("Show Order Restated Byte 12", show.order_restated_byte_12, "Parse and add Order Restated Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_13 = Pref.bool("Show Order Restated Byte 13", show.order_restated_byte_13, "Parse and add Order Restated Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_14 = Pref.bool("Show Order Restated Byte 14", show.order_restated_byte_14, "Parse and add Order Restated Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_15 = Pref.bool("Show Order Restated Byte 15", show.order_restated_byte_15, "Parse and add Order Restated Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_16 = Pref.bool("Show Order Restated Byte 16", show.order_restated_byte_16, "Parse and add Order Restated Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_17 = Pref.bool("Show Order Restated Byte 17", show.order_restated_byte_17, "Parse and add Order Restated Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_2 = Pref.bool("Show Order Restated Byte 2", show.order_restated_byte_2, "Parse and add Order Restated Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_3 = Pref.bool("Show Order Restated Byte 3", show.order_restated_byte_3, "Parse and add Order Restated Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_4 = Pref.bool("Show Order Restated Byte 4", show.order_restated_byte_4, "Parse and add Order Restated Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_5 = Pref.bool("Show Order Restated Byte 5", show.order_restated_byte_5, "Parse and add Order Restated Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_6 = Pref.bool("Show Order Restated Byte 6", show.order_restated_byte_6, "Parse and add Order Restated Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_7 = Pref.bool("Show Order Restated Byte 7", show.order_restated_byte_7, "Parse and add Order Restated Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_8 = Pref.bool("Show Order Restated Byte 8", show.order_restated_byte_8, "Parse and add Order Restated Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_9 = Pref.bool("Show Order Restated Byte 9", show.order_restated_byte_9, "Parse and add Order Restated Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_message = Pref.bool("Show Order Restated Message", show.order_restated_message, "Parse and add Order Restated Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_optional_fields = Pref.bool("Show Order Restated Optional Fields", show.order_restated_optional_fields, "Parse and add Order Restated Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_return_bitfields = Pref.bool("Show Order Restated Return Bitfields", show.order_restated_return_bitfields, "Parse and add Order Restated Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_packet = Pref.bool("Show Packet", show.packet, "Parse and add Packet to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_param_group = Pref.bool("Show Param Group", show.param_group, "Parse and add Param Group to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_param_header = Pref.bool("Show Param Header", show.param_header, "Parse and add Param Header to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_order_message = Pref.bool("Show Purge Order Message", show.purge_order_message, "Parse and add Purge Order Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_1 = Pref.bool("Show Purge Rejected Byte 1", show.purge_rejected_byte_1, "Parse and add Purge Rejected Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_10 = Pref.bool("Show Purge Rejected Byte 10", show.purge_rejected_byte_10, "Parse and add Purge Rejected Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_11 = Pref.bool("Show Purge Rejected Byte 11", show.purge_rejected_byte_11, "Parse and add Purge Rejected Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_12 = Pref.bool("Show Purge Rejected Byte 12", show.purge_rejected_byte_12, "Parse and add Purge Rejected Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_13 = Pref.bool("Show Purge Rejected Byte 13", show.purge_rejected_byte_13, "Parse and add Purge Rejected Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_14 = Pref.bool("Show Purge Rejected Byte 14", show.purge_rejected_byte_14, "Parse and add Purge Rejected Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_15 = Pref.bool("Show Purge Rejected Byte 15", show.purge_rejected_byte_15, "Parse and add Purge Rejected Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_16 = Pref.bool("Show Purge Rejected Byte 16", show.purge_rejected_byte_16, "Parse and add Purge Rejected Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_17 = Pref.bool("Show Purge Rejected Byte 17", show.purge_rejected_byte_17, "Parse and add Purge Rejected Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_2 = Pref.bool("Show Purge Rejected Byte 2", show.purge_rejected_byte_2, "Parse and add Purge Rejected Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_3 = Pref.bool("Show Purge Rejected Byte 3", show.purge_rejected_byte_3, "Parse and add Purge Rejected Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_4 = Pref.bool("Show Purge Rejected Byte 4", show.purge_rejected_byte_4, "Parse and add Purge Rejected Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_5 = Pref.bool("Show Purge Rejected Byte 5", show.purge_rejected_byte_5, "Parse and add Purge Rejected Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_6 = Pref.bool("Show Purge Rejected Byte 6", show.purge_rejected_byte_6, "Parse and add Purge Rejected Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_7 = Pref.bool("Show Purge Rejected Byte 7", show.purge_rejected_byte_7, "Parse and add Purge Rejected Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_8 = Pref.bool("Show Purge Rejected Byte 8", show.purge_rejected_byte_8, "Parse and add Purge Rejected Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_9 = Pref.bool("Show Purge Rejected Byte 9", show.purge_rejected_byte_9, "Parse and add Purge Rejected Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_message = Pref.bool("Show Purge Rejected Message", show.purge_rejected_message, "Parse and add Purge Rejected Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_optional_fields = Pref.bool("Show Purge Rejected Optional Fields", show.purge_rejected_optional_fields, "Parse and add Purge Rejected Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_return_bitfields = Pref.bool("Show Purge Rejected Return Bitfields", show.purge_rejected_return_bitfields, "Parse and add Purge Rejected Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_cancelled_message = Pref.bool("Show Quote Cancelled Message", show.quote_cancelled_message, "Parse and add Quote Cancelled Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_execution_message = Pref.bool("Show Quote Execution Message", show.quote_execution_message, "Parse and add Quote Execution Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_restated_message = Pref.bool("Show Quote Restated Message", show.quote_restated_message, "Parse and add Quote Restated Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_result_group = Pref.bool("Show Quote Result Group", show.quote_result_group, "Parse and add Quote Result Group to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update = Pref.bool("Show Quote Update", show.quote_update, "Parse and add Quote Update to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_acknowledgment_message = Pref.bool("Show Quote Update Acknowledgment Message", show.quote_update_acknowledgment_message, "Parse and add Quote Update Acknowledgment Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_message = Pref.bool("Show Quote Update Message", show.quote_update_message, "Parse and add Quote Update Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_rejected_message = Pref.bool("Show Quote Update Rejected Message", show.quote_update_rejected_message, "Parse and add Quote Update Rejected Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_reset_risk_acknowledgment_message = Pref.bool("Show Reset Risk Acknowledgment Message", show.reset_risk_acknowledgment_message, "Parse and add Reset Risk Acknowledgment Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_return_bitfields = Pref.bool("Show Return Bitfields", show.return_bitfields, "Parse and add Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_risk_reset_message = Pref.bool("Show Risk Reset Message", show.risk_reset_message, "Parse and add Risk Reset Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_short_quote_update = Pref.bool("Show Short Quote Update", show.short_quote_update, "Parse and add Short Quote Update to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_short_quote_update_message = Pref.bool("Show Short Quote Update Message", show.short_quote_update_message, "Parse and add Short Quote Update Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_1 = Pref.bool("Show Trade Cancel Or Correct Byte 1", show.trade_cancel_or_correct_byte_1, "Parse and add Trade Cancel Or Correct Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_10 = Pref.bool("Show Trade Cancel Or Correct Byte 10", show.trade_cancel_or_correct_byte_10, "Parse and add Trade Cancel Or Correct Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_11 = Pref.bool("Show Trade Cancel Or Correct Byte 11", show.trade_cancel_or_correct_byte_11, "Parse and add Trade Cancel Or Correct Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_12 = Pref.bool("Show Trade Cancel Or Correct Byte 12", show.trade_cancel_or_correct_byte_12, "Parse and add Trade Cancel Or Correct Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_13 = Pref.bool("Show Trade Cancel Or Correct Byte 13", show.trade_cancel_or_correct_byte_13, "Parse and add Trade Cancel Or Correct Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_14 = Pref.bool("Show Trade Cancel Or Correct Byte 14", show.trade_cancel_or_correct_byte_14, "Parse and add Trade Cancel Or Correct Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_15 = Pref.bool("Show Trade Cancel Or Correct Byte 15", show.trade_cancel_or_correct_byte_15, "Parse and add Trade Cancel Or Correct Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_16 = Pref.bool("Show Trade Cancel Or Correct Byte 16", show.trade_cancel_or_correct_byte_16, "Parse and add Trade Cancel Or Correct Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_17 = Pref.bool("Show Trade Cancel Or Correct Byte 17", show.trade_cancel_or_correct_byte_17, "Parse and add Trade Cancel Or Correct Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_2 = Pref.bool("Show Trade Cancel Or Correct Byte 2", show.trade_cancel_or_correct_byte_2, "Parse and add Trade Cancel Or Correct Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_3 = Pref.bool("Show Trade Cancel Or Correct Byte 3", show.trade_cancel_or_correct_byte_3, "Parse and add Trade Cancel Or Correct Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_4 = Pref.bool("Show Trade Cancel Or Correct Byte 4", show.trade_cancel_or_correct_byte_4, "Parse and add Trade Cancel Or Correct Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_5 = Pref.bool("Show Trade Cancel Or Correct Byte 5", show.trade_cancel_or_correct_byte_5, "Parse and add Trade Cancel Or Correct Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_6 = Pref.bool("Show Trade Cancel Or Correct Byte 6", show.trade_cancel_or_correct_byte_6, "Parse and add Trade Cancel Or Correct Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_7 = Pref.bool("Show Trade Cancel Or Correct Byte 7", show.trade_cancel_or_correct_byte_7, "Parse and add Trade Cancel Or Correct Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_8 = Pref.bool("Show Trade Cancel Or Correct Byte 8", show.trade_cancel_or_correct_byte_8, "Parse and add Trade Cancel Or Correct Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_9 = Pref.bool("Show Trade Cancel Or Correct Byte 9", show.trade_cancel_or_correct_byte_9, "Parse and add Trade Cancel Or Correct Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_message = Pref.bool("Show Trade Cancel Or Correct Message", show.trade_cancel_or_correct_message, "Parse and add Trade Cancel Or Correct Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_optional_fields = Pref.bool("Show Trade Cancel Or Correct Optional Fields", show.trade_cancel_or_correct_optional_fields, "Parse and add Trade Cancel Or Correct Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_return_bitfields = Pref.bool("Show Trade Cancel Or Correct Return Bitfields", show.trade_cancel_or_correct_return_bitfields, "Parse and add Trade Cancel Or Correct Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_unit_sequence = Pref.bool("Show Unit Sequence", show.unit_sequence, "Parse and add Unit Sequence to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_unit_sequences = Pref.bool("Show Unit Sequences", show.unit_sequences, "Parse and add Unit Sequences to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_1 = Pref.bool("Show User Modify Rejected Byte 1", show.user_modify_rejected_byte_1, "Parse and add User Modify Rejected Byte 1 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_10 = Pref.bool("Show User Modify Rejected Byte 10", show.user_modify_rejected_byte_10, "Parse and add User Modify Rejected Byte 10 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_11 = Pref.bool("Show User Modify Rejected Byte 11", show.user_modify_rejected_byte_11, "Parse and add User Modify Rejected Byte 11 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_12 = Pref.bool("Show User Modify Rejected Byte 12", show.user_modify_rejected_byte_12, "Parse and add User Modify Rejected Byte 12 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_13 = Pref.bool("Show User Modify Rejected Byte 13", show.user_modify_rejected_byte_13, "Parse and add User Modify Rejected Byte 13 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_14 = Pref.bool("Show User Modify Rejected Byte 14", show.user_modify_rejected_byte_14, "Parse and add User Modify Rejected Byte 14 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_15 = Pref.bool("Show User Modify Rejected Byte 15", show.user_modify_rejected_byte_15, "Parse and add User Modify Rejected Byte 15 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_16 = Pref.bool("Show User Modify Rejected Byte 16", show.user_modify_rejected_byte_16, "Parse and add User Modify Rejected Byte 16 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_17 = Pref.bool("Show User Modify Rejected Byte 17", show.user_modify_rejected_byte_17, "Parse and add User Modify Rejected Byte 17 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_2 = Pref.bool("Show User Modify Rejected Byte 2", show.user_modify_rejected_byte_2, "Parse and add User Modify Rejected Byte 2 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_3 = Pref.bool("Show User Modify Rejected Byte 3", show.user_modify_rejected_byte_3, "Parse and add User Modify Rejected Byte 3 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_4 = Pref.bool("Show User Modify Rejected Byte 4", show.user_modify_rejected_byte_4, "Parse and add User Modify Rejected Byte 4 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_5 = Pref.bool("Show User Modify Rejected Byte 5", show.user_modify_rejected_byte_5, "Parse and add User Modify Rejected Byte 5 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_6 = Pref.bool("Show User Modify Rejected Byte 6", show.user_modify_rejected_byte_6, "Parse and add User Modify Rejected Byte 6 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_7 = Pref.bool("Show User Modify Rejected Byte 7", show.user_modify_rejected_byte_7, "Parse and add User Modify Rejected Byte 7 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_8 = Pref.bool("Show User Modify Rejected Byte 8", show.user_modify_rejected_byte_8, "Parse and add User Modify Rejected Byte 8 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_9 = Pref.bool("Show User Modify Rejected Byte 9", show.user_modify_rejected_byte_9, "Parse and add User Modify Rejected Byte 9 to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_message = Pref.bool("Show User Modify Rejected Message", show.user_modify_rejected_message, "Parse and add User Modify Rejected Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_optional_fields = Pref.bool("Show User Modify Rejected Optional Fields", show.user_modify_rejected_optional_fields, "Parse and add User Modify Rejected Optional Fields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_return_bitfields = Pref.bool("Show User Modify Rejected Return Bitfields", show.user_modify_rejected_return_bitfields, "Parse and add User Modify Rejected Return Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_bitfields = Pref.bool("Show Bitfields", show.bitfields, "Parse and add Bitfields to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_message = Pref.bool("Show Message", show.message, "Parse and add Message to protocol tree")
omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_parameter = Pref.bool("Show Parameter", show.parameter, "Parse and add Parameter to protocol tree")

-- Handle changed preferences
function omi_cboe_edgx_options_orderentry_boe_v2_10.prefs_changed()
  local changed = false

  -- Check if show options have changed
  if show.cancel_order_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_byte_1 then
    show.cancel_order_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_byte_1
    changed = true
  end
  if show.cancel_order_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_byte_2 then
    show.cancel_order_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_byte_2
    changed = true
  end
  if show.cancel_order_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_message then
    show.cancel_order_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_message
    changed = true
  end
  if show.cancel_order_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_optional_fields then
    show.cancel_order_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_order_optional_fields
    changed = true
  end
  if show.cancel_rejected_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_1 then
    show.cancel_rejected_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_1
    changed = true
  end
  if show.cancel_rejected_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_10 then
    show.cancel_rejected_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_10
    changed = true
  end
  if show.cancel_rejected_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_11 then
    show.cancel_rejected_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_11
    changed = true
  end
  if show.cancel_rejected_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_12 then
    show.cancel_rejected_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_12
    changed = true
  end
  if show.cancel_rejected_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_13 then
    show.cancel_rejected_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_13
    changed = true
  end
  if show.cancel_rejected_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_14 then
    show.cancel_rejected_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_14
    changed = true
  end
  if show.cancel_rejected_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_15 then
    show.cancel_rejected_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_15
    changed = true
  end
  if show.cancel_rejected_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_16 then
    show.cancel_rejected_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_16
    changed = true
  end
  if show.cancel_rejected_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_17 then
    show.cancel_rejected_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_17
    changed = true
  end
  if show.cancel_rejected_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_2 then
    show.cancel_rejected_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_2
    changed = true
  end
  if show.cancel_rejected_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_3 then
    show.cancel_rejected_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_3
    changed = true
  end
  if show.cancel_rejected_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_4 then
    show.cancel_rejected_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_4
    changed = true
  end
  if show.cancel_rejected_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_5 then
    show.cancel_rejected_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_5
    changed = true
  end
  if show.cancel_rejected_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_6 then
    show.cancel_rejected_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_6
    changed = true
  end
  if show.cancel_rejected_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_7 then
    show.cancel_rejected_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_7
    changed = true
  end
  if show.cancel_rejected_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_8 then
    show.cancel_rejected_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_8
    changed = true
  end
  if show.cancel_rejected_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_9 then
    show.cancel_rejected_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_byte_9
    changed = true
  end
  if show.cancel_rejected_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_message then
    show.cancel_rejected_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_message
    changed = true
  end
  if show.cancel_rejected_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_optional_fields then
    show.cancel_rejected_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_optional_fields
    changed = true
  end
  if show.cancel_rejected_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_return_bitfields then
    show.cancel_rejected_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cancel_rejected_return_bitfields
    changed = true
  end
  if show.complex_instrument_accepted_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_1 then
    show.complex_instrument_accepted_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_1
    changed = true
  end
  if show.complex_instrument_accepted_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_10 then
    show.complex_instrument_accepted_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_10
    changed = true
  end
  if show.complex_instrument_accepted_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_11 then
    show.complex_instrument_accepted_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_11
    changed = true
  end
  if show.complex_instrument_accepted_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_12 then
    show.complex_instrument_accepted_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_12
    changed = true
  end
  if show.complex_instrument_accepted_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_13 then
    show.complex_instrument_accepted_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_13
    changed = true
  end
  if show.complex_instrument_accepted_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_14 then
    show.complex_instrument_accepted_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_14
    changed = true
  end
  if show.complex_instrument_accepted_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_15 then
    show.complex_instrument_accepted_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_15
    changed = true
  end
  if show.complex_instrument_accepted_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_16 then
    show.complex_instrument_accepted_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_16
    changed = true
  end
  if show.complex_instrument_accepted_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_17 then
    show.complex_instrument_accepted_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_17
    changed = true
  end
  if show.complex_instrument_accepted_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_2 then
    show.complex_instrument_accepted_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_2
    changed = true
  end
  if show.complex_instrument_accepted_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_3 then
    show.complex_instrument_accepted_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_3
    changed = true
  end
  if show.complex_instrument_accepted_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_4 then
    show.complex_instrument_accepted_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_4
    changed = true
  end
  if show.complex_instrument_accepted_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_5 then
    show.complex_instrument_accepted_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_5
    changed = true
  end
  if show.complex_instrument_accepted_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_6 then
    show.complex_instrument_accepted_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_6
    changed = true
  end
  if show.complex_instrument_accepted_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_7 then
    show.complex_instrument_accepted_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_7
    changed = true
  end
  if show.complex_instrument_accepted_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_8 then
    show.complex_instrument_accepted_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_8
    changed = true
  end
  if show.complex_instrument_accepted_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_9 then
    show.complex_instrument_accepted_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_byte_9
    changed = true
  end
  if show.complex_instrument_accepted_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_message then
    show.complex_instrument_accepted_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_message
    changed = true
  end
  if show.complex_instrument_accepted_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_optional_fields then
    show.complex_instrument_accepted_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_optional_fields
    changed = true
  end
  if show.complex_instrument_accepted_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_return_bitfields then
    show.complex_instrument_accepted_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_accepted_return_bitfields
    changed = true
  end
  if show.complex_instrument_rejected_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_1 then
    show.complex_instrument_rejected_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_1
    changed = true
  end
  if show.complex_instrument_rejected_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_10 then
    show.complex_instrument_rejected_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_10
    changed = true
  end
  if show.complex_instrument_rejected_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_11 then
    show.complex_instrument_rejected_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_11
    changed = true
  end
  if show.complex_instrument_rejected_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_12 then
    show.complex_instrument_rejected_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_12
    changed = true
  end
  if show.complex_instrument_rejected_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_13 then
    show.complex_instrument_rejected_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_13
    changed = true
  end
  if show.complex_instrument_rejected_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_14 then
    show.complex_instrument_rejected_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_14
    changed = true
  end
  if show.complex_instrument_rejected_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_15 then
    show.complex_instrument_rejected_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_15
    changed = true
  end
  if show.complex_instrument_rejected_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_16 then
    show.complex_instrument_rejected_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_16
    changed = true
  end
  if show.complex_instrument_rejected_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_17 then
    show.complex_instrument_rejected_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_17
    changed = true
  end
  if show.complex_instrument_rejected_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_2 then
    show.complex_instrument_rejected_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_2
    changed = true
  end
  if show.complex_instrument_rejected_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_3 then
    show.complex_instrument_rejected_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_3
    changed = true
  end
  if show.complex_instrument_rejected_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_4 then
    show.complex_instrument_rejected_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_4
    changed = true
  end
  if show.complex_instrument_rejected_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_5 then
    show.complex_instrument_rejected_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_5
    changed = true
  end
  if show.complex_instrument_rejected_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_6 then
    show.complex_instrument_rejected_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_6
    changed = true
  end
  if show.complex_instrument_rejected_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_7 then
    show.complex_instrument_rejected_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_7
    changed = true
  end
  if show.complex_instrument_rejected_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_8 then
    show.complex_instrument_rejected_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_8
    changed = true
  end
  if show.complex_instrument_rejected_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_9 then
    show.complex_instrument_rejected_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_byte_9
    changed = true
  end
  if show.complex_instrument_rejected_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_message then
    show.complex_instrument_rejected_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_message
    changed = true
  end
  if show.complex_instrument_rejected_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_optional_fields then
    show.complex_instrument_rejected_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_optional_fields
    changed = true
  end
  if show.complex_instrument_rejected_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_return_bitfields then
    show.complex_instrument_rejected_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_complex_instrument_rejected_return_bitfields
    changed = true
  end
  if show.cross_order_acknowledgment_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_1 then
    show.cross_order_acknowledgment_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_1
    changed = true
  end
  if show.cross_order_acknowledgment_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_10 then
    show.cross_order_acknowledgment_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_10
    changed = true
  end
  if show.cross_order_acknowledgment_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_11 then
    show.cross_order_acknowledgment_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_11
    changed = true
  end
  if show.cross_order_acknowledgment_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_12 then
    show.cross_order_acknowledgment_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_12
    changed = true
  end
  if show.cross_order_acknowledgment_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_13 then
    show.cross_order_acknowledgment_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_13
    changed = true
  end
  if show.cross_order_acknowledgment_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_14 then
    show.cross_order_acknowledgment_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_14
    changed = true
  end
  if show.cross_order_acknowledgment_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_15 then
    show.cross_order_acknowledgment_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_15
    changed = true
  end
  if show.cross_order_acknowledgment_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_16 then
    show.cross_order_acknowledgment_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_16
    changed = true
  end
  if show.cross_order_acknowledgment_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_17 then
    show.cross_order_acknowledgment_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_17
    changed = true
  end
  if show.cross_order_acknowledgment_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_2 then
    show.cross_order_acknowledgment_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_2
    changed = true
  end
  if show.cross_order_acknowledgment_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_3 then
    show.cross_order_acknowledgment_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_3
    changed = true
  end
  if show.cross_order_acknowledgment_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_4 then
    show.cross_order_acknowledgment_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_4
    changed = true
  end
  if show.cross_order_acknowledgment_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_5 then
    show.cross_order_acknowledgment_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_5
    changed = true
  end
  if show.cross_order_acknowledgment_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_6 then
    show.cross_order_acknowledgment_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_6
    changed = true
  end
  if show.cross_order_acknowledgment_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_7 then
    show.cross_order_acknowledgment_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_7
    changed = true
  end
  if show.cross_order_acknowledgment_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_8 then
    show.cross_order_acknowledgment_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_8
    changed = true
  end
  if show.cross_order_acknowledgment_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_9 then
    show.cross_order_acknowledgment_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_byte_9
    changed = true
  end
  if show.cross_order_acknowledgment_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_message then
    show.cross_order_acknowledgment_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_message
    changed = true
  end
  if show.cross_order_acknowledgment_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_optional_fields then
    show.cross_order_acknowledgment_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_optional_fields
    changed = true
  end
  if show.cross_order_acknowledgment_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_return_bitfields then
    show.cross_order_acknowledgment_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_acknowledgment_return_bitfields
    changed = true
  end
  if show.cross_order_cancelled_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_1 then
    show.cross_order_cancelled_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_1
    changed = true
  end
  if show.cross_order_cancelled_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_10 then
    show.cross_order_cancelled_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_10
    changed = true
  end
  if show.cross_order_cancelled_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_11 then
    show.cross_order_cancelled_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_11
    changed = true
  end
  if show.cross_order_cancelled_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_12 then
    show.cross_order_cancelled_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_12
    changed = true
  end
  if show.cross_order_cancelled_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_13 then
    show.cross_order_cancelled_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_13
    changed = true
  end
  if show.cross_order_cancelled_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_14 then
    show.cross_order_cancelled_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_14
    changed = true
  end
  if show.cross_order_cancelled_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_15 then
    show.cross_order_cancelled_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_15
    changed = true
  end
  if show.cross_order_cancelled_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_16 then
    show.cross_order_cancelled_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_16
    changed = true
  end
  if show.cross_order_cancelled_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_17 then
    show.cross_order_cancelled_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_17
    changed = true
  end
  if show.cross_order_cancelled_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_2 then
    show.cross_order_cancelled_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_2
    changed = true
  end
  if show.cross_order_cancelled_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_3 then
    show.cross_order_cancelled_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_3
    changed = true
  end
  if show.cross_order_cancelled_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_4 then
    show.cross_order_cancelled_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_4
    changed = true
  end
  if show.cross_order_cancelled_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_5 then
    show.cross_order_cancelled_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_5
    changed = true
  end
  if show.cross_order_cancelled_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_6 then
    show.cross_order_cancelled_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_6
    changed = true
  end
  if show.cross_order_cancelled_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_7 then
    show.cross_order_cancelled_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_7
    changed = true
  end
  if show.cross_order_cancelled_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_8 then
    show.cross_order_cancelled_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_8
    changed = true
  end
  if show.cross_order_cancelled_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_9 then
    show.cross_order_cancelled_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_byte_9
    changed = true
  end
  if show.cross_order_cancelled_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_message then
    show.cross_order_cancelled_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_message
    changed = true
  end
  if show.cross_order_cancelled_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_optional_fields then
    show.cross_order_cancelled_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_optional_fields
    changed = true
  end
  if show.cross_order_cancelled_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_return_bitfields then
    show.cross_order_cancelled_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_cancelled_return_bitfields
    changed = true
  end
  if show.cross_order_rejected_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_1 then
    show.cross_order_rejected_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_1
    changed = true
  end
  if show.cross_order_rejected_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_10 then
    show.cross_order_rejected_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_10
    changed = true
  end
  if show.cross_order_rejected_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_11 then
    show.cross_order_rejected_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_11
    changed = true
  end
  if show.cross_order_rejected_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_12 then
    show.cross_order_rejected_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_12
    changed = true
  end
  if show.cross_order_rejected_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_13 then
    show.cross_order_rejected_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_13
    changed = true
  end
  if show.cross_order_rejected_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_14 then
    show.cross_order_rejected_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_14
    changed = true
  end
  if show.cross_order_rejected_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_15 then
    show.cross_order_rejected_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_15
    changed = true
  end
  if show.cross_order_rejected_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_16 then
    show.cross_order_rejected_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_16
    changed = true
  end
  if show.cross_order_rejected_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_17 then
    show.cross_order_rejected_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_17
    changed = true
  end
  if show.cross_order_rejected_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_2 then
    show.cross_order_rejected_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_2
    changed = true
  end
  if show.cross_order_rejected_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_3 then
    show.cross_order_rejected_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_3
    changed = true
  end
  if show.cross_order_rejected_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_4 then
    show.cross_order_rejected_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_4
    changed = true
  end
  if show.cross_order_rejected_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_5 then
    show.cross_order_rejected_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_5
    changed = true
  end
  if show.cross_order_rejected_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_6 then
    show.cross_order_rejected_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_6
    changed = true
  end
  if show.cross_order_rejected_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_7 then
    show.cross_order_rejected_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_7
    changed = true
  end
  if show.cross_order_rejected_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_8 then
    show.cross_order_rejected_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_8
    changed = true
  end
  if show.cross_order_rejected_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_9 then
    show.cross_order_rejected_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_byte_9
    changed = true
  end
  if show.cross_order_rejected_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_message then
    show.cross_order_rejected_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_message
    changed = true
  end
  if show.cross_order_rejected_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_optional_fields then
    show.cross_order_rejected_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_optional_fields
    changed = true
  end
  if show.cross_order_rejected_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_return_bitfields then
    show.cross_order_rejected_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_cross_order_rejected_return_bitfields
    changed = true
  end
  if show.login_request_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_login_request_message then
    show.login_request_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_login_request_message
    changed = true
  end
  if show.login_response_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_login_response_message then
    show.login_response_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_login_response_message
    changed = true
  end
  if show.logout_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_logout_message then
    show.logout_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_logout_message
    changed = true
  end
  if show.mass_cancel_acknowledgment_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_mass_cancel_acknowledgment_message then
    show.mass_cancel_acknowledgment_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_mass_cancel_acknowledgment_message
    changed = true
  end
  if show.message_header ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_message_header then
    show.message_header = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_message_header
    changed = true
  end
  if show.modify_order_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_byte_1 then
    show.modify_order_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_byte_1
    changed = true
  end
  if show.modify_order_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_byte_2 then
    show.modify_order_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_byte_2
    changed = true
  end
  if show.modify_order_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_message then
    show.modify_order_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_message
    changed = true
  end
  if show.modify_order_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_optional_fields then
    show.modify_order_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_modify_order_optional_fields
    changed = true
  end
  if show.new_complex_instrument_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_byte_1 then
    show.new_complex_instrument_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_byte_1
    changed = true
  end
  if show.new_complex_instrument_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_message then
    show.new_complex_instrument_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_message
    changed = true
  end
  if show.new_complex_instrument_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_optional_fields then
    show.new_complex_instrument_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_complex_instrument_optional_fields
    changed = true
  end
  if show.new_order_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_1 then
    show.new_order_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_1
    changed = true
  end
  if show.new_order_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_2 then
    show.new_order_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_2
    changed = true
  end
  if show.new_order_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_3 then
    show.new_order_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_3
    changed = true
  end
  if show.new_order_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_4 then
    show.new_order_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_4
    changed = true
  end
  if show.new_order_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_5 then
    show.new_order_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_5
    changed = true
  end
  if show.new_order_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_6 then
    show.new_order_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_6
    changed = true
  end
  if show.new_order_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_7 then
    show.new_order_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_7
    changed = true
  end
  if show.new_order_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_8 then
    show.new_order_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_8
    changed = true
  end
  if show.new_order_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_9 then
    show.new_order_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_byte_9
    changed = true
  end
  if show.new_order_complex_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_complex_message then
    show.new_order_complex_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_complex_message
    changed = true
  end
  if show.new_order_cross_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_1 then
    show.new_order_cross_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_1
    changed = true
  end
  if show.new_order_cross_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_2 then
    show.new_order_cross_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_2
    changed = true
  end
  if show.new_order_cross_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_3 then
    show.new_order_cross_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_3
    changed = true
  end
  if show.new_order_cross_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_4 then
    show.new_order_cross_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_byte_4
    changed = true
  end
  if show.new_order_cross_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_message then
    show.new_order_cross_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_message
    changed = true
  end
  if show.new_order_cross_multileg_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_1 then
    show.new_order_cross_multileg_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_1
    changed = true
  end
  if show.new_order_cross_multileg_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_2 then
    show.new_order_cross_multileg_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_2
    changed = true
  end
  if show.new_order_cross_multileg_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_3 then
    show.new_order_cross_multileg_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_3
    changed = true
  end
  if show.new_order_cross_multileg_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_4 then
    show.new_order_cross_multileg_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_4
    changed = true
  end
  if show.new_order_cross_multileg_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_5 then
    show.new_order_cross_multileg_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_byte_5
    changed = true
  end
  if show.new_order_cross_multileg_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_message then
    show.new_order_cross_multileg_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_message
    changed = true
  end
  if show.new_order_cross_multileg_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_optional_fields then
    show.new_order_cross_multileg_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_multileg_optional_fields
    changed = true
  end
  if show.new_order_cross_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_optional_fields then
    show.new_order_cross_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_cross_optional_fields
    changed = true
  end
  if show.new_order_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_message then
    show.new_order_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_message
    changed = true
  end
  if show.new_order_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_optional_fields then
    show.new_order_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_new_order_optional_fields
    changed = true
  end
  if show.order_acknowledgment_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_1 then
    show.order_acknowledgment_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_1
    changed = true
  end
  if show.order_acknowledgment_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_10 then
    show.order_acknowledgment_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_10
    changed = true
  end
  if show.order_acknowledgment_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_11 then
    show.order_acknowledgment_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_11
    changed = true
  end
  if show.order_acknowledgment_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_12 then
    show.order_acknowledgment_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_12
    changed = true
  end
  if show.order_acknowledgment_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_13 then
    show.order_acknowledgment_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_13
    changed = true
  end
  if show.order_acknowledgment_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_14 then
    show.order_acknowledgment_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_14
    changed = true
  end
  if show.order_acknowledgment_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_15 then
    show.order_acknowledgment_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_15
    changed = true
  end
  if show.order_acknowledgment_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_16 then
    show.order_acknowledgment_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_16
    changed = true
  end
  if show.order_acknowledgment_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_17 then
    show.order_acknowledgment_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_17
    changed = true
  end
  if show.order_acknowledgment_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_2 then
    show.order_acknowledgment_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_2
    changed = true
  end
  if show.order_acknowledgment_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_3 then
    show.order_acknowledgment_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_3
    changed = true
  end
  if show.order_acknowledgment_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_4 then
    show.order_acknowledgment_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_4
    changed = true
  end
  if show.order_acknowledgment_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_5 then
    show.order_acknowledgment_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_5
    changed = true
  end
  if show.order_acknowledgment_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_6 then
    show.order_acknowledgment_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_6
    changed = true
  end
  if show.order_acknowledgment_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_7 then
    show.order_acknowledgment_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_7
    changed = true
  end
  if show.order_acknowledgment_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_8 then
    show.order_acknowledgment_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_8
    changed = true
  end
  if show.order_acknowledgment_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_9 then
    show.order_acknowledgment_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_byte_9
    changed = true
  end
  if show.order_acknowledgment_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_message then
    show.order_acknowledgment_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_message
    changed = true
  end
  if show.order_acknowledgment_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_optional_fields then
    show.order_acknowledgment_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_optional_fields
    changed = true
  end
  if show.order_acknowledgment_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_return_bitfields then
    show.order_acknowledgment_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_acknowledgment_return_bitfields
    changed = true
  end
  if show.order_cancelled_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_1 then
    show.order_cancelled_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_1
    changed = true
  end
  if show.order_cancelled_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_10 then
    show.order_cancelled_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_10
    changed = true
  end
  if show.order_cancelled_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_11 then
    show.order_cancelled_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_11
    changed = true
  end
  if show.order_cancelled_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_12 then
    show.order_cancelled_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_12
    changed = true
  end
  if show.order_cancelled_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_13 then
    show.order_cancelled_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_13
    changed = true
  end
  if show.order_cancelled_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_14 then
    show.order_cancelled_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_14
    changed = true
  end
  if show.order_cancelled_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_15 then
    show.order_cancelled_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_15
    changed = true
  end
  if show.order_cancelled_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_16 then
    show.order_cancelled_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_16
    changed = true
  end
  if show.order_cancelled_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_17 then
    show.order_cancelled_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_17
    changed = true
  end
  if show.order_cancelled_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_2 then
    show.order_cancelled_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_2
    changed = true
  end
  if show.order_cancelled_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_3 then
    show.order_cancelled_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_3
    changed = true
  end
  if show.order_cancelled_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_4 then
    show.order_cancelled_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_4
    changed = true
  end
  if show.order_cancelled_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_5 then
    show.order_cancelled_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_5
    changed = true
  end
  if show.order_cancelled_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_6 then
    show.order_cancelled_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_6
    changed = true
  end
  if show.order_cancelled_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_7 then
    show.order_cancelled_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_7
    changed = true
  end
  if show.order_cancelled_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_8 then
    show.order_cancelled_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_8
    changed = true
  end
  if show.order_cancelled_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_9 then
    show.order_cancelled_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_byte_9
    changed = true
  end
  if show.order_cancelled_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_message then
    show.order_cancelled_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_message
    changed = true
  end
  if show.order_cancelled_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_optional_fields then
    show.order_cancelled_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_optional_fields
    changed = true
  end
  if show.order_cancelled_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_return_bitfields then
    show.order_cancelled_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_cancelled_return_bitfields
    changed = true
  end
  if show.order_execution_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_1 then
    show.order_execution_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_1
    changed = true
  end
  if show.order_execution_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_10 then
    show.order_execution_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_10
    changed = true
  end
  if show.order_execution_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_11 then
    show.order_execution_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_11
    changed = true
  end
  if show.order_execution_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_12 then
    show.order_execution_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_12
    changed = true
  end
  if show.order_execution_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_13 then
    show.order_execution_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_13
    changed = true
  end
  if show.order_execution_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_14 then
    show.order_execution_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_14
    changed = true
  end
  if show.order_execution_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_15 then
    show.order_execution_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_15
    changed = true
  end
  if show.order_execution_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_16 then
    show.order_execution_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_16
    changed = true
  end
  if show.order_execution_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_17 then
    show.order_execution_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_17
    changed = true
  end
  if show.order_execution_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_2 then
    show.order_execution_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_2
    changed = true
  end
  if show.order_execution_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_3 then
    show.order_execution_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_3
    changed = true
  end
  if show.order_execution_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_4 then
    show.order_execution_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_4
    changed = true
  end
  if show.order_execution_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_5 then
    show.order_execution_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_5
    changed = true
  end
  if show.order_execution_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_6 then
    show.order_execution_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_6
    changed = true
  end
  if show.order_execution_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_7 then
    show.order_execution_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_7
    changed = true
  end
  if show.order_execution_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_8 then
    show.order_execution_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_8
    changed = true
  end
  if show.order_execution_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_9 then
    show.order_execution_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_byte_9
    changed = true
  end
  if show.order_execution_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_return_bitfields then
    show.order_execution_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_execution_return_bitfields
    changed = true
  end
  if show.order_modified_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_1 then
    show.order_modified_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_1
    changed = true
  end
  if show.order_modified_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_10 then
    show.order_modified_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_10
    changed = true
  end
  if show.order_modified_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_11 then
    show.order_modified_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_11
    changed = true
  end
  if show.order_modified_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_12 then
    show.order_modified_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_12
    changed = true
  end
  if show.order_modified_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_13 then
    show.order_modified_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_13
    changed = true
  end
  if show.order_modified_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_14 then
    show.order_modified_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_14
    changed = true
  end
  if show.order_modified_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_15 then
    show.order_modified_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_15
    changed = true
  end
  if show.order_modified_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_16 then
    show.order_modified_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_16
    changed = true
  end
  if show.order_modified_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_17 then
    show.order_modified_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_17
    changed = true
  end
  if show.order_modified_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_2 then
    show.order_modified_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_2
    changed = true
  end
  if show.order_modified_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_3 then
    show.order_modified_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_3
    changed = true
  end
  if show.order_modified_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_4 then
    show.order_modified_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_4
    changed = true
  end
  if show.order_modified_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_5 then
    show.order_modified_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_5
    changed = true
  end
  if show.order_modified_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_6 then
    show.order_modified_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_6
    changed = true
  end
  if show.order_modified_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_7 then
    show.order_modified_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_7
    changed = true
  end
  if show.order_modified_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_8 then
    show.order_modified_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_8
    changed = true
  end
  if show.order_modified_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_9 then
    show.order_modified_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_byte_9
    changed = true
  end
  if show.order_modified_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_message then
    show.order_modified_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_message
    changed = true
  end
  if show.order_modified_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_optional_fields then
    show.order_modified_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_optional_fields
    changed = true
  end
  if show.order_modified_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_return_bitfields then
    show.order_modified_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_modified_return_bitfields
    changed = true
  end
  if show.order_rejected_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_1 then
    show.order_rejected_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_1
    changed = true
  end
  if show.order_rejected_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_10 then
    show.order_rejected_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_10
    changed = true
  end
  if show.order_rejected_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_11 then
    show.order_rejected_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_11
    changed = true
  end
  if show.order_rejected_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_12 then
    show.order_rejected_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_12
    changed = true
  end
  if show.order_rejected_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_13 then
    show.order_rejected_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_13
    changed = true
  end
  if show.order_rejected_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_14 then
    show.order_rejected_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_14
    changed = true
  end
  if show.order_rejected_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_15 then
    show.order_rejected_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_15
    changed = true
  end
  if show.order_rejected_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_16 then
    show.order_rejected_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_16
    changed = true
  end
  if show.order_rejected_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_17 then
    show.order_rejected_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_17
    changed = true
  end
  if show.order_rejected_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_2 then
    show.order_rejected_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_2
    changed = true
  end
  if show.order_rejected_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_3 then
    show.order_rejected_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_3
    changed = true
  end
  if show.order_rejected_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_4 then
    show.order_rejected_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_4
    changed = true
  end
  if show.order_rejected_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_5 then
    show.order_rejected_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_5
    changed = true
  end
  if show.order_rejected_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_6 then
    show.order_rejected_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_6
    changed = true
  end
  if show.order_rejected_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_7 then
    show.order_rejected_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_7
    changed = true
  end
  if show.order_rejected_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_8 then
    show.order_rejected_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_8
    changed = true
  end
  if show.order_rejected_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_9 then
    show.order_rejected_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_byte_9
    changed = true
  end
  if show.order_rejected_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_message then
    show.order_rejected_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_message
    changed = true
  end
  if show.order_rejected_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_optional_fields then
    show.order_rejected_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_optional_fields
    changed = true
  end
  if show.order_rejected_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_return_bitfields then
    show.order_rejected_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_rejected_return_bitfields
    changed = true
  end
  if show.order_restated_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_1 then
    show.order_restated_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_1
    changed = true
  end
  if show.order_restated_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_10 then
    show.order_restated_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_10
    changed = true
  end
  if show.order_restated_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_11 then
    show.order_restated_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_11
    changed = true
  end
  if show.order_restated_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_12 then
    show.order_restated_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_12
    changed = true
  end
  if show.order_restated_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_13 then
    show.order_restated_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_13
    changed = true
  end
  if show.order_restated_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_14 then
    show.order_restated_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_14
    changed = true
  end
  if show.order_restated_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_15 then
    show.order_restated_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_15
    changed = true
  end
  if show.order_restated_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_16 then
    show.order_restated_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_16
    changed = true
  end
  if show.order_restated_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_17 then
    show.order_restated_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_17
    changed = true
  end
  if show.order_restated_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_2 then
    show.order_restated_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_2
    changed = true
  end
  if show.order_restated_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_3 then
    show.order_restated_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_3
    changed = true
  end
  if show.order_restated_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_4 then
    show.order_restated_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_4
    changed = true
  end
  if show.order_restated_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_5 then
    show.order_restated_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_5
    changed = true
  end
  if show.order_restated_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_6 then
    show.order_restated_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_6
    changed = true
  end
  if show.order_restated_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_7 then
    show.order_restated_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_7
    changed = true
  end
  if show.order_restated_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_8 then
    show.order_restated_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_8
    changed = true
  end
  if show.order_restated_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_9 then
    show.order_restated_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_byte_9
    changed = true
  end
  if show.order_restated_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_message then
    show.order_restated_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_message
    changed = true
  end
  if show.order_restated_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_optional_fields then
    show.order_restated_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_optional_fields
    changed = true
  end
  if show.order_restated_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_return_bitfields then
    show.order_restated_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_order_restated_return_bitfields
    changed = true
  end
  if show.packet ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_packet then
    show.packet = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_packet
    changed = true
  end
  if show.param_group ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_param_group then
    show.param_group = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_param_group
    changed = true
  end
  if show.param_header ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_param_header then
    show.param_header = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_param_header
    changed = true
  end
  if show.purge_order_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_order_message then
    show.purge_order_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_order_message
    changed = true
  end
  if show.purge_rejected_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_1 then
    show.purge_rejected_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_1
    changed = true
  end
  if show.purge_rejected_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_10 then
    show.purge_rejected_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_10
    changed = true
  end
  if show.purge_rejected_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_11 then
    show.purge_rejected_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_11
    changed = true
  end
  if show.purge_rejected_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_12 then
    show.purge_rejected_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_12
    changed = true
  end
  if show.purge_rejected_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_13 then
    show.purge_rejected_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_13
    changed = true
  end
  if show.purge_rejected_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_14 then
    show.purge_rejected_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_14
    changed = true
  end
  if show.purge_rejected_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_15 then
    show.purge_rejected_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_15
    changed = true
  end
  if show.purge_rejected_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_16 then
    show.purge_rejected_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_16
    changed = true
  end
  if show.purge_rejected_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_17 then
    show.purge_rejected_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_17
    changed = true
  end
  if show.purge_rejected_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_2 then
    show.purge_rejected_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_2
    changed = true
  end
  if show.purge_rejected_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_3 then
    show.purge_rejected_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_3
    changed = true
  end
  if show.purge_rejected_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_4 then
    show.purge_rejected_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_4
    changed = true
  end
  if show.purge_rejected_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_5 then
    show.purge_rejected_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_5
    changed = true
  end
  if show.purge_rejected_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_6 then
    show.purge_rejected_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_6
    changed = true
  end
  if show.purge_rejected_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_7 then
    show.purge_rejected_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_7
    changed = true
  end
  if show.purge_rejected_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_8 then
    show.purge_rejected_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_8
    changed = true
  end
  if show.purge_rejected_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_9 then
    show.purge_rejected_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_byte_9
    changed = true
  end
  if show.purge_rejected_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_message then
    show.purge_rejected_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_message
    changed = true
  end
  if show.purge_rejected_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_optional_fields then
    show.purge_rejected_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_optional_fields
    changed = true
  end
  if show.purge_rejected_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_return_bitfields then
    show.purge_rejected_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_purge_rejected_return_bitfields
    changed = true
  end
  if show.quote_cancelled_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_cancelled_message then
    show.quote_cancelled_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_cancelled_message
    changed = true
  end
  if show.quote_execution_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_execution_message then
    show.quote_execution_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_execution_message
    changed = true
  end
  if show.quote_restated_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_restated_message then
    show.quote_restated_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_restated_message
    changed = true
  end
  if show.quote_result_group ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_result_group then
    show.quote_result_group = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_result_group
    changed = true
  end
  if show.quote_update ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update then
    show.quote_update = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update
    changed = true
  end
  if show.quote_update_acknowledgment_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_acknowledgment_message then
    show.quote_update_acknowledgment_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_acknowledgment_message
    changed = true
  end
  if show.quote_update_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_message then
    show.quote_update_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_message
    changed = true
  end
  if show.quote_update_rejected_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_rejected_message then
    show.quote_update_rejected_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_quote_update_rejected_message
    changed = true
  end
  if show.reset_risk_acknowledgment_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_reset_risk_acknowledgment_message then
    show.reset_risk_acknowledgment_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_reset_risk_acknowledgment_message
    changed = true
  end
  if show.return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_return_bitfields then
    show.return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_return_bitfields
    changed = true
  end
  if show.risk_reset_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_risk_reset_message then
    show.risk_reset_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_risk_reset_message
    changed = true
  end
  if show.short_quote_update ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_short_quote_update then
    show.short_quote_update = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_short_quote_update
    changed = true
  end
  if show.short_quote_update_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_short_quote_update_message then
    show.short_quote_update_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_short_quote_update_message
    changed = true
  end
  if show.trade_cancel_or_correct_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_1 then
    show.trade_cancel_or_correct_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_1
    changed = true
  end
  if show.trade_cancel_or_correct_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_10 then
    show.trade_cancel_or_correct_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_10
    changed = true
  end
  if show.trade_cancel_or_correct_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_11 then
    show.trade_cancel_or_correct_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_11
    changed = true
  end
  if show.trade_cancel_or_correct_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_12 then
    show.trade_cancel_or_correct_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_12
    changed = true
  end
  if show.trade_cancel_or_correct_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_13 then
    show.trade_cancel_or_correct_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_13
    changed = true
  end
  if show.trade_cancel_or_correct_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_14 then
    show.trade_cancel_or_correct_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_14
    changed = true
  end
  if show.trade_cancel_or_correct_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_15 then
    show.trade_cancel_or_correct_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_15
    changed = true
  end
  if show.trade_cancel_or_correct_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_16 then
    show.trade_cancel_or_correct_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_16
    changed = true
  end
  if show.trade_cancel_or_correct_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_17 then
    show.trade_cancel_or_correct_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_17
    changed = true
  end
  if show.trade_cancel_or_correct_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_2 then
    show.trade_cancel_or_correct_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_2
    changed = true
  end
  if show.trade_cancel_or_correct_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_3 then
    show.trade_cancel_or_correct_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_3
    changed = true
  end
  if show.trade_cancel_or_correct_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_4 then
    show.trade_cancel_or_correct_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_4
    changed = true
  end
  if show.trade_cancel_or_correct_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_5 then
    show.trade_cancel_or_correct_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_5
    changed = true
  end
  if show.trade_cancel_or_correct_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_6 then
    show.trade_cancel_or_correct_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_6
    changed = true
  end
  if show.trade_cancel_or_correct_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_7 then
    show.trade_cancel_or_correct_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_7
    changed = true
  end
  if show.trade_cancel_or_correct_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_8 then
    show.trade_cancel_or_correct_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_8
    changed = true
  end
  if show.trade_cancel_or_correct_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_9 then
    show.trade_cancel_or_correct_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_byte_9
    changed = true
  end
  if show.trade_cancel_or_correct_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_message then
    show.trade_cancel_or_correct_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_message
    changed = true
  end
  if show.trade_cancel_or_correct_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_optional_fields then
    show.trade_cancel_or_correct_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_optional_fields
    changed = true
  end
  if show.trade_cancel_or_correct_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_return_bitfields then
    show.trade_cancel_or_correct_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_trade_cancel_or_correct_return_bitfields
    changed = true
  end
  if show.unit_sequence ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_unit_sequence then
    show.unit_sequence = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_unit_sequence
    changed = true
  end
  if show.unit_sequences ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_unit_sequences then
    show.unit_sequences = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_unit_sequences
    changed = true
  end
  if show.user_modify_rejected_byte_1 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_1 then
    show.user_modify_rejected_byte_1 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_1
    changed = true
  end
  if show.user_modify_rejected_byte_10 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_10 then
    show.user_modify_rejected_byte_10 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_10
    changed = true
  end
  if show.user_modify_rejected_byte_11 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_11 then
    show.user_modify_rejected_byte_11 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_11
    changed = true
  end
  if show.user_modify_rejected_byte_12 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_12 then
    show.user_modify_rejected_byte_12 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_12
    changed = true
  end
  if show.user_modify_rejected_byte_13 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_13 then
    show.user_modify_rejected_byte_13 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_13
    changed = true
  end
  if show.user_modify_rejected_byte_14 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_14 then
    show.user_modify_rejected_byte_14 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_14
    changed = true
  end
  if show.user_modify_rejected_byte_15 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_15 then
    show.user_modify_rejected_byte_15 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_15
    changed = true
  end
  if show.user_modify_rejected_byte_16 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_16 then
    show.user_modify_rejected_byte_16 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_16
    changed = true
  end
  if show.user_modify_rejected_byte_17 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_17 then
    show.user_modify_rejected_byte_17 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_17
    changed = true
  end
  if show.user_modify_rejected_byte_2 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_2 then
    show.user_modify_rejected_byte_2 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_2
    changed = true
  end
  if show.user_modify_rejected_byte_3 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_3 then
    show.user_modify_rejected_byte_3 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_3
    changed = true
  end
  if show.user_modify_rejected_byte_4 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_4 then
    show.user_modify_rejected_byte_4 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_4
    changed = true
  end
  if show.user_modify_rejected_byte_5 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_5 then
    show.user_modify_rejected_byte_5 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_5
    changed = true
  end
  if show.user_modify_rejected_byte_6 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_6 then
    show.user_modify_rejected_byte_6 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_6
    changed = true
  end
  if show.user_modify_rejected_byte_7 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_7 then
    show.user_modify_rejected_byte_7 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_7
    changed = true
  end
  if show.user_modify_rejected_byte_8 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_8 then
    show.user_modify_rejected_byte_8 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_8
    changed = true
  end
  if show.user_modify_rejected_byte_9 ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_9 then
    show.user_modify_rejected_byte_9 = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_byte_9
    changed = true
  end
  if show.user_modify_rejected_message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_message then
    show.user_modify_rejected_message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_message
    changed = true
  end
  if show.user_modify_rejected_optional_fields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_optional_fields then
    show.user_modify_rejected_optional_fields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_optional_fields
    changed = true
  end
  if show.user_modify_rejected_return_bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_return_bitfields then
    show.user_modify_rejected_return_bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_user_modify_rejected_return_bitfields
    changed = true
  end
  if show.bitfields ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_bitfields then
    show.bitfields = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_bitfields
    changed = true
  end
  if show.message ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_message then
    show.message = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_message
    changed = true
  end
  if show.parameter ~= omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_parameter then
    show.parameter = omi_cboe_edgx_options_orderentry_boe_v2_10.prefs.show_parameter
    changed = true
  end

  -- Reload on changed preference
  if changed then
    reload()
  end
end


-----------------------------------------------------------------------
-- Dissect Cboe Edgx Options OrderEntry Boe 2.10
-----------------------------------------------------------------------

-- Complex Instrument Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17 = {}

-- Size Of: Complex Instrument Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.size = 1

-- Display: Complex Instrument Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_17, range, display)

  if show.complex_instrument_rejected_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16 = {}

-- Size Of: Complex Instrument Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.size = 1

-- Display: Complex Instrument Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_16, range, display)

  if show.complex_instrument_rejected_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15 = {}

-- Size Of: Complex Instrument Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.size = 1

-- Display: Complex Instrument Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_15, range, display)

  if show.complex_instrument_rejected_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14 = {}

-- Size Of: Complex Instrument Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.size = 1

-- Display: Complex Instrument Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_14, range, display)

  if show.complex_instrument_rejected_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13 = {}

-- Size Of: Complex Instrument Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.size = 1

-- Display: Complex Instrument Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_13, range, display)

  if show.complex_instrument_rejected_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12 = {}

-- Size Of: Complex Instrument Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.size = 1

-- Display: Complex Instrument Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_12, range, display)

  if show.complex_instrument_rejected_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11 = {}

-- Size Of: Complex Instrument Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.size = 1

-- Display: Complex Instrument Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_11, range, display)

  if show.complex_instrument_rejected_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10 = {}

-- Size Of: Complex Instrument Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.size = 1

-- Display: Complex Instrument Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_10, range, display)

  if show.complex_instrument_rejected_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9 = {}

-- Size Of: Complex Instrument Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.size = 1

-- Display: Complex Instrument Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_9, range, display)

  if show.complex_instrument_rejected_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8 = {}

-- Size Of: Complex Instrument Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.size = 1

-- Display: Complex Instrument Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_8, range, display)

  if show.complex_instrument_rejected_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7 = {}

-- Size Of: Complex Instrument Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.size = 1

-- Display: Complex Instrument Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_7, range, display)

  if show.complex_instrument_rejected_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6 = {}

-- Size Of: Complex Instrument Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.size = 1

-- Display: Complex Instrument Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_6, range, display)

  if show.complex_instrument_rejected_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5 = {}

-- Size Of: Complex Instrument Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.size = 1

-- Display: Complex Instrument Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_5, range, display)

  if show.complex_instrument_rejected_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4 = {}

-- Size Of: Complex Instrument Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.size = 1

-- Display: Complex Instrument Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_4, range, display)

  if show.complex_instrument_rejected_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3 = {}

-- Size Of: Complex Instrument Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.size = 1

-- Display: Complex Instrument Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_3, range, display)

  if show.complex_instrument_rejected_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2 = {}

-- Size Of: Complex Instrument Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.size = 1

-- Display: Complex Instrument Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_2, range, display)

  if show.complex_instrument_rejected_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1 = {}

-- Size Of: Complex Instrument Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.size = 1

-- Display: Complex Instrument Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_byte_1, range, display)

  if show.complex_instrument_rejected_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count = {}

-- Size Of: Complex Instrument Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count.size = 1

-- Display: Complex Instrument Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count.display = function(value)
  return "Complex Instrument Rejected Bitfield Count: "..value
end

-- Dissect: Complex Instrument Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Complex Instrument Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields = {}

-- Display: Complex Instrument Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Complex Instrument Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields.fields = function(buffer, offset, packet, parent, size_of_complex_instrument_rejected_optional_fields)
  local index = offset

  -- Complex Instrument Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, complex_instrument_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Complex Instrument Rejected Byte 1
  local complex_instrument_rejected_byte_1 = nil

  local complex_instrument_rejected_byte_1_exists = complex_instrument_rejected_bitfield_count >= 1

  if complex_instrument_rejected_byte_1_exists then

    -- Complex Instrument Rejected Byte 1: Struct of 8 fields
    index, complex_instrument_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 2
  local complex_instrument_rejected_byte_2 = nil

  local complex_instrument_rejected_byte_2_exists = complex_instrument_rejected_bitfield_count >= 2

  if complex_instrument_rejected_byte_2_exists then

    -- Complex Instrument Rejected Byte 2: Struct of 8 fields
    index, complex_instrument_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 3
  local complex_instrument_rejected_byte_3 = nil

  local complex_instrument_rejected_byte_3_exists = complex_instrument_rejected_bitfield_count >= 3

  if complex_instrument_rejected_byte_3_exists then

    -- Complex Instrument Rejected Byte 3: Struct of 8 fields
    index, complex_instrument_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 4
  local complex_instrument_rejected_byte_4 = nil

  local complex_instrument_rejected_byte_4_exists = complex_instrument_rejected_bitfield_count >= 4

  if complex_instrument_rejected_byte_4_exists then

    -- Complex Instrument Rejected Byte 4: Struct of 8 fields
    index, complex_instrument_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 5
  local complex_instrument_rejected_byte_5 = nil

  local complex_instrument_rejected_byte_5_exists = complex_instrument_rejected_bitfield_count >= 5

  if complex_instrument_rejected_byte_5_exists then

    -- Complex Instrument Rejected Byte 5: Struct of 8 fields
    index, complex_instrument_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 6
  local complex_instrument_rejected_byte_6 = nil

  local complex_instrument_rejected_byte_6_exists = complex_instrument_rejected_bitfield_count >= 6

  if complex_instrument_rejected_byte_6_exists then

    -- Complex Instrument Rejected Byte 6: Struct of 8 fields
    index, complex_instrument_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 7
  local complex_instrument_rejected_byte_7 = nil

  local complex_instrument_rejected_byte_7_exists = complex_instrument_rejected_bitfield_count >= 7

  if complex_instrument_rejected_byte_7_exists then

    -- Complex Instrument Rejected Byte 7: Struct of 8 fields
    index, complex_instrument_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 8
  local complex_instrument_rejected_byte_8 = nil

  local complex_instrument_rejected_byte_8_exists = complex_instrument_rejected_bitfield_count >= 8

  if complex_instrument_rejected_byte_8_exists then

    -- Complex Instrument Rejected Byte 8: Struct of 8 fields
    index, complex_instrument_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 9
  local complex_instrument_rejected_byte_9 = nil

  local complex_instrument_rejected_byte_9_exists = complex_instrument_rejected_bitfield_count >= 9

  if complex_instrument_rejected_byte_9_exists then

    -- Complex Instrument Rejected Byte 9: Struct of 8 fields
    index, complex_instrument_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 10
  local complex_instrument_rejected_byte_10 = nil

  local complex_instrument_rejected_byte_10_exists = complex_instrument_rejected_bitfield_count >= 10

  if complex_instrument_rejected_byte_10_exists then

    -- Complex Instrument Rejected Byte 10: Struct of 8 fields
    index, complex_instrument_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 11
  local complex_instrument_rejected_byte_11 = nil

  local complex_instrument_rejected_byte_11_exists = complex_instrument_rejected_bitfield_count >= 11

  if complex_instrument_rejected_byte_11_exists then

    -- Complex Instrument Rejected Byte 11: Struct of 8 fields
    index, complex_instrument_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 12
  local complex_instrument_rejected_byte_12 = nil

  local complex_instrument_rejected_byte_12_exists = complex_instrument_rejected_bitfield_count >= 12

  if complex_instrument_rejected_byte_12_exists then

    -- Complex Instrument Rejected Byte 12: Struct of 8 fields
    index, complex_instrument_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 13
  local complex_instrument_rejected_byte_13 = nil

  local complex_instrument_rejected_byte_13_exists = complex_instrument_rejected_bitfield_count >= 13

  if complex_instrument_rejected_byte_13_exists then

    -- Complex Instrument Rejected Byte 13: Struct of 8 fields
    index, complex_instrument_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 14
  local complex_instrument_rejected_byte_14 = nil

  local complex_instrument_rejected_byte_14_exists = complex_instrument_rejected_bitfield_count >= 14

  if complex_instrument_rejected_byte_14_exists then

    -- Complex Instrument Rejected Byte 14: Struct of 8 fields
    index, complex_instrument_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 15
  local complex_instrument_rejected_byte_15 = nil

  local complex_instrument_rejected_byte_15_exists = complex_instrument_rejected_bitfield_count >= 15

  if complex_instrument_rejected_byte_15_exists then

    -- Complex Instrument Rejected Byte 15: Struct of 8 fields
    index, complex_instrument_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 16
  local complex_instrument_rejected_byte_16 = nil

  local complex_instrument_rejected_byte_16_exists = complex_instrument_rejected_bitfield_count >= 16

  if complex_instrument_rejected_byte_16_exists then

    -- Complex Instrument Rejected Byte 16: Struct of 8 fields
    index, complex_instrument_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 17
  local complex_instrument_rejected_byte_17 = nil

  local complex_instrument_rejected_byte_17_exists = complex_instrument_rejected_bitfield_count >= 17

  if complex_instrument_rejected_byte_17_exists then

    -- Complex Instrument Rejected Byte 17: Struct of 8 fields
    index, complex_instrument_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Complex Instrument Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_complex_instrument_rejected_optional_fields)
  local index = offset + size_of_complex_instrument_rejected_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.complex_instrument_rejected_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_complex_instrument_rejected_optional_fields)
    parent:set_len(size_of_complex_instrument_rejected_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_complex_instrument_rejected_optional_fields)

    return index
  end
end

-- Reserved Internal
cboe_edgx_options_orderentry_boe_v2_10.reserved_internal = {}

-- Size Of: Reserved Internal
cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.size = 1

-- Display: Reserved Internal
cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.display = function(value)
  return "Reserved Internal: "..value
end

-- Dissect: Reserved Internal
cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_internal, range, value, display)

  return offset + length, value
end

-- No Of Securities
cboe_edgx_options_orderentry_boe_v2_10.no_of_securities = {}

-- Size Of: No Of Securities
cboe_edgx_options_orderentry_boe_v2_10.no_of_securities.size = 4

-- Display: No Of Securities
cboe_edgx_options_orderentry_boe_v2_10.no_of_securities.display = function(value)
  return "No Of Securities: "..value
end

-- Dissect: No Of Securities
cboe_edgx_options_orderentry_boe_v2_10.no_of_securities.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.no_of_securities.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.no_of_securities.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.no_of_securities, range, value, display)

  return offset + length, value
end

-- Text
cboe_edgx_options_orderentry_boe_v2_10.text = {}

-- Size Of: Text
cboe_edgx_options_orderentry_boe_v2_10.text.size = 60

-- Display: Text
cboe_edgx_options_orderentry_boe_v2_10.text.display = function(value)
  return "Text: "..value
end

-- Dissect: Text
cboe_edgx_options_orderentry_boe_v2_10.text.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.text.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.text.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.text, range, value, display)

  return offset + length, value
end

-- Order Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason = {}

-- Size Of: Order Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.size = 1

-- Display: Order Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.display = function(value)
  if value == "A" then
    return "Order Reject Reason: Admin (A)"
  end
  if value == "D" then
    return "Order Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Order Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Order Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Order Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Order Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "L" then
    return "Order Reject Reason: Order Would Lock Or Cross Nbbo (L)"
  end
  if value == "M" then
    return "Order Reject Reason: Order Size Exceeded (M)"
  end
  if value == "N" then
    return "Order Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Order Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Order Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "Q" then
    return "Order Reject Reason: Waiting For First Trade (Q)"
  end
  if value == "R" then
    return "Order Reject Reason: Routing Unavailable (R)"
  end
  if value == "T" then
    return "Order Reject Reason: Fill Would Trade Through The Nbbo (T)"
  end
  if value == "U" then
    return "Order Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Order Reject Reason: Would Wash (V)"
  end
  if value == "W" then
    return "Order Reject Reason: Add Liquidity Only Order Would Remove (W)"
  end
  if value == "X" then
    return "Order Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Order Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Order Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "c" then
    return "Order Reject Reason: Only Close Transactions Accepted (c)"
  end
  if value == "f" then
    return "Order Reject Reason: Risk Management Efid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Order Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "o" then
    return "Order Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "r" then
    return "Order Reject Reason: Reserve Reload (r)"
  end
  if value == "s" then
    return "Order Reject Reason: Risk Management Risk Root Level (s)"
  end
  if value == "w" then
    return "Order Reject Reason: Would Remove On Unslide (w)"
  end
  if value == "x" then
    return "Order Reject Reason: Crossed Market (x)"
  end
  if value == "y" then
    return "Order Reject Reason: Order Received By Cboe During Replay (y)"
  end
  if value == "z" then
    return "Order Reject Reason: Session End (z)"
  end
  if value == "+" then
    return "Order Reject Reason: Risk Management Efid Group Level (+)"
  end

  return "Order Reject Reason: Unknown("..value..")"
end

-- Dissect: Order Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_reject_reason, range, value, display)

  return offset + length, value
end

-- Transaction Time
cboe_edgx_options_orderentry_boe_v2_10.transaction_time = {}

-- Size Of: Transaction Time
cboe_edgx_options_orderentry_boe_v2_10.transaction_time.size = 8

-- Display: Transaction Time
cboe_edgx_options_orderentry_boe_v2_10.transaction_time.display = function(value)
  return "Transaction Time: "..value
end

-- Dissect: Transaction Time
cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.transaction_time, range, value, display)

  return offset + length, value
end

-- Complex Instrument Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message = {}

-- Read runtime size of: Complex Instrument Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Complex Instrument Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Complex Instrument Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.fields = function(buffer, offset, packet, parent, size_of_complex_instrument_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Order Reject Reason: 1 Byte Ascii String Enum with 31 values
  index, order_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.dissect(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_edgx_options_orderentry_boe_v2_10.text.dissect(buffer, index, packet, parent)

  -- No Of Securities: 4 Byte Unsigned Fixed Width Integer
  index, no_of_securities = cboe_edgx_options_orderentry_boe_v2_10.no_of_securities.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Complex Instrument Rejected Optional Fields
  local size_of_complex_instrument_rejected_optional_fields = message_length - (index - offset) - 8

  -- Complex Instrument Rejected Optional Fields: Struct of 18 fields
  index, complex_instrument_rejected_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_optional_fields.dissect(buffer, index, packet, parent, size_of_complex_instrument_rejected_optional_fields)

  return index
end

-- Dissect: Complex Instrument Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_complex_instrument_rejected_message = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.complex_instrument_rejected_message then
    local range = buffer(offset, size_of_complex_instrument_rejected_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.fields(buffer, offset, packet, parent, size_of_complex_instrument_rejected_message)

  return offset + size_of_complex_instrument_rejected_message
end

-- Leg Strike Price
cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price = {}

-- Size Of: Leg Strike Price
cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price.size = 8

-- Display: Leg Strike Price
cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price.display = function(value)
  return "Leg Strike Price: "..value
end

-- Dissect: Leg Strike Price
cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leg_strike_price, range, value, display)

  return offset + length, value
end

-- Leg Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date = {}

-- Size Of: Leg Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date.size = 4

-- Display: Leg Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date.display = function(value)
  return "Leg Maturity Date: "..value
end

-- Dissect: Leg Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leg_maturity_date, range, value, display)

  return offset + length, value
end

-- Leg Cfi Code
cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code = {}

-- Size Of: Leg Cfi Code
cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code.size = 6

-- Display: Leg Cfi Code
cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code.display = function(value)
  if value == "OP" then
    return "Leg Cfi Code: Options Put (OP)"
  end
  if value == "OC" then
    return "Leg Cfi Code: Options Call (OC)"
  end
  if value == "E" then
    return "Leg Cfi Code: Equity (E)"
  end

  return "Leg Cfi Code: Unknown("..value..")"
end

-- Dissect: Leg Cfi Code
cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leg_cfi_code, range, value, display)

  return offset + length, value
end

-- Complex Instrument Accepted Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17 = {}

-- Size Of: Complex Instrument Accepted Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.size = 1

-- Display: Complex Instrument Accepted Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 17
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_17, range, display)

  if show.complex_instrument_accepted_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16 = {}

-- Size Of: Complex Instrument Accepted Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.size = 1

-- Display: Complex Instrument Accepted Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 16
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_16, range, display)

  if show.complex_instrument_accepted_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15 = {}

-- Size Of: Complex Instrument Accepted Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.size = 1

-- Display: Complex Instrument Accepted Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 15
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_15, range, display)

  if show.complex_instrument_accepted_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14 = {}

-- Size Of: Complex Instrument Accepted Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.size = 1

-- Display: Complex Instrument Accepted Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Leg Strike Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Leg Strike Price Exists|"
  end
  -- Is Complex Instrument Accepted Leg Maturity Date Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Leg Maturity Date Exists|"
  end
  -- Is Complex Instrument Accepted Leg Cfi Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Leg Cfi Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Leg Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_leg_strike_price_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Leg Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_leg_maturity_date_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Leg Cfi Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_leg_cfi_code_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 14
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_14, range, display)

  if show.complex_instrument_accepted_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13 = {}

-- Size Of: Complex Instrument Accepted Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.size = 1

-- Display: Complex Instrument Accepted Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 13
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_13, range, display)

  if show.complex_instrument_accepted_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12 = {}

-- Size Of: Complex Instrument Accepted Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.size = 1

-- Display: Complex Instrument Accepted Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 12
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_12, range, display)

  if show.complex_instrument_accepted_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11 = {}

-- Size Of: Complex Instrument Accepted Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.size = 1

-- Display: Complex Instrument Accepted Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 11
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_11, range, display)

  if show.complex_instrument_accepted_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10 = {}

-- Size Of: Complex Instrument Accepted Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.size = 1

-- Display: Complex Instrument Accepted Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 10
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_10, range, display)

  if show.complex_instrument_accepted_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9 = {}

-- Size Of: Complex Instrument Accepted Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.size = 1

-- Display: Complex Instrument Accepted Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 9
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_9, range, display)

  if show.complex_instrument_accepted_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8 = {}

-- Size Of: Complex Instrument Accepted Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.size = 1

-- Display: Complex Instrument Accepted Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 8
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_8, range, display)

  if show.complex_instrument_accepted_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7 = {}

-- Size Of: Complex Instrument Accepted Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.size = 1

-- Display: Complex Instrument Accepted Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 7
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_7, range, display)

  if show.complex_instrument_accepted_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6 = {}

-- Size Of: Complex Instrument Accepted Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.size = 1

-- Display: Complex Instrument Accepted Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 6
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_6, range, display)

  if show.complex_instrument_accepted_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5 = {}

-- Size Of: Complex Instrument Accepted Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.size = 1

-- Display: Complex Instrument Accepted Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 5
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_5, range, display)

  if show.complex_instrument_accepted_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4 = {}

-- Size Of: Complex Instrument Accepted Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.size = 1

-- Display: Complex Instrument Accepted Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 4
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_4, range, display)

  if show.complex_instrument_accepted_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3 = {}

-- Size Of: Complex Instrument Accepted Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.size = 1

-- Display: Complex Instrument Accepted Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 3
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_3, range, display)

  if show.complex_instrument_accepted_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2 = {}

-- Size Of: Complex Instrument Accepted Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.size = 1

-- Display: Complex Instrument Accepted Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 2
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_2, range, display)

  if show.complex_instrument_accepted_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1 = {}

-- Size Of: Complex Instrument Accepted Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.size = 1

-- Display: Complex Instrument Accepted Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Complex Instrument Accepted Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 8 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 7 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 6 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 5 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 4 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 3 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 2 Exists|"
  end
  -- Is Complex Instrument Accepted Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Complex Instrument Accepted Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Complex Instrument Accepted Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.bits = function(buffer, offset, packet, parent)

  -- Complex Instrument Accepted Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_8_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_7_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_6_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_5_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_4_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_3_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_2_exists, buffer(offset, 1))

  -- Complex Instrument Accepted Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Complex Instrument Accepted Byte 1
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_byte_1, range, display)

  if show.complex_instrument_accepted_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Complex Instrument Accepted Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count = {}

-- Size Of: Complex Instrument Accepted Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count.size = 1

-- Display: Complex Instrument Accepted Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count.display = function(value)
  return "Complex Instrument Accepted Bitfield Count: "..value
end

-- Dissect: Complex Instrument Accepted Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_bitfield_count, range, value, display)

  return offset + length, value
end

-- Complex Instrument Accepted Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields = {}

-- Display: Complex Instrument Accepted Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Complex Instrument Accepted Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields.fields = function(buffer, offset, packet, parent, size_of_complex_instrument_accepted_optional_fields)
  local index = offset

  -- Complex Instrument Accepted Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, complex_instrument_accepted_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Complex Instrument Accepted Byte 1
  local complex_instrument_accepted_byte_1 = nil

  local complex_instrument_accepted_byte_1_exists = complex_instrument_accepted_bitfield_count >= 1

  if complex_instrument_accepted_byte_1_exists then

    -- Complex Instrument Accepted Byte 1: Struct of 8 fields
    index, complex_instrument_accepted_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 2
  local complex_instrument_accepted_byte_2 = nil

  local complex_instrument_accepted_byte_2_exists = complex_instrument_accepted_bitfield_count >= 2

  if complex_instrument_accepted_byte_2_exists then

    -- Complex Instrument Accepted Byte 2: Struct of 8 fields
    index, complex_instrument_accepted_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 3
  local complex_instrument_accepted_byte_3 = nil

  local complex_instrument_accepted_byte_3_exists = complex_instrument_accepted_bitfield_count >= 3

  if complex_instrument_accepted_byte_3_exists then

    -- Complex Instrument Accepted Byte 3: Struct of 8 fields
    index, complex_instrument_accepted_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 4
  local complex_instrument_accepted_byte_4 = nil

  local complex_instrument_accepted_byte_4_exists = complex_instrument_accepted_bitfield_count >= 4

  if complex_instrument_accepted_byte_4_exists then

    -- Complex Instrument Accepted Byte 4: Struct of 8 fields
    index, complex_instrument_accepted_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 5
  local complex_instrument_accepted_byte_5 = nil

  local complex_instrument_accepted_byte_5_exists = complex_instrument_accepted_bitfield_count >= 5

  if complex_instrument_accepted_byte_5_exists then

    -- Complex Instrument Accepted Byte 5: Struct of 8 fields
    index, complex_instrument_accepted_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 6
  local complex_instrument_accepted_byte_6 = nil

  local complex_instrument_accepted_byte_6_exists = complex_instrument_accepted_bitfield_count >= 6

  if complex_instrument_accepted_byte_6_exists then

    -- Complex Instrument Accepted Byte 6: Struct of 8 fields
    index, complex_instrument_accepted_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 7
  local complex_instrument_accepted_byte_7 = nil

  local complex_instrument_accepted_byte_7_exists = complex_instrument_accepted_bitfield_count >= 7

  if complex_instrument_accepted_byte_7_exists then

    -- Complex Instrument Accepted Byte 7: Struct of 8 fields
    index, complex_instrument_accepted_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 8
  local complex_instrument_accepted_byte_8 = nil

  local complex_instrument_accepted_byte_8_exists = complex_instrument_accepted_bitfield_count >= 8

  if complex_instrument_accepted_byte_8_exists then

    -- Complex Instrument Accepted Byte 8: Struct of 8 fields
    index, complex_instrument_accepted_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 9
  local complex_instrument_accepted_byte_9 = nil

  local complex_instrument_accepted_byte_9_exists = complex_instrument_accepted_bitfield_count >= 9

  if complex_instrument_accepted_byte_9_exists then

    -- Complex Instrument Accepted Byte 9: Struct of 8 fields
    index, complex_instrument_accepted_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 10
  local complex_instrument_accepted_byte_10 = nil

  local complex_instrument_accepted_byte_10_exists = complex_instrument_accepted_bitfield_count >= 10

  if complex_instrument_accepted_byte_10_exists then

    -- Complex Instrument Accepted Byte 10: Struct of 8 fields
    index, complex_instrument_accepted_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 11
  local complex_instrument_accepted_byte_11 = nil

  local complex_instrument_accepted_byte_11_exists = complex_instrument_accepted_bitfield_count >= 11

  if complex_instrument_accepted_byte_11_exists then

    -- Complex Instrument Accepted Byte 11: Struct of 8 fields
    index, complex_instrument_accepted_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 12
  local complex_instrument_accepted_byte_12 = nil

  local complex_instrument_accepted_byte_12_exists = complex_instrument_accepted_bitfield_count >= 12

  if complex_instrument_accepted_byte_12_exists then

    -- Complex Instrument Accepted Byte 12: Struct of 8 fields
    index, complex_instrument_accepted_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 13
  local complex_instrument_accepted_byte_13 = nil

  local complex_instrument_accepted_byte_13_exists = complex_instrument_accepted_bitfield_count >= 13

  if complex_instrument_accepted_byte_13_exists then

    -- Complex Instrument Accepted Byte 13: Struct of 8 fields
    index, complex_instrument_accepted_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 14
  local complex_instrument_accepted_byte_14 = nil

  local complex_instrument_accepted_byte_14_exists = complex_instrument_accepted_bitfield_count >= 14

  if complex_instrument_accepted_byte_14_exists then

    -- Complex Instrument Accepted Byte 14: Struct of 8 fields
    index, complex_instrument_accepted_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 15
  local complex_instrument_accepted_byte_15 = nil

  local complex_instrument_accepted_byte_15_exists = complex_instrument_accepted_bitfield_count >= 15

  if complex_instrument_accepted_byte_15_exists then

    -- Complex Instrument Accepted Byte 15: Struct of 8 fields
    index, complex_instrument_accepted_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 16
  local complex_instrument_accepted_byte_16 = nil

  local complex_instrument_accepted_byte_16_exists = complex_instrument_accepted_bitfield_count >= 16

  if complex_instrument_accepted_byte_16_exists then

    -- Complex Instrument Accepted Byte 16: Struct of 8 fields
    index, complex_instrument_accepted_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 17
  local complex_instrument_accepted_byte_17 = nil

  local complex_instrument_accepted_byte_17_exists = complex_instrument_accepted_bitfield_count >= 17

  if complex_instrument_accepted_byte_17_exists then

    -- Complex Instrument Accepted Byte 17: Struct of 8 fields
    index, complex_instrument_accepted_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leg Cfi Code
  local leg_cfi_code = nil

  local leg_cfi_code_exists = complex_instrument_accepted_bitfield_count >= 14 and complex_instrument_accepted_byte_14:bitfield(7) > 0

  if leg_cfi_code_exists then
    index, leg_cfi_code = cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leg Maturity Date
  local leg_maturity_date = nil

  local leg_maturity_date_exists = complex_instrument_accepted_bitfield_count >= 14 and complex_instrument_accepted_byte_14:bitfield(6) > 0

  if leg_maturity_date_exists then
    index, leg_maturity_date = cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leg Strike Price
  local leg_strike_price = nil

  local leg_strike_price_exists = complex_instrument_accepted_bitfield_count >= 14 and complex_instrument_accepted_byte_14:bitfield(5) > 0

  if leg_strike_price_exists then
    index, leg_strike_price = cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Complex Instrument Accepted Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_complex_instrument_accepted_optional_fields)
  local index = offset + size_of_complex_instrument_accepted_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.complex_instrument_accepted_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields.fields(buffer, offset, packet, parent, size_of_complex_instrument_accepted_optional_fields)
    parent:set_len(size_of_complex_instrument_accepted_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields.fields(buffer, offset, packet, parent, size_of_complex_instrument_accepted_optional_fields)

    return index
  end
end

-- Revised Legs
cboe_edgx_options_orderentry_boe_v2_10.revised_legs = {}

-- Size Of: Revised Legs
cboe_edgx_options_orderentry_boe_v2_10.revised_legs.size = 1

-- Display: Revised Legs
cboe_edgx_options_orderentry_boe_v2_10.revised_legs.display = function(value)
  if value == "1" then
    return "Revised Legs: Not Reordered (1)"
  end
  if value == "2" then
    return "Revised Legs: Reordered (2)"
  end

  return "Revised Legs: Unknown("..value..")"
end

-- Dissect: Revised Legs
cboe_edgx_options_orderentry_boe_v2_10.revised_legs.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.revised_legs.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.revised_legs.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.revised_legs, range, value, display)

  return offset + length, value
end

-- Symbol
cboe_edgx_options_orderentry_boe_v2_10.symbol = {}

-- Size Of: Symbol
cboe_edgx_options_orderentry_boe_v2_10.symbol.size = 6

-- Display: Symbol
cboe_edgx_options_orderentry_boe_v2_10.symbol.display = function(value)
  return "Symbol: "..value
end

-- Dissect: Symbol
cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.symbol.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.symbol.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.symbol, range, value, display)

  return offset + length, value
end

-- Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id = {}

-- Size Of: Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.size = 20

-- Display: Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.display = function(value)
  return "Cl Ord Id: "..value
end

-- Dissect: Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cl_ord_id, range, value, display)

  return offset + length, value
end

-- Complex Instrument Accepted Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message = {}

-- Read runtime size of: Complex Instrument Accepted Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Complex Instrument Accepted Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Complex Instrument Accepted Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.fields = function(buffer, offset, packet, parent, size_of_complex_instrument_accepted_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)

  -- Revised Legs: 1 Byte Ascii String Enum with 2 values
  index, revised_legs = cboe_edgx_options_orderentry_boe_v2_10.revised_legs.dissect(buffer, index, packet, parent)

  -- No Of Securities: 4 Byte Unsigned Fixed Width Integer
  index, no_of_securities = cboe_edgx_options_orderentry_boe_v2_10.no_of_securities.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Complex Instrument Accepted Optional Fields
  local size_of_complex_instrument_accepted_optional_fields = message_length - (index - offset) - 8

  -- Complex Instrument Accepted Optional Fields: Struct of 21 fields
  index, complex_instrument_accepted_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_optional_fields.dissect(buffer, index, packet, parent, size_of_complex_instrument_accepted_optional_fields)

  return index
end

-- Dissect: Complex Instrument Accepted Message
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_complex_instrument_accepted_message = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.complex_instrument_accepted_message then
    local range = buffer(offset, size_of_complex_instrument_accepted_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.fields(buffer, offset, packet, parent, size_of_complex_instrument_accepted_message)

  return offset + size_of_complex_instrument_accepted_message
end

-- Cancelled Order Count
cboe_edgx_options_orderentry_boe_v2_10.cancelled_order_count = {}

-- Size Of: Cancelled Order Count
cboe_edgx_options_orderentry_boe_v2_10.cancelled_order_count.size = 4

-- Display: Cancelled Order Count
cboe_edgx_options_orderentry_boe_v2_10.cancelled_order_count.display = function(value)
  return "Cancelled Order Count: "..value
end

-- Dissect: Cancelled Order Count
cboe_edgx_options_orderentry_boe_v2_10.cancelled_order_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cancelled_order_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancelled_order_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancelled_order_count, range, value, display)

  return offset + length, value
end

-- Mass Cancel Id
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id = {}

-- Size Of: Mass Cancel Id
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.size = 20

-- Display: Mass Cancel Id
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.display = function(value)
  return "Mass Cancel Id: "..value
end

-- Dissect: Mass Cancel Id
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_id, range, value, display)

  return offset + length, value
end

-- Mass Cancel Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message = {}

-- Read runtime size of: Mass Cancel Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Mass Cancel Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Mass Cancel Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.fields = function(buffer, offset, packet, parent, size_of_mass_cancel_acknowledgment_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Mass Cancel Id: 20 Byte Ascii String
  index, mass_cancel_id = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.dissect(buffer, index, packet, parent)

  -- Cancelled Order Count: 4 Byte Unsigned Fixed Width Integer
  index, cancelled_order_count = cboe_edgx_options_orderentry_boe_v2_10.cancelled_order_count.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Mass Cancel Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_mass_cancel_acknowledgment_message = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.mass_cancel_acknowledgment_message then
    local range = buffer(offset, size_of_mass_cancel_acknowledgment_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_acknowledgment_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.fields(buffer, offset, packet, parent, size_of_mass_cancel_acknowledgment_message)

  return offset + size_of_mass_cancel_acknowledgment_message
end

-- Risk Reset Result
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_result = {}

-- Size Of: Risk Reset Result
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_result.size = 1

-- Display: Risk Reset Result
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_result.display = function(value)
  if value == " " then
    return "Risk Reset Result: Ignored (<whitespace>)"
  end
  if value == "Y" then
    return "Risk Reset Result: Success (Y)"
  end
  if value == "F" then
    return "Risk Reset Result: Rejected Exceeds Firm Reset Limit (F)"
  end
  if value == "C" then
    return "Risk Reset Result: Rejected Exceeds Custom Group Id Limit (C)"
  end
  if value == "D" then
    return "Risk Reset Result: Rejected Automatic Risk Resets Are Disabled (D)"
  end
  if value == "E" then
    return "Risk Reset Result: Rejected Empty Reset Risk Field (E)"
  end
  if value == "I" then
    return "Risk Reset Result: Rejected Incorrect Data Center (I)"
  end
  if value == "S" then
    return "Risk Reset Result: Rejected Exceeds Risk Root Reset Limit (S)"
  end
  if value == "U" then
    return "Risk Reset Result: Rejected Invalid Risk Root (U)"
  end
  if value == "c" then
    return "Risk Reset Result: Rejected Invalid Efid Or Clearing Firm (c)"
  end
  if value == "y" then
    return "Risk Reset Result: Rejected In Replay (y)"
  end

  return "Risk Reset Result: Unknown("..value..")"
end

-- Dissect: Risk Reset Result
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_result.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.risk_reset_result.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.risk_reset_result.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_reset_result, range, value, display)

  return offset + length, value
end

-- Risk Status Id
cboe_edgx_options_orderentry_boe_v2_10.risk_status_id = {}

-- Size Of: Risk Status Id
cboe_edgx_options_orderentry_boe_v2_10.risk_status_id.size = 16

-- Display: Risk Status Id
cboe_edgx_options_orderentry_boe_v2_10.risk_status_id.display = function(value)
  return "Risk Status Id: "..value
end

-- Dissect: Risk Status Id
cboe_edgx_options_orderentry_boe_v2_10.risk_status_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.risk_status_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.risk_status_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_status_id, range, value, display)

  return offset + length, value
end

-- Reset Risk Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message = {}

-- Read runtime size of: Reset Risk Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Reset Risk Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Reset Risk Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.fields = function(buffer, offset, packet, parent, size_of_reset_risk_acknowledgment_message)
  local index = offset

  -- Risk Status Id: 16 Byte Ascii String
  index, risk_status_id = cboe_edgx_options_orderentry_boe_v2_10.risk_status_id.dissect(buffer, index, packet, parent)

  -- Risk Reset Result: 1 Byte Ascii String Enum with 11 values
  index, risk_reset_result = cboe_edgx_options_orderentry_boe_v2_10.risk_reset_result.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Reset Risk Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_reset_risk_acknowledgment_message = cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.reset_risk_acknowledgment_message then
    local range = buffer(offset, size_of_reset_risk_acknowledgment_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reset_risk_acknowledgment_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.fields(buffer, offset, packet, parent, size_of_reset_risk_acknowledgment_message)

  return offset + size_of_reset_risk_acknowledgment_message
end

-- Purge Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17 = {}

-- Size Of: Purge Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.size = 1

-- Display: Purge Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_17, range, display)

  if show.purge_rejected_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16 = {}

-- Size Of: Purge Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.size = 1

-- Display: Purge Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_16, range, display)

  if show.purge_rejected_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15 = {}

-- Size Of: Purge Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.size = 1

-- Display: Purge Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Mass Cancel Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Mass Cancel Id Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Mass Cancel Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_mass_cancel_id_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_15, range, display)

  if show.purge_rejected_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14 = {}

-- Size Of: Purge Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.size = 1

-- Display: Purge Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_14, range, display)

  if show.purge_rejected_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13 = {}

-- Size Of: Purge Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.size = 1

-- Display: Purge Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_13, range, display)

  if show.purge_rejected_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12 = {}

-- Size Of: Purge Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.size = 1

-- Display: Purge Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_12, range, display)

  if show.purge_rejected_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11 = {}

-- Size Of: Purge Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.size = 1

-- Display: Purge Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_11, range, display)

  if show.purge_rejected_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10 = {}

-- Size Of: Purge Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.size = 1

-- Display: Purge Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_10, range, display)

  if show.purge_rejected_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9 = {}

-- Size Of: Purge Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.size = 1

-- Display: Purge Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_9, range, display)

  if show.purge_rejected_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8 = {}

-- Size Of: Purge Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.size = 1

-- Display: Purge Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_8, range, display)

  if show.purge_rejected_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7 = {}

-- Size Of: Purge Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.size = 1

-- Display: Purge Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_7, range, display)

  if show.purge_rejected_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6 = {}

-- Size Of: Purge Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.size = 1

-- Display: Purge Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_6, range, display)

  if show.purge_rejected_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5 = {}

-- Size Of: Purge Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.size = 1

-- Display: Purge Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_5, range, display)

  if show.purge_rejected_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4 = {}

-- Size Of: Purge Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.size = 1

-- Display: Purge Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_4, range, display)

  if show.purge_rejected_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3 = {}

-- Size Of: Purge Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.size = 1

-- Display: Purge Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_3, range, display)

  if show.purge_rejected_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2 = {}

-- Size Of: Purge Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.size = 1

-- Display: Purge Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_2, range, display)

  if show.purge_rejected_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1 = {}

-- Size Of: Purge Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.size = 1

-- Display: Purge Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_byte_1, range, display)

  if show.purge_rejected_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Purge Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count = {}

-- Size Of: Purge Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count.size = 1

-- Display: Purge Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count.display = function(value)
  return "Purge Rejected Bitfield Count: "..value
end

-- Dissect: Purge Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Purge Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields = {}

-- Display: Purge Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields.fields = function(buffer, offset, packet, parent, size_of_purge_rejected_optional_fields)
  local index = offset

  -- Purge Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, purge_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Purge Rejected Byte 1
  local purge_rejected_byte_1 = nil

  local purge_rejected_byte_1_exists = purge_rejected_bitfield_count >= 1

  if purge_rejected_byte_1_exists then

    -- Purge Rejected Byte 1: Struct of 8 fields
    index, purge_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 2
  local purge_rejected_byte_2 = nil

  local purge_rejected_byte_2_exists = purge_rejected_bitfield_count >= 2

  if purge_rejected_byte_2_exists then

    -- Purge Rejected Byte 2: Struct of 8 fields
    index, purge_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 3
  local purge_rejected_byte_3 = nil

  local purge_rejected_byte_3_exists = purge_rejected_bitfield_count >= 3

  if purge_rejected_byte_3_exists then

    -- Purge Rejected Byte 3: Struct of 8 fields
    index, purge_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 4
  local purge_rejected_byte_4 = nil

  local purge_rejected_byte_4_exists = purge_rejected_bitfield_count >= 4

  if purge_rejected_byte_4_exists then

    -- Purge Rejected Byte 4: Struct of 8 fields
    index, purge_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 5
  local purge_rejected_byte_5 = nil

  local purge_rejected_byte_5_exists = purge_rejected_bitfield_count >= 5

  if purge_rejected_byte_5_exists then

    -- Purge Rejected Byte 5: Struct of 8 fields
    index, purge_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 6
  local purge_rejected_byte_6 = nil

  local purge_rejected_byte_6_exists = purge_rejected_bitfield_count >= 6

  if purge_rejected_byte_6_exists then

    -- Purge Rejected Byte 6: Struct of 8 fields
    index, purge_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 7
  local purge_rejected_byte_7 = nil

  local purge_rejected_byte_7_exists = purge_rejected_bitfield_count >= 7

  if purge_rejected_byte_7_exists then

    -- Purge Rejected Byte 7: Struct of 8 fields
    index, purge_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 8
  local purge_rejected_byte_8 = nil

  local purge_rejected_byte_8_exists = purge_rejected_bitfield_count >= 8

  if purge_rejected_byte_8_exists then

    -- Purge Rejected Byte 8: Struct of 8 fields
    index, purge_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 9
  local purge_rejected_byte_9 = nil

  local purge_rejected_byte_9_exists = purge_rejected_bitfield_count >= 9

  if purge_rejected_byte_9_exists then

    -- Purge Rejected Byte 9: Struct of 8 fields
    index, purge_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 10
  local purge_rejected_byte_10 = nil

  local purge_rejected_byte_10_exists = purge_rejected_bitfield_count >= 10

  if purge_rejected_byte_10_exists then

    -- Purge Rejected Byte 10: Struct of 8 fields
    index, purge_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 11
  local purge_rejected_byte_11 = nil

  local purge_rejected_byte_11_exists = purge_rejected_bitfield_count >= 11

  if purge_rejected_byte_11_exists then

    -- Purge Rejected Byte 11: Struct of 8 fields
    index, purge_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 12
  local purge_rejected_byte_12 = nil

  local purge_rejected_byte_12_exists = purge_rejected_bitfield_count >= 12

  if purge_rejected_byte_12_exists then

    -- Purge Rejected Byte 12: Struct of 8 fields
    index, purge_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 13
  local purge_rejected_byte_13 = nil

  local purge_rejected_byte_13_exists = purge_rejected_bitfield_count >= 13

  if purge_rejected_byte_13_exists then

    -- Purge Rejected Byte 13: Struct of 8 fields
    index, purge_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 14
  local purge_rejected_byte_14 = nil

  local purge_rejected_byte_14_exists = purge_rejected_bitfield_count >= 14

  if purge_rejected_byte_14_exists then

    -- Purge Rejected Byte 14: Struct of 8 fields
    index, purge_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 15
  local purge_rejected_byte_15 = nil

  local purge_rejected_byte_15_exists = purge_rejected_bitfield_count >= 15

  if purge_rejected_byte_15_exists then

    -- Purge Rejected Byte 15: Struct of 8 fields
    index, purge_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 16
  local purge_rejected_byte_16 = nil

  local purge_rejected_byte_16_exists = purge_rejected_bitfield_count >= 16

  if purge_rejected_byte_16_exists then

    -- Purge Rejected Byte 16: Struct of 8 fields
    index, purge_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 17
  local purge_rejected_byte_17 = nil

  local purge_rejected_byte_17_exists = purge_rejected_bitfield_count >= 17

  if purge_rejected_byte_17_exists then

    -- Purge Rejected Byte 17: Struct of 8 fields
    index, purge_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Mass Cancel Id
  local mass_cancel_id = nil

  local mass_cancel_id_exists = purge_rejected_bitfield_count >= 15 and purge_rejected_byte_15:bitfield(4) > 0

  if mass_cancel_id_exists then
    index, mass_cancel_id = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Purge Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_purge_rejected_optional_fields)
  local index = offset + size_of_purge_rejected_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.purge_rejected_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_purge_rejected_optional_fields)
    parent:set_len(size_of_purge_rejected_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_purge_rejected_optional_fields)

    return index
  end
end

-- Purge Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.purge_reject_reason = {}

-- Size Of: Purge Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.purge_reject_reason.size = 1

-- Display: Purge Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.purge_reject_reason.display = function(value)
  if value == "A" then
    return "Purge Reject Reason: Admin (A)"
  end
  if value == "D" then
    return "Purge Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Purge Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Purge Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Purge Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Purge Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "L" then
    return "Purge Reject Reason: Order Would Lock Or Cross Nbbo (L)"
  end
  if value == "M" then
    return "Purge Reject Reason: Order Size Exceeded (M)"
  end
  if value == "N" then
    return "Purge Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Purge Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Purge Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "Q" then
    return "Purge Reject Reason: Waiting For First Trade (Q)"
  end
  if value == "R" then
    return "Purge Reject Reason: Routing Unavailable (R)"
  end
  if value == "T" then
    return "Purge Reject Reason: Fill Would Trade Through The Nbbo (T)"
  end
  if value == "U" then
    return "Purge Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Purge Reject Reason: Would Wash (V)"
  end
  if value == "W" then
    return "Purge Reject Reason: Add Liquidity Only Order Would Remove (W)"
  end
  if value == "X" then
    return "Purge Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Purge Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Purge Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "c" then
    return "Purge Reject Reason: Only Close Transactions Accepted (c)"
  end
  if value == "f" then
    return "Purge Reject Reason: Risk Management Efid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Purge Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "o" then
    return "Purge Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "r" then
    return "Purge Reject Reason: Reserve Reload (r)"
  end
  if value == "s" then
    return "Purge Reject Reason: Risk Management Risk Root Level (s)"
  end
  if value == "w" then
    return "Purge Reject Reason: Would Remove On Unslide (w)"
  end
  if value == "x" then
    return "Purge Reject Reason: Crossed Market (x)"
  end
  if value == "y" then
    return "Purge Reject Reason: Order Received By Cboe During Replay (y)"
  end
  if value == "z" then
    return "Purge Reject Reason: Session End (z)"
  end
  if value == "+" then
    return "Purge Reject Reason: Risk Management Efid Group Level (+)"
  end

  return "Purge Reject Reason: Unknown("..value..")"
end

-- Dissect: Purge Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.purge_reject_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.purge_reject_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.purge_reject_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_reject_reason, range, value, display)

  return offset + length, value
end

-- Purge Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message = {}

-- Read runtime size of: Purge Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Purge Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.fields = function(buffer, offset, packet, parent, size_of_purge_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Purge Reject Reason: 1 Byte Ascii String Enum with 31 values
  index, purge_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.purge_reject_reason.dissect(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_edgx_options_orderentry_boe_v2_10.text.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Purge Rejected Optional Fields
  local size_of_purge_rejected_optional_fields = message_length - (index - offset) - 8

  -- Purge Rejected Optional Fields: Struct of 19 fields
  index, purge_rejected_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_optional_fields.dissect(buffer, index, packet, parent, size_of_purge_rejected_optional_fields)

  return index
end

-- Dissect: Purge Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_purge_rejected_message = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.purge_rejected_message then
    local range = buffer(offset, size_of_purge_rejected_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.fields(buffer, offset, packet, parent, size_of_purge_rejected_message)

  return offset + size_of_purge_rejected_message
end

-- Cross Exclusion Indicator
cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator = {}

-- Size Of: Cross Exclusion Indicator
cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.size = 1

-- Display: Cross Exclusion Indicator
cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.display = function(value)
  if value == "N" then
    return "Cross Exclusion Indicator: No (N)"
  end
  if value == "Y" then
    return "Cross Exclusion Indicator: Yes (Y)"
  end

  return "Cross Exclusion Indicator: Unknown("..value..")"
end

-- Dissect: Cross Exclusion Indicator
cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_exclusion_indicator, range, value, display)

  return offset + length, value
end

-- Routing Firm Id
cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id = {}

-- Size Of: Routing Firm Id
cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.size = 4

-- Display: Routing Firm Id
cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.display = function(value)
  return "Routing Firm Id: "..value
end

-- Dissect: Routing Firm Id
cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.routing_firm_id, range, value, display)

  return offset + length, value
end

-- Give Up Firm Id
cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id = {}

-- Size Of: Give Up Firm Id
cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.size = 4

-- Display: Give Up Firm Id
cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.display = function(value)
  return "Give Up Firm Id: "..value
end

-- Dissect: Give Up Firm Id
cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.give_up_firm_id, range, value, display)

  return offset + length, value
end

-- Cross Id
cboe_edgx_options_orderentry_boe_v2_10.cross_id = {}

-- Size Of: Cross Id
cboe_edgx_options_orderentry_boe_v2_10.cross_id.size = 20

-- Display: Cross Id
cboe_edgx_options_orderentry_boe_v2_10.cross_id.display = function(value)
  return "Cross Id: "..value
end

-- Dissect: Cross Id
cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cross_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_id, range, value, display)

  return offset + length, value
end

-- Cmta Number
cboe_edgx_options_orderentry_boe_v2_10.cmta_number = {}

-- Size Of: Cmta Number
cboe_edgx_options_orderentry_boe_v2_10.cmta_number.size = 4

-- Display: Cmta Number
cboe_edgx_options_orderentry_boe_v2_10.cmta_number.display = function(value)
  return "Cmta Number: "..value
end

-- Dissect: Cmta Number
cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cmta_number, range, value, display)

  return offset + length, value
end

-- Auction Id
cboe_edgx_options_orderentry_boe_v2_10.auction_id = {}

-- Size Of: Auction Id
cboe_edgx_options_orderentry_boe_v2_10.auction_id.size = 8

-- Display: Auction Id
cboe_edgx_options_orderentry_boe_v2_10.auction_id.display = function(value)
  return "Auction Id: "..value
end

-- Dissect: Auction Id
cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.auction_id.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.auction_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.auction_id, range, value, display)

  return offset + length, value
end

-- Target Party Id
cboe_edgx_options_orderentry_boe_v2_10.target_party_id = {}

-- Size Of: Target Party Id
cboe_edgx_options_orderentry_boe_v2_10.target_party_id.size = 4

-- Display: Target Party Id
cboe_edgx_options_orderentry_boe_v2_10.target_party_id.display = function(value)
  return "Target Party Id: "..value
end

-- Dissect: Target Party Id
cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.target_party_id, range, value, display)

  return offset + length, value
end

-- Marketing Fee Code
cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code = {}

-- Size Of: Marketing Fee Code
cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.size = 2

-- Display: Marketing Fee Code
cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.display = function(value)
  if value == "P" then
    return "Marketing Fee Code: Penny Pilot (P)"
  end
  if value == "N" then
    return "Marketing Fee Code: Non Penny Pilot (N)"
  end
  if value == "X" then
    return "Marketing Fee Code: Not Eligible (X)"
  end

  return "Marketing Fee Code: Unknown("..value..")"
end

-- Dissect: Marketing Fee Code
cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.marketing_fee_code, range, value, display)

  return offset + length, value
end

-- Sub Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator = {}

-- Size Of: Sub Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.size = 1

-- Display: Sub Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.display = function(value)
  if value == "S" then
    return "Sub Liquidity Indicator: Execution From Order That Set The Nbbo (S)"
  end
  if value == "B" then
    return "Sub Liquidity Indicator: Step Up Mechanism (B)"
  end
  if value == "U" then
    return "Sub Liquidity Indicator: Market Turner (U)"
  end
  if value == "b" then
    return "Sub Liquidity Indicator: Aim (b)"
  end
  if value == "C" then
    return "Sub Liquidity Indicator: Carried (C)"
  end
  if value == "D" then
    return "Sub Liquidity Indicator: Done For Day (D)"
  end
  if value == "q" then
    return "Sub Liquidity Indicator: Qcc (q)"
  end
  if value == "s" then
    return "Sub Liquidity Indicator: Sam (s)"
  end

  return "Sub Liquidity Indicator: Unknown("..value..")"
end

-- Dissect: Sub Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.sub_liquidity_indicator, range, value, display)

  return offset + length, value
end

-- Corrected Size
cboe_edgx_options_orderentry_boe_v2_10.corrected_size = {}

-- Size Of: Corrected Size
cboe_edgx_options_orderentry_boe_v2_10.corrected_size.size = 4

-- Display: Corrected Size
cboe_edgx_options_orderentry_boe_v2_10.corrected_size.display = function(value)
  return "Corrected Size: "..value
end

-- Dissect: Corrected Size
cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.corrected_size, range, value, display)

  return offset + length, value
end

-- Open Close
cboe_edgx_options_orderentry_boe_v2_10.open_close = {}

-- Size Of: Open Close
cboe_edgx_options_orderentry_boe_v2_10.open_close.size = 1

-- Display: Open Close
cboe_edgx_options_orderentry_boe_v2_10.open_close.display = function(value)
  if value == "O" then
    return "Open Close: Open (O)"
  end
  if value == "C" then
    return "Open Close: Close (C)"
  end
  if value == "N" then
    return "Open Close: None (N)"
  end

  return "Open Close: Unknown("..value..")"
end

-- Dissect: Open Close
cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.open_close.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.open_close.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.open_close, range, value, display)

  return offset + length, value
end

-- Put Or Call
cboe_edgx_options_orderentry_boe_v2_10.put_or_call = {}

-- Size Of: Put Or Call
cboe_edgx_options_orderentry_boe_v2_10.put_or_call.size = 1

-- Display: Put Or Call
cboe_edgx_options_orderentry_boe_v2_10.put_or_call.display = function(value)
  if value == "0" then
    return "Put Or Call: Put (0)"
  end
  if value == "1" then
    return "Put Or Call: Call (1)"
  end

  return "Put Or Call: Unknown("..value..")"
end

-- Dissect: Put Or Call
cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.put_or_call, range, value, display)

  return offset + length, value
end

-- Strike Price
cboe_edgx_options_orderentry_boe_v2_10.strike_price = {}

-- Size Of: Strike Price
cboe_edgx_options_orderentry_boe_v2_10.strike_price.size = 8

-- Display: Strike Price
cboe_edgx_options_orderentry_boe_v2_10.strike_price.display = function(value)
  return "Strike Price: "..value
end

-- Dissect: Strike Price
cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.strike_price.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.strike_price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.strike_price, range, value, display)

  return offset + length, value
end

-- Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.maturity_date = {}

-- Size Of: Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.maturity_date.size = 4

-- Display: Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.maturity_date.display = function(value)
  return "Maturity Date: "..value
end

-- Dissect: Maturity Date
cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.maturity_date, range, value, display)

  return offset + length, value
end

-- Capacity
cboe_edgx_options_orderentry_boe_v2_10.capacity = {}

-- Size Of: Capacity
cboe_edgx_options_orderentry_boe_v2_10.capacity.size = 1

-- Display: Capacity
cboe_edgx_options_orderentry_boe_v2_10.capacity.display = function(value)
  if value == "C" then
    return "Capacity: Customer (C)"
  end
  if value == "M" then
    return "Capacity: Market Maker (M)"
  end
  if value == "F" then
    return "Capacity: Firm (F)"
  end
  if value == "U" then
    return "Capacity: Professional Customer (U)"
  end
  if value == "N" then
    return "Capacity: Non Cboe Market Maker (N)"
  end
  if value == "B" then
    return "Capacity: Broker Dealer (B)"
  end
  if value == "J" then
    return "Capacity: Joint Back Office (J)"
  end

  return "Capacity: Unknown("..value..")"
end

-- Dissect: Capacity
cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.capacity.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.capacity.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.capacity, range, value, display)

  return offset + length, value
end

-- Trade Cancel Or Correct Byte 17
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17 = {}

-- Size Of: Trade Cancel Or Correct Byte 17
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.size = 1

-- Display: Trade Cancel Or Correct Byte 17
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 17
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 17
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_17, range, display)

  if show.trade_cancel_or_correct_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 16
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16 = {}

-- Size Of: Trade Cancel Or Correct Byte 16
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.size = 1

-- Display: Trade Cancel Or Correct Byte 16
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 16
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 16
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_16, range, display)

  if show.trade_cancel_or_correct_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 15
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15 = {}

-- Size Of: Trade Cancel Or Correct Byte 15
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.size = 1

-- Display: Trade Cancel Or Correct Byte 15
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 15
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 15
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_15, range, display)

  if show.trade_cancel_or_correct_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 14
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14 = {}

-- Size Of: Trade Cancel Or Correct Byte 14
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.size = 1

-- Display: Trade Cancel Or Correct Byte 14
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 14
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 14
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_14, range, display)

  if show.trade_cancel_or_correct_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 13
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13 = {}

-- Size Of: Trade Cancel Or Correct Byte 13
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.size = 1

-- Display: Trade Cancel Or Correct Byte 13
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 13
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 13
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_13, range, display)

  if show.trade_cancel_or_correct_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 12
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12 = {}

-- Size Of: Trade Cancel Or Correct Byte 12
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.size = 1

-- Display: Trade Cancel Or Correct Byte 12
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 12
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 12
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_12, range, display)

  if show.trade_cancel_or_correct_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 11
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11 = {}

-- Size Of: Trade Cancel Or Correct Byte 11
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.size = 1

-- Display: Trade Cancel Or Correct Byte 11
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 11
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 11
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_11, range, display)

  if show.trade_cancel_or_correct_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 10
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10 = {}

-- Size Of: Trade Cancel Or Correct Byte 10
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.size = 1

-- Display: Trade Cancel Or Correct Byte 10
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Cross Exclusion Indicator Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Routing Firm Id Exists|"
  end
  -- Is Trade Cancel Or Correct Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Give Up Firm Id Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 10
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_routing_firm_id_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_give_up_firm_id_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 10
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_10, range, display)

  if show.trade_cancel_or_correct_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 9
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9 = {}

-- Size Of: Trade Cancel Or Correct Byte 9
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.size = 1

-- Display: Trade Cancel Or Correct Byte 9
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Cmta Number Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Auction Id Exists|"
  end
  -- Is Trade Cancel Or Correct Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Target Party Id Exists|"
  end
  -- Is Trade Cancel Or Correct Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 9
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_cmta_number_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_auction_id_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_target_party_id_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 9
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_9, range, display)

  if show.trade_cancel_or_correct_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 8
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8 = {}

-- Size Of: Trade Cancel Or Correct Byte 8
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.size = 1

-- Display: Trade Cancel Or Correct Byte 8
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 8
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 8
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_8, range, display)

  if show.trade_cancel_or_correct_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 7
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7 = {}

-- Size Of: Trade Cancel Or Correct Byte 7
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.size = 1

-- Display: Trade Cancel Or Correct Byte 7
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Sub Liquidity Indicator Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Sub Liquidity Indicator Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 7
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Sub Liquidity Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_sub_liquidity_indicator_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 7
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_7, range, display)

  if show.trade_cancel_or_correct_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 6
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6 = {}

-- Size Of: Trade Cancel Or Correct Byte 6
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.size = 1

-- Display: Trade Cancel Or Correct Byte 6
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 6
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 6
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_6, range, display)

  if show.trade_cancel_or_correct_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 5
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5 = {}

-- Size Of: Trade Cancel Or Correct Byte 5
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.size = 1

-- Display: Trade Cancel Or Correct Byte 5
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 5
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 5
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_5, range, display)

  if show.trade_cancel_or_correct_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 4
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4 = {}

-- Size Of: Trade Cancel Or Correct Byte 4
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.size = 1

-- Display: Trade Cancel Or Correct Byte 4
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Corrected Size Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Open Close Exists|"
  end
  -- Is Trade Cancel Or Correct Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Put Or Call Exists|"
  end
  -- Is Trade Cancel Or Correct Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Strike Price Exists|"
  end
  -- Is Trade Cancel Or Correct Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 4
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_corrected_size_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_open_close_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_put_or_call_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_strike_price_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 4
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_4, range, display)

  if show.trade_cancel_or_correct_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 3
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3 = {}

-- Size Of: Trade Cancel Or Correct Byte 3
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.size = 1

-- Display: Trade Cancel Or Correct Byte 3
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 3
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 3
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_3, range, display)

  if show.trade_cancel_or_correct_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 2
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2 = {}

-- Size Of: Trade Cancel Or Correct Byte 2
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.size = 1

-- Display: Trade Cancel Or Correct Byte 2
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Capacity Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 2
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_capacity_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_symbol_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 2
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_2, range, display)

  if show.trade_cancel_or_correct_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Byte 1
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1 = {}

-- Size Of: Trade Cancel Or Correct Byte 1
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.size = 1

-- Display: Trade Cancel Or Correct Byte 1
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 1
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 1
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_byte_1, range, display)

  if show.trade_cancel_or_correct_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Trade Cancel Or Correct Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count = {}

-- Size Of: Trade Cancel Or Correct Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count.size = 1

-- Display: Trade Cancel Or Correct Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count.display = function(value)
  return "Trade Cancel Or Correct Bitfield Count: "..value
end

-- Dissect: Trade Cancel Or Correct Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_bitfield_count, range, value, display)

  return offset + length, value
end

-- Trade Cancel Or Correct Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields = {}

-- Display: Trade Cancel Or Correct Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Trade Cancel Or Correct Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields.fields = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_optional_fields)
  local index = offset

  -- Trade Cancel Or Correct Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, trade_cancel_or_correct_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Trade Cancel Or Correct Byte 1
  local trade_cancel_or_correct_byte_1 = nil

  local trade_cancel_or_correct_byte_1_exists = trade_cancel_or_correct_bitfield_count >= 1

  if trade_cancel_or_correct_byte_1_exists then

    -- Trade Cancel Or Correct Byte 1: Struct of 8 fields
    index, trade_cancel_or_correct_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 2
  local trade_cancel_or_correct_byte_2 = nil

  local trade_cancel_or_correct_byte_2_exists = trade_cancel_or_correct_bitfield_count >= 2

  if trade_cancel_or_correct_byte_2_exists then

    -- Trade Cancel Or Correct Byte 2: Struct of 8 fields
    index, trade_cancel_or_correct_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 3
  local trade_cancel_or_correct_byte_3 = nil

  local trade_cancel_or_correct_byte_3_exists = trade_cancel_or_correct_bitfield_count >= 3

  if trade_cancel_or_correct_byte_3_exists then

    -- Trade Cancel Or Correct Byte 3: Struct of 8 fields
    index, trade_cancel_or_correct_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 4
  local trade_cancel_or_correct_byte_4 = nil

  local trade_cancel_or_correct_byte_4_exists = trade_cancel_or_correct_bitfield_count >= 4

  if trade_cancel_or_correct_byte_4_exists then

    -- Trade Cancel Or Correct Byte 4: Struct of 8 fields
    index, trade_cancel_or_correct_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 5
  local trade_cancel_or_correct_byte_5 = nil

  local trade_cancel_or_correct_byte_5_exists = trade_cancel_or_correct_bitfield_count >= 5

  if trade_cancel_or_correct_byte_5_exists then

    -- Trade Cancel Or Correct Byte 5: Struct of 8 fields
    index, trade_cancel_or_correct_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 6
  local trade_cancel_or_correct_byte_6 = nil

  local trade_cancel_or_correct_byte_6_exists = trade_cancel_or_correct_bitfield_count >= 6

  if trade_cancel_or_correct_byte_6_exists then

    -- Trade Cancel Or Correct Byte 6: Struct of 8 fields
    index, trade_cancel_or_correct_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 7
  local trade_cancel_or_correct_byte_7 = nil

  local trade_cancel_or_correct_byte_7_exists = trade_cancel_or_correct_bitfield_count >= 7

  if trade_cancel_or_correct_byte_7_exists then

    -- Trade Cancel Or Correct Byte 7: Struct of 8 fields
    index, trade_cancel_or_correct_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 8
  local trade_cancel_or_correct_byte_8 = nil

  local trade_cancel_or_correct_byte_8_exists = trade_cancel_or_correct_bitfield_count >= 8

  if trade_cancel_or_correct_byte_8_exists then

    -- Trade Cancel Or Correct Byte 8: Struct of 8 fields
    index, trade_cancel_or_correct_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 9
  local trade_cancel_or_correct_byte_9 = nil

  local trade_cancel_or_correct_byte_9_exists = trade_cancel_or_correct_bitfield_count >= 9

  if trade_cancel_or_correct_byte_9_exists then

    -- Trade Cancel Or Correct Byte 9: Struct of 8 fields
    index, trade_cancel_or_correct_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 10
  local trade_cancel_or_correct_byte_10 = nil

  local trade_cancel_or_correct_byte_10_exists = trade_cancel_or_correct_bitfield_count >= 10

  if trade_cancel_or_correct_byte_10_exists then

    -- Trade Cancel Or Correct Byte 10: Struct of 8 fields
    index, trade_cancel_or_correct_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 11
  local trade_cancel_or_correct_byte_11 = nil

  local trade_cancel_or_correct_byte_11_exists = trade_cancel_or_correct_bitfield_count >= 11

  if trade_cancel_or_correct_byte_11_exists then

    -- Trade Cancel Or Correct Byte 11: Struct of 8 fields
    index, trade_cancel_or_correct_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 12
  local trade_cancel_or_correct_byte_12 = nil

  local trade_cancel_or_correct_byte_12_exists = trade_cancel_or_correct_bitfield_count >= 12

  if trade_cancel_or_correct_byte_12_exists then

    -- Trade Cancel Or Correct Byte 12: Struct of 8 fields
    index, trade_cancel_or_correct_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 13
  local trade_cancel_or_correct_byte_13 = nil

  local trade_cancel_or_correct_byte_13_exists = trade_cancel_or_correct_bitfield_count >= 13

  if trade_cancel_or_correct_byte_13_exists then

    -- Trade Cancel Or Correct Byte 13: Struct of 8 fields
    index, trade_cancel_or_correct_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 14
  local trade_cancel_or_correct_byte_14 = nil

  local trade_cancel_or_correct_byte_14_exists = trade_cancel_or_correct_bitfield_count >= 14

  if trade_cancel_or_correct_byte_14_exists then

    -- Trade Cancel Or Correct Byte 14: Struct of 8 fields
    index, trade_cancel_or_correct_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 15
  local trade_cancel_or_correct_byte_15 = nil

  local trade_cancel_or_correct_byte_15_exists = trade_cancel_or_correct_bitfield_count >= 15

  if trade_cancel_or_correct_byte_15_exists then

    -- Trade Cancel Or Correct Byte 15: Struct of 8 fields
    index, trade_cancel_or_correct_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 16
  local trade_cancel_or_correct_byte_16 = nil

  local trade_cancel_or_correct_byte_16_exists = trade_cancel_or_correct_bitfield_count >= 16

  if trade_cancel_or_correct_byte_16_exists then

    -- Trade Cancel Or Correct Byte 16: Struct of 8 fields
    index, trade_cancel_or_correct_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 17
  local trade_cancel_or_correct_byte_17 = nil

  local trade_cancel_or_correct_byte_17_exists = trade_cancel_or_correct_bitfield_count >= 17

  if trade_cancel_or_correct_byte_17_exists then

    -- Trade Cancel Or Correct Byte 17: Struct of 8 fields
    index, trade_cancel_or_correct_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = trade_cancel_or_correct_bitfield_count >= 2 and trade_cancel_or_correct_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = trade_cancel_or_correct_bitfield_count >= 2 and trade_cancel_or_correct_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Corrected Size
  local corrected_size = nil

  local corrected_size_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(2) > 0

  if corrected_size_exists then
    index, corrected_size = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Sub Liquidity Indicator
  local sub_liquidity_indicator = nil

  local sub_liquidity_indicator_exists = trade_cancel_or_correct_bitfield_count >= 7 and trade_cancel_or_correct_byte_7:bitfield(7) > 0

  if sub_liquidity_indicator_exists then
    index, sub_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Marketing Fee Code
  local marketing_fee_code = nil

  local marketing_fee_code_exists = trade_cancel_or_correct_bitfield_count >= 9 and trade_cancel_or_correct_byte_9:bitfield(7) > 0

  if marketing_fee_code_exists then
    index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = trade_cancel_or_correct_bitfield_count >= 9 and trade_cancel_or_correct_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = trade_cancel_or_correct_bitfield_count >= 9 and trade_cancel_or_correct_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = trade_cancel_or_correct_bitfield_count >= 9 and trade_cancel_or_correct_byte_9:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = trade_cancel_or_correct_bitfield_count >= 10 and trade_cancel_or_correct_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = trade_cancel_or_correct_bitfield_count >= 10 and trade_cancel_or_correct_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = trade_cancel_or_correct_bitfield_count >= 10 and trade_cancel_or_correct_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = trade_cancel_or_correct_bitfield_count >= 10 and trade_cancel_or_correct_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Trade Cancel Or Correct Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_optional_fields)
  local index = offset + size_of_trade_cancel_or_correct_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.trade_cancel_or_correct_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields.fields(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_optional_fields)
    parent:set_len(size_of_trade_cancel_or_correct_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields.fields(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_optional_fields)

    return index
  end
end

-- Orig Time
cboe_edgx_options_orderentry_boe_v2_10.orig_time = {}

-- Size Of: Orig Time
cboe_edgx_options_orderentry_boe_v2_10.orig_time.size = 8

-- Display: Orig Time
cboe_edgx_options_orderentry_boe_v2_10.orig_time.display = function(value)
  return "Orig Time: "..value
end

-- Dissect: Orig Time
cboe_edgx_options_orderentry_boe_v2_10.orig_time.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.orig_time.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.orig_time.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.orig_time, range, value, display)

  return offset + length, value
end

-- Corrected Price
cboe_edgx_options_orderentry_boe_v2_10.corrected_price = {}

-- Size Of: Corrected Price
cboe_edgx_options_orderentry_boe_v2_10.corrected_price.size = 8

-- Display: Corrected Price
cboe_edgx_options_orderentry_boe_v2_10.corrected_price.display = function(value)
  return "Corrected Price: "..value
end

-- Dissect: Corrected Price
cboe_edgx_options_orderentry_boe_v2_10.corrected_price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.corrected_price.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.corrected_price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.corrected_price, range, value, display)

  return offset + length, value
end

-- Last Px
cboe_edgx_options_orderentry_boe_v2_10.last_px = {}

-- Size Of: Last Px
cboe_edgx_options_orderentry_boe_v2_10.last_px.size = 8

-- Display: Last Px
cboe_edgx_options_orderentry_boe_v2_10.last_px.display = function(value)
  return "Last Px: "..value
end

-- Dissect: Last Px
cboe_edgx_options_orderentry_boe_v2_10.last_px.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.last_px.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.last_px.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_px, range, value, display)

  return offset + length, value
end

-- Last Shares
cboe_edgx_options_orderentry_boe_v2_10.last_shares = {}

-- Size Of: Last Shares
cboe_edgx_options_orderentry_boe_v2_10.last_shares.size = 4

-- Display: Last Shares
cboe_edgx_options_orderentry_boe_v2_10.last_shares.display = function(value)
  return "Last Shares: "..value
end

-- Dissect: Last Shares
cboe_edgx_options_orderentry_boe_v2_10.last_shares.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.last_shares.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.last_shares.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_shares, range, value, display)

  return offset + length, value
end

-- Clearing Account
cboe_edgx_options_orderentry_boe_v2_10.clearing_account = {}

-- Size Of: Clearing Account
cboe_edgx_options_orderentry_boe_v2_10.clearing_account.size = 4

-- Display: Clearing Account
cboe_edgx_options_orderentry_boe_v2_10.clearing_account.display = function(value)
  return "Clearing Account: "..value
end

-- Dissect: Clearing Account
cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.clearing_account, range, value, display)

  return offset + length, value
end

-- Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.clearing_firm = {}

-- Size Of: Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.size = 4

-- Display: Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.display = function(value)
  return "Clearing Firm: "..value
end

-- Dissect: Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.clearing_firm, range, value, display)

  return offset + length, value
end

-- Base Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator = {}

-- Size Of: Base Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.size = 1

-- Display: Base Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.display = function(value)
  if value == "A" then
    return "Base Liquidity Indicator: Added Liquidity (A)"
  end
  if value == "R" then
    return "Base Liquidity Indicator: Removed Liquidity (R)"
  end
  if value == "X" then
    return "Base Liquidity Indicator: Routed To Another Market (X)"
  end
  if value == "C" then
    return "Base Liquidity Indicator: Auction Or Uncrossing (C)"
  end

  return "Base Liquidity Indicator: Unknown("..value..")"
end

-- Dissect: Base Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.base_liquidity_indicator, range, value, display)

  return offset + length, value
end

-- Side
cboe_edgx_options_orderentry_boe_v2_10.side = {}

-- Size Of: Side
cboe_edgx_options_orderentry_boe_v2_10.side.size = 1

-- Display: Side
cboe_edgx_options_orderentry_boe_v2_10.side.display = function(value)
  if value == "1" then
    return "Side: Aim (1)"
  end
  if value == "2" then
    return "Side: Qcc (2)"
  end
  if value == "1" then
    return "Side: Buy (1)"
  end
  if value == "2" then
    return "Side: Sell (2)"
  end
  if value == "5" then
    return "Side: Sell Short (5)"
  end
  if value == "6" then
    return "Side: Sell Short Exempt (6)"
  end

  return "Side: Unknown("..value..")"
end

-- Dissect: Side
cboe_edgx_options_orderentry_boe_v2_10.side.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.side.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.side.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.side, range, value, display)

  return offset + length, value
end

-- Exec Ref Id
cboe_edgx_options_orderentry_boe_v2_10.exec_ref_id = {}

-- Size Of: Exec Ref Id
cboe_edgx_options_orderentry_boe_v2_10.exec_ref_id.size = 8

-- Display: Exec Ref Id
cboe_edgx_options_orderentry_boe_v2_10.exec_ref_id.display = function(value)
  return "Exec Ref Id: "..value
end

-- Dissect: Exec Ref Id
cboe_edgx_options_orderentry_boe_v2_10.exec_ref_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.exec_ref_id.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.exec_ref_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.exec_ref_id, range, value, display)

  return offset + length, value
end

-- Order Id
cboe_edgx_options_orderentry_boe_v2_10.order_id = {}

-- Size Of: Order Id
cboe_edgx_options_orderentry_boe_v2_10.order_id.size = 8

-- Display: Order Id
cboe_edgx_options_orderentry_boe_v2_10.order_id.display = function(value)
  return "Order Id: "..value
end

-- Dissect: Order Id
cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_id.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_id, range, value, display)

  return offset + length, value
end

-- Trade Cancel Or Correct Message
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message = {}

-- Read runtime size of: Trade Cancel Or Correct Message
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Trade Cancel Or Correct Message
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Trade Cancel Or Correct Message
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.fields = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Exec Ref Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_ref_id = cboe_edgx_options_orderentry_boe_v2_10.exec_ref_id.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Base Liquidity Indicator: 1 Byte Ascii String Enum with 4 values
  index, base_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.dissect(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)

  -- Clearing Account: 4 Byte Ascii String
  index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)

  -- Last Shares: 4 Byte Unsigned Fixed Width Integer
  index, last_shares = cboe_edgx_options_orderentry_boe_v2_10.last_shares.dissect(buffer, index, packet, parent)

  -- Last Px: 8 Byte Signed Fixed Width Integer
  index, last_px = cboe_edgx_options_orderentry_boe_v2_10.last_px.dissect(buffer, index, packet, parent)

  -- Corrected Price: 8 Byte Signed Fixed Width Integer
  index, corrected_price = cboe_edgx_options_orderentry_boe_v2_10.corrected_price.dissect(buffer, index, packet, parent)

  -- Orig Time: 8 Byte Unsigned Fixed Width Integer
  index, orig_time = cboe_edgx_options_orderentry_boe_v2_10.orig_time.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Trade Cancel Or Correct Optional Fields
  local size_of_trade_cancel_or_correct_optional_fields = message_length - (index - offset) - 8

  -- Trade Cancel Or Correct Optional Fields: Struct of 34 fields
  index, trade_cancel_or_correct_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_optional_fields.dissect(buffer, index, packet, parent, size_of_trade_cancel_or_correct_optional_fields)

  return index
end

-- Dissect: Trade Cancel Or Correct Message
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_trade_cancel_or_correct_message = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.trade_cancel_or_correct_message then
    local range = buffer(offset, size_of_trade_cancel_or_correct_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.fields(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_message)

  return offset + size_of_trade_cancel_or_correct_message
end

-- Fee Code
cboe_edgx_options_orderentry_boe_v2_10.fee_code = {}

-- Size Of: Fee Code
cboe_edgx_options_orderentry_boe_v2_10.fee_code.size = 2

-- Display: Fee Code
cboe_edgx_options_orderentry_boe_v2_10.fee_code.display = function(value)
  return "Fee Code: "..value
end

-- Dissect: Fee Code
cboe_edgx_options_orderentry_boe_v2_10.fee_code.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.fee_code.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.fee_code.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.fee_code, range, value, display)

  return offset + length, value
end

-- Contra Capacity
cboe_edgx_options_orderentry_boe_v2_10.contra_capacity = {}

-- Size Of: Contra Capacity
cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.size = 1

-- Display: Contra Capacity
cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.display = function(value)
  return "Contra Capacity: "..value
end

-- Dissect: Contra Capacity
cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.contra_capacity, range, value, display)

  return offset + length, value
end

-- Contra Trader
cboe_edgx_options_orderentry_boe_v2_10.contra_trader = {}

-- Size Of: Contra Trader
cboe_edgx_options_orderentry_boe_v2_10.contra_trader.size = 4

-- Display: Contra Trader
cboe_edgx_options_orderentry_boe_v2_10.contra_trader.display = function(value)
  return "Contra Trader: "..value
end

-- Dissect: Contra Trader
cboe_edgx_options_orderentry_boe_v2_10.contra_trader.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.contra_trader.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.contra_trader.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.contra_trader, range, value, display)

  return offset + length, value
end

-- Leaves Qty
cboe_edgx_options_orderentry_boe_v2_10.leaves_qty = {}

-- Size Of: Leaves Qty
cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.size = 4

-- Display: Leaves Qty
cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.display = function(value)
  return "Leaves Qty: "..value
end

-- Dissect: Leaves Qty
cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.leaves_qty, range, value, display)

  return offset + length, value
end

-- Exec Id
cboe_edgx_options_orderentry_boe_v2_10.exec_id = {}

-- Size Of: Exec Id
cboe_edgx_options_orderentry_boe_v2_10.exec_id.size = 8

-- Display: Exec Id
cboe_edgx_options_orderentry_boe_v2_10.exec_id.display = function(value)
  return "Exec Id: "..value
end

-- Dissect: Exec Id
cboe_edgx_options_orderentry_boe_v2_10.exec_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.exec_id.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.exec_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.exec_id, range, value, display)

  return offset + length, value
end

-- Quote Update Id
cboe_edgx_options_orderentry_boe_v2_10.quote_update_id = {}

-- Size Of: Quote Update Id
cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.size = 16

-- Display: Quote Update Id
cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.display = function(value)
  return "Quote Update Id: "..value
end

-- Dissect: Quote Update Id
cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_id, range, value, display)

  return offset + length, value
end

-- Quote Execution Message
cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message = {}

-- Read runtime size of: Quote Execution Message
cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Execution Message
cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Execution Message
cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.fields = function(buffer, offset, packet, parent, size_of_quote_execution_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Exec Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_id = cboe_edgx_options_orderentry_boe_v2_10.exec_id.dissect(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)

  -- Last Shares: 4 Byte Unsigned Fixed Width Integer
  index, last_shares = cboe_edgx_options_orderentry_boe_v2_10.last_shares.dissect(buffer, index, packet, parent)

  -- Last Px: 8 Byte Signed Fixed Width Integer
  index, last_px = cboe_edgx_options_orderentry_boe_v2_10.last_px.dissect(buffer, index, packet, parent)

  -- Leaves Qty: 4 Byte Unsigned Fixed Width Integer
  index, leaves_qty = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.dissect(buffer, index, packet, parent)

  -- Contra Trader: 4 Byte Ascii String
  index, contra_trader = cboe_edgx_options_orderentry_boe_v2_10.contra_trader.dissect(buffer, index, packet, parent)

  -- Contra Capacity: 1 Byte Ascii String
  index, contra_capacity = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Base Liquidity Indicator: 1 Byte Ascii String Enum with 4 values
  index, base_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.dissect(buffer, index, packet, parent)

  -- Sub Liquidity Indicator: 1 Byte Ascii String Enum with 8 values
  index, sub_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.dissect(buffer, index, packet, parent)

  -- Fee Code: 2 Byte Ascii String
  index, fee_code = cboe_edgx_options_orderentry_boe_v2_10.fee_code.dissect(buffer, index, packet, parent)

  -- Marketing Fee Code: 2 Byte Ascii String Enum with 3 values
  index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Execution Message
cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_execution_message = cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_execution_message then
    local range = buffer(offset, size_of_quote_execution_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_execution_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.fields(buffer, offset, packet, parent, size_of_quote_execution_message)

  return offset + size_of_quote_execution_message
end

-- Alloc Qty
cboe_edgx_options_orderentry_boe_v2_10.alloc_qty = {}

-- Size Of: Alloc Qty
cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.size = 4

-- Display: Alloc Qty
cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.display = function(value)
  return "Alloc Qty: "..value
end

-- Dissect: Alloc Qty
cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.alloc_qty, range, value, display)

  return offset + length, value
end

-- Stop Px
cboe_edgx_options_orderentry_boe_v2_10.stop_px = {}

-- Size Of: Stop Px
cboe_edgx_options_orderentry_boe_v2_10.stop_px.size = 8

-- Display: Stop Px
cboe_edgx_options_orderentry_boe_v2_10.stop_px.display = function(value)
  return "Stop Px: "..value
end

-- Dissect: Stop Px
cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.stop_px.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.stop_px.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.stop_px, range, value, display)

  return offset + length, value
end

-- Echo Text
cboe_edgx_options_orderentry_boe_v2_10.echo_text = {}

-- Size Of: Echo Text
cboe_edgx_options_orderentry_boe_v2_10.echo_text.size = 64

-- Display: Echo Text
cboe_edgx_options_orderentry_boe_v2_10.echo_text.display = function(value)
  return "Echo Text: "..value
end

-- Dissect: Echo Text
cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.echo_text.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.echo_text.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.echo_text, range, value, display)

  return offset + length, value
end

-- Max Remove Pct
cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct = {}

-- Size Of: Max Remove Pct
cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.size = 1

-- Display: Max Remove Pct
cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.display = function(value)
  return "Max Remove Pct: "..value
end

-- Dissect: Max Remove Pct
cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.max_remove_pct, range, value, display)

  return offset + length, value
end

-- Min Qty
cboe_edgx_options_orderentry_boe_v2_10.min_qty = {}

-- Size Of: Min Qty
cboe_edgx_options_orderentry_boe_v2_10.min_qty.size = 4

-- Display: Min Qty
cboe_edgx_options_orderentry_boe_v2_10.min_qty.display = function(value)
  return "Min Qty: "..value
end

-- Dissect: Min Qty
cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.min_qty.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.min_qty.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.min_qty, range, value, display)

  return offset + length, value
end

-- Time In Force
cboe_edgx_options_orderentry_boe_v2_10.time_in_force = {}

-- Size Of: Time In Force
cboe_edgx_options_orderentry_boe_v2_10.time_in_force.size = 1

-- Display: Time In Force
cboe_edgx_options_orderentry_boe_v2_10.time_in_force.display = function(value)
  if value == "0" then
    return "Time In Force: Day (0)"
  end
  if value == "1" then
    return "Time In Force: Gtc (1)"
  end
  if value == "2" then
    return "Time In Force: Ato (2)"
  end
  if value == "3" then
    return "Time In Force: Ioc (3)"
  end
  if value == "4" then
    return "Time In Force: Fok (4)"
  end
  if value == "6" then
    return "Time In Force: Gtd (6)"
  end
  if value == "6" then
    return "Time In Force: Atc (6)"
  end

  return "Time In Force: Unknown("..value..")"
end

-- Dissect: Time In Force
cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.time_in_force, range, value, display)

  return offset + length, value
end

-- Ord Type
cboe_edgx_options_orderentry_boe_v2_10.ord_type = {}

-- Size Of: Ord Type
cboe_edgx_options_orderentry_boe_v2_10.ord_type.size = 1

-- Display: Ord Type
cboe_edgx_options_orderentry_boe_v2_10.ord_type.display = function(value)
  if value == "1" then
    return "Ord Type: Market (1)"
  end
  if value == "2" then
    return "Ord Type: Limit (2)"
  end
  if value == "3" then
    return "Ord Type: Stop (3)"
  end
  if value == "4" then
    return "Ord Type: Stop Limit (4)"
  end

  return "Ord Type: Unknown("..value..")"
end

-- Dissect: Ord Type
cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.ord_type.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.ord_type.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.ord_type, range, value, display)

  return offset + length, value
end

-- Exec Inst
cboe_edgx_options_orderentry_boe_v2_10.exec_inst = {}

-- Size Of: Exec Inst
cboe_edgx_options_orderentry_boe_v2_10.exec_inst.size = 1

-- Display: Exec Inst
cboe_edgx_options_orderentry_boe_v2_10.exec_inst.display = function(value)
  if value == "f" then
    return "Exec Inst: Intermarket Sweep (f)"
  end
  if value == "G" then
    return "Exec Inst: All Or None (G)"
  end
  if value == "s" then
    return "Exec Inst: Sweep (s)"
  end

  return "Exec Inst: Unknown("..value..")"
end

-- Dissect: Exec Inst
cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.exec_inst, range, value, display)

  return offset + length, value
end

-- Price
cboe_edgx_options_orderentry_boe_v2_10.price = {}

-- Size Of: Price
cboe_edgx_options_orderentry_boe_v2_10.price.size = 8

-- Display: Price
cboe_edgx_options_orderentry_boe_v2_10.price.display = function(value)
  return "Price: "..value
end

-- Dissect: Price
cboe_edgx_options_orderentry_boe_v2_10.price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.price.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.price, range, value, display)

  return offset + length, value
end

-- Cancel Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17 = {}

-- Size Of: Cancel Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.size = 1

-- Display: Cancel Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_17, range, display)

  if show.cancel_rejected_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16 = {}

-- Size Of: Cancel Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.size = 1

-- Display: Cancel Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_16, range, display)

  if show.cancel_rejected_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15 = {}

-- Size Of: Cancel Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.size = 1

-- Display: Cancel Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Mass Cancel Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Mass Cancel Id Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Mass Cancel Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_mass_cancel_id_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_15, range, display)

  if show.cancel_rejected_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14 = {}

-- Size Of: Cancel Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.size = 1

-- Display: Cancel Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_14, range, display)

  if show.cancel_rejected_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13 = {}

-- Size Of: Cancel Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.size = 1

-- Display: Cancel Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_13, range, display)

  if show.cancel_rejected_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12 = {}

-- Size Of: Cancel Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.size = 1

-- Display: Cancel Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_12, range, display)

  if show.cancel_rejected_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11 = {}

-- Size Of: Cancel Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.size = 1

-- Display: Cancel Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_11, range, display)

  if show.cancel_rejected_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10 = {}

-- Size Of: Cancel Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.size = 1

-- Display: Cancel Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Cross Exclusion Indicator Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Routing Firm Id Exists|"
  end
  -- Is Cancel Rejected Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Give Up Firm Id Exists|"
  end
  -- Is Cancel Rejected Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Alloc Qty Exists|"
  end
  -- Is Cancel Rejected Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_routing_firm_id_exists, buffer(offset, 1))

  -- Cancel Rejected Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_give_up_firm_id_exists, buffer(offset, 1))

  -- Cancel Rejected Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_alloc_qty_exists, buffer(offset, 1))

  -- Cancel Rejected Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_10, range, display)

  if show.cancel_rejected_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9 = {}

-- Size Of: Cancel Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.size = 1

-- Display: Cancel Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Cmta Number Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Auction Id Exists|"
  end
  -- Is Cancel Rejected Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Target Party Id Exists|"
  end
  -- Is Cancel Rejected Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_cmta_number_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_auction_id_exists, buffer(offset, 1))

  -- Cancel Rejected Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_target_party_id_exists, buffer(offset, 1))

  -- Cancel Rejected Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_9, range, display)

  if show.cancel_rejected_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8 = {}

-- Size Of: Cancel Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.size = 1

-- Display: Cancel Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Stop Px Exists|"
  end
  -- Is Cancel Rejected Echo Text Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Echo Text Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_stop_px_exists, buffer(offset, 1))

  -- Cancel Rejected Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_echo_text_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_8, range, display)

  if show.cancel_rejected_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7 = {}

-- Size Of: Cancel Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.size = 1

-- Display: Cancel Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_7, range, display)

  if show.cancel_rejected_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6 = {}

-- Size Of: Cancel Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.size = 1

-- Display: Cancel Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_6, range, display)

  if show.cancel_rejected_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5 = {}

-- Size Of: Cancel Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.size = 1

-- Display: Cancel Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_5, range, display)

  if show.cancel_rejected_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4 = {}

-- Size Of: Cancel Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.size = 1

-- Display: Cancel Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Corrected Size Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Open Close Exists|"
  end
  -- Is Cancel Rejected Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Put Or Call Exists|"
  end
  -- Is Cancel Rejected Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Strike Price Exists|"
  end
  -- Is Cancel Rejected Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_corrected_size_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_open_close_exists, buffer(offset, 1))

  -- Cancel Rejected Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_put_or_call_exists, buffer(offset, 1))

  -- Cancel Rejected Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_strike_price_exists, buffer(offset, 1))

  -- Cancel Rejected Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_4, range, display)

  if show.cancel_rejected_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3 = {}

-- Size Of: Cancel Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.size = 1

-- Display: Cancel Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_3, range, display)

  if show.cancel_rejected_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2 = {}

-- Size Of: Cancel Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.size = 1

-- Display: Cancel Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Capacity Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_capacity_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_symbol_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_2, range, display)

  if show.cancel_rejected_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1 = {}

-- Size Of: Cancel Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.size = 1

-- Display: Cancel Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Max Remove Pct Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Max Remove Pct Exists|"
  end
  -- Is Cancel Rejected Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Min Qty Exists|"
  end
  -- Is Cancel Rejected Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Time In Force Exists|"
  end
  -- Is Cancel Rejected Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Ord Type Exists|"
  end
  -- Is Cancel Rejected Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Exec Inst Exists|"
  end
  -- Is Cancel Rejected Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Price Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_max_remove_pct_exists, buffer(offset, 1))

  -- Cancel Rejected Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_min_qty_exists, buffer(offset, 1))

  -- Cancel Rejected Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_time_in_force_exists, buffer(offset, 1))

  -- Cancel Rejected Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_ord_type_exists, buffer(offset, 1))

  -- Cancel Rejected Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_exec_inst_exists, buffer(offset, 1))

  -- Cancel Rejected Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_price_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_side_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_byte_1, range, display)

  if show.cancel_rejected_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count = {}

-- Size Of: Cancel Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count.size = 1

-- Display: Cancel Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count.display = function(value)
  return "Cancel Rejected Bitfield Count: "..value
end

-- Dissect: Cancel Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Cancel Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields = {}

-- Display: Cancel Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields.fields = function(buffer, offset, packet, parent, size_of_cancel_rejected_optional_fields)
  local index = offset

  -- Cancel Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cancel_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cancel Rejected Byte 1
  local cancel_rejected_byte_1 = nil

  local cancel_rejected_byte_1_exists = cancel_rejected_bitfield_count >= 1

  if cancel_rejected_byte_1_exists then

    -- Cancel Rejected Byte 1: Struct of 8 fields
    index, cancel_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 2
  local cancel_rejected_byte_2 = nil

  local cancel_rejected_byte_2_exists = cancel_rejected_bitfield_count >= 2

  if cancel_rejected_byte_2_exists then

    -- Cancel Rejected Byte 2: Struct of 8 fields
    index, cancel_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 3
  local cancel_rejected_byte_3 = nil

  local cancel_rejected_byte_3_exists = cancel_rejected_bitfield_count >= 3

  if cancel_rejected_byte_3_exists then

    -- Cancel Rejected Byte 3: Struct of 8 fields
    index, cancel_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 4
  local cancel_rejected_byte_4 = nil

  local cancel_rejected_byte_4_exists = cancel_rejected_bitfield_count >= 4

  if cancel_rejected_byte_4_exists then

    -- Cancel Rejected Byte 4: Struct of 8 fields
    index, cancel_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 5
  local cancel_rejected_byte_5 = nil

  local cancel_rejected_byte_5_exists = cancel_rejected_bitfield_count >= 5

  if cancel_rejected_byte_5_exists then

    -- Cancel Rejected Byte 5: Struct of 8 fields
    index, cancel_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 6
  local cancel_rejected_byte_6 = nil

  local cancel_rejected_byte_6_exists = cancel_rejected_bitfield_count >= 6

  if cancel_rejected_byte_6_exists then

    -- Cancel Rejected Byte 6: Struct of 8 fields
    index, cancel_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 7
  local cancel_rejected_byte_7 = nil

  local cancel_rejected_byte_7_exists = cancel_rejected_bitfield_count >= 7

  if cancel_rejected_byte_7_exists then

    -- Cancel Rejected Byte 7: Struct of 8 fields
    index, cancel_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 8
  local cancel_rejected_byte_8 = nil

  local cancel_rejected_byte_8_exists = cancel_rejected_bitfield_count >= 8

  if cancel_rejected_byte_8_exists then

    -- Cancel Rejected Byte 8: Struct of 8 fields
    index, cancel_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 9
  local cancel_rejected_byte_9 = nil

  local cancel_rejected_byte_9_exists = cancel_rejected_bitfield_count >= 9

  if cancel_rejected_byte_9_exists then

    -- Cancel Rejected Byte 9: Struct of 8 fields
    index, cancel_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 10
  local cancel_rejected_byte_10 = nil

  local cancel_rejected_byte_10_exists = cancel_rejected_bitfield_count >= 10

  if cancel_rejected_byte_10_exists then

    -- Cancel Rejected Byte 10: Struct of 8 fields
    index, cancel_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 11
  local cancel_rejected_byte_11 = nil

  local cancel_rejected_byte_11_exists = cancel_rejected_bitfield_count >= 11

  if cancel_rejected_byte_11_exists then

    -- Cancel Rejected Byte 11: Struct of 8 fields
    index, cancel_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 12
  local cancel_rejected_byte_12 = nil

  local cancel_rejected_byte_12_exists = cancel_rejected_bitfield_count >= 12

  if cancel_rejected_byte_12_exists then

    -- Cancel Rejected Byte 12: Struct of 8 fields
    index, cancel_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 13
  local cancel_rejected_byte_13 = nil

  local cancel_rejected_byte_13_exists = cancel_rejected_bitfield_count >= 13

  if cancel_rejected_byte_13_exists then

    -- Cancel Rejected Byte 13: Struct of 8 fields
    index, cancel_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 14
  local cancel_rejected_byte_14 = nil

  local cancel_rejected_byte_14_exists = cancel_rejected_bitfield_count >= 14

  if cancel_rejected_byte_14_exists then

    -- Cancel Rejected Byte 14: Struct of 8 fields
    index, cancel_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 15
  local cancel_rejected_byte_15 = nil

  local cancel_rejected_byte_15_exists = cancel_rejected_bitfield_count >= 15

  if cancel_rejected_byte_15_exists then

    -- Cancel Rejected Byte 15: Struct of 8 fields
    index, cancel_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 16
  local cancel_rejected_byte_16 = nil

  local cancel_rejected_byte_16_exists = cancel_rejected_bitfield_count >= 16

  if cancel_rejected_byte_16_exists then

    -- Cancel Rejected Byte 16: Struct of 8 fields
    index, cancel_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 17
  local cancel_rejected_byte_17 = nil

  local cancel_rejected_byte_17_exists = cancel_rejected_bitfield_count >= 17

  if cancel_rejected_byte_17_exists then

    -- Cancel Rejected Byte 17: Struct of 8 fields
    index, cancel_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Side
  local side = nil

  local side_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(7) > 0

  if side_exists then
    index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Time In Force
  local time_in_force = nil

  local time_in_force_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(2) > 0

  if time_in_force_exists then
    index, time_in_force = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Min Qty
  local min_qty = nil

  local min_qty_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(1) > 0

  if min_qty_exists then
    index, min_qty = cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Remove Pct
  local max_remove_pct = nil

  local max_remove_pct_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(0) > 0

  if max_remove_pct_exists then
    index, max_remove_pct = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = cancel_rejected_bitfield_count >= 2 and cancel_rejected_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = cancel_rejected_bitfield_count >= 2 and cancel_rejected_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = cancel_rejected_bitfield_count >= 4 and cancel_rejected_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = cancel_rejected_bitfield_count >= 4 and cancel_rejected_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = cancel_rejected_bitfield_count >= 4 and cancel_rejected_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = cancel_rejected_bitfield_count >= 4 and cancel_rejected_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Corrected Size
  local corrected_size = nil

  local corrected_size_exists = cancel_rejected_bitfield_count >= 4 and cancel_rejected_byte_4:bitfield(2) > 0

  if corrected_size_exists then
    index, corrected_size = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Echo Text
  local echo_text = nil

  local echo_text_exists = cancel_rejected_bitfield_count >= 8 and cancel_rejected_byte_8:bitfield(6) > 0

  if echo_text_exists then
    index, echo_text = cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = cancel_rejected_bitfield_count >= 8 and cancel_rejected_byte_8:bitfield(5) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Marketing Fee Code
  local marketing_fee_code = nil

  local marketing_fee_code_exists = cancel_rejected_bitfield_count >= 9 and cancel_rejected_byte_9:bitfield(7) > 0

  if marketing_fee_code_exists then
    index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = cancel_rejected_bitfield_count >= 9 and cancel_rejected_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = cancel_rejected_bitfield_count >= 9 and cancel_rejected_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = cancel_rejected_bitfield_count >= 9 and cancel_rejected_byte_9:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = cancel_rejected_bitfield_count >= 10 and cancel_rejected_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = cancel_rejected_bitfield_count >= 10 and cancel_rejected_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = cancel_rejected_bitfield_count >= 10 and cancel_rejected_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = cancel_rejected_bitfield_count >= 10 and cancel_rejected_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = cancel_rejected_bitfield_count >= 10 and cancel_rejected_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Mass Cancel Id
  local mass_cancel_id = nil

  local mass_cancel_id_exists = cancel_rejected_bitfield_count >= 15 and cancel_rejected_byte_15:bitfield(4) > 0

  if mass_cancel_id_exists then
    index, mass_cancel_id = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cancel Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_cancel_rejected_optional_fields)
  local index = offset + size_of_cancel_rejected_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.cancel_rejected_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_cancel_rejected_optional_fields)
    parent:set_len(size_of_cancel_rejected_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_cancel_rejected_optional_fields)

    return index
  end
end

-- Cancel Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reject_reason = {}

-- Size Of: Cancel Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reject_reason.size = 1

-- Display: Cancel Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reject_reason.display = function(value)
  if value == "A" then
    return "Cancel Reject Reason: Admin (A)"
  end
  if value == "D" then
    return "Cancel Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Cancel Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Cancel Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Cancel Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Cancel Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "L" then
    return "Cancel Reject Reason: Order Would Lock Or Cross Nbbo (L)"
  end
  if value == "M" then
    return "Cancel Reject Reason: Order Size Exceeded (M)"
  end
  if value == "N" then
    return "Cancel Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Cancel Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Cancel Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "Q" then
    return "Cancel Reject Reason: Waiting For First Trade (Q)"
  end
  if value == "R" then
    return "Cancel Reject Reason: Routing Unavailable (R)"
  end
  if value == "T" then
    return "Cancel Reject Reason: Fill Would Trade Through The Nbbo (T)"
  end
  if value == "U" then
    return "Cancel Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Cancel Reject Reason: Would Wash (V)"
  end
  if value == "W" then
    return "Cancel Reject Reason: Add Liquidity Only Order Would Remove (W)"
  end
  if value == "X" then
    return "Cancel Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Cancel Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Cancel Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "c" then
    return "Cancel Reject Reason: Only Close Transactions Accepted (c)"
  end
  if value == "f" then
    return "Cancel Reject Reason: Risk Management Efid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Cancel Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "o" then
    return "Cancel Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "r" then
    return "Cancel Reject Reason: Reserve Reload (r)"
  end
  if value == "s" then
    return "Cancel Reject Reason: Risk Management Risk Root Level (s)"
  end
  if value == "w" then
    return "Cancel Reject Reason: Would Remove On Unslide (w)"
  end
  if value == "x" then
    return "Cancel Reject Reason: Crossed Market (x)"
  end
  if value == "y" then
    return "Cancel Reject Reason: Order Received By Cboe During Replay (y)"
  end
  if value == "z" then
    return "Cancel Reject Reason: Session End (z)"
  end
  if value == "+" then
    return "Cancel Reject Reason: Risk Management Efid Group Level (+)"
  end

  return "Cancel Reject Reason: Unknown("..value..")"
end

-- Dissect: Cancel Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reject_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cancel_reject_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_reject_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_reject_reason, range, value, display)

  return offset + length, value
end

-- Cancel Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message = {}

-- Read runtime size of: Cancel Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Cancel Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.fields = function(buffer, offset, packet, parent, size_of_cancel_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Cancel Reject Reason: 1 Byte Ascii String Enum with 31 values
  index, cancel_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.cancel_reject_reason.dissect(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_edgx_options_orderentry_boe_v2_10.text.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Cancel Rejected Optional Fields
  local size_of_cancel_rejected_optional_fields = message_length - (index - offset) - 8

  -- Cancel Rejected Optional Fields: Struct of 44 fields
  index, cancel_rejected_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_optional_fields.dissect(buffer, index, packet, parent, size_of_cancel_rejected_optional_fields)

  return index
end

-- Dissect: Cancel Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cancel_rejected_message = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cancel_rejected_message then
    local range = buffer(offset, size_of_cancel_rejected_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.fields(buffer, offset, packet, parent, size_of_cancel_rejected_message)

  return offset + size_of_cancel_rejected_message
end

-- Frequent Trader Id
cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id = {}

-- Size Of: Frequent Trader Id
cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.size = 6

-- Display: Frequent Trader Id
cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.display = function(value)
  return "Frequent Trader Id: "..value
end

-- Dissect: Frequent Trader Id
cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.frequent_trader_id, range, value, display)

  return offset + length, value
end

-- Equity Party Id
cboe_edgx_options_orderentry_boe_v2_10.equity_party_id = {}

-- Size Of: Equity Party Id
cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.size = 4

-- Display: Equity Party Id
cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.display = function(value)
  return "Equity Party Id: "..value
end

-- Dissect: Equity Party Id
cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_party_id, range, value, display)

  return offset + length, value
end

-- Cross Prioritization
cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization = {}

-- Size Of: Cross Prioritization
cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.size = 1

-- Display: Cross Prioritization
cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.display = function(value)
  if value == "1" then
    return "Cross Prioritization: Buy (1)"
  end
  if value == "2" then
    return "Cross Prioritization: Sell (2)"
  end

  return "Cross Prioritization: Unknown("..value..")"
end

-- Dissect: Cross Prioritization
cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_prioritization, range, value, display)

  return offset + length, value
end

-- Cross Type
cboe_edgx_options_orderentry_boe_v2_10.cross_type = {}

-- Size Of: Cross Type
cboe_edgx_options_orderentry_boe_v2_10.cross_type.size = 1

-- Display: Cross Type
cboe_edgx_options_orderentry_boe_v2_10.cross_type.display = function(value)
  return "Cross Type: "..value
end

-- Dissect: Cross Type
cboe_edgx_options_orderentry_boe_v2_10.cross_type.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cross_type.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_type.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_type, range, value, display)

  return offset + length, value
end

-- Attributed Quote
cboe_edgx_options_orderentry_boe_v2_10.attributed_quote = {}

-- Size Of: Attributed Quote
cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.size = 1

-- Display: Attributed Quote
cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.display = function(value)
  if value == "N" then
    return "Attributed Quote: Do Not Attribute Firm Executing Broker Id (N)"
  end
  if value == "Y" then
    return "Attributed Quote: Attribute Firm Executing Broker Id (Y)"
  end
  if value == "C" then
    return "Attributed Quote: Attribute Client Id Only (C)"
  end
  if value == "Z" then
    return "Attributed Quote: Attribute Both Clearing Firm And Client Id (Z)"
  end

  return "Attributed Quote: Unknown("..value..")"
end

-- Dissect: Attributed Quote
cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.attributed_quote, range, value, display)

  return offset + length, value
end

-- Prevent Match
cboe_edgx_options_orderentry_boe_v2_10.prevent_match = {}

-- Size Of: Prevent Match
cboe_edgx_options_orderentry_boe_v2_10.prevent_match.size = 3

-- Display: Prevent Match
cboe_edgx_options_orderentry_boe_v2_10.prevent_match.display = function(value)
  return "Prevent Match: "..value
end

-- Dissect: Prevent Match
cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.prevent_match, range, value, display)

  return offset + length, value
end

-- Order Qty
cboe_edgx_options_orderentry_boe_v2_10.order_qty = {}

-- Size Of: Order Qty
cboe_edgx_options_orderentry_boe_v2_10.order_qty.size = 4

-- Display: Order Qty
cboe_edgx_options_orderentry_boe_v2_10.order_qty.display = function(value)
  return "Order Qty: "..value
end

-- Dissect: Order Qty
cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_qty.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_qty.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_qty, range, value, display)

  return offset + length, value
end

-- Account
cboe_edgx_options_orderentry_boe_v2_10.account = {}

-- Size Of: Account
cboe_edgx_options_orderentry_boe_v2_10.account.size = 16

-- Display: Account
cboe_edgx_options_orderentry_boe_v2_10.account.display = function(value)
  return "Account: "..value
end

-- Dissect: Account
cboe_edgx_options_orderentry_boe_v2_10.account.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.account.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.account.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.account, range, value, display)

  return offset + length, value
end

-- Cross Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17 = {}

-- Size Of: Cross Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.size = 1

-- Display: Cross Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_17, range, display)

  if show.cross_order_cancelled_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16 = {}

-- Size Of: Cross Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.size = 1

-- Display: Cross Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_16, range, display)

  if show.cross_order_cancelled_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15 = {}

-- Size Of: Cross Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.size = 1

-- Display: Cross Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Equity Party Id Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_equity_party_id_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_15, range, display)

  if show.cross_order_cancelled_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14 = {}

-- Size Of: Cross Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.size = 1

-- Display: Cross Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_14, range, display)

  if show.cross_order_cancelled_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13 = {}

-- Size Of: Cross Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.size = 1

-- Display: Cross Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_13, range, display)

  if show.cross_order_cancelled_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12 = {}

-- Size Of: Cross Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.size = 1

-- Display: Cross Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_12, range, display)

  if show.cross_order_cancelled_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11 = {}

-- Size Of: Cross Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.size = 1

-- Display: Cross Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_11, range, display)

  if show.cross_order_cancelled_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10 = {}

-- Size Of: Cross Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.size = 1

-- Display: Cross Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Routing Firm Id Exists|"
  end
  -- Is Cross Order Cancelled Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Give Up Firm Id Exists|"
  end
  -- Is Cross Order Cancelled Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Alloc Qty Exists|"
  end
  -- Is Cross Order Cancelled Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_routing_firm_id_exists, buffer(offset, 1))

  -- Cross Order Cancelled Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_give_up_firm_id_exists, buffer(offset, 1))

  -- Cross Order Cancelled Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_alloc_qty_exists, buffer(offset, 1))

  -- Cross Order Cancelled Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_10, range, display)

  if show.cross_order_cancelled_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9 = {}

-- Size Of: Cross Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.size = 1

-- Display: Cross Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Cross Prioritization Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Cross Prioritization Exists|"
  end
  -- Is Cross Order Cancelled Cross Type Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Cross Type Exists|"
  end
  -- Is Cross Order Cancelled Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Cmta Number Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Target Party Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Target Party Id Exists|"
  end
  -- Is Cross Order Cancelled Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Target Party Id Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Cross Prioritization Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cross_prioritization_exists, buffer(offset, 1))

  -- Cross Order Cancelled Cross Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cross_type_exists, buffer(offset, 1))

  -- Cross Order Cancelled Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_cmta_number_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_target_party_id_exists, buffer(offset, 1))

  -- Cross Order Cancelled Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_target_party_id_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_9, range, display)

  if show.cross_order_cancelled_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8 = {}

-- Size Of: Cross Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.size = 1

-- Display: Cross Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_8, range, display)

  if show.cross_order_cancelled_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7 = {}

-- Size Of: Cross Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.size = 1

-- Display: Cross Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_7, range, display)

  if show.cross_order_cancelled_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6 = {}

-- Size Of: Cross Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.size = 1

-- Display: Cross Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Attributed Quote Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_attributed_quote_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_6, range, display)

  if show.cross_order_cancelled_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5 = {}

-- Size Of: Cross Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.size = 1

-- Display: Cross Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_5, range, display)

  if show.cross_order_cancelled_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4 = {}

-- Size Of: Cross Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.size = 1

-- Display: Cross Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Put Or Call Exists|"
  end
  -- Is Cross Order Cancelled Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Strike Price Exists|"
  end
  -- Is Cross Order Cancelled Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_put_or_call_exists, buffer(offset, 1))

  -- Cross Order Cancelled Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_strike_price_exists, buffer(offset, 1))

  -- Cross Order Cancelled Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_4, range, display)

  if show.cross_order_cancelled_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3 = {}

-- Size Of: Cross Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.size = 1

-- Display: Cross Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Prevent Match Exists|"
  end
  -- Is Cross Order Cancelled Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Order Qty Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Clearing Firm Exists|"
  end
  -- Is Cross Order Cancelled Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_prevent_match_exists, buffer(offset, 1))

  -- Cross Order Cancelled Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_order_qty_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_clearing_firm_exists, buffer(offset, 1))

  -- Cross Order Cancelled Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_account_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_3, range, display)

  if show.cross_order_cancelled_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2 = {}

-- Size Of: Cross Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.size = 1

-- Display: Cross Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Capacity Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_capacity_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_symbol_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_2, range, display)

  if show.cross_order_cancelled_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1 = {}

-- Size Of: Cross Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.size = 1

-- Display: Cross Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Cancelled Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Cancelled Exec Inst Exists|"
  end
  -- Is Cross Order Cancelled Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Cancelled Price Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.bits = function(buffer, offset, packet, parent)

  -- Cross Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Cancelled Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_exec_inst_exists, buffer(offset, 1))

  -- Cross Order Cancelled Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_price_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_byte_1, range, display)

  if show.cross_order_cancelled_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count = {}

-- Size Of: Cross Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count.size = 1

-- Display: Cross Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count.display = function(value)
  return "Cross Order Cancelled Bitfield Count: "..value
end

-- Dissect: Cross Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_bitfield_count, range, value, display)

  return offset + length, value
end

-- Cross Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields = {}

-- Display: Cross Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields.fields = function(buffer, offset, packet, parent, size_of_cross_order_cancelled_optional_fields)
  local index = offset

  -- Cross Order Cancelled Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cross_order_cancelled_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cross Order Cancelled Byte 1
  local cross_order_cancelled_byte_1 = nil

  local cross_order_cancelled_byte_1_exists = cross_order_cancelled_bitfield_count >= 1

  if cross_order_cancelled_byte_1_exists then

    -- Cross Order Cancelled Byte 1: Struct of 8 fields
    index, cross_order_cancelled_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 2
  local cross_order_cancelled_byte_2 = nil

  local cross_order_cancelled_byte_2_exists = cross_order_cancelled_bitfield_count >= 2

  if cross_order_cancelled_byte_2_exists then

    -- Cross Order Cancelled Byte 2: Struct of 8 fields
    index, cross_order_cancelled_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 3
  local cross_order_cancelled_byte_3 = nil

  local cross_order_cancelled_byte_3_exists = cross_order_cancelled_bitfield_count >= 3

  if cross_order_cancelled_byte_3_exists then

    -- Cross Order Cancelled Byte 3: Struct of 8 fields
    index, cross_order_cancelled_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 4
  local cross_order_cancelled_byte_4 = nil

  local cross_order_cancelled_byte_4_exists = cross_order_cancelled_bitfield_count >= 4

  if cross_order_cancelled_byte_4_exists then

    -- Cross Order Cancelled Byte 4: Struct of 8 fields
    index, cross_order_cancelled_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 5
  local cross_order_cancelled_byte_5 = nil

  local cross_order_cancelled_byte_5_exists = cross_order_cancelled_bitfield_count >= 5

  if cross_order_cancelled_byte_5_exists then

    -- Cross Order Cancelled Byte 5: Struct of 8 fields
    index, cross_order_cancelled_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 6
  local cross_order_cancelled_byte_6 = nil

  local cross_order_cancelled_byte_6_exists = cross_order_cancelled_bitfield_count >= 6

  if cross_order_cancelled_byte_6_exists then

    -- Cross Order Cancelled Byte 6: Struct of 8 fields
    index, cross_order_cancelled_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 7
  local cross_order_cancelled_byte_7 = nil

  local cross_order_cancelled_byte_7_exists = cross_order_cancelled_bitfield_count >= 7

  if cross_order_cancelled_byte_7_exists then

    -- Cross Order Cancelled Byte 7: Struct of 8 fields
    index, cross_order_cancelled_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 8
  local cross_order_cancelled_byte_8 = nil

  local cross_order_cancelled_byte_8_exists = cross_order_cancelled_bitfield_count >= 8

  if cross_order_cancelled_byte_8_exists then

    -- Cross Order Cancelled Byte 8: Struct of 8 fields
    index, cross_order_cancelled_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 9
  local cross_order_cancelled_byte_9 = nil

  local cross_order_cancelled_byte_9_exists = cross_order_cancelled_bitfield_count >= 9

  if cross_order_cancelled_byte_9_exists then

    -- Cross Order Cancelled Byte 9: Struct of 8 fields
    index, cross_order_cancelled_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 10
  local cross_order_cancelled_byte_10 = nil

  local cross_order_cancelled_byte_10_exists = cross_order_cancelled_bitfield_count >= 10

  if cross_order_cancelled_byte_10_exists then

    -- Cross Order Cancelled Byte 10: Struct of 8 fields
    index, cross_order_cancelled_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 11
  local cross_order_cancelled_byte_11 = nil

  local cross_order_cancelled_byte_11_exists = cross_order_cancelled_bitfield_count >= 11

  if cross_order_cancelled_byte_11_exists then

    -- Cross Order Cancelled Byte 11: Struct of 8 fields
    index, cross_order_cancelled_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 12
  local cross_order_cancelled_byte_12 = nil

  local cross_order_cancelled_byte_12_exists = cross_order_cancelled_bitfield_count >= 12

  if cross_order_cancelled_byte_12_exists then

    -- Cross Order Cancelled Byte 12: Struct of 8 fields
    index, cross_order_cancelled_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 13
  local cross_order_cancelled_byte_13 = nil

  local cross_order_cancelled_byte_13_exists = cross_order_cancelled_bitfield_count >= 13

  if cross_order_cancelled_byte_13_exists then

    -- Cross Order Cancelled Byte 13: Struct of 8 fields
    index, cross_order_cancelled_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 14
  local cross_order_cancelled_byte_14 = nil

  local cross_order_cancelled_byte_14_exists = cross_order_cancelled_bitfield_count >= 14

  if cross_order_cancelled_byte_14_exists then

    -- Cross Order Cancelled Byte 14: Struct of 8 fields
    index, cross_order_cancelled_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 15
  local cross_order_cancelled_byte_15 = nil

  local cross_order_cancelled_byte_15_exists = cross_order_cancelled_bitfield_count >= 15

  if cross_order_cancelled_byte_15_exists then

    -- Cross Order Cancelled Byte 15: Struct of 8 fields
    index, cross_order_cancelled_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 16
  local cross_order_cancelled_byte_16 = nil

  local cross_order_cancelled_byte_16_exists = cross_order_cancelled_bitfield_count >= 16

  if cross_order_cancelled_byte_16_exists then

    -- Cross Order Cancelled Byte 16: Struct of 8 fields
    index, cross_order_cancelled_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 17
  local cross_order_cancelled_byte_17 = nil

  local cross_order_cancelled_byte_17_exists = cross_order_cancelled_bitfield_count >= 17

  if cross_order_cancelled_byte_17_exists then

    -- Cross Order Cancelled Byte 17: Struct of 8 fields
    index, cross_order_cancelled_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = cross_order_cancelled_bitfield_count >= 1 and cross_order_cancelled_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = cross_order_cancelled_bitfield_count >= 1 and cross_order_cancelled_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = cross_order_cancelled_bitfield_count >= 2 and cross_order_cancelled_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = cross_order_cancelled_bitfield_count >= 2 and cross_order_cancelled_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = cross_order_cancelled_bitfield_count >= 3 and cross_order_cancelled_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = cross_order_cancelled_bitfield_count >= 3 and cross_order_cancelled_byte_3:bitfield(6) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = cross_order_cancelled_bitfield_count >= 3 and cross_order_cancelled_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = cross_order_cancelled_bitfield_count >= 3 and cross_order_cancelled_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = cross_order_cancelled_bitfield_count >= 4 and cross_order_cancelled_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = cross_order_cancelled_bitfield_count >= 4 and cross_order_cancelled_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = cross_order_cancelled_bitfield_count >= 4 and cross_order_cancelled_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = cross_order_cancelled_bitfield_count >= 6 and cross_order_cancelled_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = cross_order_cancelled_bitfield_count >= 9 and cross_order_cancelled_byte_9:bitfield(5) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Dependency element: Cross Order Cancelled Bitfield Count
  local cross_order_cancelled_bitfield_count = buffer(offset, 1):le_uint()

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = cross_order_cancelled_bitfield_count >= 9 and cross_order_cancelled_byte_9:bitfield(5) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = cross_order_cancelled_bitfield_count >= 9 and cross_order_cancelled_byte_9:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Type
  local cross_type = nil

  local cross_type_exists = cross_order_cancelled_bitfield_count >= 9 and cross_order_cancelled_byte_9:bitfield(1) > 0

  if cross_type_exists then
    index, cross_type = cboe_edgx_options_orderentry_boe_v2_10.cross_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Prioritization
  local cross_prioritization = nil

  local cross_prioritization_exists = cross_order_cancelled_bitfield_count >= 9 and cross_order_cancelled_byte_9:bitfield(0) > 0

  if cross_prioritization_exists then
    index, cross_prioritization = cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = cross_order_cancelled_bitfield_count >= 10 and cross_order_cancelled_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = cross_order_cancelled_bitfield_count >= 10 and cross_order_cancelled_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = cross_order_cancelled_bitfield_count >= 10 and cross_order_cancelled_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = cross_order_cancelled_bitfield_count >= 10 and cross_order_cancelled_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = cross_order_cancelled_bitfield_count >= 15 and cross_order_cancelled_byte_15:bitfield(6) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = cross_order_cancelled_bitfield_count >= 16 and cross_order_cancelled_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cross Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_cross_order_cancelled_optional_fields)
  local index = offset + size_of_cross_order_cancelled_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.cross_order_cancelled_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields.fields(buffer, offset, packet, parent, size_of_cross_order_cancelled_optional_fields)
    parent:set_len(size_of_cross_order_cancelled_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields.fields(buffer, offset, packet, parent, size_of_cross_order_cancelled_optional_fields)

    return index
  end
end

-- Cancel Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reason = {}

-- Size Of: Cancel Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.size = 1

-- Display: Cancel Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.display = function(value)
  if value == "A" then
    return "Cancel Reason: Admin (A)"
  end
  if value == "D" then
    return "Cancel Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Cancel Reason: Halted (H)"
  end
  if value == "I" then
    return "Cancel Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Cancel Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Cancel Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "L" then
    return "Cancel Reason: Order Would Lock Or Cross Nbbo (L)"
  end
  if value == "M" then
    return "Cancel Reason: Order Size Exceeded (M)"
  end
  if value == "N" then
    return "Cancel Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Cancel Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Cancel Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "Q" then
    return "Cancel Reason: Waiting For First Trade (Q)"
  end
  if value == "R" then
    return "Cancel Reason: Routing Unavailable (R)"
  end
  if value == "T" then
    return "Cancel Reason: Fill Would Trade Through The Nbbo (T)"
  end
  if value == "U" then
    return "Cancel Reason: User Requested (U)"
  end
  if value == "V" then
    return "Cancel Reason: Would Wash (V)"
  end
  if value == "W" then
    return "Cancel Reason: Add Liquidity Only Order Would Remove (W)"
  end
  if value == "X" then
    return "Cancel Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Cancel Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Cancel Reason: Unforeseen Reason (Z)"
  end
  if value == "c" then
    return "Cancel Reason: Only Close Transactions Accepted (c)"
  end
  if value == "f" then
    return "Cancel Reason: Risk Management Efid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Cancel Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "o" then
    return "Cancel Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "r" then
    return "Cancel Reason: Reserve Reload (r)"
  end
  if value == "s" then
    return "Cancel Reason: Risk Management Risk Root Level (s)"
  end
  if value == "w" then
    return "Cancel Reason: Would Remove On Unslide (w)"
  end
  if value == "x" then
    return "Cancel Reason: Crossed Market (x)"
  end
  if value == "y" then
    return "Cancel Reason: Order Received By Cboe During Replay (y)"
  end
  if value == "z" then
    return "Cancel Reason: Session End (z)"
  end
  if value == "+" then
    return "Cancel Reason: Risk Management Efid Group Level (+)"
  end

  return "Cancel Reason: Unknown("..value..")"
end

-- Dissect: Cancel Reason
cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_reason, range, value, display)

  return offset + length, value
end

-- Cross Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message = {}

-- Read runtime size of: Cross Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Cross Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.fields = function(buffer, offset, packet, parent, size_of_cross_order_cancelled_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cross Id: 20 Byte Ascii String
  index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)

  -- Cancel Reason: 1 Byte Ascii String Enum with 31 values
  index, cancel_reason = cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Cross Order Cancelled Optional Fields
  local size_of_cross_order_cancelled_optional_fields = message_length - (index - offset) - 8

  -- Cross Order Cancelled Optional Fields: Struct of 41 fields
  index, cross_order_cancelled_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_optional_fields.dissect(buffer, index, packet, parent, size_of_cross_order_cancelled_optional_fields)

  return index
end

-- Dissect: Cross Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cross_order_cancelled_message = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cross_order_cancelled_message then
    local range = buffer(offset, size_of_cross_order_cancelled_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.fields(buffer, offset, packet, parent, size_of_cross_order_cancelled_message)

  return offset + size_of_cross_order_cancelled_message
end

-- Quote Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message = {}

-- Read runtime size of: Quote Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.fields = function(buffer, offset, packet, parent, size_of_quote_cancelled_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Cancel Reason: 1 Byte Ascii String Enum with 31 values
  index, cancel_reason = cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_cancelled_message = cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_cancelled_message then
    local range = buffer(offset, size_of_quote_cancelled_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_cancelled_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.fields(buffer, offset, packet, parent, size_of_quote_cancelled_message)

  return offset + size_of_quote_cancelled_message
end

-- Strategy Id
cboe_edgx_options_orderentry_boe_v2_10.strategy_id = {}

-- Size Of: Strategy Id
cboe_edgx_options_orderentry_boe_v2_10.strategy_id.size = 1

-- Display: Strategy Id
cboe_edgx_options_orderentry_boe_v2_10.strategy_id.display = function(value)
  if value == "C" then
    return "Strategy Id: Conversion (C)"
  end
  if value == "R" then
    return "Strategy Id: Reversal (R)"
  end
  if value == "M" then
    return "Strategy Id: Merger (M)"
  end
  if value == "S" then
    return "Strategy Id: Short Stock Interest (S)"
  end
  if value == "J" then
    return "Strategy Id: Jelly Roll (J)"
  end

  return "Strategy Id: Unknown("..value..")"
end

-- Dissect: Strategy Id
cboe_edgx_options_orderentry_boe_v2_10.strategy_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.strategy_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.strategy_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.strategy_id, range, value, display)

  return offset + length, value
end

-- Price Type
cboe_edgx_options_orderentry_boe_v2_10.price_type = {}

-- Size Of: Price Type
cboe_edgx_options_orderentry_boe_v2_10.price_type.size = 1

-- Display: Price Type
cboe_edgx_options_orderentry_boe_v2_10.price_type.display = function(value)
  if value == "0" then
    return "Price Type: Fixed Cabinet Trade Price (0)"
  end
  if value == "1" then
    return "Price Type: Percentage (1)"
  end
  if value == "2" then
    return "Price Type: Price Per Unit (2)"
  end
  if value == "3" then
    return "Price Type: Fixed Amount (3)"
  end

  return "Price Type: Unknown("..value..")"
end

-- Dissect: Price Type
cboe_edgx_options_orderentry_boe_v2_10.price_type.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.price_type.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.price_type.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.price_type, range, value, display)

  return offset + length, value
end

-- Order Origin
cboe_edgx_options_orderentry_boe_v2_10.order_origin = {}

-- Size Of: Order Origin
cboe_edgx_options_orderentry_boe_v2_10.order_origin.size = 3

-- Display: Order Origin
cboe_edgx_options_orderentry_boe_v2_10.order_origin.display = function(value)
  return "Order Origin: "..value
end

-- Dissect: Order Origin
cboe_edgx_options_orderentry_boe_v2_10.order_origin.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_origin.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_origin.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_origin, range, value, display)

  return offset + length, value
end

-- Multi Class Sprd
cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd = {}

-- Size Of: Multi Class Sprd
cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.size = 1

-- Display: Multi Class Sprd
cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.display = function(value)
  if value == "N" then
    return "Multi Class Sprd: No (N)"
  end
  if value == "Y" then
    return "Multi Class Sprd: Yes (Y)"
  end

  return "Multi Class Sprd: Unknown("..value..")"
end

-- Dissect: Multi Class Sprd
cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.multi_class_sprd, range, value, display)

  return offset + length, value
end

-- Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.ex_destination = {}

-- Size Of: Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.ex_destination.size = 1

-- Display: Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.ex_destination.display = function(value)
  if value == "A" then
    return "Ex Destination: Nyse Arca (A)"
  end
  if value == "E" then
    return "Ex Destination: Nasdaq Ise (E)"
  end
  if value == "F" then
    return "Ex Destination: Miax (F)"
  end
  if value == "P" then
    return "Ex Destination: Miax Pearl (P)"
  end
  if value == "D" then
    return "Ex Destination: Miax Emerald (D)"
  end
  if value == "G" then
    return "Ex Destination: Edgx Options (G)"
  end
  if value == "H" then
    return "Ex Destination: C 2 (H)"
  end
  if value == "K" then
    return "Ex Destination: Box (K)"
  end
  if value == "N" then
    return "Ex Destination: Nasdaq (N)"
  end
  if value == "S" then
    return "Ex Destination: Nasdaq Bx (S)"
  end
  if value == "U" then
    return "Ex Destination: Nyse American (U)"
  end
  if value == "W" then
    return "Ex Destination: C 1 (W)"
  end
  if value == "X" then
    return "Ex Destination: Nasdaq Phlx (X)"
  end
  if value == "Z" then
    return "Ex Destination: Bzx Options (Z)"
  end
  if value == "g" then
    return "Ex Destination: Nasdaq Gemx (g)"
  end

  return "Ex Destination: Unknown("..value..")"
end

-- Dissect: Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.ex_destination.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.ex_destination, range, value, display)

  return offset + length, value
end

-- Route Delivery Method
cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method = {}

-- Size Of: Route Delivery Method
cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.size = 3

-- Display: Route Delivery Method
cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.display = function(value)
  if value == "RTI" then
    return "Route Delivery Method: Route To Improve (RTI)"
  end
  if value == "RTF" then
    return "Route Delivery Method: Route To Fill (RTF)"
  end

  return "Route Delivery Method: Unknown("..value..")"
end

-- Dissect: Route Delivery Method
cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.route_delivery_method, range, value, display)

  return offset + length, value
end

-- Rout Strategy
cboe_edgx_options_orderentry_boe_v2_10.rout_strategy = {}

-- Size Of: Rout Strategy
cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.size = 6

-- Display: Rout Strategy
cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.display = function(value)
  return "Rout Strategy: "..value
end

-- Dissect: Rout Strategy
cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.rout_strategy, range, value, display)

  return offset + length, value
end

-- Routing Inst
cboe_edgx_options_orderentry_boe_v2_10.routing_inst = {}

-- Size Of: Routing Inst
cboe_edgx_options_orderentry_boe_v2_10.routing_inst.size = 4

-- Display: Routing Inst
cboe_edgx_options_orderentry_boe_v2_10.routing_inst.display = function(value)
  return "Routing Inst: "..value
end

-- Dissect: Routing Inst
cboe_edgx_options_orderentry_boe_v2_10.routing_inst.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.routing_inst, range, value, display)

  return offset + length, value
end

-- Secondary Order Id
cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id = {}

-- Size Of: Secondary Order Id
cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.size = 8

-- Display: Secondary Order Id
cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.display = function(value)
  return "Secondary Order Id: "..value
end

-- Dissect: Secondary Order Id
cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.secondary_order_id, range, value, display)

  return offset + length, value
end

-- Expire Time
cboe_edgx_options_orderentry_boe_v2_10.expire_time = {}

-- Size Of: Expire Time
cboe_edgx_options_orderentry_boe_v2_10.expire_time.size = 8

-- Display: Expire Time
cboe_edgx_options_orderentry_boe_v2_10.expire_time.display = function(value)
  return "Expire Time: "..value
end

-- Dissect: Expire Time
cboe_edgx_options_orderentry_boe_v2_10.expire_time.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.expire_time.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.expire_time.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.expire_time, range, value, display)

  return offset + length, value
end

-- Working Price
cboe_edgx_options_orderentry_boe_v2_10.working_price = {}

-- Size Of: Working Price
cboe_edgx_options_orderentry_boe_v2_10.working_price.size = 8

-- Display: Working Price
cboe_edgx_options_orderentry_boe_v2_10.working_price.display = function(value)
  return "Working Price: "..value
end

-- Dissect: Working Price
cboe_edgx_options_orderentry_boe_v2_10.working_price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.working_price.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.working_price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.working_price, range, value, display)

  return offset + length, value
end

-- Display Price
cboe_edgx_options_orderentry_boe_v2_10.display_price = {}

-- Size Of: Display Price
cboe_edgx_options_orderentry_boe_v2_10.display_price.size = 8

-- Display: Display Price
cboe_edgx_options_orderentry_boe_v2_10.display_price.display = function(value)
  return "Display Price: "..value
end

-- Dissect: Display Price
cboe_edgx_options_orderentry_boe_v2_10.display_price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.display_price.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.display_price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.display_price, range, value, display)

  return offset + length, value
end

-- Orig Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id = {}

-- Size Of: Orig Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.size = 20

-- Display: Orig Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.display = function(value)
  return "Orig Cl Ord Id: "..value
end

-- Dissect: Orig Cl Ord Id
cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.orig_cl_ord_id, range, value, display)

  return offset + length, value
end

-- Max Floor
cboe_edgx_options_orderentry_boe_v2_10.max_floor = {}

-- Size Of: Max Floor
cboe_edgx_options_orderentry_boe_v2_10.max_floor.size = 4

-- Display: Max Floor
cboe_edgx_options_orderentry_boe_v2_10.max_floor.display = function(value)
  return "Max Floor: "..value
end

-- Dissect: Max Floor
cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.max_floor.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.max_floor.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.max_floor, range, value, display)

  return offset + length, value
end

-- Display Indicator
cboe_edgx_options_orderentry_boe_v2_10.display_indicator = {}

-- Size Of: Display Indicator
cboe_edgx_options_orderentry_boe_v2_10.display_indicator.size = 1

-- Display: Display Indicator
cboe_edgx_options_orderentry_boe_v2_10.display_indicator.display = function(value)
  if value == "V" then
    return "Display Indicator: Determined By Port Level Setting (V)"
  end
  if value == "P" then
    return "Display Indicator: Price Adjust (P)"
  end
  if value == "m" then
    return "Display Indicator: Multiple Price Adjust (m)"
  end
  if value == "m" then
    return "Display Indicator: Reject The Order If It Cannot Be Booked And Displayed Without Adjustment (m)"
  end

  return "Display Indicator: Unknown("..value..")"
end

-- Dissect: Display Indicator
cboe_edgx_options_orderentry_boe_v2_10.display_indicator.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.display_indicator, range, value, display)

  return offset + length, value
end

-- Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17 = {}

-- Size Of: Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.size = 1

-- Display: Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Strategy Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Strategy Id Exists|"
  end
  -- Is Order Cancelled Price Type Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Price Type Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Strategy Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_strategy_id_exists, buffer(offset, 1))

  -- Order Cancelled Price Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_price_type_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_17, range, display)

  if show.order_cancelled_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16 = {}

-- Size Of: Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.size = 1

-- Display: Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Order Origin Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Order Origin Exists|"
  end
  -- Is Order Cancelled Multi Class Sprd Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Multi Class Sprd Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Order Origin Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_order_origin_exists, buffer(offset, 1))

  -- Order Cancelled Multi Class Sprd Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_multi_class_sprd_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_16, range, display)

  if show.order_cancelled_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15 = {}

-- Size Of: Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.size = 1

-- Display: Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Equity Party Id Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_equity_party_id_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_15, range, display)

  if show.order_cancelled_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14 = {}

-- Size Of: Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.size = 1

-- Display: Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_14, range, display)

  if show.order_cancelled_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13 = {}

-- Size Of: Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.size = 1

-- Display: Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_13, range, display)

  if show.order_cancelled_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12 = {}

-- Size Of: Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.size = 1

-- Display: Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_12, range, display)

  if show.order_cancelled_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11 = {}

-- Size Of: Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.size = 1

-- Display: Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_11, range, display)

  if show.order_cancelled_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10 = {}

-- Size Of: Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.size = 1

-- Display: Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Cross Exclusion Indicator Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Routing Firm Id Exists|"
  end
  -- Is Order Cancelled Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Give Up Firm Id Exists|"
  end
  -- Is Order Cancelled Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Alloc Qty Exists|"
  end
  -- Is Order Cancelled Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_routing_firm_id_exists, buffer(offset, 1))

  -- Order Cancelled Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_give_up_firm_id_exists, buffer(offset, 1))

  -- Order Cancelled Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_alloc_qty_exists, buffer(offset, 1))

  -- Order Cancelled Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_10, range, display)

  if show.order_cancelled_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9 = {}

-- Size Of: Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.size = 1

-- Display: Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Cmta Number Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Auction Id Exists|"
  end
  -- Is Order Cancelled Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Target Party Id Exists|"
  end
  -- Is Order Cancelled Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_cmta_number_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_auction_id_exists, buffer(offset, 1))

  -- Order Cancelled Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_target_party_id_exists, buffer(offset, 1))

  -- Order Cancelled Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_9, range, display)

  if show.order_cancelled_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8 = {}

-- Size Of: Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.size = 1

-- Display: Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Ex Destination Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Ex Destination Exists|"
  end
  -- Is Order Cancelled Route Delivery Method Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Route Delivery Method Exists|"
  end
  -- Is Order Cancelled Rout Strategy Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Rout Strategy Exists|"
  end
  -- Is Order Cancelled Routing Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Routing Inst Exists|"
  end
  -- Is Order Cancelled Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Stop Px Exists|"
  end
  -- Is Order Cancelled Echo Text Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Echo Text Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_ex_destination_exists, buffer(offset, 1))

  -- Order Cancelled Route Delivery Method Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_route_delivery_method_exists, buffer(offset, 1))

  -- Order Cancelled Rout Strategy Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_rout_strategy_exists, buffer(offset, 1))

  -- Order Cancelled Routing Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_routing_inst_exists, buffer(offset, 1))

  -- Order Cancelled Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_stop_px_exists, buffer(offset, 1))

  -- Order Cancelled Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_echo_text_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_8, range, display)

  if show.order_cancelled_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7 = {}

-- Size Of: Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.size = 1

-- Display: Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_7, range, display)

  if show.order_cancelled_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6 = {}

-- Size Of: Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.size = 1

-- Display: Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Attributed Quote Exists|"
  end
  -- Is Order Cancelled Contra Capacity Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Contra Capacity Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Secondary Order Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Secondary Order Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_attributed_quote_exists, buffer(offset, 1))

  -- Order Cancelled Contra Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_contra_capacity_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Secondary Order Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_secondary_order_id_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_6, range, display)

  if show.order_cancelled_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5 = {}

-- Size Of: Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.size = 1

-- Display: Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Expire Time Exists|"
  end
  -- Is Order Cancelled Base Liquidity Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Base Liquidity Indicator Exists|"
  end
  -- Is Order Cancelled Working Price Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Working Price Exists|"
  end
  -- Is Order Cancelled Display Price Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Display Price Exists|"
  end
  -- Is Order Cancelled Last Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Last Px Exists|"
  end
  -- Is Order Cancelled Last Shares Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Last Shares Exists|"
  end
  -- Is Order Cancelled Leaves Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Leaves Qty Exists|"
  end
  -- Is Order Cancelled Orig Cl Ord Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Orig Cl Ord Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Expire Time Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_expire_time_exists, buffer(offset, 1))

  -- Order Cancelled Base Liquidity Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_base_liquidity_indicator_exists, buffer(offset, 1))

  -- Order Cancelled Working Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_working_price_exists, buffer(offset, 1))

  -- Order Cancelled Display Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_display_price_exists, buffer(offset, 1))

  -- Order Cancelled Last Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_last_px_exists, buffer(offset, 1))

  -- Order Cancelled Last Shares Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_last_shares_exists, buffer(offset, 1))

  -- Order Cancelled Leaves Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_leaves_qty_exists, buffer(offset, 1))

  -- Order Cancelled Orig Cl Ord Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_orig_cl_ord_id_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_5, range, display)

  if show.order_cancelled_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4 = {}

-- Size Of: Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.size = 1

-- Display: Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Corrected Size Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Open Close Exists|"
  end
  -- Is Order Cancelled Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Put Or Call Exists|"
  end
  -- Is Order Cancelled Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Strike Price Exists|"
  end
  -- Is Order Cancelled Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_corrected_size_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_open_close_exists, buffer(offset, 1))

  -- Order Cancelled Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_put_or_call_exists, buffer(offset, 1))

  -- Order Cancelled Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_strike_price_exists, buffer(offset, 1))

  -- Order Cancelled Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_4, range, display)

  if show.order_cancelled_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3 = {}

-- Size Of: Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.size = 1

-- Display: Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Prevent Match Exists|"
  end
  -- Is Order Cancelled Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Order Qty Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Max Floor Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Max Floor Exists|"
  end
  -- Is Order Cancelled Display Indicator Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Display Indicator Exists|"
  end
  -- Is Order Cancelled Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Clearing Account Exists|"
  end
  -- Is Order Cancelled Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Clearing Firm Exists|"
  end
  -- Is Order Cancelled Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_prevent_match_exists, buffer(offset, 1))

  -- Order Cancelled Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_order_qty_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_max_floor_exists, buffer(offset, 1))

  -- Order Cancelled Display Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_display_indicator_exists, buffer(offset, 1))

  -- Order Cancelled Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_clearing_account_exists, buffer(offset, 1))

  -- Order Cancelled Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_clearing_firm_exists, buffer(offset, 1))

  -- Order Cancelled Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_account_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_3, range, display)

  if show.order_cancelled_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2 = {}

-- Size Of: Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.size = 1

-- Display: Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Capacity Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_capacity_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_2, range, display)

  if show.order_cancelled_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1 = {}

-- Size Of: Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.size = 1

-- Display: Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Max Remove Pct Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Max Remove Pct Exists|"
  end
  -- Is Order Cancelled Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Min Qty Exists|"
  end
  -- Is Order Cancelled Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Time In Force Exists|"
  end
  -- Is Order Cancelled Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Ord Type Exists|"
  end
  -- Is Order Cancelled Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Exec Inst Exists|"
  end
  -- Is Order Cancelled Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Price Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_max_remove_pct_exists, buffer(offset, 1))

  -- Order Cancelled Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_min_qty_exists, buffer(offset, 1))

  -- Order Cancelled Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_time_in_force_exists, buffer(offset, 1))

  -- Order Cancelled Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_ord_type_exists, buffer(offset, 1))

  -- Order Cancelled Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_exec_inst_exists, buffer(offset, 1))

  -- Order Cancelled Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_price_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_side_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_byte_1, range, display)

  if show.order_cancelled_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count = {}

-- Size Of: Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count.size = 1

-- Display: Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count.display = function(value)
  return "Order Cancelled Bitfield Count: "..value
end

-- Dissect: Order Cancelled Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_bitfield_count, range, value, display)

  return offset + length, value
end

-- Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields = {}

-- Display: Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields.fields = function(buffer, offset, packet, parent, size_of_order_cancelled_optional_fields)
  local index = offset

  -- Order Cancelled Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_cancelled_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Cancelled Byte 1
  local order_cancelled_byte_1 = nil

  local order_cancelled_byte_1_exists = order_cancelled_bitfield_count >= 1

  if order_cancelled_byte_1_exists then

    -- Order Cancelled Byte 1: Struct of 8 fields
    index, order_cancelled_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 2
  local order_cancelled_byte_2 = nil

  local order_cancelled_byte_2_exists = order_cancelled_bitfield_count >= 2

  if order_cancelled_byte_2_exists then

    -- Order Cancelled Byte 2: Struct of 8 fields
    index, order_cancelled_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 3
  local order_cancelled_byte_3 = nil

  local order_cancelled_byte_3_exists = order_cancelled_bitfield_count >= 3

  if order_cancelled_byte_3_exists then

    -- Order Cancelled Byte 3: Struct of 8 fields
    index, order_cancelled_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 4
  local order_cancelled_byte_4 = nil

  local order_cancelled_byte_4_exists = order_cancelled_bitfield_count >= 4

  if order_cancelled_byte_4_exists then

    -- Order Cancelled Byte 4: Struct of 8 fields
    index, order_cancelled_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 5
  local order_cancelled_byte_5 = nil

  local order_cancelled_byte_5_exists = order_cancelled_bitfield_count >= 5

  if order_cancelled_byte_5_exists then

    -- Order Cancelled Byte 5: Struct of 8 fields
    index, order_cancelled_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 6
  local order_cancelled_byte_6 = nil

  local order_cancelled_byte_6_exists = order_cancelled_bitfield_count >= 6

  if order_cancelled_byte_6_exists then

    -- Order Cancelled Byte 6: Struct of 8 fields
    index, order_cancelled_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 7
  local order_cancelled_byte_7 = nil

  local order_cancelled_byte_7_exists = order_cancelled_bitfield_count >= 7

  if order_cancelled_byte_7_exists then

    -- Order Cancelled Byte 7: Struct of 8 fields
    index, order_cancelled_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 8
  local order_cancelled_byte_8 = nil

  local order_cancelled_byte_8_exists = order_cancelled_bitfield_count >= 8

  if order_cancelled_byte_8_exists then

    -- Order Cancelled Byte 8: Struct of 8 fields
    index, order_cancelled_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 9
  local order_cancelled_byte_9 = nil

  local order_cancelled_byte_9_exists = order_cancelled_bitfield_count >= 9

  if order_cancelled_byte_9_exists then

    -- Order Cancelled Byte 9: Struct of 8 fields
    index, order_cancelled_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 10
  local order_cancelled_byte_10 = nil

  local order_cancelled_byte_10_exists = order_cancelled_bitfield_count >= 10

  if order_cancelled_byte_10_exists then

    -- Order Cancelled Byte 10: Struct of 8 fields
    index, order_cancelled_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 11
  local order_cancelled_byte_11 = nil

  local order_cancelled_byte_11_exists = order_cancelled_bitfield_count >= 11

  if order_cancelled_byte_11_exists then

    -- Order Cancelled Byte 11: Struct of 8 fields
    index, order_cancelled_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 12
  local order_cancelled_byte_12 = nil

  local order_cancelled_byte_12_exists = order_cancelled_bitfield_count >= 12

  if order_cancelled_byte_12_exists then

    -- Order Cancelled Byte 12: Struct of 8 fields
    index, order_cancelled_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 13
  local order_cancelled_byte_13 = nil

  local order_cancelled_byte_13_exists = order_cancelled_bitfield_count >= 13

  if order_cancelled_byte_13_exists then

    -- Order Cancelled Byte 13: Struct of 8 fields
    index, order_cancelled_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 14
  local order_cancelled_byte_14 = nil

  local order_cancelled_byte_14_exists = order_cancelled_bitfield_count >= 14

  if order_cancelled_byte_14_exists then

    -- Order Cancelled Byte 14: Struct of 8 fields
    index, order_cancelled_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 15
  local order_cancelled_byte_15 = nil

  local order_cancelled_byte_15_exists = order_cancelled_bitfield_count >= 15

  if order_cancelled_byte_15_exists then

    -- Order Cancelled Byte 15: Struct of 8 fields
    index, order_cancelled_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 16
  local order_cancelled_byte_16 = nil

  local order_cancelled_byte_16_exists = order_cancelled_bitfield_count >= 16

  if order_cancelled_byte_16_exists then

    -- Order Cancelled Byte 16: Struct of 8 fields
    index, order_cancelled_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 17
  local order_cancelled_byte_17 = nil

  local order_cancelled_byte_17_exists = order_cancelled_bitfield_count >= 17

  if order_cancelled_byte_17_exists then

    -- Order Cancelled Byte 17: Struct of 8 fields
    index, order_cancelled_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Side
  local side = nil

  local side_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(7) > 0

  if side_exists then
    index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Time In Force
  local time_in_force = nil

  local time_in_force_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(2) > 0

  if time_in_force_exists then
    index, time_in_force = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Min Qty
  local min_qty = nil

  local min_qty_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(1) > 0

  if min_qty_exists then
    index, min_qty = cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Remove Pct
  local max_remove_pct = nil

  local max_remove_pct_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(0) > 0

  if max_remove_pct_exists then
    index, max_remove_pct = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = order_cancelled_bitfield_count >= 2 and order_cancelled_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = order_cancelled_bitfield_count >= 2 and order_cancelled_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(6) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(5) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Indicator
  local display_indicator = nil

  local display_indicator_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(4) > 0

  if display_indicator_exists then
    index, display_indicator = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Floor
  local max_floor = nil

  local max_floor_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(3) > 0

  if max_floor_exists then
    index, max_floor = cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = order_cancelled_bitfield_count >= 4 and order_cancelled_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = order_cancelled_bitfield_count >= 4 and order_cancelled_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = order_cancelled_bitfield_count >= 4 and order_cancelled_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = order_cancelled_bitfield_count >= 4 and order_cancelled_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Corrected Size
  local corrected_size = nil

  local corrected_size_exists = order_cancelled_bitfield_count >= 4 and order_cancelled_byte_4:bitfield(2) > 0

  if corrected_size_exists then
    index, corrected_size = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Orig Cl Ord Id
  local orig_cl_ord_id = nil

  local orig_cl_ord_id_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(7) > 0

  if orig_cl_ord_id_exists then
    index, orig_cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leaves Qty
  local leaves_qty = nil

  local leaves_qty_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(6) > 0

  if leaves_qty_exists then
    index, leaves_qty = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Shares
  local last_shares = nil

  local last_shares_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(5) > 0

  if last_shares_exists then
    index, last_shares = cboe_edgx_options_orderentry_boe_v2_10.last_shares.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Px
  local last_px = nil

  local last_px_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(4) > 0

  if last_px_exists then
    index, last_px = cboe_edgx_options_orderentry_boe_v2_10.last_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Price
  local display_price = nil

  local display_price_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(3) > 0

  if display_price_exists then
    index, display_price = cboe_edgx_options_orderentry_boe_v2_10.display_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Working Price
  local working_price = nil

  local working_price_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(2) > 0

  if working_price_exists then
    index, working_price = cboe_edgx_options_orderentry_boe_v2_10.working_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Base Liquidity Indicator
  local base_liquidity_indicator = nil

  local base_liquidity_indicator_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(1) > 0

  if base_liquidity_indicator_exists then
    index, base_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Expire Time
  local expire_time = nil

  local expire_time_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(0) > 0

  if expire_time_exists then
    index, expire_time = cboe_edgx_options_orderentry_boe_v2_10.expire_time.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Secondary Order Id
  local secondary_order_id = nil

  local secondary_order_id_exists = order_cancelled_bitfield_count >= 6 and order_cancelled_byte_6:bitfield(7) > 0

  if secondary_order_id_exists then
    index, secondary_order_id = cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Contra Capacity
  local contra_capacity = nil

  local contra_capacity_exists = order_cancelled_bitfield_count >= 6 and order_cancelled_byte_6:bitfield(5) > 0

  if contra_capacity_exists then
    index, contra_capacity = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = order_cancelled_bitfield_count >= 6 and order_cancelled_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Echo Text
  local echo_text = nil

  local echo_text_exists = order_cancelled_bitfield_count >= 8 and order_cancelled_byte_8:bitfield(6) > 0

  if echo_text_exists then
    index, echo_text = cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = order_cancelled_bitfield_count >= 8 and order_cancelled_byte_8:bitfield(5) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Inst
  local routing_inst = nil

  local routing_inst_exists = order_cancelled_bitfield_count >= 8 and order_cancelled_byte_8:bitfield(4) > 0

  if routing_inst_exists then
    index, routing_inst = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Rout Strategy
  local rout_strategy = nil

  local rout_strategy_exists = order_cancelled_bitfield_count >= 8 and order_cancelled_byte_8:bitfield(3) > 0

  if rout_strategy_exists then
    index, rout_strategy = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Route Delivery Method
  local route_delivery_method = nil

  local route_delivery_method_exists = order_cancelled_bitfield_count >= 8 and order_cancelled_byte_8:bitfield(2) > 0

  if route_delivery_method_exists then
    index, route_delivery_method = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ex Destination
  local ex_destination = nil

  local ex_destination_exists = order_cancelled_bitfield_count >= 8 and order_cancelled_byte_8:bitfield(1) > 0

  if ex_destination_exists then
    index, ex_destination = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Marketing Fee Code
  local marketing_fee_code = nil

  local marketing_fee_code_exists = order_cancelled_bitfield_count >= 9 and order_cancelled_byte_9:bitfield(7) > 0

  if marketing_fee_code_exists then
    index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = order_cancelled_bitfield_count >= 9 and order_cancelled_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = order_cancelled_bitfield_count >= 9 and order_cancelled_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = order_cancelled_bitfield_count >= 9 and order_cancelled_byte_9:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = order_cancelled_bitfield_count >= 10 and order_cancelled_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = order_cancelled_bitfield_count >= 10 and order_cancelled_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = order_cancelled_bitfield_count >= 10 and order_cancelled_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = order_cancelled_bitfield_count >= 10 and order_cancelled_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = order_cancelled_bitfield_count >= 10 and order_cancelled_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = order_cancelled_bitfield_count >= 15 and order_cancelled_byte_15:bitfield(6) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = order_cancelled_bitfield_count >= 16 and order_cancelled_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Multi Class Sprd
  local multi_class_sprd = nil

  local multi_class_sprd_exists = order_cancelled_bitfield_count >= 16 and order_cancelled_byte_16:bitfield(1) > 0

  if multi_class_sprd_exists then
    index, multi_class_sprd = cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Origin
  local order_origin = nil

  local order_origin_exists = order_cancelled_bitfield_count >= 16 and order_cancelled_byte_16:bitfield(0) > 0

  if order_origin_exists then
    index, order_origin = cboe_edgx_options_orderentry_boe_v2_10.order_origin.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price Type
  local price_type = nil

  local price_type_exists = order_cancelled_bitfield_count >= 17 and order_cancelled_byte_17:bitfield(7) > 0

  if price_type_exists then
    index, price_type = cboe_edgx_options_orderentry_boe_v2_10.price_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strategy Id
  local strategy_id = nil

  local strategy_id_exists = order_cancelled_bitfield_count >= 17 and order_cancelled_byte_17:bitfield(6) > 0

  if strategy_id_exists then
    index, strategy_id = cboe_edgx_options_orderentry_boe_v2_10.strategy_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Cancelled Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_order_cancelled_optional_fields)
  local index = offset + size_of_order_cancelled_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.order_cancelled_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields.fields(buffer, offset, packet, parent, size_of_order_cancelled_optional_fields)
    parent:set_len(size_of_order_cancelled_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields.fields(buffer, offset, packet, parent, size_of_order_cancelled_optional_fields)

    return index
  end
end

-- Transact Time
cboe_edgx_options_orderentry_boe_v2_10.transact_time = {}

-- Size Of: Transact Time
cboe_edgx_options_orderentry_boe_v2_10.transact_time.size = 8

-- Display: Transact Time
cboe_edgx_options_orderentry_boe_v2_10.transact_time.display = function(value)
  return "Transact Time: "..value
end

-- Dissect: Transact Time
cboe_edgx_options_orderentry_boe_v2_10.transact_time.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.transact_time.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.transact_time.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.transact_time, range, value, display)

  return offset + length, value
end

-- Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message = {}

-- Read runtime size of: Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.fields = function(buffer, offset, packet, parent, size_of_order_cancelled_message)
  local index = offset

  -- Transact Time: 8 Byte Unsigned Fixed Width Integer
  index, transact_time = cboe_edgx_options_orderentry_boe_v2_10.transact_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Cancel Reason: 1 Byte Ascii String Enum with 31 values
  index, cancel_reason = cboe_edgx_options_orderentry_boe_v2_10.cancel_reason.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Cancelled Optional Fields
  local size_of_order_cancelled_optional_fields = message_length - (index - offset) - 8

  -- Order Cancelled Optional Fields: Struct of 71 fields
  index, order_cancelled_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_optional_fields.dissect(buffer, index, packet, parent, size_of_order_cancelled_optional_fields)

  return index
end

-- Dissect: Order Cancelled Message
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_cancelled_message = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_cancelled_message then
    local range = buffer(offset, size_of_order_cancelled_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.fields(buffer, offset, packet, parent, size_of_order_cancelled_message)

  return offset + size_of_order_cancelled_message
end

-- User Modify Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17 = {}

-- Size Of: User Modify Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.size = 1

-- Display: User Modify Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_17, range, display)

  if show.user_modify_rejected_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16 = {}

-- Size Of: User Modify Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.size = 1

-- Display: User Modify Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_16, range, display)

  if show.user_modify_rejected_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15 = {}

-- Size Of: User Modify Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.size = 1

-- Display: User Modify Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_15, range, display)

  if show.user_modify_rejected_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14 = {}

-- Size Of: User Modify Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.size = 1

-- Display: User Modify Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_14, range, display)

  if show.user_modify_rejected_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13 = {}

-- Size Of: User Modify Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.size = 1

-- Display: User Modify Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_13, range, display)

  if show.user_modify_rejected_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12 = {}

-- Size Of: User Modify Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.size = 1

-- Display: User Modify Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_12, range, display)

  if show.user_modify_rejected_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11 = {}

-- Size Of: User Modify Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.size = 1

-- Display: User Modify Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_11, range, display)

  if show.user_modify_rejected_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10 = {}

-- Size Of: User Modify Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.size = 1

-- Display: User Modify Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Cross Exclusion Indicator Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Routing Firm Id Exists|"
  end
  -- Is User Modify Rejected Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Give Up Firm Id Exists|"
  end
  -- Is User Modify Rejected Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Alloc Qty Exists|"
  end
  -- Is User Modify Rejected Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_routing_firm_id_exists, buffer(offset, 1))

  -- User Modify Rejected Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_give_up_firm_id_exists, buffer(offset, 1))

  -- User Modify Rejected Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_alloc_qty_exists, buffer(offset, 1))

  -- User Modify Rejected Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_cross_id_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_10, range, display)

  if show.user_modify_rejected_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9 = {}

-- Size Of: User Modify Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.size = 1

-- Display: User Modify Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_9, range, display)

  if show.user_modify_rejected_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8 = {}

-- Size Of: User Modify Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.size = 1

-- Display: User Modify Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_8, range, display)

  if show.user_modify_rejected_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7 = {}

-- Size Of: User Modify Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.size = 1

-- Display: User Modify Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_7, range, display)

  if show.user_modify_rejected_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6 = {}

-- Size Of: User Modify Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.size = 1

-- Display: User Modify Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_6, range, display)

  if show.user_modify_rejected_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5 = {}

-- Size Of: User Modify Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.size = 1

-- Display: User Modify Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_5, range, display)

  if show.user_modify_rejected_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4 = {}

-- Size Of: User Modify Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.size = 1

-- Display: User Modify Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_4, range, display)

  if show.user_modify_rejected_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3 = {}

-- Size Of: User Modify Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.size = 1

-- Display: User Modify Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_3, range, display)

  if show.user_modify_rejected_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2 = {}

-- Size Of: User Modify Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.size = 1

-- Display: User Modify Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_2, range, display)

  if show.user_modify_rejected_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1 = {}

-- Size Of: User Modify Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.size = 1

-- Display: User Modify Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_byte_1, range, display)

  if show.user_modify_rejected_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- User Modify Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count = {}

-- Size Of: User Modify Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count.size = 1

-- Display: User Modify Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count.display = function(value)
  return "User Modify Rejected Bitfield Count: "..value
end

-- Dissect: User Modify Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- User Modify Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields = {}

-- Display: User Modify Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: User Modify Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields.fields = function(buffer, offset, packet, parent, size_of_user_modify_rejected_optional_fields)
  local index = offset

  -- User Modify Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, user_modify_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: User Modify Rejected Byte 1
  local user_modify_rejected_byte_1 = nil

  local user_modify_rejected_byte_1_exists = user_modify_rejected_bitfield_count >= 1

  if user_modify_rejected_byte_1_exists then

    -- User Modify Rejected Byte 1: Struct of 8 fields
    index, user_modify_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 2
  local user_modify_rejected_byte_2 = nil

  local user_modify_rejected_byte_2_exists = user_modify_rejected_bitfield_count >= 2

  if user_modify_rejected_byte_2_exists then

    -- User Modify Rejected Byte 2: Struct of 8 fields
    index, user_modify_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 3
  local user_modify_rejected_byte_3 = nil

  local user_modify_rejected_byte_3_exists = user_modify_rejected_bitfield_count >= 3

  if user_modify_rejected_byte_3_exists then

    -- User Modify Rejected Byte 3: Struct of 8 fields
    index, user_modify_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 4
  local user_modify_rejected_byte_4 = nil

  local user_modify_rejected_byte_4_exists = user_modify_rejected_bitfield_count >= 4

  if user_modify_rejected_byte_4_exists then

    -- User Modify Rejected Byte 4: Struct of 8 fields
    index, user_modify_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 5
  local user_modify_rejected_byte_5 = nil

  local user_modify_rejected_byte_5_exists = user_modify_rejected_bitfield_count >= 5

  if user_modify_rejected_byte_5_exists then

    -- User Modify Rejected Byte 5: Struct of 8 fields
    index, user_modify_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 6
  local user_modify_rejected_byte_6 = nil

  local user_modify_rejected_byte_6_exists = user_modify_rejected_bitfield_count >= 6

  if user_modify_rejected_byte_6_exists then

    -- User Modify Rejected Byte 6: Struct of 8 fields
    index, user_modify_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 7
  local user_modify_rejected_byte_7 = nil

  local user_modify_rejected_byte_7_exists = user_modify_rejected_bitfield_count >= 7

  if user_modify_rejected_byte_7_exists then

    -- User Modify Rejected Byte 7: Struct of 8 fields
    index, user_modify_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 8
  local user_modify_rejected_byte_8 = nil

  local user_modify_rejected_byte_8_exists = user_modify_rejected_bitfield_count >= 8

  if user_modify_rejected_byte_8_exists then

    -- User Modify Rejected Byte 8: Struct of 8 fields
    index, user_modify_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 9
  local user_modify_rejected_byte_9 = nil

  local user_modify_rejected_byte_9_exists = user_modify_rejected_bitfield_count >= 9

  if user_modify_rejected_byte_9_exists then

    -- User Modify Rejected Byte 9: Struct of 8 fields
    index, user_modify_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 10
  local user_modify_rejected_byte_10 = nil

  local user_modify_rejected_byte_10_exists = user_modify_rejected_bitfield_count >= 10

  if user_modify_rejected_byte_10_exists then

    -- User Modify Rejected Byte 10: Struct of 8 fields
    index, user_modify_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 11
  local user_modify_rejected_byte_11 = nil

  local user_modify_rejected_byte_11_exists = user_modify_rejected_bitfield_count >= 11

  if user_modify_rejected_byte_11_exists then

    -- User Modify Rejected Byte 11: Struct of 8 fields
    index, user_modify_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 12
  local user_modify_rejected_byte_12 = nil

  local user_modify_rejected_byte_12_exists = user_modify_rejected_bitfield_count >= 12

  if user_modify_rejected_byte_12_exists then

    -- User Modify Rejected Byte 12: Struct of 8 fields
    index, user_modify_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 13
  local user_modify_rejected_byte_13 = nil

  local user_modify_rejected_byte_13_exists = user_modify_rejected_bitfield_count >= 13

  if user_modify_rejected_byte_13_exists then

    -- User Modify Rejected Byte 13: Struct of 8 fields
    index, user_modify_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 14
  local user_modify_rejected_byte_14 = nil

  local user_modify_rejected_byte_14_exists = user_modify_rejected_bitfield_count >= 14

  if user_modify_rejected_byte_14_exists then

    -- User Modify Rejected Byte 14: Struct of 8 fields
    index, user_modify_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 15
  local user_modify_rejected_byte_15 = nil

  local user_modify_rejected_byte_15_exists = user_modify_rejected_bitfield_count >= 15

  if user_modify_rejected_byte_15_exists then

    -- User Modify Rejected Byte 15: Struct of 8 fields
    index, user_modify_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 16
  local user_modify_rejected_byte_16 = nil

  local user_modify_rejected_byte_16_exists = user_modify_rejected_bitfield_count >= 16

  if user_modify_rejected_byte_16_exists then

    -- User Modify Rejected Byte 16: Struct of 8 fields
    index, user_modify_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 17
  local user_modify_rejected_byte_17 = nil

  local user_modify_rejected_byte_17_exists = user_modify_rejected_bitfield_count >= 17

  if user_modify_rejected_byte_17_exists then

    -- User Modify Rejected Byte 17: Struct of 8 fields
    index, user_modify_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = user_modify_rejected_bitfield_count >= 10 and user_modify_rejected_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = user_modify_rejected_bitfield_count >= 10 and user_modify_rejected_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = user_modify_rejected_bitfield_count >= 10 and user_modify_rejected_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = user_modify_rejected_bitfield_count >= 10 and user_modify_rejected_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = user_modify_rejected_bitfield_count >= 10 and user_modify_rejected_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: User Modify Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_user_modify_rejected_optional_fields)
  local index = offset + size_of_user_modify_rejected_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.user_modify_rejected_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_user_modify_rejected_optional_fields)
    parent:set_len(size_of_user_modify_rejected_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_user_modify_rejected_optional_fields)

    return index
  end
end

-- Modify Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.modify_reject_reason = {}

-- Size Of: Modify Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.modify_reject_reason.size = 1

-- Display: Modify Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.modify_reject_reason.display = function(value)
  if value == "A" then
    return "Modify Reject Reason: Admin (A)"
  end
  if value == "D" then
    return "Modify Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Modify Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Modify Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Modify Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Modify Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "L" then
    return "Modify Reject Reason: Order Would Lock Or Cross Nbbo (L)"
  end
  if value == "M" then
    return "Modify Reject Reason: Order Size Exceeded (M)"
  end
  if value == "N" then
    return "Modify Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Modify Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Modify Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "Q" then
    return "Modify Reject Reason: Waiting For First Trade (Q)"
  end
  if value == "R" then
    return "Modify Reject Reason: Routing Unavailable (R)"
  end
  if value == "T" then
    return "Modify Reject Reason: Fill Would Trade Through The Nbbo (T)"
  end
  if value == "U" then
    return "Modify Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Modify Reject Reason: Would Wash (V)"
  end
  if value == "W" then
    return "Modify Reject Reason: Add Liquidity Only Order Would Remove (W)"
  end
  if value == "X" then
    return "Modify Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Modify Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Modify Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "c" then
    return "Modify Reject Reason: Only Close Transactions Accepted (c)"
  end
  if value == "f" then
    return "Modify Reject Reason: Risk Management Efid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Modify Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "o" then
    return "Modify Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "r" then
    return "Modify Reject Reason: Reserve Reload (r)"
  end
  if value == "s" then
    return "Modify Reject Reason: Risk Management Risk Root Level (s)"
  end
  if value == "w" then
    return "Modify Reject Reason: Would Remove On Unslide (w)"
  end
  if value == "x" then
    return "Modify Reject Reason: Crossed Market (x)"
  end
  if value == "y" then
    return "Modify Reject Reason: Order Received By Cboe During Replay (y)"
  end
  if value == "z" then
    return "Modify Reject Reason: Session End (z)"
  end
  if value == "+" then
    return "Modify Reject Reason: Risk Management Efid Group Level (+)"
  end

  return "Modify Reject Reason: Unknown("..value..")"
end

-- Dissect: Modify Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.modify_reject_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.modify_reject_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.modify_reject_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_reject_reason, range, value, display)

  return offset + length, value
end

-- User Modify Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message = {}

-- Read runtime size of: User Modify Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: User Modify Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: User Modify Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.fields = function(buffer, offset, packet, parent, size_of_user_modify_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Modify Reject Reason: 1 Byte Ascii String Enum with 31 values
  index, modify_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.modify_reject_reason.dissect(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_edgx_options_orderentry_boe_v2_10.text.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: User Modify Rejected Optional Fields
  local size_of_user_modify_rejected_optional_fields = message_length - (index - offset) - 8

  -- User Modify Rejected Optional Fields: Struct of 23 fields
  index, user_modify_rejected_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_optional_fields.dissect(buffer, index, packet, parent, size_of_user_modify_rejected_optional_fields)

  return index
end

-- Dissect: User Modify Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_user_modify_rejected_message = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.user_modify_rejected_message then
    local range = buffer(offset, size_of_user_modify_rejected_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.fields(buffer, offset, packet, parent, size_of_user_modify_rejected_message)

  return offset + size_of_user_modify_rejected_message
end

-- Quote Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_restatement_reason = {}

-- Size Of: Quote Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_restatement_reason.size = 1

-- Display: Quote Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_restatement_reason.display = function(value)
  return "Quote Restatement Reason: "..value
end

-- Dissect: Quote Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_restatement_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.quote_restatement_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.quote_restatement_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_restatement_reason, range, value, display)

  return offset + length, value
end

-- Quote Restated Message
cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message = {}

-- Read runtime size of: Quote Restated Message
cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Restated Message
cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Restated Message
cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.fields = function(buffer, offset, packet, parent, size_of_quote_restated_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Leaves Qty: 4 Byte Unsigned Fixed Width Integer
  index, leaves_qty = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.dissect(buffer, index, packet, parent)

  -- Working Price: 8 Byte Unsigned Fixed Width Integer
  index, working_price = cboe_edgx_options_orderentry_boe_v2_10.working_price.dissect(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Quote Restatement Reason: 1 Byte Ascii String
  index, quote_restatement_reason = cboe_edgx_options_orderentry_boe_v2_10.quote_restatement_reason.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Restated Message
cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_restated_message = cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_restated_message then
    local range = buffer(offset, size_of_quote_restated_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_restated_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.fields(buffer, offset, packet, parent, size_of_quote_restated_message)

  return offset + size_of_quote_restated_message
end

-- Client Id Attr
cboe_edgx_options_orderentry_boe_v2_10.client_id_attr = {}

-- Size Of: Client Id Attr
cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.size = 4

-- Display: Client Id Attr
cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.display = function(value)
  return "Client Id Attr: "..value
end

-- Dissect: Client Id Attr
cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.client_id_attr, range, value, display)

  return offset + length, value
end

-- Order Restated Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17 = {}

-- Size Of: Order Restated Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.size = 1

-- Display: Order Restated Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Strategy Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Strategy Id Exists|"
  end
  -- Is Order Restated Price Type Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Price Type Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Strategy Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_strategy_id_exists, buffer(offset, 1))

  -- Order Restated Price Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_price_type_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_17, range, display)

  if show.order_restated_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16 = {}

-- Size Of: Order Restated Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.size = 1

-- Display: Order Restated Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Order Origin Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Order Origin Exists|"
  end
  -- Is Order Restated Multi Class Sprd Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Multi Class Sprd Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.bits = function(buffer, offset, packet, parent)

  -- Order Restated Order Origin Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_order_origin_exists, buffer(offset, 1))

  -- Order Restated Multi Class Sprd Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_multi_class_sprd_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_16, range, display)

  if show.order_restated_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15 = {}

-- Size Of: Order Restated Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.size = 1

-- Display: Order Restated Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Client Id Attr Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Client Id Attr Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.bits = function(buffer, offset, packet, parent)

  -- Order Restated Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_client_id_attr_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_15, range, display)

  if show.order_restated_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14 = {}

-- Size Of: Order Restated Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.size = 1

-- Display: Order Restated Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_14, range, display)

  if show.order_restated_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13 = {}

-- Size Of: Order Restated Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.size = 1

-- Display: Order Restated Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_13, range, display)

  if show.order_restated_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12 = {}

-- Size Of: Order Restated Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.size = 1

-- Display: Order Restated Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_12, range, display)

  if show.order_restated_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11 = {}

-- Size Of: Order Restated Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.size = 1

-- Display: Order Restated Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_11, range, display)

  if show.order_restated_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10 = {}

-- Size Of: Order Restated Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.size = 1

-- Display: Order Restated Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Cross Exclusion Indicator Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Routing Firm Id Exists|"
  end
  -- Is Order Restated Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Give Up Firm Id Exists|"
  end
  -- Is Order Restated Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Alloc Qty Exists|"
  end
  -- Is Order Restated Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_routing_firm_id_exists, buffer(offset, 1))

  -- Order Restated Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_give_up_firm_id_exists, buffer(offset, 1))

  -- Order Restated Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_alloc_qty_exists, buffer(offset, 1))

  -- Order Restated Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_10, range, display)

  if show.order_restated_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9 = {}

-- Size Of: Order Restated Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.size = 1

-- Display: Order Restated Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Cmta Number Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Auction Id Exists|"
  end
  -- Is Order Restated Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Target Party Id Exists|"
  end
  -- Is Order Restated Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_cmta_number_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_auction_id_exists, buffer(offset, 1))

  -- Order Restated Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_target_party_id_exists, buffer(offset, 1))

  -- Order Restated Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_9, range, display)

  if show.order_restated_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8 = {}

-- Size Of: Order Restated Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.size = 1

-- Display: Order Restated Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Ex Destination Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Ex Destination Exists|"
  end
  -- Is Order Restated Route Delivery Method Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Route Delivery Method Exists|"
  end
  -- Is Order Restated Rout Strategy Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Rout Strategy Exists|"
  end
  -- Is Order Restated Routing Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Routing Inst Exists|"
  end
  -- Is Order Restated Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Stop Px Exists|"
  end
  -- Is Order Restated Echo Text Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Echo Text Exists|"
  end
  -- Is Order Restated Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_ex_destination_exists, buffer(offset, 1))

  -- Order Restated Route Delivery Method Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_route_delivery_method_exists, buffer(offset, 1))

  -- Order Restated Rout Strategy Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_rout_strategy_exists, buffer(offset, 1))

  -- Order Restated Routing Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_routing_inst_exists, buffer(offset, 1))

  -- Order Restated Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_stop_px_exists, buffer(offset, 1))

  -- Order Restated Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_echo_text_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_8, range, display)

  if show.order_restated_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7 = {}

-- Size Of: Order Restated Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.size = 1

-- Display: Order Restated Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_7, range, display)

  if show.order_restated_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6 = {}

-- Size Of: Order Restated Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.size = 1

-- Display: Order Restated Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Attributed Quote Exists|"
  end
  -- Is Order Restated Contra Capacity Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Contra Capacity Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Secondary Order Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Secondary Order Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_attributed_quote_exists, buffer(offset, 1))

  -- Order Restated Contra Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_contra_capacity_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Secondary Order Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_secondary_order_id_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_6, range, display)

  if show.order_restated_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5 = {}

-- Size Of: Order Restated Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.size = 1

-- Display: Order Restated Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Expire Time Exists|"
  end
  -- Is Order Restated Base Liquidity Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Base Liquidity Indicator Exists|"
  end
  -- Is Order Restated Working Price Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Working Price Exists|"
  end
  -- Is Order Restated Display Price Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Display Price Exists|"
  end
  -- Is Order Restated Last Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Last Px Exists|"
  end
  -- Is Order Restated Last Shares Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Last Shares Exists|"
  end
  -- Is Order Restated Leaves Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Leaves Qty Exists|"
  end
  -- Is Order Restated Orig Cl Ord Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Orig Cl Ord Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.bits = function(buffer, offset, packet, parent)

  -- Order Restated Expire Time Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_expire_time_exists, buffer(offset, 1))

  -- Order Restated Base Liquidity Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_base_liquidity_indicator_exists, buffer(offset, 1))

  -- Order Restated Working Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_working_price_exists, buffer(offset, 1))

  -- Order Restated Display Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_display_price_exists, buffer(offset, 1))

  -- Order Restated Last Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_last_px_exists, buffer(offset, 1))

  -- Order Restated Last Shares Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_last_shares_exists, buffer(offset, 1))

  -- Order Restated Leaves Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_leaves_qty_exists, buffer(offset, 1))

  -- Order Restated Orig Cl Ord Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_orig_cl_ord_id_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_5, range, display)

  if show.order_restated_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4 = {}

-- Size Of: Order Restated Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.size = 1

-- Display: Order Restated Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Reserved Bit 7 Exists|"
  end
  -- Is Order Restated Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Corrected Size Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Open Close Exists|"
  end
  -- Is Order Restated Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Put Or Call Exists|"
  end
  -- Is Order Restated Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Strike Price Exists|"
  end
  -- Is Order Restated Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Restated Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_corrected_size_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_open_close_exists, buffer(offset, 1))

  -- Order Restated Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_put_or_call_exists, buffer(offset, 1))

  -- Order Restated Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_strike_price_exists, buffer(offset, 1))

  -- Order Restated Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_4, range, display)

  if show.order_restated_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3 = {}

-- Size Of: Order Restated Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.size = 1

-- Display: Order Restated Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Prevent Match Exists|"
  end
  -- Is Order Restated Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Order Qty Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Max Floor Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Max Floor Exists|"
  end
  -- Is Order Restated Display Indicator Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Display Indicator Exists|"
  end
  -- Is Order Restated Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Clearing Account Exists|"
  end
  -- Is Order Restated Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Clearing Firm Exists|"
  end
  -- Is Order Restated Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.bits = function(buffer, offset, packet, parent)

  -- Order Restated Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_prevent_match_exists, buffer(offset, 1))

  -- Order Restated Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_order_qty_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_max_floor_exists, buffer(offset, 1))

  -- Order Restated Display Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_display_indicator_exists, buffer(offset, 1))

  -- Order Restated Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_clearing_account_exists, buffer(offset, 1))

  -- Order Restated Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_clearing_firm_exists, buffer(offset, 1))

  -- Order Restated Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_account_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_3, range, display)

  if show.order_restated_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2 = {}

-- Size Of: Order Restated Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.size = 1

-- Display: Order Restated Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Reserved Bit 8 Exists|"
  end
  -- Is Order Restated Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Capacity Exists|"
  end
  -- Is Order Restated Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Reserved Bit 6 Exists|"
  end
  -- Is Order Restated Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Reserved Bit 5 Exists|"
  end
  -- Is Order Restated Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Reserved Bit 4 Exists|"
  end
  -- Is Order Restated Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Reserved Bit 3 Exists|"
  end
  -- Is Order Restated Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Reserved Bit 2 Exists|"
  end
  -- Is Order Restated Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.bits = function(buffer, offset, packet, parent)

  -- Order Restated Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Restated Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_capacity_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Restated Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Restated Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_2, range, display)

  if show.order_restated_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1 = {}

-- Size Of: Order Restated Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.size = 1

-- Display: Order Restated Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Restated Max Remove Pct Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Restated Max Remove Pct Exists|"
  end
  -- Is Order Restated Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Restated Min Qty Exists|"
  end
  -- Is Order Restated Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Restated Time In Force Exists|"
  end
  -- Is Order Restated Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Restated Ord Type Exists|"
  end
  -- Is Order Restated Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Restated Exec Inst Exists|"
  end
  -- Is Order Restated Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Restated Price Exists|"
  end
  -- Is Order Restated Peg Difference Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Restated Peg Difference Exists|"
  end
  -- Is Order Restated Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Restated Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Restated Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.bits = function(buffer, offset, packet, parent)

  -- Order Restated Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_max_remove_pct_exists, buffer(offset, 1))

  -- Order Restated Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_min_qty_exists, buffer(offset, 1))

  -- Order Restated Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_time_in_force_exists, buffer(offset, 1))

  -- Order Restated Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_ord_type_exists, buffer(offset, 1))

  -- Order Restated Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_exec_inst_exists, buffer(offset, 1))

  -- Order Restated Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_price_exists, buffer(offset, 1))

  -- Order Restated Peg Difference Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_peg_difference_exists, buffer(offset, 1))

  -- Order Restated Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_side_exists, buffer(offset, 1))
end

-- Dissect: Order Restated Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_byte_1, range, display)

  if show.order_restated_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Restated Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count = {}

-- Size Of: Order Restated Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count.size = 1

-- Display: Order Restated Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count.display = function(value)
  return "Order Restated Bitfield Count: "..value
end

-- Dissect: Order Restated Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_bitfield_count, range, value, display)

  return offset + length, value
end

-- Order Restated Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields = {}

-- Display: Order Restated Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Restated Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields.fields = function(buffer, offset, packet, parent, size_of_order_restated_optional_fields)
  local index = offset

  -- Order Restated Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_restated_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Restated Byte 1
  local order_restated_byte_1 = nil

  local order_restated_byte_1_exists = order_restated_bitfield_count >= 1

  if order_restated_byte_1_exists then

    -- Order Restated Byte 1: Struct of 8 fields
    index, order_restated_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 2
  local order_restated_byte_2 = nil

  local order_restated_byte_2_exists = order_restated_bitfield_count >= 2

  if order_restated_byte_2_exists then

    -- Order Restated Byte 2: Struct of 8 fields
    index, order_restated_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 3
  local order_restated_byte_3 = nil

  local order_restated_byte_3_exists = order_restated_bitfield_count >= 3

  if order_restated_byte_3_exists then

    -- Order Restated Byte 3: Struct of 8 fields
    index, order_restated_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 4
  local order_restated_byte_4 = nil

  local order_restated_byte_4_exists = order_restated_bitfield_count >= 4

  if order_restated_byte_4_exists then

    -- Order Restated Byte 4: Struct of 8 fields
    index, order_restated_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 5
  local order_restated_byte_5 = nil

  local order_restated_byte_5_exists = order_restated_bitfield_count >= 5

  if order_restated_byte_5_exists then

    -- Order Restated Byte 5: Struct of 8 fields
    index, order_restated_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 6
  local order_restated_byte_6 = nil

  local order_restated_byte_6_exists = order_restated_bitfield_count >= 6

  if order_restated_byte_6_exists then

    -- Order Restated Byte 6: Struct of 8 fields
    index, order_restated_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 7
  local order_restated_byte_7 = nil

  local order_restated_byte_7_exists = order_restated_bitfield_count >= 7

  if order_restated_byte_7_exists then

    -- Order Restated Byte 7: Struct of 8 fields
    index, order_restated_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 8
  local order_restated_byte_8 = nil

  local order_restated_byte_8_exists = order_restated_bitfield_count >= 8

  if order_restated_byte_8_exists then

    -- Order Restated Byte 8: Struct of 8 fields
    index, order_restated_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 9
  local order_restated_byte_9 = nil

  local order_restated_byte_9_exists = order_restated_bitfield_count >= 9

  if order_restated_byte_9_exists then

    -- Order Restated Byte 9: Struct of 8 fields
    index, order_restated_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 10
  local order_restated_byte_10 = nil

  local order_restated_byte_10_exists = order_restated_bitfield_count >= 10

  if order_restated_byte_10_exists then

    -- Order Restated Byte 10: Struct of 8 fields
    index, order_restated_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 11
  local order_restated_byte_11 = nil

  local order_restated_byte_11_exists = order_restated_bitfield_count >= 11

  if order_restated_byte_11_exists then

    -- Order Restated Byte 11: Struct of 8 fields
    index, order_restated_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 12
  local order_restated_byte_12 = nil

  local order_restated_byte_12_exists = order_restated_bitfield_count >= 12

  if order_restated_byte_12_exists then

    -- Order Restated Byte 12: Struct of 8 fields
    index, order_restated_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 13
  local order_restated_byte_13 = nil

  local order_restated_byte_13_exists = order_restated_bitfield_count >= 13

  if order_restated_byte_13_exists then

    -- Order Restated Byte 13: Struct of 8 fields
    index, order_restated_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 14
  local order_restated_byte_14 = nil

  local order_restated_byte_14_exists = order_restated_bitfield_count >= 14

  if order_restated_byte_14_exists then

    -- Order Restated Byte 14: Struct of 8 fields
    index, order_restated_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 15
  local order_restated_byte_15 = nil

  local order_restated_byte_15_exists = order_restated_bitfield_count >= 15

  if order_restated_byte_15_exists then

    -- Order Restated Byte 15: Struct of 8 fields
    index, order_restated_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 16
  local order_restated_byte_16 = nil

  local order_restated_byte_16_exists = order_restated_bitfield_count >= 16

  if order_restated_byte_16_exists then

    -- Order Restated Byte 16: Struct of 8 fields
    index, order_restated_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 17
  local order_restated_byte_17 = nil

  local order_restated_byte_17_exists = order_restated_bitfield_count >= 17

  if order_restated_byte_17_exists then

    -- Order Restated Byte 17: Struct of 8 fields
    index, order_restated_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Side
  local side = nil

  local side_exists = order_restated_bitfield_count >= 1 and order_restated_byte_1:bitfield(7) > 0

  if side_exists then
    index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = order_restated_bitfield_count >= 1 and order_restated_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = order_restated_bitfield_count >= 1 and order_restated_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = order_restated_bitfield_count >= 1 and order_restated_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Time In Force
  local time_in_force = nil

  local time_in_force_exists = order_restated_bitfield_count >= 1 and order_restated_byte_1:bitfield(2) > 0

  if time_in_force_exists then
    index, time_in_force = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Min Qty
  local min_qty = nil

  local min_qty_exists = order_restated_bitfield_count >= 1 and order_restated_byte_1:bitfield(1) > 0

  if min_qty_exists then
    index, min_qty = cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Remove Pct
  local max_remove_pct = nil

  local max_remove_pct_exists = order_restated_bitfield_count >= 1 and order_restated_byte_1:bitfield(0) > 0

  if max_remove_pct_exists then
    index, max_remove_pct = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = order_restated_bitfield_count >= 2 and order_restated_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = order_restated_bitfield_count >= 2 and order_restated_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = order_restated_bitfield_count >= 3 and order_restated_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = order_restated_bitfield_count >= 3 and order_restated_byte_3:bitfield(6) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = order_restated_bitfield_count >= 3 and order_restated_byte_3:bitfield(5) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Indicator
  local display_indicator = nil

  local display_indicator_exists = order_restated_bitfield_count >= 3 and order_restated_byte_3:bitfield(4) > 0

  if display_indicator_exists then
    index, display_indicator = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Floor
  local max_floor = nil

  local max_floor_exists = order_restated_bitfield_count >= 3 and order_restated_byte_3:bitfield(3) > 0

  if max_floor_exists then
    index, max_floor = cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = order_restated_bitfield_count >= 3 and order_restated_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = order_restated_bitfield_count >= 3 and order_restated_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = order_restated_bitfield_count >= 4 and order_restated_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = order_restated_bitfield_count >= 4 and order_restated_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = order_restated_bitfield_count >= 4 and order_restated_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = order_restated_bitfield_count >= 4 and order_restated_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Corrected Size
  local corrected_size = nil

  local corrected_size_exists = order_restated_bitfield_count >= 4 and order_restated_byte_4:bitfield(2) > 0

  if corrected_size_exists then
    index, corrected_size = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Orig Cl Ord Id
  local orig_cl_ord_id = nil

  local orig_cl_ord_id_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(7) > 0

  if orig_cl_ord_id_exists then
    index, orig_cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leaves Qty
  local leaves_qty = nil

  local leaves_qty_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(6) > 0

  if leaves_qty_exists then
    index, leaves_qty = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Shares
  local last_shares = nil

  local last_shares_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(5) > 0

  if last_shares_exists then
    index, last_shares = cboe_edgx_options_orderentry_boe_v2_10.last_shares.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Px
  local last_px = nil

  local last_px_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(4) > 0

  if last_px_exists then
    index, last_px = cboe_edgx_options_orderentry_boe_v2_10.last_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Price
  local display_price = nil

  local display_price_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(3) > 0

  if display_price_exists then
    index, display_price = cboe_edgx_options_orderentry_boe_v2_10.display_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Working Price
  local working_price = nil

  local working_price_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(2) > 0

  if working_price_exists then
    index, working_price = cboe_edgx_options_orderentry_boe_v2_10.working_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Base Liquidity Indicator
  local base_liquidity_indicator = nil

  local base_liquidity_indicator_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(1) > 0

  if base_liquidity_indicator_exists then
    index, base_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Expire Time
  local expire_time = nil

  local expire_time_exists = order_restated_bitfield_count >= 5 and order_restated_byte_5:bitfield(0) > 0

  if expire_time_exists then
    index, expire_time = cboe_edgx_options_orderentry_boe_v2_10.expire_time.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Secondary Order Id
  local secondary_order_id = nil

  local secondary_order_id_exists = order_restated_bitfield_count >= 6 and order_restated_byte_6:bitfield(7) > 0

  if secondary_order_id_exists then
    index, secondary_order_id = cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Contra Capacity
  local contra_capacity = nil

  local contra_capacity_exists = order_restated_bitfield_count >= 6 and order_restated_byte_6:bitfield(5) > 0

  if contra_capacity_exists then
    index, contra_capacity = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = order_restated_bitfield_count >= 6 and order_restated_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Echo Text
  local echo_text = nil

  local echo_text_exists = order_restated_bitfield_count >= 8 and order_restated_byte_8:bitfield(6) > 0

  if echo_text_exists then
    index, echo_text = cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = order_restated_bitfield_count >= 8 and order_restated_byte_8:bitfield(5) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Inst
  local routing_inst = nil

  local routing_inst_exists = order_restated_bitfield_count >= 8 and order_restated_byte_8:bitfield(4) > 0

  if routing_inst_exists then
    index, routing_inst = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Rout Strategy
  local rout_strategy = nil

  local rout_strategy_exists = order_restated_bitfield_count >= 8 and order_restated_byte_8:bitfield(3) > 0

  if rout_strategy_exists then
    index, rout_strategy = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Route Delivery Method
  local route_delivery_method = nil

  local route_delivery_method_exists = order_restated_bitfield_count >= 8 and order_restated_byte_8:bitfield(2) > 0

  if route_delivery_method_exists then
    index, route_delivery_method = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ex Destination
  local ex_destination = nil

  local ex_destination_exists = order_restated_bitfield_count >= 8 and order_restated_byte_8:bitfield(1) > 0

  if ex_destination_exists then
    index, ex_destination = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Marketing Fee Code
  local marketing_fee_code = nil

  local marketing_fee_code_exists = order_restated_bitfield_count >= 9 and order_restated_byte_9:bitfield(7) > 0

  if marketing_fee_code_exists then
    index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = order_restated_bitfield_count >= 9 and order_restated_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = order_restated_bitfield_count >= 9 and order_restated_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = order_restated_bitfield_count >= 9 and order_restated_byte_9:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = order_restated_bitfield_count >= 10 and order_restated_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = order_restated_bitfield_count >= 10 and order_restated_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = order_restated_bitfield_count >= 10 and order_restated_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = order_restated_bitfield_count >= 10 and order_restated_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = order_restated_bitfield_count >= 10 and order_restated_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = order_restated_bitfield_count >= 15 and order_restated_byte_15:bitfield(0) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = order_restated_bitfield_count >= 16 and order_restated_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Multi Class Sprd
  local multi_class_sprd = nil

  local multi_class_sprd_exists = order_restated_bitfield_count >= 16 and order_restated_byte_16:bitfield(1) > 0

  if multi_class_sprd_exists then
    index, multi_class_sprd = cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Origin
  local order_origin = nil

  local order_origin_exists = order_restated_bitfield_count >= 16 and order_restated_byte_16:bitfield(0) > 0

  if order_origin_exists then
    index, order_origin = cboe_edgx_options_orderentry_boe_v2_10.order_origin.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price Type
  local price_type = nil

  local price_type_exists = order_restated_bitfield_count >= 17 and order_restated_byte_17:bitfield(7) > 0

  if price_type_exists then
    index, price_type = cboe_edgx_options_orderentry_boe_v2_10.price_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strategy Id
  local strategy_id = nil

  local strategy_id_exists = order_restated_bitfield_count >= 17 and order_restated_byte_17:bitfield(6) > 0

  if strategy_id_exists then
    index, strategy_id = cboe_edgx_options_orderentry_boe_v2_10.strategy_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Restated Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_order_restated_optional_fields)
  local index = offset + size_of_order_restated_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.order_restated_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields.fields(buffer, offset, packet, parent, size_of_order_restated_optional_fields)
    parent:set_len(size_of_order_restated_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields.fields(buffer, offset, packet, parent, size_of_order_restated_optional_fields)

    return index
  end
end

-- Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.restatement_reason = {}

-- Size Of: Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.restatement_reason.size = 1

-- Display: Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.restatement_reason.display = function(value)
  if value == "L" then
    return "Restatement Reason: Reload (L)"
  end
  if value == "P" then
    return "Restatement Reason: Price Sliding Reprice (P)"
  end
  if value == "Q" then
    return "Restatement Reason: Liquidity Updated (Q)"
  end
  if value == "R" then
    return "Restatement Reason: Reroute (R)"
  end
  if value == "S" then
    return "Restatement Reason: Ship And Post (S)"
  end
  if value == "W" then
    return "Restatement Reason: Wash (W)"
  end
  if value == "Q" then
    return "Restatement Reason: Liquidity (Q)"
  end

  return "Restatement Reason: Unknown("..value..")"
end

-- Dissect: Restatement Reason
cboe_edgx_options_orderentry_boe_v2_10.restatement_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.restatement_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.restatement_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.restatement_reason, range, value, display)

  return offset + length, value
end

-- Order Restated Message
cboe_edgx_options_orderentry_boe_v2_10.order_restated_message = {}

-- Read runtime size of: Order Restated Message
cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Restated Message
cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Restated Message
cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.fields = function(buffer, offset, packet, parent, size_of_order_restated_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Restatement Reason: 1 Byte Ascii String Enum with 7 values
  index, restatement_reason = cboe_edgx_options_orderentry_boe_v2_10.restatement_reason.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Restated Optional Fields
  local size_of_order_restated_optional_fields = message_length - (index - offset) - 8

  -- Order Restated Optional Fields: Struct of 71 fields
  index, order_restated_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.order_restated_optional_fields.dissect(buffer, index, packet, parent, size_of_order_restated_optional_fields)

  return index
end

-- Dissect: Order Restated Message
cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_restated_message = cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_restated_message then
    local range = buffer(offset, size_of_order_restated_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.fields(buffer, offset, packet, parent, size_of_order_restated_message)

  return offset + size_of_order_restated_message
end

-- Session Eligibility
cboe_edgx_options_orderentry_boe_v2_10.session_eligibility = {}

-- Size Of: Session Eligibility
cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.size = 1

-- Display: Session Eligibility
cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.display = function(value)
  if value == "A" then
    return "Session Eligibility: All (A)"
  end
  if value == "R" then
    return "Session Eligibility: Rth (R)"
  end
  if value == "N" then
    return "Session Eligibility: Book Only No Slide (N)"
  end

  return "Session Eligibility: Unknown("..value..")"
end

-- Dissect: Session Eligibility
cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.session_eligibility, range, value, display)

  return offset + length, value
end

-- Drill Thru Protection
cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection = {}

-- Size Of: Drill Thru Protection
cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.size = 8

-- Display: Drill Thru Protection
cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.display = function(value)
  return "Drill Thru Protection: "..value
end

-- Dissect: Drill Thru Protection
cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.drill_thru_protection, range, value, display)

  return offset + length, value
end

-- Clearing Optional Data
cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data = {}

-- Size Of: Clearing Optional Data
cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.size = 16

-- Display: Clearing Optional Data
cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.display = function(value)
  return "Clearing Optional Data: "..value
end

-- Dissect: Clearing Optional Data
cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.clearing_optional_data, range, value, display)

  return offset + length, value
end

-- Order Modified Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17 = {}

-- Size Of: Order Modified Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.size = 1

-- Display: Order Modified Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Strategy Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Strategy Id Exists|"
  end
  -- Is Order Modified Price Type Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Price Type Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Strategy Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_strategy_id_exists, buffer(offset, 1))

  -- Order Modified Price Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_price_type_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_17, range, display)

  if show.order_modified_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16 = {}

-- Size Of: Order Modified Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.size = 1

-- Display: Order Modified Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Order Origin Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Order Origin Exists|"
  end
  -- Is Order Modified Multi Class Sprd Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Multi Class Sprd Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Session Eligibility Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Session Eligibility Exists|"
  end
  -- Is Order Modified Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.bits = function(buffer, offset, packet, parent)

  -- Order Modified Order Origin Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_order_origin_exists, buffer(offset, 1))

  -- Order Modified Multi Class Sprd Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_multi_class_sprd_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Session Eligibility Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_session_eligibility_exists, buffer(offset, 1))

  -- Order Modified Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_16, range, display)

  if show.order_modified_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15 = {}

-- Size Of: Order Modified Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.size = 1

-- Display: Order Modified Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Client Id Attr Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Client Id Attr Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Equity Party Id Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.bits = function(buffer, offset, packet, parent)

  -- Order Modified Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_client_id_attr_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_equity_party_id_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_15, range, display)

  if show.order_modified_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14 = {}

-- Size Of: Order Modified Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.size = 1

-- Display: Order Modified Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_14, range, display)

  if show.order_modified_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13 = {}

-- Size Of: Order Modified Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.size = 1

-- Display: Order Modified Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Drill Thru Protection Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Drill Thru Protection Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Drill Thru Protection Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_drill_thru_protection_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_13, range, display)

  if show.order_modified_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12 = {}

-- Size Of: Order Modified Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.size = 1

-- Display: Order Modified Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Clearing Optional Data Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Clearing Optional Data Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.bits = function(buffer, offset, packet, parent)

  -- Order Modified Clearing Optional Data Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_clearing_optional_data_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_12, range, display)

  if show.order_modified_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11 = {}

-- Size Of: Order Modified Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.size = 1

-- Display: Order Modified Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_11, range, display)

  if show.order_modified_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10 = {}

-- Size Of: Order Modified Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.size = 1

-- Display: Order Modified Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Cross Exclusion Indicator Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Routing Firm Id Exists|"
  end
  -- Is Order Modified Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Give Up Firm Id Exists|"
  end
  -- Is Order Modified Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Alloc Qty Exists|"
  end
  -- Is Order Modified Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_routing_firm_id_exists, buffer(offset, 1))

  -- Order Modified Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_give_up_firm_id_exists, buffer(offset, 1))

  -- Order Modified Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_alloc_qty_exists, buffer(offset, 1))

  -- Order Modified Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_10, range, display)

  if show.order_modified_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9 = {}

-- Size Of: Order Modified Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.size = 1

-- Display: Order Modified Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Auction Id Exists|"
  end
  -- Is Order Modified Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Target Party Id Exists|"
  end
  -- Is Order Modified Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_auction_id_exists, buffer(offset, 1))

  -- Order Modified Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_target_party_id_exists, buffer(offset, 1))

  -- Order Modified Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_9, range, display)

  if show.order_modified_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8 = {}

-- Size Of: Order Modified Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.size = 1

-- Display: Order Modified Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Ex Destination Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Ex Destination Exists|"
  end
  -- Is Order Modified Route Delivery Method Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Route Delivery Method Exists|"
  end
  -- Is Order Modified Rout Strategy Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Rout Strategy Exists|"
  end
  -- Is Order Modified Routing Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Routing Inst Exists|"
  end
  -- Is Order Modified Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Stop Px Exists|"
  end
  -- Is Order Modified Echo Text Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Echo Text Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_ex_destination_exists, buffer(offset, 1))

  -- Order Modified Route Delivery Method Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_route_delivery_method_exists, buffer(offset, 1))

  -- Order Modified Rout Strategy Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_rout_strategy_exists, buffer(offset, 1))

  -- Order Modified Routing Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_routing_inst_exists, buffer(offset, 1))

  -- Order Modified Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_stop_px_exists, buffer(offset, 1))

  -- Order Modified Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_echo_text_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_8, range, display)

  if show.order_modified_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7 = {}

-- Size Of: Order Modified Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.size = 1

-- Display: Order Modified Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Sub Liquidity Indicator Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Sub Liquidity Indicator Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Sub Liquidity Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_sub_liquidity_indicator_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_7, range, display)

  if show.order_modified_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6 = {}

-- Size Of: Order Modified Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.size = 1

-- Display: Order Modified Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Attributed Quote Exists|"
  end
  -- Is Order Modified Contra Capacity Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Contra Capacity Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Secondary Order Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Secondary Order Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_attributed_quote_exists, buffer(offset, 1))

  -- Order Modified Contra Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_contra_capacity_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Secondary Order Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_secondary_order_id_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_6, range, display)

  if show.order_modified_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5 = {}

-- Size Of: Order Modified Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.size = 1

-- Display: Order Modified Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Expire Time Exists|"
  end
  -- Is Order Modified Base Liquidity Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Base Liquidity Indicator Exists|"
  end
  -- Is Order Modified Working Price Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Working Price Exists|"
  end
  -- Is Order Modified Display Price Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Display Price Exists|"
  end
  -- Is Order Modified Last Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Last Px Exists|"
  end
  -- Is Order Modified Last Shares Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Last Shares Exists|"
  end
  -- Is Order Modified Leaves Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Leaves Qty Exists|"
  end
  -- Is Order Modified Orig Cl Ord Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Orig Cl Ord Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.bits = function(buffer, offset, packet, parent)

  -- Order Modified Expire Time Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_expire_time_exists, buffer(offset, 1))

  -- Order Modified Base Liquidity Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_base_liquidity_indicator_exists, buffer(offset, 1))

  -- Order Modified Working Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_working_price_exists, buffer(offset, 1))

  -- Order Modified Display Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_display_price_exists, buffer(offset, 1))

  -- Order Modified Last Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_last_px_exists, buffer(offset, 1))

  -- Order Modified Last Shares Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_last_shares_exists, buffer(offset, 1))

  -- Order Modified Leaves Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_leaves_qty_exists, buffer(offset, 1))

  -- Order Modified Orig Cl Ord Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_orig_cl_ord_id_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_5, range, display)

  if show.order_modified_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4 = {}

-- Size Of: Order Modified Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.size = 1

-- Display: Order Modified Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Corrected Size Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Open Close Exists|"
  end
  -- Is Order Modified Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Put Or Call Exists|"
  end
  -- Is Order Modified Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Strike Price Exists|"
  end
  -- Is Order Modified Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_corrected_size_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_open_close_exists, buffer(offset, 1))

  -- Order Modified Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_put_or_call_exists, buffer(offset, 1))

  -- Order Modified Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_strike_price_exists, buffer(offset, 1))

  -- Order Modified Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_4, range, display)

  if show.order_modified_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3 = {}

-- Size Of: Order Modified Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.size = 1

-- Display: Order Modified Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Prevent Match Exists|"
  end
  -- Is Order Modified Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Order Qty Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Max Floor Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Max Floor Exists|"
  end
  -- Is Order Modified Display Indicator Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Display Indicator Exists|"
  end
  -- Is Order Modified Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Clearing Account Exists|"
  end
  -- Is Order Modified Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Clearing Firm Exists|"
  end
  -- Is Order Modified Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.bits = function(buffer, offset, packet, parent)

  -- Order Modified Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_prevent_match_exists, buffer(offset, 1))

  -- Order Modified Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_order_qty_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_max_floor_exists, buffer(offset, 1))

  -- Order Modified Display Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_display_indicator_exists, buffer(offset, 1))

  -- Order Modified Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_clearing_account_exists, buffer(offset, 1))

  -- Order Modified Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_clearing_firm_exists, buffer(offset, 1))

  -- Order Modified Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_account_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_3, range, display)

  if show.order_modified_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2 = {}

-- Size Of: Order Modified Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.size = 1

-- Display: Order Modified Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Capacity Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_capacity_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_2, range, display)

  if show.order_modified_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1 = {}

-- Size Of: Order Modified Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.size = 1

-- Display: Order Modified Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Max Remove Pct Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Max Remove Pct Exists|"
  end
  -- Is Order Modified Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Min Qty Exists|"
  end
  -- Is Order Modified Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Time In Force Exists|"
  end
  -- Is Order Modified Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Ord Type Exists|"
  end
  -- Is Order Modified Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Exec Inst Exists|"
  end
  -- Is Order Modified Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Price Exists|"
  end
  -- Is Order Modified Peg Difference Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Peg Difference Exists|"
  end
  -- Is Order Modified Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.bits = function(buffer, offset, packet, parent)

  -- Order Modified Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_max_remove_pct_exists, buffer(offset, 1))

  -- Order Modified Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_min_qty_exists, buffer(offset, 1))

  -- Order Modified Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_time_in_force_exists, buffer(offset, 1))

  -- Order Modified Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_ord_type_exists, buffer(offset, 1))

  -- Order Modified Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_exec_inst_exists, buffer(offset, 1))

  -- Order Modified Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_price_exists, buffer(offset, 1))

  -- Order Modified Peg Difference Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_peg_difference_exists, buffer(offset, 1))

  -- Order Modified Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_side_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_byte_1, range, display)

  if show.order_modified_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Modified Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count = {}

-- Size Of: Order Modified Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count.size = 1

-- Display: Order Modified Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count.display = function(value)
  return "Order Modified Bitfield Count: "..value
end

-- Dissect: Order Modified Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_bitfield_count, range, value, display)

  return offset + length, value
end

-- Order Modified Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields = {}

-- Display: Order Modified Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Modified Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields.fields = function(buffer, offset, packet, parent, size_of_order_modified_optional_fields)
  local index = offset

  -- Order Modified Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_modified_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Modified Byte 1
  local order_modified_byte_1 = nil

  local order_modified_byte_1_exists = order_modified_bitfield_count >= 1

  if order_modified_byte_1_exists then

    -- Order Modified Byte 1: Struct of 8 fields
    index, order_modified_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 2
  local order_modified_byte_2 = nil

  local order_modified_byte_2_exists = order_modified_bitfield_count >= 2

  if order_modified_byte_2_exists then

    -- Order Modified Byte 2: Struct of 8 fields
    index, order_modified_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 3
  local order_modified_byte_3 = nil

  local order_modified_byte_3_exists = order_modified_bitfield_count >= 3

  if order_modified_byte_3_exists then

    -- Order Modified Byte 3: Struct of 8 fields
    index, order_modified_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 4
  local order_modified_byte_4 = nil

  local order_modified_byte_4_exists = order_modified_bitfield_count >= 4

  if order_modified_byte_4_exists then

    -- Order Modified Byte 4: Struct of 8 fields
    index, order_modified_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 5
  local order_modified_byte_5 = nil

  local order_modified_byte_5_exists = order_modified_bitfield_count >= 5

  if order_modified_byte_5_exists then

    -- Order Modified Byte 5: Struct of 8 fields
    index, order_modified_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 6
  local order_modified_byte_6 = nil

  local order_modified_byte_6_exists = order_modified_bitfield_count >= 6

  if order_modified_byte_6_exists then

    -- Order Modified Byte 6: Struct of 8 fields
    index, order_modified_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 7
  local order_modified_byte_7 = nil

  local order_modified_byte_7_exists = order_modified_bitfield_count >= 7

  if order_modified_byte_7_exists then

    -- Order Modified Byte 7: Struct of 8 fields
    index, order_modified_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 8
  local order_modified_byte_8 = nil

  local order_modified_byte_8_exists = order_modified_bitfield_count >= 8

  if order_modified_byte_8_exists then

    -- Order Modified Byte 8: Struct of 8 fields
    index, order_modified_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 9
  local order_modified_byte_9 = nil

  local order_modified_byte_9_exists = order_modified_bitfield_count >= 9

  if order_modified_byte_9_exists then

    -- Order Modified Byte 9: Struct of 8 fields
    index, order_modified_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 10
  local order_modified_byte_10 = nil

  local order_modified_byte_10_exists = order_modified_bitfield_count >= 10

  if order_modified_byte_10_exists then

    -- Order Modified Byte 10: Struct of 8 fields
    index, order_modified_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 11
  local order_modified_byte_11 = nil

  local order_modified_byte_11_exists = order_modified_bitfield_count >= 11

  if order_modified_byte_11_exists then

    -- Order Modified Byte 11: Struct of 8 fields
    index, order_modified_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 12
  local order_modified_byte_12 = nil

  local order_modified_byte_12_exists = order_modified_bitfield_count >= 12

  if order_modified_byte_12_exists then

    -- Order Modified Byte 12: Struct of 8 fields
    index, order_modified_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 13
  local order_modified_byte_13 = nil

  local order_modified_byte_13_exists = order_modified_bitfield_count >= 13

  if order_modified_byte_13_exists then

    -- Order Modified Byte 13: Struct of 8 fields
    index, order_modified_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 14
  local order_modified_byte_14 = nil

  local order_modified_byte_14_exists = order_modified_bitfield_count >= 14

  if order_modified_byte_14_exists then

    -- Order Modified Byte 14: Struct of 8 fields
    index, order_modified_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 15
  local order_modified_byte_15 = nil

  local order_modified_byte_15_exists = order_modified_bitfield_count >= 15

  if order_modified_byte_15_exists then

    -- Order Modified Byte 15: Struct of 8 fields
    index, order_modified_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 16
  local order_modified_byte_16 = nil

  local order_modified_byte_16_exists = order_modified_bitfield_count >= 16

  if order_modified_byte_16_exists then

    -- Order Modified Byte 16: Struct of 8 fields
    index, order_modified_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 17
  local order_modified_byte_17 = nil

  local order_modified_byte_17_exists = order_modified_bitfield_count >= 17

  if order_modified_byte_17_exists then

    -- Order Modified Byte 17: Struct of 8 fields
    index, order_modified_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Side
  local side = nil

  local side_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(7) > 0

  if side_exists then
    index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Time In Force
  local time_in_force = nil

  local time_in_force_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(2) > 0

  if time_in_force_exists then
    index, time_in_force = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Min Qty
  local min_qty = nil

  local min_qty_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(1) > 0

  if min_qty_exists then
    index, min_qty = cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Remove Pct
  local max_remove_pct = nil

  local max_remove_pct_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(0) > 0

  if max_remove_pct_exists then
    index, max_remove_pct = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = order_modified_bitfield_count >= 2 and order_modified_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = order_modified_bitfield_count >= 2 and order_modified_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(6) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(5) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Indicator
  local display_indicator = nil

  local display_indicator_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(4) > 0

  if display_indicator_exists then
    index, display_indicator = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Floor
  local max_floor = nil

  local max_floor_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(3) > 0

  if max_floor_exists then
    index, max_floor = cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = order_modified_bitfield_count >= 4 and order_modified_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = order_modified_bitfield_count >= 4 and order_modified_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = order_modified_bitfield_count >= 4 and order_modified_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = order_modified_bitfield_count >= 4 and order_modified_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Corrected Size
  local corrected_size = nil

  local corrected_size_exists = order_modified_bitfield_count >= 4 and order_modified_byte_4:bitfield(2) > 0

  if corrected_size_exists then
    index, corrected_size = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Orig Cl Ord Id
  local orig_cl_ord_id = nil

  local orig_cl_ord_id_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(7) > 0

  if orig_cl_ord_id_exists then
    index, orig_cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leaves Qty
  local leaves_qty = nil

  local leaves_qty_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(6) > 0

  if leaves_qty_exists then
    index, leaves_qty = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Shares
  local last_shares = nil

  local last_shares_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(5) > 0

  if last_shares_exists then
    index, last_shares = cboe_edgx_options_orderentry_boe_v2_10.last_shares.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Px
  local last_px = nil

  local last_px_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(4) > 0

  if last_px_exists then
    index, last_px = cboe_edgx_options_orderentry_boe_v2_10.last_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Price
  local display_price = nil

  local display_price_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(3) > 0

  if display_price_exists then
    index, display_price = cboe_edgx_options_orderentry_boe_v2_10.display_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Working Price
  local working_price = nil

  local working_price_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(2) > 0

  if working_price_exists then
    index, working_price = cboe_edgx_options_orderentry_boe_v2_10.working_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Base Liquidity Indicator
  local base_liquidity_indicator = nil

  local base_liquidity_indicator_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(1) > 0

  if base_liquidity_indicator_exists then
    index, base_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Expire Time
  local expire_time = nil

  local expire_time_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(0) > 0

  if expire_time_exists then
    index, expire_time = cboe_edgx_options_orderentry_boe_v2_10.expire_time.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Secondary Order Id
  local secondary_order_id = nil

  local secondary_order_id_exists = order_modified_bitfield_count >= 6 and order_modified_byte_6:bitfield(7) > 0

  if secondary_order_id_exists then
    index, secondary_order_id = cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Contra Capacity
  local contra_capacity = nil

  local contra_capacity_exists = order_modified_bitfield_count >= 6 and order_modified_byte_6:bitfield(5) > 0

  if contra_capacity_exists then
    index, contra_capacity = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = order_modified_bitfield_count >= 6 and order_modified_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Sub Liquidity Indicator
  local sub_liquidity_indicator = nil

  local sub_liquidity_indicator_exists = order_modified_bitfield_count >= 7 and order_modified_byte_7:bitfield(7) > 0

  if sub_liquidity_indicator_exists then
    index, sub_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Echo Text
  local echo_text = nil

  local echo_text_exists = order_modified_bitfield_count >= 8 and order_modified_byte_8:bitfield(6) > 0

  if echo_text_exists then
    index, echo_text = cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = order_modified_bitfield_count >= 8 and order_modified_byte_8:bitfield(5) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Inst
  local routing_inst = nil

  local routing_inst_exists = order_modified_bitfield_count >= 8 and order_modified_byte_8:bitfield(4) > 0

  if routing_inst_exists then
    index, routing_inst = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Rout Strategy
  local rout_strategy = nil

  local rout_strategy_exists = order_modified_bitfield_count >= 8 and order_modified_byte_8:bitfield(3) > 0

  if rout_strategy_exists then
    index, rout_strategy = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Route Delivery Method
  local route_delivery_method = nil

  local route_delivery_method_exists = order_modified_bitfield_count >= 8 and order_modified_byte_8:bitfield(2) > 0

  if route_delivery_method_exists then
    index, route_delivery_method = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ex Destination
  local ex_destination = nil

  local ex_destination_exists = order_modified_bitfield_count >= 8 and order_modified_byte_8:bitfield(1) > 0

  if ex_destination_exists then
    index, ex_destination = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Marketing Fee Code
  local marketing_fee_code = nil

  local marketing_fee_code_exists = order_modified_bitfield_count >= 9 and order_modified_byte_9:bitfield(7) > 0

  if marketing_fee_code_exists then
    index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = order_modified_bitfield_count >= 9 and order_modified_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = order_modified_bitfield_count >= 9 and order_modified_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = order_modified_bitfield_count >= 10 and order_modified_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = order_modified_bitfield_count >= 10 and order_modified_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = order_modified_bitfield_count >= 10 and order_modified_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = order_modified_bitfield_count >= 10 and order_modified_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = order_modified_bitfield_count >= 10 and order_modified_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Optional Data
  local clearing_optional_data = nil

  local clearing_optional_data_exists = order_modified_bitfield_count >= 12 and order_modified_byte_12:bitfield(0) > 0

  if clearing_optional_data_exists then
    index, clearing_optional_data = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Drill Thru Protection
  local drill_thru_protection = nil

  local drill_thru_protection_exists = order_modified_bitfield_count >= 13 and order_modified_byte_13:bitfield(1) > 0

  if drill_thru_protection_exists then
    index, drill_thru_protection = cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = order_modified_bitfield_count >= 15 and order_modified_byte_15:bitfield(6) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = order_modified_bitfield_count >= 15 and order_modified_byte_15:bitfield(0) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = order_modified_bitfield_count >= 16 and order_modified_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Session Eligibility
  local session_eligibility = nil

  local session_eligibility_exists = order_modified_bitfield_count >= 16 and order_modified_byte_16:bitfield(6) > 0

  if session_eligibility_exists then
    index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Multi Class Sprd
  local multi_class_sprd = nil

  local multi_class_sprd_exists = order_modified_bitfield_count >= 16 and order_modified_byte_16:bitfield(1) > 0

  if multi_class_sprd_exists then
    index, multi_class_sprd = cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Origin
  local order_origin = nil

  local order_origin_exists = order_modified_bitfield_count >= 16 and order_modified_byte_16:bitfield(0) > 0

  if order_origin_exists then
    index, order_origin = cboe_edgx_options_orderentry_boe_v2_10.order_origin.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price Type
  local price_type = nil

  local price_type_exists = order_modified_bitfield_count >= 17 and order_modified_byte_17:bitfield(7) > 0

  if price_type_exists then
    index, price_type = cboe_edgx_options_orderentry_boe_v2_10.price_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strategy Id
  local strategy_id = nil

  local strategy_id_exists = order_modified_bitfield_count >= 17 and order_modified_byte_17:bitfield(6) > 0

  if strategy_id_exists then
    index, strategy_id = cboe_edgx_options_orderentry_boe_v2_10.strategy_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Modified Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_order_modified_optional_fields)
  local index = offset + size_of_order_modified_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.order_modified_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields.fields(buffer, offset, packet, parent, size_of_order_modified_optional_fields)
    parent:set_len(size_of_order_modified_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields.fields(buffer, offset, packet, parent, size_of_order_modified_optional_fields)

    return index
  end
end

-- Order Modified Message
cboe_edgx_options_orderentry_boe_v2_10.order_modified_message = {}

-- Read runtime size of: Order Modified Message
cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Modified Message
cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Modified Message
cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.fields = function(buffer, offset, packet, parent, size_of_order_modified_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Modified Optional Fields
  local size_of_order_modified_optional_fields = message_length - (index - offset) - 8

  -- Order Modified Optional Fields: Struct of 75 fields
  index, order_modified_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.order_modified_optional_fields.dissect(buffer, index, packet, parent, size_of_order_modified_optional_fields)

  return index
end

-- Dissect: Order Modified Message
cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_modified_message = cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_modified_message then
    local range = buffer(offset, size_of_order_modified_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.fields(buffer, offset, packet, parent, size_of_order_modified_message)

  return offset + size_of_order_modified_message
end

-- Reserved 17
cboe_edgx_options_orderentry_boe_v2_10.reserved_17 = {}

-- Size Of: Reserved 17
cboe_edgx_options_orderentry_boe_v2_10.reserved_17.size = 17

-- Display: Reserved 17
cboe_edgx_options_orderentry_boe_v2_10.reserved_17.display = function(value)
  return "Reserved 17: "..value
end

-- Dissect: Reserved 17
cboe_edgx_options_orderentry_boe_v2_10.reserved_17.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_17.size
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_17.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_17, range, value, display)

  return offset + length, value
end

-- Quote Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason = {}

-- Size Of: Quote Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason.size = 1

-- Display: Quote Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason.display = function(value)
  if value == "C" then
    return "Quote Reject Reason: Invalid Efid (C)"
  end
  if value == "D" then
    return "Quote Reject Reason: Invalid Wash Id (D)"
  end
  if value == "E" then
    return "Quote Reject Reason: Invalid Session Eligibility (E)"
  end
  if value == "F" then
    return "Quote Reject Reason: Not Enabled For Quotes (F)"
  end
  if value == "I" then
    return "Quote Reject Reason: Incorrect Data Center (I)"
  end
  if value == "L" then
    return "Quote Reject Reason: Invalid Quote Cnt (L)"
  end
  if value == "M" then
    return "Quote Reject Reason: Symbols Not On Same Matching Engine (M)"
  end
  if value == "P" then
    return "Quote Reject Reason: Invalid Posting Instruction (P)"
  end
  if value == "Q" then
    return "Quote Reject Reason: Invalid Quote Update Id (Q)"
  end
  if value == "R" then
    return "Quote Reject Reason: Risk Root Does Not Match Across Quotes (R)"
  end
  if value == "S" then
    return "Quote Reject Reason: Symbol Not Found (S)"
  end
  if value == "W" then
    return "Quote Reject Reason: Invalid Wash Prevent Type (W)"
  end
  if value == "a" then
    return "Quote Reject Reason: Admin (a)"
  end
  if value == "C" then
    return "Quote Reject Reason: Invalid Capacity (C)"
  end
  if value == "d" then
    return "Quote Reject Reason: Close Only (d)"
  end
  if value == "f" then
    return "Quote Reject Reason: Risk Management Efid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Quote Reject Reason: Invalid Wash Method (m)"
  end
  if value == "p" then
    return "Quote Reject Reason: Invalid Open Close (p)"
  end
  if value == "p" then
    return "Quote Reject Reason: Risk Management Risk Root Level (p)"
  end
  if value == "r" then
    return "Quote Reject Reason: Invalid Remove (r)"
  end
  if value == "s" then
    return "Quote Reject Reason: Invalid Side (s)"
  end
  if value == "u" then
    return "Quote Reject Reason: Symbol Range Unreachable (u)"
  end
  if value == "y" then
    return "Quote Reject Reason: Quote Received By Cboe During Replay (y)"
  end

  return "Quote Reject Reason: Unknown("..value..")"
end

-- Dissect: Quote Reject Reason
cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_reject_reason, range, value, display)

  return offset + length, value
end

-- Quote Update Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message = {}

-- Read runtime size of: Quote Update Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Update Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Update Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.fields = function(buffer, offset, packet, parent, size_of_quote_update_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect(buffer, index, packet, parent)

  -- Quote Reject Reason: 1 Byte Ascii String Enum with 23 values
  index, quote_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason.dissect(buffer, index, packet, parent)

  -- Reserved 17: 17 Byte
  index, reserved_17 = cboe_edgx_options_orderentry_boe_v2_10.reserved_17.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Update Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_update_rejected_message = cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_update_rejected_message then
    local range = buffer(offset, size_of_quote_update_rejected_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_rejected_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.fields(buffer, offset, packet, parent, size_of_quote_update_rejected_message)

  return offset + size_of_quote_update_rejected_message
end

-- Cross Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17 = {}

-- Size Of: Cross Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.size = 1

-- Display: Cross Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_17, range, display)

  if show.cross_order_rejected_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16 = {}

-- Size Of: Cross Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.size = 1

-- Display: Cross Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_16, range, display)

  if show.cross_order_rejected_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15 = {}

-- Size Of: Cross Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.size = 1

-- Display: Cross Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Equity Party Id Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_equity_party_id_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_15, range, display)

  if show.cross_order_rejected_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14 = {}

-- Size Of: Cross Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.size = 1

-- Display: Cross Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_14, range, display)

  if show.cross_order_rejected_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13 = {}

-- Size Of: Cross Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.size = 1

-- Display: Cross Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_13, range, display)

  if show.cross_order_rejected_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12 = {}

-- Size Of: Cross Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.size = 1

-- Display: Cross Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_12, range, display)

  if show.cross_order_rejected_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11 = {}

-- Size Of: Cross Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.size = 1

-- Display: Cross Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_11, range, display)

  if show.cross_order_rejected_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10 = {}

-- Size Of: Cross Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.size = 1

-- Display: Cross Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Routing Firm Id Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_routing_firm_id_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_10, range, display)

  if show.cross_order_rejected_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9 = {}

-- Size Of: Cross Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.size = 1

-- Display: Cross Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Cross Prioritization Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Cross Prioritization Exists|"
  end
  -- Is Cross Order Rejected Cross Type Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Cross Type Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Target Party Id Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Cross Prioritization Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_cross_prioritization_exists, buffer(offset, 1))

  -- Cross Order Rejected Cross Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_cross_type_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_target_party_id_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_9, range, display)

  if show.cross_order_rejected_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8 = {}

-- Size Of: Cross Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.size = 1

-- Display: Cross Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_8, range, display)

  if show.cross_order_rejected_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7 = {}

-- Size Of: Cross Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.size = 1

-- Display: Cross Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_7, range, display)

  if show.cross_order_rejected_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6 = {}

-- Size Of: Cross Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.size = 1

-- Display: Cross Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Attributed Quote Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_attributed_quote_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_6, range, display)

  if show.cross_order_rejected_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5 = {}

-- Size Of: Cross Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.size = 1

-- Display: Cross Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_5, range, display)

  if show.cross_order_rejected_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4 = {}

-- Size Of: Cross Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.size = 1

-- Display: Cross Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Put Or Call Exists|"
  end
  -- Is Cross Order Rejected Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Strike Price Exists|"
  end
  -- Is Cross Order Rejected Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_put_or_call_exists, buffer(offset, 1))

  -- Cross Order Rejected Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_strike_price_exists, buffer(offset, 1))

  -- Cross Order Rejected Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_4, range, display)

  if show.cross_order_rejected_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3 = {}

-- Size Of: Cross Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.size = 1

-- Display: Cross Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Prevent Match Exists|"
  end
  -- Is Cross Order Rejected Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Order Qty Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_prevent_match_exists, buffer(offset, 1))

  -- Cross Order Rejected Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_order_qty_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_3, range, display)

  if show.cross_order_rejected_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2 = {}

-- Size Of: Cross Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.size = 1

-- Display: Cross Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_symbol_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_2, range, display)

  if show.cross_order_rejected_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1 = {}

-- Size Of: Cross Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.size = 1

-- Display: Cross Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Rejected Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Rejected Exec Inst Exists|"
  end
  -- Is Cross Order Rejected Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Rejected Price Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.bits = function(buffer, offset, packet, parent)

  -- Cross Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Rejected Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_exec_inst_exists, buffer(offset, 1))

  -- Cross Order Rejected Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_price_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_byte_1, range, display)

  if show.cross_order_rejected_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count = {}

-- Size Of: Cross Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count.size = 1

-- Display: Cross Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count.display = function(value)
  return "Cross Order Rejected Bitfield Count: "..value
end

-- Dissect: Cross Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Cross Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields = {}

-- Display: Cross Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields.fields = function(buffer, offset, packet, parent, size_of_cross_order_rejected_optional_fields)
  local index = offset

  -- Cross Order Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cross_order_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cross Order Rejected Byte 1
  local cross_order_rejected_byte_1 = nil

  local cross_order_rejected_byte_1_exists = cross_order_rejected_bitfield_count >= 1

  if cross_order_rejected_byte_1_exists then

    -- Cross Order Rejected Byte 1: Struct of 8 fields
    index, cross_order_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 2
  local cross_order_rejected_byte_2 = nil

  local cross_order_rejected_byte_2_exists = cross_order_rejected_bitfield_count >= 2

  if cross_order_rejected_byte_2_exists then

    -- Cross Order Rejected Byte 2: Struct of 8 fields
    index, cross_order_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 3
  local cross_order_rejected_byte_3 = nil

  local cross_order_rejected_byte_3_exists = cross_order_rejected_bitfield_count >= 3

  if cross_order_rejected_byte_3_exists then

    -- Cross Order Rejected Byte 3: Struct of 8 fields
    index, cross_order_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 4
  local cross_order_rejected_byte_4 = nil

  local cross_order_rejected_byte_4_exists = cross_order_rejected_bitfield_count >= 4

  if cross_order_rejected_byte_4_exists then

    -- Cross Order Rejected Byte 4: Struct of 8 fields
    index, cross_order_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 5
  local cross_order_rejected_byte_5 = nil

  local cross_order_rejected_byte_5_exists = cross_order_rejected_bitfield_count >= 5

  if cross_order_rejected_byte_5_exists then

    -- Cross Order Rejected Byte 5: Struct of 8 fields
    index, cross_order_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 6
  local cross_order_rejected_byte_6 = nil

  local cross_order_rejected_byte_6_exists = cross_order_rejected_bitfield_count >= 6

  if cross_order_rejected_byte_6_exists then

    -- Cross Order Rejected Byte 6: Struct of 8 fields
    index, cross_order_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 7
  local cross_order_rejected_byte_7 = nil

  local cross_order_rejected_byte_7_exists = cross_order_rejected_bitfield_count >= 7

  if cross_order_rejected_byte_7_exists then

    -- Cross Order Rejected Byte 7: Struct of 8 fields
    index, cross_order_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 8
  local cross_order_rejected_byte_8 = nil

  local cross_order_rejected_byte_8_exists = cross_order_rejected_bitfield_count >= 8

  if cross_order_rejected_byte_8_exists then

    -- Cross Order Rejected Byte 8: Struct of 8 fields
    index, cross_order_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 9
  local cross_order_rejected_byte_9 = nil

  local cross_order_rejected_byte_9_exists = cross_order_rejected_bitfield_count >= 9

  if cross_order_rejected_byte_9_exists then

    -- Cross Order Rejected Byte 9: Struct of 8 fields
    index, cross_order_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 10
  local cross_order_rejected_byte_10 = nil

  local cross_order_rejected_byte_10_exists = cross_order_rejected_bitfield_count >= 10

  if cross_order_rejected_byte_10_exists then

    -- Cross Order Rejected Byte 10: Struct of 8 fields
    index, cross_order_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 11
  local cross_order_rejected_byte_11 = nil

  local cross_order_rejected_byte_11_exists = cross_order_rejected_bitfield_count >= 11

  if cross_order_rejected_byte_11_exists then

    -- Cross Order Rejected Byte 11: Struct of 8 fields
    index, cross_order_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 12
  local cross_order_rejected_byte_12 = nil

  local cross_order_rejected_byte_12_exists = cross_order_rejected_bitfield_count >= 12

  if cross_order_rejected_byte_12_exists then

    -- Cross Order Rejected Byte 12: Struct of 8 fields
    index, cross_order_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 13
  local cross_order_rejected_byte_13 = nil

  local cross_order_rejected_byte_13_exists = cross_order_rejected_bitfield_count >= 13

  if cross_order_rejected_byte_13_exists then

    -- Cross Order Rejected Byte 13: Struct of 8 fields
    index, cross_order_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 14
  local cross_order_rejected_byte_14 = nil

  local cross_order_rejected_byte_14_exists = cross_order_rejected_bitfield_count >= 14

  if cross_order_rejected_byte_14_exists then

    -- Cross Order Rejected Byte 14: Struct of 8 fields
    index, cross_order_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 15
  local cross_order_rejected_byte_15 = nil

  local cross_order_rejected_byte_15_exists = cross_order_rejected_bitfield_count >= 15

  if cross_order_rejected_byte_15_exists then

    -- Cross Order Rejected Byte 15: Struct of 8 fields
    index, cross_order_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 16
  local cross_order_rejected_byte_16 = nil

  local cross_order_rejected_byte_16_exists = cross_order_rejected_bitfield_count >= 16

  if cross_order_rejected_byte_16_exists then

    -- Cross Order Rejected Byte 16: Struct of 8 fields
    index, cross_order_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 17
  local cross_order_rejected_byte_17 = nil

  local cross_order_rejected_byte_17_exists = cross_order_rejected_bitfield_count >= 17

  if cross_order_rejected_byte_17_exists then

    -- Cross Order Rejected Byte 17: Struct of 8 fields
    index, cross_order_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = cross_order_rejected_bitfield_count >= 1 and cross_order_rejected_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = cross_order_rejected_bitfield_count >= 1 and cross_order_rejected_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = cross_order_rejected_bitfield_count >= 2 and cross_order_rejected_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = cross_order_rejected_bitfield_count >= 3 and cross_order_rejected_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = cross_order_rejected_bitfield_count >= 3 and cross_order_rejected_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = cross_order_rejected_bitfield_count >= 4 and cross_order_rejected_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = cross_order_rejected_bitfield_count >= 4 and cross_order_rejected_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = cross_order_rejected_bitfield_count >= 4 and cross_order_rejected_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = cross_order_rejected_bitfield_count >= 6 and cross_order_rejected_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = cross_order_rejected_bitfield_count >= 9 and cross_order_rejected_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Type
  local cross_type = nil

  local cross_type_exists = cross_order_rejected_bitfield_count >= 9 and cross_order_rejected_byte_9:bitfield(1) > 0

  if cross_type_exists then
    index, cross_type = cboe_edgx_options_orderentry_boe_v2_10.cross_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Prioritization
  local cross_prioritization = nil

  local cross_prioritization_exists = cross_order_rejected_bitfield_count >= 9 and cross_order_rejected_byte_9:bitfield(0) > 0

  if cross_prioritization_exists then
    index, cross_prioritization = cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = cross_order_rejected_bitfield_count >= 10 and cross_order_rejected_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = cross_order_rejected_bitfield_count >= 10 and cross_order_rejected_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = cross_order_rejected_bitfield_count >= 15 and cross_order_rejected_byte_15:bitfield(6) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = cross_order_rejected_bitfield_count >= 16 and cross_order_rejected_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cross Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_cross_order_rejected_optional_fields)
  local index = offset + size_of_cross_order_rejected_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.cross_order_rejected_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_cross_order_rejected_optional_fields)
    parent:set_len(size_of_cross_order_rejected_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_cross_order_rejected_optional_fields)

    return index
  end
end

-- Cross Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message = {}

-- Read runtime size of: Cross Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Cross Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.fields = function(buffer, offset, packet, parent, size_of_cross_order_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cross Id: 20 Byte Ascii String
  index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)

  -- Order Reject Reason: 1 Byte Ascii String Enum with 31 values
  index, order_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.dissect(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_edgx_options_orderentry_boe_v2_10.text.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Cross Order Rejected Optional Fields
  local size_of_cross_order_rejected_optional_fields = message_length - (index - offset) - 8

  -- Cross Order Rejected Optional Fields: Struct of 34 fields
  index, cross_order_rejected_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_optional_fields.dissect(buffer, index, packet, parent, size_of_cross_order_rejected_optional_fields)

  return index
end

-- Dissect: Cross Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cross_order_rejected_message = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cross_order_rejected_message then
    local range = buffer(offset, size_of_cross_order_rejected_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.fields(buffer, offset, packet, parent, size_of_cross_order_rejected_message)

  return offset + size_of_cross_order_rejected_message
end

-- Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17 = {}

-- Size Of: Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.size = 1

-- Display: Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Strategy Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Strategy Id Exists|"
  end
  -- Is Order Rejected Price Type Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Price Type Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Strategy Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_strategy_id_exists, buffer(offset, 1))

  -- Order Rejected Price Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_price_type_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_17, range, display)

  if show.order_rejected_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16 = {}

-- Size Of: Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.size = 1

-- Display: Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Order Origin Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Order Origin Exists|"
  end
  -- Is Order Rejected Multi Class Sprd Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Multi Class Sprd Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Session Eligibility Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Session Eligibility Exists|"
  end
  -- Is Order Rejected Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Order Origin Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_order_origin_exists, buffer(offset, 1))

  -- Order Rejected Multi Class Sprd Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_multi_class_sprd_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Session Eligibility Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_session_eligibility_exists, buffer(offset, 1))

  -- Order Rejected Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_16, range, display)

  if show.order_rejected_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15 = {}

-- Size Of: Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.size = 1

-- Display: Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Client Id Attr Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Client Id Attr Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Equity Party Id Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_client_id_attr_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_equity_party_id_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_15, range, display)

  if show.order_rejected_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14 = {}

-- Size Of: Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.size = 1

-- Display: Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_14, range, display)

  if show.order_rejected_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13 = {}

-- Size Of: Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.size = 1

-- Display: Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_13, range, display)

  if show.order_rejected_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12 = {}

-- Size Of: Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.size = 1

-- Display: Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_12, range, display)

  if show.order_rejected_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11 = {}

-- Size Of: Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.size = 1

-- Display: Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_11, range, display)

  if show.order_rejected_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10 = {}

-- Size Of: Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.size = 1

-- Display: Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Cross Exclusion Indicator Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Routing Firm Id Exists|"
  end
  -- Is Order Rejected Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Give Up Firm Id Exists|"
  end
  -- Is Order Rejected Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Alloc Qty Exists|"
  end
  -- Is Order Rejected Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_routing_firm_id_exists, buffer(offset, 1))

  -- Order Rejected Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_give_up_firm_id_exists, buffer(offset, 1))

  -- Order Rejected Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_alloc_qty_exists, buffer(offset, 1))

  -- Order Rejected Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_10, range, display)

  if show.order_rejected_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9 = {}

-- Size Of: Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.size = 1

-- Display: Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Cmta Number Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Auction Id Exists|"
  end
  -- Is Order Rejected Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Target Party Id Exists|"
  end
  -- Is Order Rejected Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_cmta_number_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_auction_id_exists, buffer(offset, 1))

  -- Order Rejected Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_target_party_id_exists, buffer(offset, 1))

  -- Order Rejected Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_9, range, display)

  if show.order_rejected_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8 = {}

-- Size Of: Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.size = 1

-- Display: Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Ex Destination Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Ex Destination Exists|"
  end
  -- Is Order Rejected Route Delivery Method Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Route Delivery Method Exists|"
  end
  -- Is Order Rejected Rout Strategy Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Rout Strategy Exists|"
  end
  -- Is Order Rejected Routing Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Routing Inst Exists|"
  end
  -- Is Order Rejected Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Stop Px Exists|"
  end
  -- Is Order Rejected Echo Text Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Echo Text Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_ex_destination_exists, buffer(offset, 1))

  -- Order Rejected Route Delivery Method Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_route_delivery_method_exists, buffer(offset, 1))

  -- Order Rejected Rout Strategy Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_rout_strategy_exists, buffer(offset, 1))

  -- Order Rejected Routing Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_routing_inst_exists, buffer(offset, 1))

  -- Order Rejected Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_stop_px_exists, buffer(offset, 1))

  -- Order Rejected Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_echo_text_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_8, range, display)

  if show.order_rejected_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7 = {}

-- Size Of: Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.size = 1

-- Display: Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_7, range, display)

  if show.order_rejected_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6 = {}

-- Size Of: Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.size = 1

-- Display: Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Attributed Quote Exists|"
  end
  -- Is Order Rejected Contra Capacity Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Contra Capacity Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Secondary Order Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Secondary Order Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_attributed_quote_exists, buffer(offset, 1))

  -- Order Rejected Contra Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_contra_capacity_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Secondary Order Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_secondary_order_id_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_6, range, display)

  if show.order_rejected_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5 = {}

-- Size Of: Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.size = 1

-- Display: Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_5, range, display)

  if show.order_rejected_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4 = {}

-- Size Of: Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.size = 1

-- Display: Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Corrected Size Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Open Close Exists|"
  end
  -- Is Order Rejected Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Put Or Call Exists|"
  end
  -- Is Order Rejected Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Strike Price Exists|"
  end
  -- Is Order Rejected Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_corrected_size_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_open_close_exists, buffer(offset, 1))

  -- Order Rejected Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_put_or_call_exists, buffer(offset, 1))

  -- Order Rejected Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_strike_price_exists, buffer(offset, 1))

  -- Order Rejected Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_4, range, display)

  if show.order_rejected_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3 = {}

-- Size Of: Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.size = 1

-- Display: Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Prevent Match Exists|"
  end
  -- Is Order Rejected Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Order Qty Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Max Floor Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Max Floor Exists|"
  end
  -- Is Order Rejected Display Indicator Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Display Indicator Exists|"
  end
  -- Is Order Rejected Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Clearing Account Exists|"
  end
  -- Is Order Rejected Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Clearing Firm Exists|"
  end
  -- Is Order Rejected Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_prevent_match_exists, buffer(offset, 1))

  -- Order Rejected Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_order_qty_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_max_floor_exists, buffer(offset, 1))

  -- Order Rejected Display Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_display_indicator_exists, buffer(offset, 1))

  -- Order Rejected Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_clearing_account_exists, buffer(offset, 1))

  -- Order Rejected Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_clearing_firm_exists, buffer(offset, 1))

  -- Order Rejected Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_account_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_3, range, display)

  if show.order_rejected_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2 = {}

-- Size Of: Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.size = 1

-- Display: Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Capacity Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_capacity_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_2, range, display)

  if show.order_rejected_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1 = {}

-- Size Of: Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.size = 1

-- Display: Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Max Remove Pct Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Max Remove Pct Exists|"
  end
  -- Is Order Rejected Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Min Qty Exists|"
  end
  -- Is Order Rejected Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Time In Force Exists|"
  end
  -- Is Order Rejected Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Ord Type Exists|"
  end
  -- Is Order Rejected Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Exec Inst Exists|"
  end
  -- Is Order Rejected Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Price Exists|"
  end
  -- Is Order Rejected Peg Difference Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Peg Difference Exists|"
  end
  -- Is Order Rejected Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.bits = function(buffer, offset, packet, parent)

  -- Order Rejected Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_max_remove_pct_exists, buffer(offset, 1))

  -- Order Rejected Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_min_qty_exists, buffer(offset, 1))

  -- Order Rejected Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_time_in_force_exists, buffer(offset, 1))

  -- Order Rejected Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_ord_type_exists, buffer(offset, 1))

  -- Order Rejected Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_exec_inst_exists, buffer(offset, 1))

  -- Order Rejected Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_price_exists, buffer(offset, 1))

  -- Order Rejected Peg Difference Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_peg_difference_exists, buffer(offset, 1))

  -- Order Rejected Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_side_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_byte_1, range, display)

  if show.order_rejected_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count = {}

-- Size Of: Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count.size = 1

-- Display: Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count.display = function(value)
  return "Order Rejected Bitfield Count: "..value
end

-- Dissect: Order Rejected Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields = {}

-- Display: Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields.fields = function(buffer, offset, packet, parent, size_of_order_rejected_optional_fields)
  local index = offset

  -- Order Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Rejected Byte 1
  local order_rejected_byte_1 = nil

  local order_rejected_byte_1_exists = order_rejected_bitfield_count >= 1

  if order_rejected_byte_1_exists then

    -- Order Rejected Byte 1: Struct of 8 fields
    index, order_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 2
  local order_rejected_byte_2 = nil

  local order_rejected_byte_2_exists = order_rejected_bitfield_count >= 2

  if order_rejected_byte_2_exists then

    -- Order Rejected Byte 2: Struct of 8 fields
    index, order_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 3
  local order_rejected_byte_3 = nil

  local order_rejected_byte_3_exists = order_rejected_bitfield_count >= 3

  if order_rejected_byte_3_exists then

    -- Order Rejected Byte 3: Struct of 8 fields
    index, order_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 4
  local order_rejected_byte_4 = nil

  local order_rejected_byte_4_exists = order_rejected_bitfield_count >= 4

  if order_rejected_byte_4_exists then

    -- Order Rejected Byte 4: Struct of 8 fields
    index, order_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 5
  local order_rejected_byte_5 = nil

  local order_rejected_byte_5_exists = order_rejected_bitfield_count >= 5

  if order_rejected_byte_5_exists then

    -- Order Rejected Byte 5: Struct of 8 fields
    index, order_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 6
  local order_rejected_byte_6 = nil

  local order_rejected_byte_6_exists = order_rejected_bitfield_count >= 6

  if order_rejected_byte_6_exists then

    -- Order Rejected Byte 6: Struct of 8 fields
    index, order_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 7
  local order_rejected_byte_7 = nil

  local order_rejected_byte_7_exists = order_rejected_bitfield_count >= 7

  if order_rejected_byte_7_exists then

    -- Order Rejected Byte 7: Struct of 8 fields
    index, order_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 8
  local order_rejected_byte_8 = nil

  local order_rejected_byte_8_exists = order_rejected_bitfield_count >= 8

  if order_rejected_byte_8_exists then

    -- Order Rejected Byte 8: Struct of 8 fields
    index, order_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 9
  local order_rejected_byte_9 = nil

  local order_rejected_byte_9_exists = order_rejected_bitfield_count >= 9

  if order_rejected_byte_9_exists then

    -- Order Rejected Byte 9: Struct of 8 fields
    index, order_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 10
  local order_rejected_byte_10 = nil

  local order_rejected_byte_10_exists = order_rejected_bitfield_count >= 10

  if order_rejected_byte_10_exists then

    -- Order Rejected Byte 10: Struct of 8 fields
    index, order_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 11
  local order_rejected_byte_11 = nil

  local order_rejected_byte_11_exists = order_rejected_bitfield_count >= 11

  if order_rejected_byte_11_exists then

    -- Order Rejected Byte 11: Struct of 8 fields
    index, order_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 12
  local order_rejected_byte_12 = nil

  local order_rejected_byte_12_exists = order_rejected_bitfield_count >= 12

  if order_rejected_byte_12_exists then

    -- Order Rejected Byte 12: Struct of 8 fields
    index, order_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 13
  local order_rejected_byte_13 = nil

  local order_rejected_byte_13_exists = order_rejected_bitfield_count >= 13

  if order_rejected_byte_13_exists then

    -- Order Rejected Byte 13: Struct of 8 fields
    index, order_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 14
  local order_rejected_byte_14 = nil

  local order_rejected_byte_14_exists = order_rejected_bitfield_count >= 14

  if order_rejected_byte_14_exists then

    -- Order Rejected Byte 14: Struct of 8 fields
    index, order_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 15
  local order_rejected_byte_15 = nil

  local order_rejected_byte_15_exists = order_rejected_bitfield_count >= 15

  if order_rejected_byte_15_exists then

    -- Order Rejected Byte 15: Struct of 8 fields
    index, order_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 16
  local order_rejected_byte_16 = nil

  local order_rejected_byte_16_exists = order_rejected_bitfield_count >= 16

  if order_rejected_byte_16_exists then

    -- Order Rejected Byte 16: Struct of 8 fields
    index, order_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 17
  local order_rejected_byte_17 = nil

  local order_rejected_byte_17_exists = order_rejected_bitfield_count >= 17

  if order_rejected_byte_17_exists then

    -- Order Rejected Byte 17: Struct of 8 fields
    index, order_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Side
  local side = nil

  local side_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(7) > 0

  if side_exists then
    index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Time In Force
  local time_in_force = nil

  local time_in_force_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(2) > 0

  if time_in_force_exists then
    index, time_in_force = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Min Qty
  local min_qty = nil

  local min_qty_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(1) > 0

  if min_qty_exists then
    index, min_qty = cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Remove Pct
  local max_remove_pct = nil

  local max_remove_pct_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(0) > 0

  if max_remove_pct_exists then
    index, max_remove_pct = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = order_rejected_bitfield_count >= 2 and order_rejected_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = order_rejected_bitfield_count >= 2 and order_rejected_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(6) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(5) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Indicator
  local display_indicator = nil

  local display_indicator_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(4) > 0

  if display_indicator_exists then
    index, display_indicator = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Floor
  local max_floor = nil

  local max_floor_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(3) > 0

  if max_floor_exists then
    index, max_floor = cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = order_rejected_bitfield_count >= 4 and order_rejected_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = order_rejected_bitfield_count >= 4 and order_rejected_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = order_rejected_bitfield_count >= 4 and order_rejected_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = order_rejected_bitfield_count >= 4 and order_rejected_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Corrected Size
  local corrected_size = nil

  local corrected_size_exists = order_rejected_bitfield_count >= 4 and order_rejected_byte_4:bitfield(2) > 0

  if corrected_size_exists then
    index, corrected_size = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Secondary Order Id
  local secondary_order_id = nil

  local secondary_order_id_exists = order_rejected_bitfield_count >= 6 and order_rejected_byte_6:bitfield(7) > 0

  if secondary_order_id_exists then
    index, secondary_order_id = cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Contra Capacity
  local contra_capacity = nil

  local contra_capacity_exists = order_rejected_bitfield_count >= 6 and order_rejected_byte_6:bitfield(5) > 0

  if contra_capacity_exists then
    index, contra_capacity = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = order_rejected_bitfield_count >= 6 and order_rejected_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Echo Text
  local echo_text = nil

  local echo_text_exists = order_rejected_bitfield_count >= 8 and order_rejected_byte_8:bitfield(6) > 0

  if echo_text_exists then
    index, echo_text = cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = order_rejected_bitfield_count >= 8 and order_rejected_byte_8:bitfield(5) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Inst
  local routing_inst = nil

  local routing_inst_exists = order_rejected_bitfield_count >= 8 and order_rejected_byte_8:bitfield(4) > 0

  if routing_inst_exists then
    index, routing_inst = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Rout Strategy
  local rout_strategy = nil

  local rout_strategy_exists = order_rejected_bitfield_count >= 8 and order_rejected_byte_8:bitfield(3) > 0

  if rout_strategy_exists then
    index, rout_strategy = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Route Delivery Method
  local route_delivery_method = nil

  local route_delivery_method_exists = order_rejected_bitfield_count >= 8 and order_rejected_byte_8:bitfield(2) > 0

  if route_delivery_method_exists then
    index, route_delivery_method = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ex Destination
  local ex_destination = nil

  local ex_destination_exists = order_rejected_bitfield_count >= 8 and order_rejected_byte_8:bitfield(1) > 0

  if ex_destination_exists then
    index, ex_destination = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Marketing Fee Code
  local marketing_fee_code = nil

  local marketing_fee_code_exists = order_rejected_bitfield_count >= 9 and order_rejected_byte_9:bitfield(7) > 0

  if marketing_fee_code_exists then
    index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = order_rejected_bitfield_count >= 9 and order_rejected_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = order_rejected_bitfield_count >= 9 and order_rejected_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = order_rejected_bitfield_count >= 9 and order_rejected_byte_9:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = order_rejected_bitfield_count >= 10 and order_rejected_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = order_rejected_bitfield_count >= 10 and order_rejected_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = order_rejected_bitfield_count >= 10 and order_rejected_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = order_rejected_bitfield_count >= 10 and order_rejected_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = order_rejected_bitfield_count >= 10 and order_rejected_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = order_rejected_bitfield_count >= 15 and order_rejected_byte_15:bitfield(6) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = order_rejected_bitfield_count >= 15 and order_rejected_byte_15:bitfield(0) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = order_rejected_bitfield_count >= 16 and order_rejected_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Session Eligibility
  local session_eligibility = nil

  local session_eligibility_exists = order_rejected_bitfield_count >= 16 and order_rejected_byte_16:bitfield(6) > 0

  if session_eligibility_exists then
    index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Multi Class Sprd
  local multi_class_sprd = nil

  local multi_class_sprd_exists = order_rejected_bitfield_count >= 16 and order_rejected_byte_16:bitfield(1) > 0

  if multi_class_sprd_exists then
    index, multi_class_sprd = cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Origin
  local order_origin = nil

  local order_origin_exists = order_rejected_bitfield_count >= 16 and order_rejected_byte_16:bitfield(0) > 0

  if order_origin_exists then
    index, order_origin = cboe_edgx_options_orderentry_boe_v2_10.order_origin.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price Type
  local price_type = nil

  local price_type_exists = order_rejected_bitfield_count >= 17 and order_rejected_byte_17:bitfield(7) > 0

  if price_type_exists then
    index, price_type = cboe_edgx_options_orderentry_boe_v2_10.price_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strategy Id
  local strategy_id = nil

  local strategy_id_exists = order_rejected_bitfield_count >= 17 and order_rejected_byte_17:bitfield(6) > 0

  if strategy_id_exists then
    index, strategy_id = cboe_edgx_options_orderentry_boe_v2_10.strategy_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Rejected Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_order_rejected_optional_fields)
  local index = offset + size_of_order_rejected_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.order_rejected_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_order_rejected_optional_fields)
    parent:set_len(size_of_order_rejected_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields.fields(buffer, offset, packet, parent, size_of_order_rejected_optional_fields)

    return index
  end
end

-- Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message = {}

-- Read runtime size of: Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.fields = function(buffer, offset, packet, parent, size_of_order_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Order Reject Reason: 1 Byte Ascii String Enum with 31 values
  index, order_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.order_reject_reason.dissect(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_edgx_options_orderentry_boe_v2_10.text.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Rejected Optional Fields
  local size_of_order_rejected_optional_fields = message_length - (index - offset) - 8

  -- Order Rejected Optional Fields: Struct of 65 fields
  index, order_rejected_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_optional_fields.dissect(buffer, index, packet, parent, size_of_order_rejected_optional_fields)

  return index
end

-- Dissect: Order Rejected Message
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_rejected_message = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_rejected_message then
    local range = buffer(offset, size_of_order_rejected_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.fields(buffer, offset, packet, parent, size_of_order_rejected_message)

  return offset + size_of_order_rejected_message
end

-- Reserved 6
cboe_edgx_options_orderentry_boe_v2_10.reserved_6 = {}

-- Size Of: Reserved 6
cboe_edgx_options_orderentry_boe_v2_10.reserved_6.size = 6

-- Display: Reserved 6
cboe_edgx_options_orderentry_boe_v2_10.reserved_6.display = function(value)
  return "Reserved 6: "..value
end

-- Dissect: Reserved 6
cboe_edgx_options_orderentry_boe_v2_10.reserved_6.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_6.size
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_6.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_6, range, value, display)

  return offset + length, value
end

-- Quote Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator = {}

-- Size Of: Quote Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator.size = 1

-- Display: Quote Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator.display = function(value)
  if value == "N" then
    return "Quote Liquidity Indicator: Normal (N)"
  end
  if value == "S" then
    return "Quote Liquidity Indicator: Nbbo Setter (S)"
  end
  if value == "J" then
    return "Quote Liquidity Indicator: Nbbo Joiner (J)"
  end
  if value == "U" then
    return "Quote Liquidity Indicator: Market Turner (U)"
  end
  if value == " " then
    return "Quote Liquidity Indicator: No Quote On Book (<whitespace>)"
  end

  return "Quote Liquidity Indicator: Unknown("..value..")"
end

-- Dissect: Quote Liquidity Indicator
cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_liquidity_indicator, range, value, display)

  return offset + length, value
end

-- Quote Result
cboe_edgx_options_orderentry_boe_v2_10.quote_result = {}

-- Size Of: Quote Result
cboe_edgx_options_orderentry_boe_v2_10.quote_result.size = 1

-- Display: Quote Result
cboe_edgx_options_orderentry_boe_v2_10.quote_result.display = function(value)
  if value == "A" then
    return "Quote Result: New Quote (A)"
  end
  if value == "L" then
    return "Quote Result: Modified Loss Of Priority (L)"
  end
  if value == "R" then
    return "Quote Result: Modified Retains Priority (R)"
  end
  if value == "N" then
    return "Quote Result: No Change Matches Existing Quote (N)"
  end
  if value == "D" then
    return "Quote Result: New Quote But May Remove Liquidity (D)"
  end
  if value == "d" then
    return "Quote Result: Modified But May Remove Liquidity (d)"
  end
  if value == "U" then
    return "Quote Result: User Cancelled (U)"
  end
  if value == "a" then
    return "Quote Result: Admin Rejection (a)"
  end
  if value == "P" then
    return "Quote Result: Rejected Cant Post (P)"
  end
  if value == "f" then
    return "Quote Result: Risk Management Firm Or Custom Group Id Level (f)"
  end
  if value == "S" then
    return "Quote Result: Rejected Symbol Not Found (S)"
  end
  if value == "p" then
    return "Quote Result: Rejected Invalid Price (p)"
  end
  if value == "r" then
    return "Quote Result: Invalid Remove (r)"
  end
  if value == "s" then
    return "Quote Result: Risk Management Risk Root Level (s)"
  end
  if value == "u" then
    return "Quote Result: Rejected Other Reason (u)"
  end
  if value == "+" then
    return "Quote Result: Risk Management Efid Group Level (+)"
  end
  if value == "c" then
    return "Quote Result: Rejected Closing Only Series (c)"
  end

  return "Quote Result: Unknown("..value..")"
end

-- Dissect: Quote Result
cboe_edgx_options_orderentry_boe_v2_10.quote_result.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.quote_result.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.quote_result.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_result, range, value, display)

  return offset + length, value
end

-- Quote Result Group
cboe_edgx_options_orderentry_boe_v2_10.quote_result_group = {}

-- Size Of: Quote Result Group
cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.size =
  cboe_edgx_options_orderentry_boe_v2_10.order_id.size + 
  cboe_edgx_options_orderentry_boe_v2_10.quote_result.size + 
  cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator.size + 
  cboe_edgx_options_orderentry_boe_v2_10.reserved_6.size;

-- Display: Quote Result Group
cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Result Group
cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.fields = function(buffer, offset, packet, parent, quote_result_group_index)
  local index = offset

  -- Implicit Quote Result Group Index
  if quote_result_group_index ~= nil then
    local iteration = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_result_group_index, quote_result_group_index)
    iteration:set_generated()
  end

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Quote Result: 1 Byte Ascii String Enum with 17 values
  index, quote_result = cboe_edgx_options_orderentry_boe_v2_10.quote_result.dissect(buffer, index, packet, parent)

  -- Quote Liquidity Indicator: 1 Byte Ascii String Enum with 5 values
  index, quote_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.quote_liquidity_indicator.dissect(buffer, index, packet, parent)

  -- Reserved 6: 6 Byte
  index, reserved_6 = cboe_edgx_options_orderentry_boe_v2_10.reserved_6.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Result Group
cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.dissect = function(buffer, offset, packet, parent, quote_result_group_index)
  if show.quote_result_group then
    -- Optionally add element to protocol tree
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_result_group, buffer(offset, 0))
    local index = cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.fields(buffer, offset, packet, parent, quote_result_group_index)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.display(packet, parent, length)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    return cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.fields(buffer, offset, packet, parent, quote_result_group_index)
  end
end

-- Number Of Quote Results
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_results = {}

-- Size Of: Number Of Quote Results
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_results.size = 1

-- Display: Number Of Quote Results
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_results.display = function(value)
  return "Number Of Quote Results: "..value
end

-- Dissect: Number Of Quote Results
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_results.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_results.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_results.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_quote_results, range, value, display)

  return offset + length, value
end

-- Quote Update Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message = {}

-- Read runtime size of: Quote Update Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Update Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Update Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.fields = function(buffer, offset, packet, parent, size_of_quote_update_acknowledgment_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect(buffer, index, packet, parent)

  -- Quote Reject Reason: 1 Byte Ascii String Enum with 23 values
  index, quote_reject_reason = cboe_edgx_options_orderentry_boe_v2_10.quote_reject_reason.dissect(buffer, index, packet, parent)

  -- Reserved 17: 17 Byte
  index, reserved_17 = cboe_edgx_options_orderentry_boe_v2_10.reserved_17.dissect(buffer, index, packet, parent)

  -- Number Of Quote Results: 1 Byte Unsigned Fixed Width Integer
  index, number_of_quote_results = cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_results.dissect(buffer, index, packet, parent)

  -- Repeating: Quote Result Group
  for quote_result_group_index = 1, number_of_quote_results do
    index, quote_result_group = cboe_edgx_options_orderentry_boe_v2_10.quote_result_group.dissect(buffer, index, packet, parent, quote_result_group_index)
  end

  return index
end

-- Dissect: Quote Update Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_update_acknowledgment_message = cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_update_acknowledgment_message then
    local range = buffer(offset, size_of_quote_update_acknowledgment_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_acknowledgment_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.fields(buffer, offset, packet, parent, size_of_quote_update_acknowledgment_message)

  return offset + size_of_quote_update_acknowledgment_message
end

-- Cross Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17 = {}

-- Size Of: Cross Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.size = 1

-- Display: Cross Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_17, range, display)

  if show.cross_order_acknowledgment_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16 = {}

-- Size Of: Cross Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.size = 1

-- Display: Cross Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_16, range, display)

  if show.cross_order_acknowledgment_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15 = {}

-- Size Of: Cross Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.size = 1

-- Display: Cross Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Client Id Attr Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Client Id Attr Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Equity Party Id Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_client_id_attr_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_equity_party_id_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_15, range, display)

  if show.cross_order_acknowledgment_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14 = {}

-- Size Of: Cross Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.size = 1

-- Display: Cross Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_14, range, display)

  if show.cross_order_acknowledgment_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13 = {}

-- Size Of: Cross Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.size = 1

-- Display: Cross Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_13, range, display)

  if show.cross_order_acknowledgment_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12 = {}

-- Size Of: Cross Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.size = 1

-- Display: Cross Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Clearing Optional Data Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Clearing Optional Data Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Clearing Optional Data Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_clearing_optional_data_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_12, range, display)

  if show.cross_order_acknowledgment_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11 = {}

-- Size Of: Cross Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.size = 1

-- Display: Cross Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_11, range, display)

  if show.cross_order_acknowledgment_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10 = {}

-- Size Of: Cross Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.size = 1

-- Display: Cross Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Routing Firm Id Exists|"
  end
  -- Is Cross Order Acknowledgment Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Give Up Firm Id Exists|"
  end
  -- Is Cross Order Acknowledgment Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Alloc Qty Exists|"
  end
  -- Is Cross Order Acknowledgment Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_routing_firm_id_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_give_up_firm_id_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_alloc_qty_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_10, range, display)

  if show.cross_order_acknowledgment_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9 = {}

-- Size Of: Cross Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.size = 1

-- Display: Cross Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Cross Prioritization Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Cross Prioritization Exists|"
  end
  -- Is Cross Order Acknowledgment Cross Type Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Cross Type Exists|"
  end
  -- Is Cross Order Acknowledgment Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Cmta Number Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Auction Id Exists|"
  end
  -- Is Cross Order Acknowledgment Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Target Party Id Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Cross Prioritization Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cross_prioritization_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Cross Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cross_type_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_cmta_number_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_auction_id_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_target_party_id_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_9, range, display)

  if show.cross_order_acknowledgment_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8 = {}

-- Size Of: Cross Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.size = 1

-- Display: Cross Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_8, range, display)

  if show.cross_order_acknowledgment_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7 = {}

-- Size Of: Cross Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.size = 1

-- Display: Cross Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_7, range, display)

  if show.cross_order_acknowledgment_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6 = {}

-- Size Of: Cross Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.size = 1

-- Display: Cross Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Attributed Quote Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_attributed_quote_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_6, range, display)

  if show.cross_order_acknowledgment_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5 = {}

-- Size Of: Cross Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.size = 1

-- Display: Cross Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_5, range, display)

  if show.cross_order_acknowledgment_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4 = {}

-- Size Of: Cross Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.size = 1

-- Display: Cross Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Open Close Exists|"
  end
  -- Is Cross Order Acknowledgment Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Put Or Call Exists|"
  end
  -- Is Cross Order Acknowledgment Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Strike Price Exists|"
  end
  -- Is Cross Order Acknowledgment Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_open_close_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_put_or_call_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_strike_price_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_4, range, display)

  if show.cross_order_acknowledgment_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3 = {}

-- Size Of: Cross Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.size = 1

-- Display: Cross Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Prevent Match Exists|"
  end
  -- Is Cross Order Acknowledgment Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Order Qty Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Clearing Account Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_prevent_match_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_order_qty_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_clearing_account_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_account_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_3, range, display)

  if show.cross_order_acknowledgment_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2 = {}

-- Size Of: Cross Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.size = 1

-- Display: Cross Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Capacity Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_capacity_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_symbol_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_2, range, display)

  if show.cross_order_acknowledgment_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1 = {}

-- Size Of: Cross Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.size = 1

-- Display: Cross Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cross Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Cross Order Acknowledgment Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cross Order Acknowledgment Exec Inst Exists|"
  end
  -- Is Cross Order Acknowledgment Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cross Order Acknowledgment Price Exists|"
  end
  -- Is Cross Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cross Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Cross Order Acknowledgment Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cross Order Acknowledgment Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cross Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.bits = function(buffer, offset, packet, parent)

  -- Cross Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_exec_inst_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_price_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Cross Order Acknowledgment Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_side_exists, buffer(offset, 1))
end

-- Dissect: Cross Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_byte_1, range, display)

  if show.cross_order_acknowledgment_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cross Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count = {}

-- Size Of: Cross Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count.size = 1

-- Display: Cross Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count.display = function(value)
  return "Cross Order Acknowledgment Bitfield Count: "..value
end

-- Dissect: Cross Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_bitfield_count, range, value, display)

  return offset + length, value
end

-- Cross Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields = {}

-- Display: Cross Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields.fields = function(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_optional_fields)
  local index = offset

  -- Cross Order Acknowledgment Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cross_order_acknowledgment_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cross Order Acknowledgment Byte 1
  local cross_order_acknowledgment_byte_1 = nil

  local cross_order_acknowledgment_byte_1_exists = cross_order_acknowledgment_bitfield_count >= 1

  if cross_order_acknowledgment_byte_1_exists then

    -- Cross Order Acknowledgment Byte 1: Struct of 8 fields
    index, cross_order_acknowledgment_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 2
  local cross_order_acknowledgment_byte_2 = nil

  local cross_order_acknowledgment_byte_2_exists = cross_order_acknowledgment_bitfield_count >= 2

  if cross_order_acknowledgment_byte_2_exists then

    -- Cross Order Acknowledgment Byte 2: Struct of 8 fields
    index, cross_order_acknowledgment_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 3
  local cross_order_acknowledgment_byte_3 = nil

  local cross_order_acknowledgment_byte_3_exists = cross_order_acknowledgment_bitfield_count >= 3

  if cross_order_acknowledgment_byte_3_exists then

    -- Cross Order Acknowledgment Byte 3: Struct of 8 fields
    index, cross_order_acknowledgment_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 4
  local cross_order_acknowledgment_byte_4 = nil

  local cross_order_acknowledgment_byte_4_exists = cross_order_acknowledgment_bitfield_count >= 4

  if cross_order_acknowledgment_byte_4_exists then

    -- Cross Order Acknowledgment Byte 4: Struct of 8 fields
    index, cross_order_acknowledgment_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 5
  local cross_order_acknowledgment_byte_5 = nil

  local cross_order_acknowledgment_byte_5_exists = cross_order_acknowledgment_bitfield_count >= 5

  if cross_order_acknowledgment_byte_5_exists then

    -- Cross Order Acknowledgment Byte 5: Struct of 8 fields
    index, cross_order_acknowledgment_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 6
  local cross_order_acknowledgment_byte_6 = nil

  local cross_order_acknowledgment_byte_6_exists = cross_order_acknowledgment_bitfield_count >= 6

  if cross_order_acknowledgment_byte_6_exists then

    -- Cross Order Acknowledgment Byte 6: Struct of 8 fields
    index, cross_order_acknowledgment_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 7
  local cross_order_acknowledgment_byte_7 = nil

  local cross_order_acknowledgment_byte_7_exists = cross_order_acknowledgment_bitfield_count >= 7

  if cross_order_acknowledgment_byte_7_exists then

    -- Cross Order Acknowledgment Byte 7: Struct of 8 fields
    index, cross_order_acknowledgment_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 8
  local cross_order_acknowledgment_byte_8 = nil

  local cross_order_acknowledgment_byte_8_exists = cross_order_acknowledgment_bitfield_count >= 8

  if cross_order_acknowledgment_byte_8_exists then

    -- Cross Order Acknowledgment Byte 8: Struct of 8 fields
    index, cross_order_acknowledgment_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 9
  local cross_order_acknowledgment_byte_9 = nil

  local cross_order_acknowledgment_byte_9_exists = cross_order_acknowledgment_bitfield_count >= 9

  if cross_order_acknowledgment_byte_9_exists then

    -- Cross Order Acknowledgment Byte 9: Struct of 8 fields
    index, cross_order_acknowledgment_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 10
  local cross_order_acknowledgment_byte_10 = nil

  local cross_order_acknowledgment_byte_10_exists = cross_order_acknowledgment_bitfield_count >= 10

  if cross_order_acknowledgment_byte_10_exists then

    -- Cross Order Acknowledgment Byte 10: Struct of 8 fields
    index, cross_order_acknowledgment_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 11
  local cross_order_acknowledgment_byte_11 = nil

  local cross_order_acknowledgment_byte_11_exists = cross_order_acknowledgment_bitfield_count >= 11

  if cross_order_acknowledgment_byte_11_exists then

    -- Cross Order Acknowledgment Byte 11: Struct of 8 fields
    index, cross_order_acknowledgment_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 12
  local cross_order_acknowledgment_byte_12 = nil

  local cross_order_acknowledgment_byte_12_exists = cross_order_acknowledgment_bitfield_count >= 12

  if cross_order_acknowledgment_byte_12_exists then

    -- Cross Order Acknowledgment Byte 12: Struct of 8 fields
    index, cross_order_acknowledgment_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 13
  local cross_order_acknowledgment_byte_13 = nil

  local cross_order_acknowledgment_byte_13_exists = cross_order_acknowledgment_bitfield_count >= 13

  if cross_order_acknowledgment_byte_13_exists then

    -- Cross Order Acknowledgment Byte 13: Struct of 8 fields
    index, cross_order_acknowledgment_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 14
  local cross_order_acknowledgment_byte_14 = nil

  local cross_order_acknowledgment_byte_14_exists = cross_order_acknowledgment_bitfield_count >= 14

  if cross_order_acknowledgment_byte_14_exists then

    -- Cross Order Acknowledgment Byte 14: Struct of 8 fields
    index, cross_order_acknowledgment_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 15
  local cross_order_acknowledgment_byte_15 = nil

  local cross_order_acknowledgment_byte_15_exists = cross_order_acknowledgment_bitfield_count >= 15

  if cross_order_acknowledgment_byte_15_exists then

    -- Cross Order Acknowledgment Byte 15: Struct of 8 fields
    index, cross_order_acknowledgment_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 16
  local cross_order_acknowledgment_byte_16 = nil

  local cross_order_acknowledgment_byte_16_exists = cross_order_acknowledgment_bitfield_count >= 16

  if cross_order_acknowledgment_byte_16_exists then

    -- Cross Order Acknowledgment Byte 16: Struct of 8 fields
    index, cross_order_acknowledgment_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 17
  local cross_order_acknowledgment_byte_17 = nil

  local cross_order_acknowledgment_byte_17_exists = cross_order_acknowledgment_bitfield_count >= 17

  if cross_order_acknowledgment_byte_17_exists then

    -- Cross Order Acknowledgment Byte 17: Struct of 8 fields
    index, cross_order_acknowledgment_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Side
  local side = nil

  local side_exists = cross_order_acknowledgment_bitfield_count >= 1 and cross_order_acknowledgment_byte_1:bitfield(7) > 0

  if side_exists then
    index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = cross_order_acknowledgment_bitfield_count >= 1 and cross_order_acknowledgment_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = cross_order_acknowledgment_bitfield_count >= 1 and cross_order_acknowledgment_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = cross_order_acknowledgment_bitfield_count >= 2 and cross_order_acknowledgment_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = cross_order_acknowledgment_bitfield_count >= 2 and cross_order_acknowledgment_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = cross_order_acknowledgment_bitfield_count >= 3 and cross_order_acknowledgment_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = cross_order_acknowledgment_bitfield_count >= 3 and cross_order_acknowledgment_byte_3:bitfield(5) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = cross_order_acknowledgment_bitfield_count >= 3 and cross_order_acknowledgment_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = cross_order_acknowledgment_bitfield_count >= 3 and cross_order_acknowledgment_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = cross_order_acknowledgment_bitfield_count >= 4 and cross_order_acknowledgment_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = cross_order_acknowledgment_bitfield_count >= 4 and cross_order_acknowledgment_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = cross_order_acknowledgment_bitfield_count >= 4 and cross_order_acknowledgment_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = cross_order_acknowledgment_bitfield_count >= 4 and cross_order_acknowledgment_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = cross_order_acknowledgment_bitfield_count >= 6 and cross_order_acknowledgment_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = cross_order_acknowledgment_bitfield_count >= 9 and cross_order_acknowledgment_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = cross_order_acknowledgment_bitfield_count >= 9 and cross_order_acknowledgment_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = cross_order_acknowledgment_bitfield_count >= 9 and cross_order_acknowledgment_byte_9:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Type
  local cross_type = nil

  local cross_type_exists = cross_order_acknowledgment_bitfield_count >= 9 and cross_order_acknowledgment_byte_9:bitfield(1) > 0

  if cross_type_exists then
    index, cross_type = cboe_edgx_options_orderentry_boe_v2_10.cross_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Prioritization
  local cross_prioritization = nil

  local cross_prioritization_exists = cross_order_acknowledgment_bitfield_count >= 9 and cross_order_acknowledgment_byte_9:bitfield(0) > 0

  if cross_prioritization_exists then
    index, cross_prioritization = cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = cross_order_acknowledgment_bitfield_count >= 10 and cross_order_acknowledgment_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = cross_order_acknowledgment_bitfield_count >= 10 and cross_order_acknowledgment_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = cross_order_acknowledgment_bitfield_count >= 10 and cross_order_acknowledgment_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = cross_order_acknowledgment_bitfield_count >= 10 and cross_order_acknowledgment_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Optional Data
  local clearing_optional_data = nil

  local clearing_optional_data_exists = cross_order_acknowledgment_bitfield_count >= 12 and cross_order_acknowledgment_byte_12:bitfield(0) > 0

  if clearing_optional_data_exists then
    index, clearing_optional_data = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = cross_order_acknowledgment_bitfield_count >= 15 and cross_order_acknowledgment_byte_15:bitfield(6) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = cross_order_acknowledgment_bitfield_count >= 15 and cross_order_acknowledgment_byte_15:bitfield(0) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = cross_order_acknowledgment_bitfield_count >= 16 and cross_order_acknowledgment_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cross Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_optional_fields)
  local index = offset + size_of_cross_order_acknowledgment_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.cross_order_acknowledgment_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields.fields(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_optional_fields)
    parent:set_len(size_of_cross_order_acknowledgment_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields.fields(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_optional_fields)

    return index
  end
end

-- Cross Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message = {}

-- Read runtime size of: Cross Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Cross Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.fields = function(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_edgx_options_orderentry_boe_v2_10.transaction_time.dissect(buffer, index, packet, parent)

  -- Cross Id: 20 Byte Ascii String
  index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)

  -- Auction Id: 8 Byte Unsigned Fixed Width Integer
  index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Cross Order Acknowledgment Optional Fields
  local size_of_cross_order_acknowledgment_optional_fields = message_length - (index - offset) - 8

  -- Cross Order Acknowledgment Optional Fields: Struct of 45 fields
  index, cross_order_acknowledgment_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_optional_fields.dissect(buffer, index, packet, parent, size_of_cross_order_acknowledgment_optional_fields)

  return index
end

-- Dissect: Cross Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cross_order_acknowledgment_message = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cross_order_acknowledgment_message then
    local range = buffer(offset, size_of_cross_order_acknowledgment_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.fields(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_message)

  return offset + size_of_cross_order_acknowledgment_message
end

-- Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17 = {}

-- Size Of: Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.size = 1

-- Display: Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Strategy Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Strategy Id Exists|"
  end
  -- Is Order Acknowledgment Price Type Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Price Type Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Strategy Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_strategy_id_exists, buffer(offset, 1))

  -- Order Acknowledgment Price Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_price_type_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_17, range, display)

  if show.order_acknowledgment_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16 = {}

-- Size Of: Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.size = 1

-- Display: Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Order Origin Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Order Origin Exists|"
  end
  -- Is Order Acknowledgment Multi Class Sprd Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Multi Class Sprd Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Session Eligibility Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Session Eligibility Exists|"
  end
  -- Is Order Acknowledgment Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Order Origin Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_order_origin_exists, buffer(offset, 1))

  -- Order Acknowledgment Multi Class Sprd Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_multi_class_sprd_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Session Eligibility Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_session_eligibility_exists, buffer(offset, 1))

  -- Order Acknowledgment Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_16, range, display)

  if show.order_acknowledgment_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15 = {}

-- Size Of: Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.size = 1

-- Display: Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Client Id Attr Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Client Id Attr Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Equity Party Id Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_client_id_attr_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_equity_party_id_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_15, range, display)

  if show.order_acknowledgment_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14 = {}

-- Size Of: Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.size = 1

-- Display: Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_14, range, display)

  if show.order_acknowledgment_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13 = {}

-- Size Of: Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.size = 1

-- Display: Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Drill Thru Protection Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Drill Thru Protection Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Drill Thru Protection Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_drill_thru_protection_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_13, range, display)

  if show.order_acknowledgment_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12 = {}

-- Size Of: Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.size = 1

-- Display: Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Clearing Optional Data Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Clearing Optional Data Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Clearing Optional Data Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_clearing_optional_data_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_12, range, display)

  if show.order_acknowledgment_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11 = {}

-- Size Of: Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.size = 1

-- Display: Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_11, range, display)

  if show.order_acknowledgment_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10 = {}

-- Size Of: Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.size = 1

-- Display: Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Cross Exclusion Indicator Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Routing Firm Id Exists|"
  end
  -- Is Order Acknowledgment Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Give Up Firm Id Exists|"
  end
  -- Is Order Acknowledgment Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Alloc Qty Exists|"
  end
  -- Is Order Acknowledgment Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_routing_firm_id_exists, buffer(offset, 1))

  -- Order Acknowledgment Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_give_up_firm_id_exists, buffer(offset, 1))

  -- Order Acknowledgment Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_alloc_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_10, range, display)

  if show.order_acknowledgment_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9 = {}

-- Size Of: Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.size = 1

-- Display: Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Auction Id Exists|"
  end
  -- Is Order Acknowledgment Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Target Party Id Exists|"
  end
  -- Is Order Acknowledgment Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_auction_id_exists, buffer(offset, 1))

  -- Order Acknowledgment Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_target_party_id_exists, buffer(offset, 1))

  -- Order Acknowledgment Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_9, range, display)

  if show.order_acknowledgment_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8 = {}

-- Size Of: Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.size = 1

-- Display: Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Ex Destination Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Ex Destination Exists|"
  end
  -- Is Order Acknowledgment Route Delivery Method Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Route Delivery Method Exists|"
  end
  -- Is Order Acknowledgment Rout Strategy Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Rout Strategy Exists|"
  end
  -- Is Order Acknowledgment Routing Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Routing Inst Exists|"
  end
  -- Is Order Acknowledgment Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Stop Px Exists|"
  end
  -- Is Order Acknowledgment Echo Text Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Echo Text Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_ex_destination_exists, buffer(offset, 1))

  -- Order Acknowledgment Route Delivery Method Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_route_delivery_method_exists, buffer(offset, 1))

  -- Order Acknowledgment Rout Strategy Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_rout_strategy_exists, buffer(offset, 1))

  -- Order Acknowledgment Routing Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_routing_inst_exists, buffer(offset, 1))

  -- Order Acknowledgment Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_stop_px_exists, buffer(offset, 1))

  -- Order Acknowledgment Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_echo_text_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_8, range, display)

  if show.order_acknowledgment_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7 = {}

-- Size Of: Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.size = 1

-- Display: Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Sub Liquidity Indicator Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Sub Liquidity Indicator Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Sub Liquidity Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_sub_liquidity_indicator_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_7, range, display)

  if show.order_acknowledgment_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6 = {}

-- Size Of: Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.size = 1

-- Display: Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Attributed Quote Exists|"
  end
  -- Is Order Acknowledgment Contra Capacity Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Contra Capacity Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Secondary Order Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Secondary Order Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_attributed_quote_exists, buffer(offset, 1))

  -- Order Acknowledgment Contra Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_contra_capacity_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Secondary Order Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_secondary_order_id_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_6, range, display)

  if show.order_acknowledgment_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5 = {}

-- Size Of: Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.size = 1

-- Display: Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Expire Time Exists|"
  end
  -- Is Order Acknowledgment Base Liquidity Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Base Liquidity Indicator Exists|"
  end
  -- Is Order Acknowledgment Working Price Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Working Price Exists|"
  end
  -- Is Order Acknowledgment Display Price Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Display Price Exists|"
  end
  -- Is Order Acknowledgment Last Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Last Px Exists|"
  end
  -- Is Order Acknowledgment Last Shares Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Last Shares Exists|"
  end
  -- Is Order Acknowledgment Leaves Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Leaves Qty Exists|"
  end
  -- Is Order Acknowledgment Orig Cl Ord Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Orig Cl Ord Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Expire Time Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_expire_time_exists, buffer(offset, 1))

  -- Order Acknowledgment Base Liquidity Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_base_liquidity_indicator_exists, buffer(offset, 1))

  -- Order Acknowledgment Working Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_working_price_exists, buffer(offset, 1))

  -- Order Acknowledgment Display Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_display_price_exists, buffer(offset, 1))

  -- Order Acknowledgment Last Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_last_px_exists, buffer(offset, 1))

  -- Order Acknowledgment Last Shares Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_last_shares_exists, buffer(offset, 1))

  -- Order Acknowledgment Leaves Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_leaves_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Orig Cl Ord Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_orig_cl_ord_id_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_5, range, display)

  if show.order_acknowledgment_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4 = {}

-- Size Of: Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.size = 1

-- Display: Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Corrected Size Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Open Close Exists|"
  end
  -- Is Order Acknowledgment Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Put Or Call Exists|"
  end
  -- Is Order Acknowledgment Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Strike Price Exists|"
  end
  -- Is Order Acknowledgment Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_corrected_size_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_open_close_exists, buffer(offset, 1))

  -- Order Acknowledgment Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_put_or_call_exists, buffer(offset, 1))

  -- Order Acknowledgment Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_strike_price_exists, buffer(offset, 1))

  -- Order Acknowledgment Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_4, range, display)

  if show.order_acknowledgment_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3 = {}

-- Size Of: Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.size = 1

-- Display: Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Prevent Match Exists|"
  end
  -- Is Order Acknowledgment Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Order Qty Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Max Floor Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Max Floor Exists|"
  end
  -- Is Order Acknowledgment Display Indicator Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Display Indicator Exists|"
  end
  -- Is Order Acknowledgment Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Clearing Account Exists|"
  end
  -- Is Order Acknowledgment Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Clearing Firm Exists|"
  end
  -- Is Order Acknowledgment Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_prevent_match_exists, buffer(offset, 1))

  -- Order Acknowledgment Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_order_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_max_floor_exists, buffer(offset, 1))

  -- Order Acknowledgment Display Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_display_indicator_exists, buffer(offset, 1))

  -- Order Acknowledgment Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_clearing_account_exists, buffer(offset, 1))

  -- Order Acknowledgment Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_clearing_firm_exists, buffer(offset, 1))

  -- Order Acknowledgment Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_account_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_3, range, display)

  if show.order_acknowledgment_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2 = {}

-- Size Of: Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.size = 1

-- Display: Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Capacity Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_capacity_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_2, range, display)

  if show.order_acknowledgment_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1 = {}

-- Size Of: Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.size = 1

-- Display: Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Max Remove Pct Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Max Remove Pct Exists|"
  end
  -- Is Order Acknowledgment Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Min Qty Exists|"
  end
  -- Is Order Acknowledgment Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Time In Force Exists|"
  end
  -- Is Order Acknowledgment Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Ord Type Exists|"
  end
  -- Is Order Acknowledgment Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Exec Inst Exists|"
  end
  -- Is Order Acknowledgment Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Price Exists|"
  end
  -- Is Order Acknowledgment Peg Difference Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Peg Difference Exists|"
  end
  -- Is Order Acknowledgment Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_max_remove_pct_exists, buffer(offset, 1))

  -- Order Acknowledgment Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_min_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_time_in_force_exists, buffer(offset, 1))

  -- Order Acknowledgment Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_ord_type_exists, buffer(offset, 1))

  -- Order Acknowledgment Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_exec_inst_exists, buffer(offset, 1))

  -- Order Acknowledgment Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_price_exists, buffer(offset, 1))

  -- Order Acknowledgment Peg Difference Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_peg_difference_exists, buffer(offset, 1))

  -- Order Acknowledgment Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_side_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_byte_1, range, display)

  if show.order_acknowledgment_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count = {}

-- Size Of: Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count.size = 1

-- Display: Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count.display = function(value)
  return "Order Acknowledgment Bitfield Count: "..value
end

-- Dissect: Order Acknowledgment Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_bitfield_count, range, value, display)

  return offset + length, value
end

-- Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields = {}

-- Display: Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields.fields = function(buffer, offset, packet, parent, size_of_order_acknowledgment_optional_fields)
  local index = offset

  -- Order Acknowledgment Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_acknowledgment_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Acknowledgment Byte 1
  local order_acknowledgment_byte_1 = nil

  local order_acknowledgment_byte_1_exists = order_acknowledgment_bitfield_count >= 1

  if order_acknowledgment_byte_1_exists then

    -- Order Acknowledgment Byte 1: Struct of 8 fields
    index, order_acknowledgment_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 2
  local order_acknowledgment_byte_2 = nil

  local order_acknowledgment_byte_2_exists = order_acknowledgment_bitfield_count >= 2

  if order_acknowledgment_byte_2_exists then

    -- Order Acknowledgment Byte 2: Struct of 8 fields
    index, order_acknowledgment_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 3
  local order_acknowledgment_byte_3 = nil

  local order_acknowledgment_byte_3_exists = order_acknowledgment_bitfield_count >= 3

  if order_acknowledgment_byte_3_exists then

    -- Order Acknowledgment Byte 3: Struct of 8 fields
    index, order_acknowledgment_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 4
  local order_acknowledgment_byte_4 = nil

  local order_acknowledgment_byte_4_exists = order_acknowledgment_bitfield_count >= 4

  if order_acknowledgment_byte_4_exists then

    -- Order Acknowledgment Byte 4: Struct of 8 fields
    index, order_acknowledgment_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 5
  local order_acknowledgment_byte_5 = nil

  local order_acknowledgment_byte_5_exists = order_acknowledgment_bitfield_count >= 5

  if order_acknowledgment_byte_5_exists then

    -- Order Acknowledgment Byte 5: Struct of 8 fields
    index, order_acknowledgment_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 6
  local order_acknowledgment_byte_6 = nil

  local order_acknowledgment_byte_6_exists = order_acknowledgment_bitfield_count >= 6

  if order_acknowledgment_byte_6_exists then

    -- Order Acknowledgment Byte 6: Struct of 8 fields
    index, order_acknowledgment_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 7
  local order_acknowledgment_byte_7 = nil

  local order_acknowledgment_byte_7_exists = order_acknowledgment_bitfield_count >= 7

  if order_acknowledgment_byte_7_exists then

    -- Order Acknowledgment Byte 7: Struct of 8 fields
    index, order_acknowledgment_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 8
  local order_acknowledgment_byte_8 = nil

  local order_acknowledgment_byte_8_exists = order_acknowledgment_bitfield_count >= 8

  if order_acknowledgment_byte_8_exists then

    -- Order Acknowledgment Byte 8: Struct of 8 fields
    index, order_acknowledgment_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 9
  local order_acknowledgment_byte_9 = nil

  local order_acknowledgment_byte_9_exists = order_acknowledgment_bitfield_count >= 9

  if order_acknowledgment_byte_9_exists then

    -- Order Acknowledgment Byte 9: Struct of 8 fields
    index, order_acknowledgment_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 10
  local order_acknowledgment_byte_10 = nil

  local order_acknowledgment_byte_10_exists = order_acknowledgment_bitfield_count >= 10

  if order_acknowledgment_byte_10_exists then

    -- Order Acknowledgment Byte 10: Struct of 8 fields
    index, order_acknowledgment_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 11
  local order_acknowledgment_byte_11 = nil

  local order_acknowledgment_byte_11_exists = order_acknowledgment_bitfield_count >= 11

  if order_acknowledgment_byte_11_exists then

    -- Order Acknowledgment Byte 11: Struct of 8 fields
    index, order_acknowledgment_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 12
  local order_acknowledgment_byte_12 = nil

  local order_acknowledgment_byte_12_exists = order_acknowledgment_bitfield_count >= 12

  if order_acknowledgment_byte_12_exists then

    -- Order Acknowledgment Byte 12: Struct of 8 fields
    index, order_acknowledgment_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 13
  local order_acknowledgment_byte_13 = nil

  local order_acknowledgment_byte_13_exists = order_acknowledgment_bitfield_count >= 13

  if order_acknowledgment_byte_13_exists then

    -- Order Acknowledgment Byte 13: Struct of 8 fields
    index, order_acknowledgment_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 14
  local order_acknowledgment_byte_14 = nil

  local order_acknowledgment_byte_14_exists = order_acknowledgment_bitfield_count >= 14

  if order_acknowledgment_byte_14_exists then

    -- Order Acknowledgment Byte 14: Struct of 8 fields
    index, order_acknowledgment_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 15
  local order_acknowledgment_byte_15 = nil

  local order_acknowledgment_byte_15_exists = order_acknowledgment_bitfield_count >= 15

  if order_acknowledgment_byte_15_exists then

    -- Order Acknowledgment Byte 15: Struct of 8 fields
    index, order_acknowledgment_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 16
  local order_acknowledgment_byte_16 = nil

  local order_acknowledgment_byte_16_exists = order_acknowledgment_bitfield_count >= 16

  if order_acknowledgment_byte_16_exists then

    -- Order Acknowledgment Byte 16: Struct of 8 fields
    index, order_acknowledgment_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 17
  local order_acknowledgment_byte_17 = nil

  local order_acknowledgment_byte_17_exists = order_acknowledgment_bitfield_count >= 17

  if order_acknowledgment_byte_17_exists then

    -- Order Acknowledgment Byte 17: Struct of 8 fields
    index, order_acknowledgment_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Side
  local side = nil

  local side_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(7) > 0

  if side_exists then
    index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Time In Force
  local time_in_force = nil

  local time_in_force_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(2) > 0

  if time_in_force_exists then
    index, time_in_force = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Min Qty
  local min_qty = nil

  local min_qty_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(1) > 0

  if min_qty_exists then
    index, min_qty = cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Remove Pct
  local max_remove_pct = nil

  local max_remove_pct_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(0) > 0

  if max_remove_pct_exists then
    index, max_remove_pct = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = order_acknowledgment_bitfield_count >= 2 and order_acknowledgment_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = order_acknowledgment_bitfield_count >= 2 and order_acknowledgment_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(6) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(5) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Indicator
  local display_indicator = nil

  local display_indicator_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(4) > 0

  if display_indicator_exists then
    index, display_indicator = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Floor
  local max_floor = nil

  local max_floor_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(3) > 0

  if max_floor_exists then
    index, max_floor = cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(1) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = order_acknowledgment_bitfield_count >= 4 and order_acknowledgment_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = order_acknowledgment_bitfield_count >= 4 and order_acknowledgment_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = order_acknowledgment_bitfield_count >= 4 and order_acknowledgment_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = order_acknowledgment_bitfield_count >= 4 and order_acknowledgment_byte_4:bitfield(4) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Corrected Size
  local corrected_size = nil

  local corrected_size_exists = order_acknowledgment_bitfield_count >= 4 and order_acknowledgment_byte_4:bitfield(2) > 0

  if corrected_size_exists then
    index, corrected_size = cboe_edgx_options_orderentry_boe_v2_10.corrected_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Orig Cl Ord Id
  local orig_cl_ord_id = nil

  local orig_cl_ord_id_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(7) > 0

  if orig_cl_ord_id_exists then
    index, orig_cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leaves Qty
  local leaves_qty = nil

  local leaves_qty_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(6) > 0

  if leaves_qty_exists then
    index, leaves_qty = cboe_edgx_options_orderentry_boe_v2_10.leaves_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Shares
  local last_shares = nil

  local last_shares_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(5) > 0

  if last_shares_exists then
    index, last_shares = cboe_edgx_options_orderentry_boe_v2_10.last_shares.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Px
  local last_px = nil

  local last_px_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(4) > 0

  if last_px_exists then
    index, last_px = cboe_edgx_options_orderentry_boe_v2_10.last_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Price
  local display_price = nil

  local display_price_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(3) > 0

  if display_price_exists then
    index, display_price = cboe_edgx_options_orderentry_boe_v2_10.display_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Working Price
  local working_price = nil

  local working_price_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(2) > 0

  if working_price_exists then
    index, working_price = cboe_edgx_options_orderentry_boe_v2_10.working_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Base Liquidity Indicator
  local base_liquidity_indicator = nil

  local base_liquidity_indicator_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(1) > 0

  if base_liquidity_indicator_exists then
    index, base_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.base_liquidity_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Expire Time
  local expire_time = nil

  local expire_time_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(0) > 0

  if expire_time_exists then
    index, expire_time = cboe_edgx_options_orderentry_boe_v2_10.expire_time.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Secondary Order Id
  local secondary_order_id = nil

  local secondary_order_id_exists = order_acknowledgment_bitfield_count >= 6 and order_acknowledgment_byte_6:bitfield(7) > 0

  if secondary_order_id_exists then
    index, secondary_order_id = cboe_edgx_options_orderentry_boe_v2_10.secondary_order_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Contra Capacity
  local contra_capacity = nil

  local contra_capacity_exists = order_acknowledgment_bitfield_count >= 6 and order_acknowledgment_byte_6:bitfield(5) > 0

  if contra_capacity_exists then
    index, contra_capacity = cboe_edgx_options_orderentry_boe_v2_10.contra_capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = order_acknowledgment_bitfield_count >= 6 and order_acknowledgment_byte_6:bitfield(4) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Sub Liquidity Indicator
  local sub_liquidity_indicator = nil

  local sub_liquidity_indicator_exists = order_acknowledgment_bitfield_count >= 7 and order_acknowledgment_byte_7:bitfield(7) > 0

  if sub_liquidity_indicator_exists then
    index, sub_liquidity_indicator = cboe_edgx_options_orderentry_boe_v2_10.sub_liquidity_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Echo Text
  local echo_text = nil

  local echo_text_exists = order_acknowledgment_bitfield_count >= 8 and order_acknowledgment_byte_8:bitfield(6) > 0

  if echo_text_exists then
    index, echo_text = cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = order_acknowledgment_bitfield_count >= 8 and order_acknowledgment_byte_8:bitfield(5) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Inst
  local routing_inst = nil

  local routing_inst_exists = order_acknowledgment_bitfield_count >= 8 and order_acknowledgment_byte_8:bitfield(4) > 0

  if routing_inst_exists then
    index, routing_inst = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Rout Strategy
  local rout_strategy = nil

  local rout_strategy_exists = order_acknowledgment_bitfield_count >= 8 and order_acknowledgment_byte_8:bitfield(3) > 0

  if rout_strategy_exists then
    index, rout_strategy = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Route Delivery Method
  local route_delivery_method = nil

  local route_delivery_method_exists = order_acknowledgment_bitfield_count >= 8 and order_acknowledgment_byte_8:bitfield(2) > 0

  if route_delivery_method_exists then
    index, route_delivery_method = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ex Destination
  local ex_destination = nil

  local ex_destination_exists = order_acknowledgment_bitfield_count >= 8 and order_acknowledgment_byte_8:bitfield(1) > 0

  if ex_destination_exists then
    index, ex_destination = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Marketing Fee Code
  local marketing_fee_code = nil

  local marketing_fee_code_exists = order_acknowledgment_bitfield_count >= 9 and order_acknowledgment_byte_9:bitfield(7) > 0

  if marketing_fee_code_exists then
    index, marketing_fee_code = cboe_edgx_options_orderentry_boe_v2_10.marketing_fee_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = order_acknowledgment_bitfield_count >= 9 and order_acknowledgment_byte_9:bitfield(6) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = order_acknowledgment_bitfield_count >= 9 and order_acknowledgment_byte_9:bitfield(5) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Id
  local cross_id = nil

  local cross_id_exists = order_acknowledgment_bitfield_count >= 10 and order_acknowledgment_byte_10:bitfield(7) > 0

  if cross_id_exists then
    index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Alloc Qty
  local alloc_qty = nil

  local alloc_qty_exists = order_acknowledgment_bitfield_count >= 10 and order_acknowledgment_byte_10:bitfield(6) > 0

  if alloc_qty_exists then
    index, alloc_qty = cboe_edgx_options_orderentry_boe_v2_10.alloc_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Give Up Firm Id
  local give_up_firm_id = nil

  local give_up_firm_id_exists = order_acknowledgment_bitfield_count >= 10 and order_acknowledgment_byte_10:bitfield(5) > 0

  if give_up_firm_id_exists then
    index, give_up_firm_id = cboe_edgx_options_orderentry_boe_v2_10.give_up_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = order_acknowledgment_bitfield_count >= 10 and order_acknowledgment_byte_10:bitfield(4) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Exclusion Indicator
  local cross_exclusion_indicator = nil

  local cross_exclusion_indicator_exists = order_acknowledgment_bitfield_count >= 10 and order_acknowledgment_byte_10:bitfield(2) > 0

  if cross_exclusion_indicator_exists then
    index, cross_exclusion_indicator = cboe_edgx_options_orderentry_boe_v2_10.cross_exclusion_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Optional Data
  local clearing_optional_data = nil

  local clearing_optional_data_exists = order_acknowledgment_bitfield_count >= 12 and order_acknowledgment_byte_12:bitfield(0) > 0

  if clearing_optional_data_exists then
    index, clearing_optional_data = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Drill Thru Protection
  local drill_thru_protection = nil

  local drill_thru_protection_exists = order_acknowledgment_bitfield_count >= 13 and order_acknowledgment_byte_13:bitfield(1) > 0

  if drill_thru_protection_exists then
    index, drill_thru_protection = cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = order_acknowledgment_bitfield_count >= 15 and order_acknowledgment_byte_15:bitfield(6) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = order_acknowledgment_bitfield_count >= 15 and order_acknowledgment_byte_15:bitfield(0) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = order_acknowledgment_bitfield_count >= 16 and order_acknowledgment_byte_16:bitfield(7) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Session Eligibility
  local session_eligibility = nil

  local session_eligibility_exists = order_acknowledgment_bitfield_count >= 16 and order_acknowledgment_byte_16:bitfield(6) > 0

  if session_eligibility_exists then
    index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Multi Class Sprd
  local multi_class_sprd = nil

  local multi_class_sprd_exists = order_acknowledgment_bitfield_count >= 16 and order_acknowledgment_byte_16:bitfield(1) > 0

  if multi_class_sprd_exists then
    index, multi_class_sprd = cboe_edgx_options_orderentry_boe_v2_10.multi_class_sprd.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Origin
  local order_origin = nil

  local order_origin_exists = order_acknowledgment_bitfield_count >= 16 and order_acknowledgment_byte_16:bitfield(0) > 0

  if order_origin_exists then
    index, order_origin = cboe_edgx_options_orderentry_boe_v2_10.order_origin.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price Type
  local price_type = nil

  local price_type_exists = order_acknowledgment_bitfield_count >= 17 and order_acknowledgment_byte_17:bitfield(7) > 0

  if price_type_exists then
    index, price_type = cboe_edgx_options_orderentry_boe_v2_10.price_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strategy Id
  local strategy_id = nil

  local strategy_id_exists = order_acknowledgment_bitfield_count >= 17 and order_acknowledgment_byte_17:bitfield(6) > 0

  if strategy_id_exists then
    index, strategy_id = cboe_edgx_options_orderentry_boe_v2_10.strategy_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Acknowledgment Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_order_acknowledgment_optional_fields)
  local index = offset + size_of_order_acknowledgment_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.order_acknowledgment_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields.fields(buffer, offset, packet, parent, size_of_order_acknowledgment_optional_fields)
    parent:set_len(size_of_order_acknowledgment_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields.fields(buffer, offset, packet, parent, size_of_order_acknowledgment_optional_fields)

    return index
  end
end

-- Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message = {}

-- Read runtime size of: Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.fields = function(buffer, offset, packet, parent, size_of_order_acknowledgment_message)
  local index = offset

  -- Transact Time: 8 Byte Unsigned Fixed Width Integer
  index, transact_time = cboe_edgx_options_orderentry_boe_v2_10.transact_time.dissect(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_edgx_options_orderentry_boe_v2_10.order_id.dissect(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_edgx_options_orderentry_boe_v2_10.reserved_internal.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Acknowledgment Optional Fields
  local size_of_order_acknowledgment_optional_fields = message_length - (index - offset) - 8

  -- Order Acknowledgment Optional Fields: Struct of 75 fields
  index, order_acknowledgment_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_optional_fields.dissect(buffer, index, packet, parent, size_of_order_acknowledgment_optional_fields)

  return index
end

-- Dissect: Order Acknowledgment Message
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_acknowledgment_message = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_acknowledgment_message then
    local range = buffer(offset, size_of_order_acknowledgment_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.fields(buffer, offset, packet, parent, size_of_order_acknowledgment_message)

  return offset + size_of_order_acknowledgment_message
end

-- New Complex Instrument Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1 = {}

-- Size Of: New Complex Instrument Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1.size = 1

-- Display: New Complex Instrument Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Complex Instrument Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Complex Instrument Reserved Bit 8 Exists|"
  end
  -- Is New Complex Instrument Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Complex Instrument Reserved Bit 7 Exists|"
  end
  -- Is New Complex Instrument Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Complex Instrument Reserved Bit 6 Exists|"
  end
  -- Is New Complex Instrument Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Complex Instrument Reserved Bit 5 Exists|"
  end
  -- Is New Complex Instrument Clearing Firm Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Complex Instrument Clearing Firm Exists|"
  end
  -- Is New Complex Instrument Leg Strike Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Complex Instrument Leg Strike Price Exists|"
  end
  -- Is New Complex Instrument Leg Maturity Date Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Complex Instrument Leg Maturity Date Exists|"
  end
  -- Is New Complex Instrument Leg Cfi Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Complex Instrument Leg Cfi Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Complex Instrument Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1.bits = function(buffer, offset, packet, parent)

  -- New Complex Instrument Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_8_exists, buffer(offset, 1))

  -- New Complex Instrument Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_7_exists, buffer(offset, 1))

  -- New Complex Instrument Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_6_exists, buffer(offset, 1))

  -- New Complex Instrument Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_reserved_bit_5_exists, buffer(offset, 1))

  -- New Complex Instrument Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_clearing_firm_exists, buffer(offset, 1))

  -- New Complex Instrument Leg Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_leg_strike_price_exists, buffer(offset, 1))

  -- New Complex Instrument Leg Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_leg_maturity_date_exists, buffer(offset, 1))

  -- New Complex Instrument Leg Cfi Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_leg_cfi_code_exists, buffer(offset, 1))
end

-- Dissect: New Complex Instrument Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_byte_1, range, display)

  if show.new_complex_instrument_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Complex Instrument Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_bitfield_count = {}

-- Size Of: New Complex Instrument Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_bitfield_count.size = 1

-- Display: New Complex Instrument Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_bitfield_count.display = function(value)
  return "New Complex Instrument Bitfield Count: "..value
end

-- Dissect: New Complex Instrument Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_bitfield_count, range, value, display)

  return offset + length, value
end

-- New Complex Instrument Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields = {}

-- Display: New Complex Instrument Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Complex Instrument Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields.fields = function(buffer, offset, packet, parent, size_of_new_complex_instrument_optional_fields)
  local index = offset

  -- New Complex Instrument Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, new_complex_instrument_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: New Complex Instrument Byte 1
  local new_complex_instrument_byte_1 = nil

  local new_complex_instrument_byte_1_exists = new_complex_instrument_bitfield_count >= 1

  if new_complex_instrument_byte_1_exists then

    -- New Complex Instrument Byte 1: Struct of 8 fields
    index, new_complex_instrument_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leg Cfi Code
  local leg_cfi_code = nil

  local leg_cfi_code_exists = new_complex_instrument_bitfield_count >= 1 and new_complex_instrument_byte_1:bitfield(7) > 0

  if leg_cfi_code_exists then
    index, leg_cfi_code = cboe_edgx_options_orderentry_boe_v2_10.leg_cfi_code.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leg Maturity Date
  local leg_maturity_date = nil

  local leg_maturity_date_exists = new_complex_instrument_bitfield_count >= 1 and new_complex_instrument_byte_1:bitfield(6) > 0

  if leg_maturity_date_exists then
    index, leg_maturity_date = cboe_edgx_options_orderentry_boe_v2_10.leg_maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Leg Strike Price
  local leg_strike_price = nil

  local leg_strike_price_exists = new_complex_instrument_bitfield_count >= 1 and new_complex_instrument_byte_1:bitfield(5) > 0

  if leg_strike_price_exists then
    index, leg_strike_price = cboe_edgx_options_orderentry_boe_v2_10.leg_strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = new_complex_instrument_bitfield_count >= 1 and new_complex_instrument_byte_1:bitfield(4) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: New Complex Instrument Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_new_complex_instrument_optional_fields)
  local index = offset + size_of_new_complex_instrument_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.new_complex_instrument_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields.fields(buffer, offset, packet, parent, size_of_new_complex_instrument_optional_fields)
    parent:set_len(size_of_new_complex_instrument_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields.fields(buffer, offset, packet, parent, size_of_new_complex_instrument_optional_fields)

    return index
  end
end

-- New Complex Instrument Message
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message = {}

-- Read runtime size of: New Complex Instrument Message
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: New Complex Instrument Message
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Complex Instrument Message
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.fields = function(buffer, offset, packet, parent, size_of_new_complex_instrument_message)
  local index = offset

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: New Complex Instrument Optional Fields
  local size_of_new_complex_instrument_optional_fields = message_length - (index - offset) - 8

  -- New Complex Instrument Optional Fields: Struct of 6 fields
  index, new_complex_instrument_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_optional_fields.dissect(buffer, index, packet, parent, size_of_new_complex_instrument_optional_fields)

  return index
end

-- Dissect: New Complex Instrument Message
cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_new_complex_instrument_message = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.new_complex_instrument_message then
    local range = buffer(offset, size_of_new_complex_instrument_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_complex_instrument_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.fields(buffer, offset, packet, parent, size_of_new_complex_instrument_message)

  return offset + size_of_new_complex_instrument_message
end

-- Custom Group Id
cboe_edgx_options_orderentry_boe_v2_10.custom_group_id = {}

-- Size Of: Custom Group Id
cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.size = 2

-- Display: Custom Group Id
cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.display = function(value)
  return "Custom Group Id: "..value
end

-- Dissect: Custom Group Id
cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.custom_group_id, range, value, display)

  return offset + length, value
end

-- Risk Root
cboe_edgx_options_orderentry_boe_v2_10.risk_root = {}

-- Size Of: Risk Root
cboe_edgx_options_orderentry_boe_v2_10.risk_root.size = 6

-- Display: Risk Root
cboe_edgx_options_orderentry_boe_v2_10.risk_root.display = function(value)
  return "Risk Root: "..value
end

-- Dissect: Risk Root
cboe_edgx_options_orderentry_boe_v2_10.risk_root.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.risk_root.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.risk_root.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_root, range, value, display)

  return offset + length, value
end

-- Reserved 4
cboe_edgx_options_orderentry_boe_v2_10.reserved_4 = {}

-- Size Of: Reserved 4
cboe_edgx_options_orderentry_boe_v2_10.reserved_4.size = 4

-- Display: Reserved 4
cboe_edgx_options_orderentry_boe_v2_10.reserved_4.display = function(value)
  return "Reserved 4: "..value
end

-- Dissect: Reserved 4
cboe_edgx_options_orderentry_boe_v2_10.reserved_4.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_4.size
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_4.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_4, range, value, display)

  return offset + length, value
end

-- Risk Reset
cboe_edgx_options_orderentry_boe_v2_10.risk_reset = {}

-- Size Of: Risk Reset
cboe_edgx_options_orderentry_boe_v2_10.risk_reset.size = 8

-- Display: Risk Reset
cboe_edgx_options_orderentry_boe_v2_10.risk_reset.display = function(value)
  return "Risk Reset: "..value
end

-- Dissect: Risk Reset
cboe_edgx_options_orderentry_boe_v2_10.risk_reset.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.risk_reset.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.risk_reset.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_reset, range, value, display)

  return offset + length, value
end

-- Risk Reset Message
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message = {}

-- Read runtime size of: Risk Reset Message
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Risk Reset Message
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Risk Reset Message
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.fields = function(buffer, offset, packet, parent, size_of_risk_reset_message)
  local index = offset

  -- Risk Status Id: 16 Byte Ascii String
  index, risk_status_id = cboe_edgx_options_orderentry_boe_v2_10.risk_status_id.dissect(buffer, index, packet, parent)

  -- Risk Reset: 8 Byte Ascii String
  index, risk_reset = cboe_edgx_options_orderentry_boe_v2_10.risk_reset.dissect(buffer, index, packet, parent)

  -- Reserved 4: 4 Byte
  index, reserved_4 = cboe_edgx_options_orderentry_boe_v2_10.reserved_4.dissect(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)

  -- Risk Root: 6 Byte Ascii String
  index, risk_root = cboe_edgx_options_orderentry_boe_v2_10.risk_root.dissect(buffer, index, packet, parent)

  -- Custom Group Id: 2 Byte Unsigned Fixed Width Integer
  index, custom_group_id = cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Risk Reset Message
cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_risk_reset_message = cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.risk_reset_message then
    local range = buffer(offset, size_of_risk_reset_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.risk_reset_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.fields(buffer, offset, packet, parent, size_of_risk_reset_message)

  return offset + size_of_risk_reset_message
end

-- Cancel Orig On Reject
cboe_edgx_options_orderentry_boe_v2_10.cancel_orig_on_reject = {}

-- Size Of: Cancel Orig On Reject
cboe_edgx_options_orderentry_boe_v2_10.cancel_orig_on_reject.size = 1

-- Display: Cancel Orig On Reject
cboe_edgx_options_orderentry_boe_v2_10.cancel_orig_on_reject.display = function(value)
  if value == "N" then
    return "Cancel Orig On Reject: Leave Original Order Alone (N)"
  end
  if value == "Y" then
    return "Cancel Orig On Reject: Cancel Original Order If Modification Fails (Y)"
  end

  return "Cancel Orig On Reject: Unknown("..value..")"
end

-- Dissect: Cancel Orig On Reject
cboe_edgx_options_orderentry_boe_v2_10.cancel_orig_on_reject.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cancel_orig_on_reject.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_orig_on_reject.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_orig_on_reject, range, value, display)

  return offset + length, value
end

-- Modify Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2 = {}

-- Size Of: Modify Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2.size = 1

-- Display: Modify Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Modify Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Modify Order Reserved Bit 8 Exists|"
  end
  -- Is Modify Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Modify Order Reserved Bit 7 Exists|"
  end
  -- Is Modify Order Frequent Trader Id Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Modify Order Frequent Trader Id Exists|"
  end
  -- Is Modify Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Modify Order Reserved Bit 5 Exists|"
  end
  -- Is Modify Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Modify Order Reserved Bit 4 Exists|"
  end
  -- Is Modify Order Routing Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Modify Order Routing Firm Id Exists|"
  end
  -- Is Modify Order Stop Px Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Modify Order Stop Px Exists|"
  end
  -- Is Modify Order Max Floor Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Modify Order Max Floor Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Modify Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2.bits = function(buffer, offset, packet, parent)

  -- Modify Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_8_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_7_exists, buffer(offset, 1))

  -- Modify Order Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_frequent_trader_id_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_5_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_4_exists, buffer(offset, 1))

  -- Modify Order Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_routing_firm_id_exists, buffer(offset, 1))

  -- Modify Order Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_stop_px_exists, buffer(offset, 1))

  -- Modify Order Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_max_floor_exists, buffer(offset, 1))
end

-- Dissect: Modify Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_byte_2, range, display)

  if show.modify_order_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Modify Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1 = {}

-- Size Of: Modify Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1.size = 1

-- Display: Modify Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Modify Order Side Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Modify Order Side Exists|"
  end
  -- Is Modify Order Exec Inst Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Modify Order Exec Inst Exists|"
  end
  -- Is Modify Order Cancel Orig On Reject Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Modify Order Cancel Orig On Reject Exists|"
  end
  -- Is Modify Order Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Modify Order Ord Type Exists|"
  end
  -- Is Modify Order Price Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Modify Order Price Exists|"
  end
  -- Is Modify Order Order Qty Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Modify Order Order Qty Exists|"
  end
  -- Is Modify Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Modify Order Reserved Bit 2 Exists|"
  end
  -- Is Modify Order Clearing Firm Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Modify Order Clearing Firm Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Modify Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1.bits = function(buffer, offset, packet, parent)

  -- Modify Order Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_side_exists, buffer(offset, 1))

  -- Modify Order Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_exec_inst_exists, buffer(offset, 1))

  -- Modify Order Cancel Orig On Reject Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_cancel_orig_on_reject_exists, buffer(offset, 1))

  -- Modify Order Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_ord_type_exists, buffer(offset, 1))

  -- Modify Order Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_price_exists, buffer(offset, 1))

  -- Modify Order Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_order_qty_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_reserved_bit_2_exists, buffer(offset, 1))

  -- Modify Order Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_clearing_firm_exists, buffer(offset, 1))
end

-- Dissect: Modify Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_byte_1, range, display)

  if show.modify_order_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Modify Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.modify_order_bitfield_count = {}

-- Size Of: Modify Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.modify_order_bitfield_count.size = 1

-- Display: Modify Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.modify_order_bitfield_count.display = function(value)
  return "Modify Order Bitfield Count: "..value
end

-- Dissect: Modify Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.modify_order_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.modify_order_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.modify_order_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_bitfield_count, range, value, display)

  return offset + length, value
end

-- Modify Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields = {}

-- Display: Modify Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Modify Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.fields = function(buffer, offset, packet, parent, size_of_modify_order_optional_fields)
  local index = offset

  -- Modify Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, modify_order_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.modify_order_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Modify Order Byte 1
  local modify_order_byte_1 = nil

  local modify_order_byte_1_exists = modify_order_bitfield_count >= 1

  if modify_order_byte_1_exists then

    -- Modify Order Byte 1: Struct of 8 fields
    index, modify_order_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Modify Order Byte 2
  local modify_order_byte_2 = nil

  local modify_order_byte_2_exists = modify_order_bitfield_count >= 2

  if modify_order_byte_2_exists then

    -- Modify Order Byte 2: Struct of 8 fields
    index, modify_order_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.modify_order_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(7) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Qty
  local order_qty = nil

  local order_qty_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(5) > 0

  if order_qty_exists then
    index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(4) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Orig On Reject
  local cancel_orig_on_reject = nil

  local cancel_orig_on_reject_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(2) > 0

  if cancel_orig_on_reject_exists then
    index, cancel_orig_on_reject = cboe_edgx_options_orderentry_boe_v2_10.cancel_orig_on_reject.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(1) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Floor
  local max_floor = nil

  local max_floor_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(7) > 0

  if max_floor_exists then
    index, max_floor = cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(6) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(5) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(2) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Modify Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_modify_order_optional_fields)
  local index = offset + size_of_modify_order_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.modify_order_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.fields(buffer, offset, packet, parent, size_of_modify_order_optional_fields)
    parent:set_len(size_of_modify_order_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.fields(buffer, offset, packet, parent, size_of_modify_order_optional_fields)

    return index
  end
end

-- Mass Cancel
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel = {}

-- Size Of: Mass Cancel
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel.size = 1

-- Display: Mass Cancel
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel.display = function(value)
  return "Mass Cancel: "..value
end

-- Dissect: Mass Cancel
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel, range, value, display)

  return offset + length, value
end

-- Purge Order Message
cboe_edgx_options_orderentry_boe_v2_10.purge_order_message = {}

-- Read runtime size of: Purge Order Message
cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Purge Order Message
cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Order Message
cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.fields = function(buffer, offset, packet, parent, size_of_purge_order_message)
  local index = offset

  -- Mass Cancel: 1 Byte Ascii String
  index, mass_cancel = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Modify Order Optional Fields
  local size_of_modify_order_optional_fields = message_length - (index - offset) - 8

  -- Modify Order Optional Fields: Struct of 13 fields
  index, modify_order_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.dissect(buffer, index, packet, parent, size_of_modify_order_optional_fields)

  return index
end

-- Dissect: Purge Order Message
cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_purge_order_message = cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.purge_order_message then
    local range = buffer(offset, size_of_purge_order_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_order_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.fields(buffer, offset, packet, parent, size_of_purge_order_message)

  return offset + size_of_purge_order_message
end

-- Reserved 2
cboe_edgx_options_orderentry_boe_v2_10.reserved_2 = {}

-- Size Of: Reserved 2
cboe_edgx_options_orderentry_boe_v2_10.reserved_2.size = 2

-- Display: Reserved 2
cboe_edgx_options_orderentry_boe_v2_10.reserved_2.display = function(value)
  return "Reserved 2: "..value
end

-- Dissect: Reserved 2
cboe_edgx_options_orderentry_boe_v2_10.reserved_2.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_2.size
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_2.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_2, range, value, display)

  return offset + length, value
end

-- Short Quote Update
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update = {}

-- Size Of: Short Quote Update
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.size =
  cboe_edgx_options_orderentry_boe_v2_10.symbol.size + 
  cboe_edgx_options_orderentry_boe_v2_10.side.size + 
  cboe_edgx_options_orderentry_boe_v2_10.open_close.size + 
  cboe_edgx_options_orderentry_boe_v2_10.price.size + 
  cboe_edgx_options_orderentry_boe_v2_10.order_qty.size + 
  cboe_edgx_options_orderentry_boe_v2_10.reserved_2.size;

-- Display: Short Quote Update
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Short Quote Update
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.fields = function(buffer, offset, packet, parent, short_quote_update_index)
  local index = offset

  -- Implicit Short Quote Update Index
  if short_quote_update_index ~= nil then
    local iteration = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.short_quote_update_index, short_quote_update_index)
    iteration:set_generated()
  end

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Open Close: 1 Byte Ascii String Enum with 3 values
  index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)

  -- Price: 8 Byte Signed Fixed Width Integer
  index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)

  -- Reserved 2: 2 Byte
  index, reserved_2 = cboe_edgx_options_orderentry_boe_v2_10.reserved_2.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Short Quote Update
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.dissect = function(buffer, offset, packet, parent, short_quote_update_index)
  if show.short_quote_update then
    -- Optionally add element to protocol tree
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.short_quote_update, buffer(offset, 0))
    local index = cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.fields(buffer, offset, packet, parent, short_quote_update_index)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.display(packet, parent, length)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    return cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.fields(buffer, offset, packet, parent, short_quote_update_index)
  end
end

-- Number Of Short Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_short_quote_updates = {}

-- Size Of: Number Of Short Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_short_quote_updates.size = 1

-- Display: Number Of Short Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_short_quote_updates.display = function(value)
  return "Number Of Short Quote Updates: "..value
end

-- Dissect: Number Of Short Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_short_quote_updates.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.number_of_short_quote_updates.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.number_of_short_quote_updates.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_short_quote_updates, range, value, display)

  return offset + length, value
end

-- Posting Instruction
cboe_edgx_options_orderentry_boe_v2_10.posting_instruction = {}

-- Size Of: Posting Instruction
cboe_edgx_options_orderentry_boe_v2_10.posting_instruction.size = 1

-- Display: Posting Instruction
cboe_edgx_options_orderentry_boe_v2_10.posting_instruction.display = function(value)
  if value == "P" then
    return "Posting Instruction: Post Only (P)"
  end
  if value == "B" then
    return "Posting Instruction: Book Only (B)"
  end
  if value == "N" then
    return "Posting Instruction: Book Only No Slide (N)"
  end
  if value == "R" then
    return "Posting Instruction: Post Only No Slide (R)"
  end

  return "Posting Instruction: Unknown("..value..")"
end

-- Dissect: Posting Instruction
cboe_edgx_options_orderentry_boe_v2_10.posting_instruction.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.posting_instruction.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.posting_instruction.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.posting_instruction, range, value, display)

  return offset + length, value
end

-- Send Time
cboe_edgx_options_orderentry_boe_v2_10.send_time = {}

-- Size Of: Send Time
cboe_edgx_options_orderentry_boe_v2_10.send_time.size = 8

-- Display: Send Time
cboe_edgx_options_orderentry_boe_v2_10.send_time.display = function(value)
  return "Send Time: "..value
end

-- Dissect: Send Time
cboe_edgx_options_orderentry_boe_v2_10.send_time.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.send_time.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.send_time.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.send_time, range, value, display)

  return offset + length, value
end

-- Reserved 3
cboe_edgx_options_orderentry_boe_v2_10.reserved_3 = {}

-- Size Of: Reserved 3
cboe_edgx_options_orderentry_boe_v2_10.reserved_3.size = 3

-- Display: Reserved 3
cboe_edgx_options_orderentry_boe_v2_10.reserved_3.display = function(value)
  return "Reserved 3: "..value
end

-- Dissect: Reserved 3
cboe_edgx_options_orderentry_boe_v2_10.reserved_3.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_3.size
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_3.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_3, range, value, display)

  return offset + length, value
end

-- Short Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message = {}

-- Read runtime size of: Short Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Short Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Short Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.fields = function(buffer, offset, packet, parent, size_of_short_quote_update_message)
  local index = offset

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)

  -- Clearing Account: 4 Byte Ascii String
  index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)

  -- Custom Group Id: 2 Byte Unsigned Fixed Width Integer
  index, custom_group_id = cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.dissect(buffer, index, packet, parent)

  -- Capacity: 1 Byte Ascii String Enum with 7 values
  index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)

  -- Reserved 3: 3 Byte
  index, reserved_3 = cboe_edgx_options_orderentry_boe_v2_10.reserved_3.dissect(buffer, index, packet, parent)

  -- Send Time: 8 Byte Unsigned Fixed Width Integer
  index, send_time = cboe_edgx_options_orderentry_boe_v2_10.send_time.dissect(buffer, index, packet, parent)

  -- Posting Instruction: 1 Byte Ascii String Enum with 4 values
  index, posting_instruction = cboe_edgx_options_orderentry_boe_v2_10.posting_instruction.dissect(buffer, index, packet, parent)

  -- Session Eligibility: 1 Byte Ascii String Enum with 3 values
  index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)

  -- Number Of Short Quote Updates: 1 Byte Unsigned Fixed Width Integer
  index, number_of_short_quote_updates = cboe_edgx_options_orderentry_boe_v2_10.number_of_short_quote_updates.dissect(buffer, index, packet, parent)

  -- Repeating: Short Quote Update
  for short_quote_update_index = 1, number_of_short_quote_updates do
    index, short_quote_update = cboe_edgx_options_orderentry_boe_v2_10.short_quote_update.dissect(buffer, index, packet, parent, short_quote_update_index)
  end

  return index
end

-- Dissect: Short Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_short_quote_update_message = cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.short_quote_update_message then
    local range = buffer(offset, size_of_short_quote_update_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.short_quote_update_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.fields(buffer, offset, packet, parent, size_of_short_quote_update_message)

  return offset + size_of_short_quote_update_message
end

-- Reserved 12
cboe_edgx_options_orderentry_boe_v2_10.reserved_12 = {}

-- Size Of: Reserved 12
cboe_edgx_options_orderentry_boe_v2_10.reserved_12.size = 12

-- Display: Reserved 12
cboe_edgx_options_orderentry_boe_v2_10.reserved_12.display = function(value)
  return "Reserved 12: "..value
end

-- Dissect: Reserved 12
cboe_edgx_options_orderentry_boe_v2_10.reserved_12.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_12.size
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_12.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_12, range, value, display)

  return offset + length, value
end

-- Quote Update
cboe_edgx_options_orderentry_boe_v2_10.quote_update = {}

-- Size Of: Quote Update
cboe_edgx_options_orderentry_boe_v2_10.quote_update.size =
  cboe_edgx_options_orderentry_boe_v2_10.symbol.size + 
  cboe_edgx_options_orderentry_boe_v2_10.side.size + 
  cboe_edgx_options_orderentry_boe_v2_10.open_close.size + 
  cboe_edgx_options_orderentry_boe_v2_10.price.size + 
  cboe_edgx_options_orderentry_boe_v2_10.order_qty.size + 
  cboe_edgx_options_orderentry_boe_v2_10.reserved_12.size;

-- Display: Quote Update
cboe_edgx_options_orderentry_boe_v2_10.quote_update.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Update
cboe_edgx_options_orderentry_boe_v2_10.quote_update.fields = function(buffer, offset, packet, parent, quote_update_index)
  local index = offset

  -- Implicit Quote Update Index
  if quote_update_index ~= nil then
    local iteration = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_index, quote_update_index)
    iteration:set_generated()
  end

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Open Close: 1 Byte Ascii String Enum with 3 values
  index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)

  -- Price: 8 Byte Signed Fixed Width Integer
  index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)

  -- Reserved 12: 12 Byte
  index, reserved_12 = cboe_edgx_options_orderentry_boe_v2_10.reserved_12.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Update
cboe_edgx_options_orderentry_boe_v2_10.quote_update.dissect = function(buffer, offset, packet, parent, quote_update_index)
  if show.quote_update then
    -- Optionally add element to protocol tree
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update, buffer(offset, 0))
    local index = cboe_edgx_options_orderentry_boe_v2_10.quote_update.fields(buffer, offset, packet, parent, quote_update_index)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_update.display(packet, parent, length)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    return cboe_edgx_options_orderentry_boe_v2_10.quote_update.fields(buffer, offset, packet, parent, quote_update_index)
  end
end

-- Number Of Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_updates = {}

-- Size Of: Number Of Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_updates.size = 1

-- Display: Number Of Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_updates.display = function(value)
  return "Number Of Quote Updates: "..value
end

-- Dissect: Number Of Quote Updates
cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_updates.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_updates.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_updates.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_quote_updates, range, value, display)

  return offset + length, value
end

-- Reserved 15
cboe_edgx_options_orderentry_boe_v2_10.reserved_15 = {}

-- Size Of: Reserved 15
cboe_edgx_options_orderentry_boe_v2_10.reserved_15.size = 15

-- Display: Reserved 15
cboe_edgx_options_orderentry_boe_v2_10.reserved_15.display = function(value)
  return "Reserved 15: "..value
end

-- Dissect: Reserved 15
cboe_edgx_options_orderentry_boe_v2_10.reserved_15.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.reserved_15.size
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_edgx_options_orderentry_boe_v2_10.reserved_15.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.reserved_15, range, value, display)

  return offset + length, value
end

-- Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_message = {}

-- Read runtime size of: Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.fields = function(buffer, offset, packet, parent, size_of_quote_update_message)
  local index = offset

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_edgx_options_orderentry_boe_v2_10.quote_update_id.dissect(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)

  -- Clearing Account: 4 Byte Ascii String
  index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)

  -- Cmta Number: 4 Byte Unsigned Fixed Width Integer
  index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)

  -- Account: 16 Byte Ascii String
  index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)

  -- Custom Group Id: 2 Byte Unsigned Fixed Width Integer
  index, custom_group_id = cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.dissect(buffer, index, packet, parent)

  -- Capacity: 1 Byte Ascii String Enum with 7 values
  index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)

  -- Reserved 15: 15 Byte
  index, reserved_15 = cboe_edgx_options_orderentry_boe_v2_10.reserved_15.dissect(buffer, index, packet, parent)

  -- Send Time: 8 Byte Unsigned Fixed Width Integer
  index, send_time = cboe_edgx_options_orderentry_boe_v2_10.send_time.dissect(buffer, index, packet, parent)

  -- Posting Instruction: 1 Byte Ascii String Enum with 4 values
  index, posting_instruction = cboe_edgx_options_orderentry_boe_v2_10.posting_instruction.dissect(buffer, index, packet, parent)

  -- Session Eligibility: 1 Byte Ascii String Enum with 3 values
  index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)

  -- Number Of Quote Updates: 1 Byte Unsigned Fixed Width Integer
  index, number_of_quote_updates = cboe_edgx_options_orderentry_boe_v2_10.number_of_quote_updates.dissect(buffer, index, packet, parent)

  -- Repeating: Quote Update
  for quote_update_index = 1, number_of_quote_updates do
    index, quote_update = cboe_edgx_options_orderentry_boe_v2_10.quote_update.dissect(buffer, index, packet, parent, quote_update_index)
  end

  return index
end

-- Dissect: Quote Update Message
cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_update_message = cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_update_message then
    local range = buffer(offset, size_of_quote_update_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.quote_update_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.fields(buffer, offset, packet, parent, size_of_quote_update_message)

  return offset + size_of_quote_update_message
end

-- Modify Order Message
cboe_edgx_options_orderentry_boe_v2_10.modify_order_message = {}

-- Read runtime size of: Modify Order Message
cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Modify Order Message
cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Modify Order Message
cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.fields = function(buffer, offset, packet, parent, size_of_modify_order_message)
  local index = offset

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Orig Cl Ord Id: 20 Byte Ascii String
  index, orig_cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Modify Order Optional Fields
  local size_of_modify_order_optional_fields = message_length - (index - offset) - 8

  -- Modify Order Optional Fields: Struct of 13 fields
  index, modify_order_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.modify_order_optional_fields.dissect(buffer, index, packet, parent, size_of_modify_order_optional_fields)

  return index
end

-- Dissect: Modify Order Message
cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_modify_order_message = cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.modify_order_message then
    local range = buffer(offset, size_of_modify_order_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.modify_order_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.fields(buffer, offset, packet, parent, size_of_modify_order_message)

  return offset + size_of_modify_order_message
end

-- Mass Cancel Inst
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_inst = {}

-- Size Of: Mass Cancel Inst
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_inst.size = 16

-- Display: Mass Cancel Inst
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_inst.display = function(value)
  return "Mass Cancel Inst: "..value
end

-- Dissect: Mass Cancel Inst
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_inst.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_inst.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_inst.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_inst, range, value, display)

  return offset + length, value
end

-- Mass Cancel Lockout
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_lockout = {}

-- Size Of: Mass Cancel Lockout
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_lockout.size = 1

-- Display: Mass Cancel Lockout
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_lockout.display = function(value)
  if value == "0" then
    return "Mass Cancel Lockout: No Lockout (0)"
  end
  if value == "0" then
    return "Mass Cancel Lockout: Lockout (0)"
  end

  return "Mass Cancel Lockout: Unknown("..value..")"
end

-- Dissect: Mass Cancel Lockout
cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_lockout.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_lockout.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_lockout.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.mass_cancel_lockout, range, value, display)

  return offset + length, value
end

-- Cancel Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2 = {}

-- Size Of: Cancel Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2.size = 1

-- Display: Cancel Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Order Reserved Bit 8 Exists|"
  end
  -- Is Cancel Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Order Reserved Bit 7 Exists|"
  end
  -- Is Cancel Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Order Reserved Bit 6 Exists|"
  end
  -- Is Cancel Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Order Reserved Bit 5 Exists|"
  end
  -- Is Cancel Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Order Reserved Bit 4 Exists|"
  end
  -- Is Cancel Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Order Reserved Bit 3 Exists|"
  end
  -- Is Cancel Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Order Reserved Bit 2 Exists|"
  end
  -- Is Cancel Order Mass Cancel Inst Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Order Mass Cancel Inst Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2.bits = function(buffer, offset, packet, parent)

  -- Cancel Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Order Mass Cancel Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_inst_exists, buffer(offset, 1))
end

-- Dissect: Cancel Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_byte_2, range, display)

  if show.cancel_order_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1 = {}

-- Size Of: Cancel Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1.size = 1

-- Display: Cancel Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Order Reserved Bit 8 Exists|"
  end
  -- Is Cancel Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Order Reserved Bit 7 Exists|"
  end
  -- Is Cancel Order Routing Firm Id Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Order Routing Firm Id Exists|"
  end
  -- Is Cancel Order Mass Cancel Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Order Mass Cancel Id Exists|"
  end
  -- Is Cancel Order Risk Root Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Order Risk Root Exists|"
  end
  -- Is Cancel Order Mass Cancel Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Order Mass Cancel Exists|"
  end
  -- Is Cancel Order Mass Cancel Lockout Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Order Mass Cancel Lockout Exists|"
  end
  -- Is Cancel Order Clearing Firm Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Order Clearing Firm Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1.bits = function(buffer, offset, packet, parent)

  -- Cancel Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Order Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_routing_firm_id_exists, buffer(offset, 1))

  -- Cancel Order Mass Cancel Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_id_exists, buffer(offset, 1))

  -- Cancel Order Risk Root Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_risk_root_exists, buffer(offset, 1))

  -- Cancel Order Mass Cancel Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_exists, buffer(offset, 1))

  -- Cancel Order Mass Cancel Lockout Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_mass_cancel_lockout_exists, buffer(offset, 1))

  -- Cancel Order Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_clearing_firm_exists, buffer(offset, 1))
end

-- Dissect: Cancel Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_byte_1, range, display)

  if show.cancel_order_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Cancel Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_bitfield_count = {}

-- Size Of: Cancel Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_bitfield_count.size = 1

-- Display: Cancel Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_bitfield_count.display = function(value)
  return "Cancel Order Bitfield Count: "..value
end

-- Dissect: Cancel Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_bitfield_count, range, value, display)

  return offset + length, value
end

-- Cancel Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields = {}

-- Display: Cancel Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields.fields = function(buffer, offset, packet, parent, size_of_cancel_order_optional_fields)
  local index = offset

  -- Cancel Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cancel_order_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cancel Order Byte 1
  local cancel_order_byte_1 = nil

  local cancel_order_byte_1_exists = cancel_order_bitfield_count >= 1

  if cancel_order_byte_1_exists then

    -- Cancel Order Byte 1: Struct of 8 fields
    index, cancel_order_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Order Byte 2
  local cancel_order_byte_2 = nil

  local cancel_order_byte_2_exists = cancel_order_bitfield_count >= 2

  if cancel_order_byte_2_exists then

    -- Cancel Order Byte 2: Struct of 8 fields
    index, cancel_order_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(7) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Mass Cancel Lockout
  local mass_cancel_lockout = nil

  local mass_cancel_lockout_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(6) > 0

  if mass_cancel_lockout_exists then
    index, mass_cancel_lockout = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_lockout.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Mass Cancel
  local mass_cancel = nil

  local mass_cancel_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(5) > 0

  if mass_cancel_exists then
    index, mass_cancel = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Risk Root
  local risk_root = nil

  local risk_root_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(4) > 0

  if risk_root_exists then
    index, risk_root = cboe_edgx_options_orderentry_boe_v2_10.risk_root.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Mass Cancel Id
  local mass_cancel_id = nil

  local mass_cancel_id_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(3) > 0

  if mass_cancel_id_exists then
    index, mass_cancel_id = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(2) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Mass Cancel Inst
  local mass_cancel_inst = nil

  local mass_cancel_inst_exists = cancel_order_bitfield_count >= 2 and cancel_order_byte_2:bitfield(7) > 0

  if mass_cancel_inst_exists then
    index, mass_cancel_inst = cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_inst.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cancel Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_cancel_order_optional_fields)
  local index = offset + size_of_cancel_order_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.cancel_order_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields.fields(buffer, offset, packet, parent, size_of_cancel_order_optional_fields)
    parent:set_len(size_of_cancel_order_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields.fields(buffer, offset, packet, parent, size_of_cancel_order_optional_fields)

    return index
  end
end

-- Cancel Order Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message = {}

-- Read runtime size of: Cancel Order Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Cancel Order Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Order Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.fields = function(buffer, offset, packet, parent, size_of_cancel_order_message)
  local index = offset

  -- Orig Cl Ord Id: 20 Byte Ascii String
  index, orig_cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.orig_cl_ord_id.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Cancel Order Optional Fields
  local size_of_cancel_order_optional_fields = message_length - (index - offset) - 8

  -- Cancel Order Optional Fields: Struct of 10 fields
  index, cancel_order_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_optional_fields.dissect(buffer, index, packet, parent, size_of_cancel_order_optional_fields)

  return index
end

-- Dissect: Cancel Order Message
cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cancel_order_message = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cancel_order_message then
    local range = buffer(offset, size_of_cancel_order_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_order_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.fields(buffer, offset, packet, parent, size_of_cancel_order_message)

  return offset + size_of_cancel_order_message
end

-- Ors
cboe_edgx_options_orderentry_boe_v2_10.ors = {}

-- Size Of: Ors
cboe_edgx_options_orderentry_boe_v2_10.ors.size = 1

-- Display: Ors
cboe_edgx_options_orderentry_boe_v2_10.ors.display = function(value)
  if value == "N" then
    return "Ors: No (N)"
  end
  if value == "Y" then
    return "Ors: Yes (Y)"
  end

  return "Ors: Unknown("..value..")"
end

-- Dissect: Ors
cboe_edgx_options_orderentry_boe_v2_10.ors.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.ors.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.ors.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.ors, range, value, display)

  return offset + length, value
end

-- Equity Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.equity_ex_destination = {}

-- Size Of: Equity Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.equity_ex_destination.size = 1

-- Display: Equity Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.equity_ex_destination.display = function(value)
  if value == "C" then
    return "Equity Ex Destination: Cowen (C)"
  end

  return "Equity Ex Destination: Unknown("..value..")"
end

-- Dissect: Equity Ex Destination
cboe_edgx_options_orderentry_boe_v2_10.equity_ex_destination.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_ex_destination.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_ex_destination.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_ex_destination, range, value, display)

  return offset + length, value
end

-- Equity Leg Short Sell
cboe_edgx_options_orderentry_boe_v2_10.equity_leg_short_sell = {}

-- Size Of: Equity Leg Short Sell
cboe_edgx_options_orderentry_boe_v2_10.equity_leg_short_sell.size = 1

-- Display: Equity Leg Short Sell
cboe_edgx_options_orderentry_boe_v2_10.equity_leg_short_sell.display = function(value)
  if value == "5" then
    return "Equity Leg Short Sell: Sell Short (5)"
  end
  if value == "6" then
    return "Equity Leg Short Sell: Sell Short Exempt (6)"
  end
  if value == "0" then
    return "Equity Leg Short Sell: Disabled (0)"
  end
  if value == "1" then
    return "Equity Leg Short Sell: Enabled (1)"
  end

  return "Equity Leg Short Sell: Unknown("..value..")"
end

-- Dissect: Equity Leg Short Sell
cboe_edgx_options_orderentry_boe_v2_10.equity_leg_short_sell.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_leg_short_sell.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_leg_short_sell.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_leg_short_sell, range, value, display)

  return offset + length, value
end

-- Equity Sell Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm = {}

-- Size Of: Equity Sell Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm.size = 4

-- Display: Equity Sell Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm.display = function(value)
  return "Equity Sell Clearing Firm: "..value
end

-- Dissect: Equity Sell Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_sell_clearing_firm, range, value, display)

  return offset + length, value
end

-- Equity Buy Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm = {}

-- Size Of: Equity Buy Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm.size = 4

-- Display: Equity Buy Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm.display = function(value)
  return "Equity Buy Clearing Firm: "..value
end

-- Dissect: Equity Buy Clearing Firm
cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_buy_clearing_firm, range, value, display)

  return offset + length, value
end

-- Equity Transact Time
cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time = {}

-- Size Of: Equity Transact Time
cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time.size = 8

-- Display: Equity Transact Time
cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time.display = function(value)
  return "Equity Transact Time: "..value
end

-- Dissect: Equity Transact Time
cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time.size
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_transact_time, range, value, display)

  return offset + length, value
end

-- Equity Trade Venue
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue = {}

-- Size Of: Equity Trade Venue
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue.size = 1

-- Display: Equity Trade Venue
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue.display = function(value)
  if value == "A" then
    return "Equity Trade Venue: Nyse American (A)"
  end
  if value == "B" then
    return "Equity Trade Venue: Nasdaq Bx (B)"
  end
  if value == "C" then
    return "Equity Trade Venue: Nyse National (C)"
  end
  if value == "I" then
    return "Equity Trade Venue: Investors Exchange (I)"
  end
  if value == "J" then
    return "Equity Trade Venue: Cboe Edga Exchange (J)"
  end
  if value == "K" then
    return "Equity Trade Venue: Cboe Edgx Exchange (K)"
  end
  if value == "M" then
    return "Equity Trade Venue: Chx (M)"
  end
  if value == "N" then
    return "Equity Trade Venue: Nyse (N)"
  end
  if value == "P" then
    return "Equity Trade Venue: Nyse Arca (P)"
  end
  if value == "Q" then
    return "Equity Trade Venue: Nasdaq (Q)"
  end
  if value == "X" then
    return "Equity Trade Venue: Nasdaq Psx (X)"
  end
  if value == "Y" then
    return "Equity Trade Venue: Cboe Byx Exchange (Y)"
  end
  if value == "Z" then
    return "Equity Trade Venue: Cboe Bzx Exchange (Z)"
  end

  return "Equity Trade Venue: Unknown("..value..")"
end

-- Dissect: Equity Trade Venue
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_trade_venue, range, value, display)

  return offset + length, value
end

-- Equity Trade Size
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size = {}

-- Size Of: Equity Trade Size
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size.size = 4

-- Display: Equity Trade Size
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size.display = function(value)
  return "Equity Trade Size: "..value
end

-- Dissect: Equity Trade Size
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_trade_size, range, value, display)

  return offset + length, value
end

-- Equity Trade Price
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price = {}

-- Size Of: Equity Trade Price
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price.size = 8

-- Display: Equity Trade Price
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price.display = function(value)
  return "Equity Trade Price: "..value
end

-- Dissect: Equity Trade Price
cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.equity_trade_price, range, value, display)

  return offset + length, value
end

-- Last Priority
cboe_edgx_options_orderentry_boe_v2_10.last_priority = {}

-- Size Of: Last Priority
cboe_edgx_options_orderentry_boe_v2_10.last_priority.size = 1

-- Display: Last Priority
cboe_edgx_options_orderentry_boe_v2_10.last_priority.display = function(value)
  return "Last Priority: "..value
end

-- Dissect: Last Priority
cboe_edgx_options_orderentry_boe_v2_10.last_priority.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.last_priority.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.last_priority.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_priority, range, value, display)

  return offset + length, value
end

-- Auto Match Price
cboe_edgx_options_orderentry_boe_v2_10.auto_match_price = {}

-- Size Of: Auto Match Price
cboe_edgx_options_orderentry_boe_v2_10.auto_match_price.size = 8

-- Display: Auto Match Price
cboe_edgx_options_orderentry_boe_v2_10.auto_match_price.display = function(value)
  return "Auto Match Price: "..value
end

-- Dissect: Auto Match Price
cboe_edgx_options_orderentry_boe_v2_10.auto_match_price.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.auto_match_price.size
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_edgx_options_orderentry_boe_v2_10.auto_match_price.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.auto_match_price, range, value, display)

  return offset + length, value
end

-- Auto Match
cboe_edgx_options_orderentry_boe_v2_10.auto_match = {}

-- Size Of: Auto Match
cboe_edgx_options_orderentry_boe_v2_10.auto_match.size = 1

-- Display: Auto Match
cboe_edgx_options_orderentry_boe_v2_10.auto_match.display = function(value)
  if value == "0" then
    return "Auto Match: Disabled (0)"
  end
  if value == "1" then
    return "Auto Match: Market (1)"
  end
  if value == "1" then
    return "Auto Match: Limit (1)"
  end
  if value == "Z" then
    return "Auto Match: Attribute Both Clearing Firm And Client Id (Z)"
  end

  return "Auto Match: Unknown("..value..")"
end

-- Dissect: Auto Match
cboe_edgx_options_orderentry_boe_v2_10.auto_match.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.auto_match.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.auto_match.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.auto_match, range, value, display)

  return offset + length, value
end

-- New Order Cross Multileg Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5 = {}

-- Size Of: New Order Cross Multileg Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5.size = 1

-- Display: New Order Cross Multileg Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Multileg Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 8 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 7 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 6 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 5 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 4 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 3 Exists|"
  end
  -- Is New Order Cross Multileg Frequent Trader Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Multileg Frequent Trader Id Exists|"
  end
  -- Is New Order Cross Multileg Ors Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Multileg Ors Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Multileg Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Multileg Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Cross Multileg Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_frequent_trader_id_exists, buffer(offset, 1))

  -- New Order Cross Multileg Ors Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_ors_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Multileg Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_5, range, display)

  if show.new_order_cross_multileg_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Multileg Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4 = {}

-- Size Of: New Order Cross Multileg Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4.size = 1

-- Display: New Order Cross Multileg Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Multileg Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 8 Exists|"
  end
  -- Is New Order Cross Multileg Equity Ex Destination Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Multileg Equity Ex Destination Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 6 Exists|"
  end
  -- Is New Order Cross Multileg Drill Thru Protection Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Multileg Drill Thru Protection Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 4 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 3 Exists|"
  end
  -- Is New Order Cross Multileg Equity Leg Short Sell Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Multileg Equity Leg Short Sell Exists|"
  end
  -- Is New Order Cross Multileg Equity Party Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Multileg Equity Party Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Multileg Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Multileg Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_ex_destination_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Cross Multileg Drill Thru Protection Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_drill_thru_protection_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Leg Short Sell Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_leg_short_sell_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_party_id_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Multileg Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_4, range, display)

  if show.new_order_cross_multileg_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Multileg Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3 = {}

-- Size Of: New Order Cross Multileg Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3.size = 1

-- Display: New Order Cross Multileg Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Multileg Session Eligibility Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Multileg Session Eligibility Exists|"
  end
  -- Is New Order Cross Multileg Equity Sell Clearing Firm Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Multileg Equity Sell Clearing Firm Exists|"
  end
  -- Is New Order Cross Multileg Equity Buy Clearing Firm Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Multileg Equity Buy Clearing Firm Exists|"
  end
  -- Is New Order Cross Multileg Equity Transact Time Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Multileg Equity Transact Time Exists|"
  end
  -- Is New Order Cross Multileg Equity Trade Venue Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Multileg Equity Trade Venue Exists|"
  end
  -- Is New Order Cross Multileg Equity Trade Size Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Multileg Equity Trade Size Exists|"
  end
  -- Is New Order Cross Multileg Equity Trade Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Multileg Equity Trade Price Exists|"
  end
  -- Is New Order Cross Multileg Client Id Attr Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Multileg Client Id Attr Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Multileg Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Multileg Session Eligibility Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_session_eligibility_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Sell Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_sell_clearing_firm_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Buy Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_buy_clearing_firm_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Transact Time Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_transact_time_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Trade Venue Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_trade_venue_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Trade Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_trade_size_exists, buffer(offset, 1))

  -- New Order Cross Multileg Equity Trade Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_equity_trade_price_exists, buffer(offset, 1))

  -- New Order Cross Multileg Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_client_id_attr_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Multileg Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_3, range, display)

  if show.new_order_cross_multileg_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Multileg Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2 = {}

-- Size Of: New Order Cross Multileg Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2.size = 1

-- Display: New Order Cross Multileg Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Multileg Clearing Optional Data Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Multileg Clearing Optional Data Exists|"
  end
  -- Is New Order Cross Multileg Routing Firm Id Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Multileg Routing Firm Id Exists|"
  end
  -- Is New Order Cross Multileg Clearing Account Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Multileg Clearing Account Exists|"
  end
  -- Is New Order Cross Multileg Cmta Number Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Multileg Cmta Number Exists|"
  end
  -- Is New Order Cross Multileg Account Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Multileg Account Exists|"
  end
  -- Is New Order Cross Multileg Last Priority Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Multileg Last Priority Exists|"
  end
  -- Is New Order Cross Multileg Auto Match Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Multileg Auto Match Price Exists|"
  end
  -- Is New Order Cross Multileg Auto Match Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Multileg Auto Match Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Multileg Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Multileg Clearing Optional Data Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_clearing_optional_data_exists, buffer(offset, 1))

  -- New Order Cross Multileg Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_routing_firm_id_exists, buffer(offset, 1))

  -- New Order Cross Multileg Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_clearing_account_exists, buffer(offset, 1))

  -- New Order Cross Multileg Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_cmta_number_exists, buffer(offset, 1))

  -- New Order Cross Multileg Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_account_exists, buffer(offset, 1))

  -- New Order Cross Multileg Last Priority Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_last_priority_exists, buffer(offset, 1))

  -- New Order Cross Multileg Auto Match Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_auto_match_price_exists, buffer(offset, 1))

  -- New Order Cross Multileg Auto Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_auto_match_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Multileg Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_2, range, display)

  if show.new_order_cross_multileg_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Multileg Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1 = {}

-- Size Of: New Order Cross Multileg Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1.size = 1

-- Display: New Order Cross Multileg Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Multileg Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Multileg Prevent Match Exists|"
  end
  -- Is New Order Cross Multileg Target Party Id Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Multileg Target Party Id Exists|"
  end
  -- Is New Order Cross Multileg Attributed Quote Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Multileg Attributed Quote Exists|"
  end
  -- Is New Order Cross Multileg Exec Inst Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Multileg Exec Inst Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 4 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 3 Exists|"
  end
  -- Is New Order Cross Multileg Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Multileg Reserved Bit 2 Exists|"
  end
  -- Is New Order Cross Multileg Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Multileg Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Multileg Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Multileg Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_prevent_match_exists, buffer(offset, 1))

  -- New Order Cross Multileg Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_target_party_id_exists, buffer(offset, 1))

  -- New Order Cross Multileg Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_attributed_quote_exists, buffer(offset, 1))

  -- New Order Cross Multileg Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_exec_inst_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Cross Multileg Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_reserved_bit_2_exists, buffer(offset, 1))

  -- New Order Cross Multileg Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_symbol_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Multileg Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_byte_1, range, display)

  if show.new_order_cross_multileg_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Multileg Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_bitfield_count = {}

-- Size Of: New Order Cross Multileg Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_bitfield_count.size = 1

-- Display: New Order Cross Multileg Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_bitfield_count.display = function(value)
  return "New Order Cross Multileg Bitfield Count: "..value
end

-- Dissect: New Order Cross Multileg Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_bitfield_count, range, value, display)

  return offset + length, value
end

-- New Order Cross Multileg Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields = {}

-- Display: New Order Cross Multileg Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Cross Multileg Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields.fields = function(buffer, offset, packet, parent, size_of_new_order_cross_multileg_optional_fields)
  local index = offset

  -- New Order Cross Multileg Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, new_order_cross_multileg_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: New Order Cross Multileg Byte 1
  local new_order_cross_multileg_byte_1 = nil

  local new_order_cross_multileg_byte_1_exists = new_order_cross_multileg_bitfield_count >= 1

  if new_order_cross_multileg_byte_1_exists then

    -- New Order Cross Multileg Byte 1: Struct of 8 fields
    index, new_order_cross_multileg_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Cross Multileg Byte 2
  local new_order_cross_multileg_byte_2 = nil

  local new_order_cross_multileg_byte_2_exists = new_order_cross_multileg_bitfield_count >= 2

  if new_order_cross_multileg_byte_2_exists then

    -- New Order Cross Multileg Byte 2: Struct of 8 fields
    index, new_order_cross_multileg_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Cross Multileg Byte 3
  local new_order_cross_multileg_byte_3 = nil

  local new_order_cross_multileg_byte_3_exists = new_order_cross_multileg_bitfield_count >= 3

  if new_order_cross_multileg_byte_3_exists then

    -- New Order Cross Multileg Byte 3: Struct of 8 fields
    index, new_order_cross_multileg_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Cross Multileg Byte 4
  local new_order_cross_multileg_byte_4 = nil

  local new_order_cross_multileg_byte_4_exists = new_order_cross_multileg_bitfield_count >= 4

  if new_order_cross_multileg_byte_4_exists then

    -- New Order Cross Multileg Byte 4: Struct of 8 fields
    index, new_order_cross_multileg_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Cross Multileg Byte 5
  local new_order_cross_multileg_byte_5 = nil

  local new_order_cross_multileg_byte_5_exists = new_order_cross_multileg_bitfield_count >= 5

  if new_order_cross_multileg_byte_5_exists then

    -- New Order Cross Multileg Byte 5: Struct of 8 fields
    index, new_order_cross_multileg_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = new_order_cross_multileg_bitfield_count >= 1 and new_order_cross_multileg_byte_1:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = new_order_cross_multileg_bitfield_count >= 1 and new_order_cross_multileg_byte_1:bitfield(3) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = new_order_cross_multileg_bitfield_count >= 1 and new_order_cross_multileg_byte_1:bitfield(2) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = new_order_cross_multileg_bitfield_count >= 1 and new_order_cross_multileg_byte_1:bitfield(1) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = new_order_cross_multileg_bitfield_count >= 1 and new_order_cross_multileg_byte_1:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auto Match
  local auto_match = nil

  local auto_match_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(7) > 0

  if auto_match_exists then
    index, auto_match = cboe_edgx_options_orderentry_boe_v2_10.auto_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auto Match Price
  local auto_match_price = nil

  local auto_match_price_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(6) > 0

  if auto_match_price_exists then
    index, auto_match_price = cboe_edgx_options_orderentry_boe_v2_10.auto_match_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Priority
  local last_priority = nil

  local last_priority_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(5) > 0

  if last_priority_exists then
    index, last_priority = cboe_edgx_options_orderentry_boe_v2_10.last_priority.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(4) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(3) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(2) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(1) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Optional Data
  local clearing_optional_data = nil

  local clearing_optional_data_exists = new_order_cross_multileg_bitfield_count >= 2 and new_order_cross_multileg_byte_2:bitfield(0) > 0

  if clearing_optional_data_exists then
    index, clearing_optional_data = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(7) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Trade Price
  local equity_trade_price = nil

  local equity_trade_price_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(6) > 0

  if equity_trade_price_exists then
    index, equity_trade_price = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Trade Size
  local equity_trade_size = nil

  local equity_trade_size_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(5) > 0

  if equity_trade_size_exists then
    index, equity_trade_size = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Trade Venue
  local equity_trade_venue = nil

  local equity_trade_venue_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(4) > 0

  if equity_trade_venue_exists then
    index, equity_trade_venue = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Transact Time
  local equity_transact_time = nil

  local equity_transact_time_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(3) > 0

  if equity_transact_time_exists then
    index, equity_transact_time = cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Buy Clearing Firm
  local equity_buy_clearing_firm = nil

  local equity_buy_clearing_firm_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(2) > 0

  if equity_buy_clearing_firm_exists then
    index, equity_buy_clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Sell Clearing Firm
  local equity_sell_clearing_firm = nil

  local equity_sell_clearing_firm_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(1) > 0

  if equity_sell_clearing_firm_exists then
    index, equity_sell_clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Session Eligibility
  local session_eligibility = nil

  local session_eligibility_exists = new_order_cross_multileg_bitfield_count >= 3 and new_order_cross_multileg_byte_3:bitfield(0) > 0

  if session_eligibility_exists then
    index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Party Id
  local equity_party_id = nil

  local equity_party_id_exists = new_order_cross_multileg_bitfield_count >= 4 and new_order_cross_multileg_byte_4:bitfield(7) > 0

  if equity_party_id_exists then
    index, equity_party_id = cboe_edgx_options_orderentry_boe_v2_10.equity_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Leg Short Sell
  local equity_leg_short_sell = nil

  local equity_leg_short_sell_exists = new_order_cross_multileg_bitfield_count >= 4 and new_order_cross_multileg_byte_4:bitfield(6) > 0

  if equity_leg_short_sell_exists then
    index, equity_leg_short_sell = cboe_edgx_options_orderentry_boe_v2_10.equity_leg_short_sell.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Drill Thru Protection
  local drill_thru_protection = nil

  local drill_thru_protection_exists = new_order_cross_multileg_bitfield_count >= 4 and new_order_cross_multileg_byte_4:bitfield(3) > 0

  if drill_thru_protection_exists then
    index, drill_thru_protection = cboe_edgx_options_orderentry_boe_v2_10.drill_thru_protection.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Ex Destination
  local equity_ex_destination = nil

  local equity_ex_destination_exists = new_order_cross_multileg_bitfield_count >= 4 and new_order_cross_multileg_byte_4:bitfield(1) > 0

  if equity_ex_destination_exists then
    index, equity_ex_destination = cboe_edgx_options_orderentry_boe_v2_10.equity_ex_destination.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ors
  local ors = nil

  local ors_exists = new_order_cross_multileg_bitfield_count >= 5 and new_order_cross_multileg_byte_5:bitfield(7) > 0

  if ors_exists then
    index, ors = cboe_edgx_options_orderentry_boe_v2_10.ors.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = new_order_cross_multileg_bitfield_count >= 5 and new_order_cross_multileg_byte_5:bitfield(6) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: New Order Cross Multileg Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_new_order_cross_multileg_optional_fields)
  local index = offset + size_of_new_order_cross_multileg_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.new_order_cross_multileg_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields.fields(buffer, offset, packet, parent, size_of_new_order_cross_multileg_optional_fields)
    parent:set_len(size_of_new_order_cross_multileg_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields.fields(buffer, offset, packet, parent, size_of_new_order_cross_multileg_optional_fields)

    return index
  end
end

-- New Order Cross Multileg Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message = {}

-- Read runtime size of: New Order Cross Multileg Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: New Order Cross Multileg Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Cross Multileg Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.fields = function(buffer, offset, packet, parent, size_of_new_order_cross_multileg_message)
  local index = offset

  -- Cross Id: 20 Byte Ascii String
  index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)

  -- Cross Type: 1 Byte Ascii String
  index, cross_type = cboe_edgx_options_orderentry_boe_v2_10.cross_type.dissect(buffer, index, packet, parent)

  -- Cross Prioritization: 1 Byte Ascii String Enum with 2 values
  index, cross_prioritization = cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.dissect(buffer, index, packet, parent)

  -- Price: 8 Byte Signed Fixed Width Integer
  index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: New Order Cross Multileg Optional Fields
  local size_of_new_order_cross_multileg_optional_fields = message_length - (index - offset) - 8

  -- New Order Cross Multileg Optional Fields: Struct of 33 fields
  index, new_order_cross_multileg_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_optional_fields.dissect(buffer, index, packet, parent, size_of_new_order_cross_multileg_optional_fields)

  return index
end

-- Dissect: New Order Cross Multileg Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_new_order_cross_multileg_message = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.new_order_cross_multileg_message then
    local range = buffer(offset, size_of_new_order_cross_multileg_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_multileg_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.fields(buffer, offset, packet, parent, size_of_new_order_cross_multileg_message)

  return offset + size_of_new_order_cross_multileg_message
end

-- New Order Complex Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message = {}

-- Read runtime size of: New Order Complex Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: New Order Complex Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Complex Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.fields = function(buffer, offset, packet, parent, size_of_new_order_complex_message)
  local index = offset

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: New Order Complex Optional Fields
  local size_of_new_order_complex_optional_fields = message_length - (index - offset) - 8

  -- New Order Complex Optional Fields
  index, new_order_complex_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_optional_fields.dissect(buffer, index, packet, parent, size_of_new_order_complex_optional_fields)

  return index
end

-- Dissect: New Order Complex Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_new_order_complex_message = cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.new_order_complex_message then
    local range = buffer(offset, size_of_new_order_complex_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_complex_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.fields(buffer, offset, packet, parent, size_of_new_order_complex_message)

  return offset + size_of_new_order_complex_message
end

-- New Order Cross Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4 = {}

-- Size Of: New Order Cross Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4.size = 1

-- Display: New Order Cross Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Reserved Bit 8 Exists|"
  end
  -- Is New Order Cross Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Reserved Bit 7 Exists|"
  end
  -- Is New Order Cross Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Reserved Bit 6 Exists|"
  end
  -- Is New Order Cross Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Reserved Bit 5 Exists|"
  end
  -- Is New Order Cross Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Reserved Bit 4 Exists|"
  end
  -- Is New Order Cross Frequent Trader Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Frequent Trader Id Exists|"
  end
  -- Is New Order Cross Ors Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Ors Exists|"
  end
  -- Is New Order Cross Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Cross Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Cross Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Cross Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Cross Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Cross Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_frequent_trader_id_exists, buffer(offset, 1))

  -- New Order Cross Ors Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_ors_exists, buffer(offset, 1))

  -- New Order Cross Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_4, range, display)

  if show.new_order_cross_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3 = {}

-- Size Of: New Order Cross Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3.size = 1

-- Display: New Order Cross Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Session Eligibility Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Session Eligibility Exists|"
  end
  -- Is New Order Cross Equity Sell Clearing Firm Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Equity Sell Clearing Firm Exists|"
  end
  -- Is New Order Cross Equity Buy Clearing Firm Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Equity Buy Clearing Firm Exists|"
  end
  -- Is New Order Cross Equity Transact Time Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Equity Transact Time Exists|"
  end
  -- Is New Order Cross Equity Trade Venue Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Equity Trade Venue Exists|"
  end
  -- Is New Order Cross Equity Trade Size Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Equity Trade Size Exists|"
  end
  -- Is New Order Cross Equity Trade Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Equity Trade Price Exists|"
  end
  -- Is New Order Cross Client Id Attr Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Client Id Attr Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Session Eligibility Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_session_eligibility_exists, buffer(offset, 1))

  -- New Order Cross Equity Sell Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_sell_clearing_firm_exists, buffer(offset, 1))

  -- New Order Cross Equity Buy Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_buy_clearing_firm_exists, buffer(offset, 1))

  -- New Order Cross Equity Transact Time Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_transact_time_exists, buffer(offset, 1))

  -- New Order Cross Equity Trade Venue Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_trade_venue_exists, buffer(offset, 1))

  -- New Order Cross Equity Trade Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_trade_size_exists, buffer(offset, 1))

  -- New Order Cross Equity Trade Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_equity_trade_price_exists, buffer(offset, 1))

  -- New Order Cross Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_client_id_attr_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_3, range, display)

  if show.new_order_cross_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2 = {}

-- Size Of: New Order Cross Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2.size = 1

-- Display: New Order Cross Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Clearing Optional Data Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Clearing Optional Data Exists|"
  end
  -- Is New Order Cross Routing Firm Id Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Routing Firm Id Exists|"
  end
  -- Is New Order Cross Clearing Account Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Clearing Account Exists|"
  end
  -- Is New Order Cross Cmta Number Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Cmta Number Exists|"
  end
  -- Is New Order Cross Account Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Account Exists|"
  end
  -- Is New Order Cross Last Priority Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Last Priority Exists|"
  end
  -- Is New Order Cross Auto Match Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Auto Match Price Exists|"
  end
  -- Is New Order Cross Auto Match Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Auto Match Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Clearing Optional Data Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_clearing_optional_data_exists, buffer(offset, 1))

  -- New Order Cross Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_routing_firm_id_exists, buffer(offset, 1))

  -- New Order Cross Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_clearing_account_exists, buffer(offset, 1))

  -- New Order Cross Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_cmta_number_exists, buffer(offset, 1))

  -- New Order Cross Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_account_exists, buffer(offset, 1))

  -- New Order Cross Last Priority Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_last_priority_exists, buffer(offset, 1))

  -- New Order Cross Auto Match Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_auto_match_price_exists, buffer(offset, 1))

  -- New Order Cross Auto Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_auto_match_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_2, range, display)

  if show.new_order_cross_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1 = {}

-- Size Of: New Order Cross Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1.size = 1

-- Display: New Order Cross Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Cross Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Cross Prevent Match Exists|"
  end
  -- Is New Order Cross Target Party Id Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Cross Target Party Id Exists|"
  end
  -- Is New Order Cross Attributed Quote Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cross Attributed Quote Exists|"
  end
  -- Is New Order Cross Exec Inst Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Cross Exec Inst Exists|"
  end
  -- Is New Order Cross Put Or Call Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Cross Put Or Call Exists|"
  end
  -- Is New Order Cross Strike Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Cross Strike Price Exists|"
  end
  -- Is New Order Cross Maturity Date Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Cross Maturity Date Exists|"
  end
  -- Is New Order Cross Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Cross Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Cross Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1.bits = function(buffer, offset, packet, parent)

  -- New Order Cross Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_prevent_match_exists, buffer(offset, 1))

  -- New Order Cross Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_target_party_id_exists, buffer(offset, 1))

  -- New Order Cross Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_attributed_quote_exists, buffer(offset, 1))

  -- New Order Cross Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_exec_inst_exists, buffer(offset, 1))

  -- New Order Cross Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_put_or_call_exists, buffer(offset, 1))

  -- New Order Cross Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_strike_price_exists, buffer(offset, 1))

  -- New Order Cross Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_maturity_date_exists, buffer(offset, 1))

  -- New Order Cross Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_symbol_exists, buffer(offset, 1))
end

-- Dissect: New Order Cross Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_byte_1, range, display)

  if show.new_order_cross_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Cross Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_bitfield_count = {}

-- Size Of: New Order Cross Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_bitfield_count.size = 1

-- Display: New Order Cross Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_bitfield_count.display = function(value)
  return "New Order Cross Bitfield Count: "..value
end

-- Dissect: New Order Cross Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_bitfield_count, range, value, display)

  return offset + length, value
end

-- New Order Cross Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields = {}

-- Display: New Order Cross Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Cross Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields.fields = function(buffer, offset, packet, parent, size_of_new_order_cross_optional_fields)
  local index = offset

  -- New Order Cross Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, new_order_cross_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: New Order Cross Byte 1
  local new_order_cross_byte_1 = nil

  local new_order_cross_byte_1_exists = new_order_cross_bitfield_count >= 1

  if new_order_cross_byte_1_exists then

    -- New Order Cross Byte 1: Struct of 8 fields
    index, new_order_cross_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Cross Byte 2
  local new_order_cross_byte_2 = nil

  local new_order_cross_byte_2_exists = new_order_cross_bitfield_count >= 2

  if new_order_cross_byte_2_exists then

    -- New Order Cross Byte 2: Struct of 8 fields
    index, new_order_cross_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Cross Byte 3
  local new_order_cross_byte_3 = nil

  local new_order_cross_byte_3_exists = new_order_cross_bitfield_count >= 3

  if new_order_cross_byte_3_exists then

    -- New Order Cross Byte 3: Struct of 8 fields
    index, new_order_cross_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Cross Byte 4
  local new_order_cross_byte_4 = nil

  local new_order_cross_byte_4_exists = new_order_cross_bitfield_count >= 4

  if new_order_cross_byte_4_exists then

    -- New Order Cross Byte 4: Struct of 8 fields
    index, new_order_cross_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(6) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(5) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(4) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(3) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(2) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(1) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = new_order_cross_bitfield_count >= 1 and new_order_cross_byte_1:bitfield(0) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auto Match
  local auto_match = nil

  local auto_match_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(7) > 0

  if auto_match_exists then
    index, auto_match = cboe_edgx_options_orderentry_boe_v2_10.auto_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auto Match Price
  local auto_match_price = nil

  local auto_match_price_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(6) > 0

  if auto_match_price_exists then
    index, auto_match_price = cboe_edgx_options_orderentry_boe_v2_10.auto_match_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Last Priority
  local last_priority = nil

  local last_priority_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(5) > 0

  if last_priority_exists then
    index, last_priority = cboe_edgx_options_orderentry_boe_v2_10.last_priority.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(4) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(3) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(2) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(1) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Optional Data
  local clearing_optional_data = nil

  local clearing_optional_data_exists = new_order_cross_bitfield_count >= 2 and new_order_cross_byte_2:bitfield(0) > 0

  if clearing_optional_data_exists then
    index, clearing_optional_data = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(7) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Trade Price
  local equity_trade_price = nil

  local equity_trade_price_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(6) > 0

  if equity_trade_price_exists then
    index, equity_trade_price = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Trade Size
  local equity_trade_size = nil

  local equity_trade_size_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(5) > 0

  if equity_trade_size_exists then
    index, equity_trade_size = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_size.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Trade Venue
  local equity_trade_venue = nil

  local equity_trade_venue_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(4) > 0

  if equity_trade_venue_exists then
    index, equity_trade_venue = cboe_edgx_options_orderentry_boe_v2_10.equity_trade_venue.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Transact Time
  local equity_transact_time = nil

  local equity_transact_time_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(3) > 0

  if equity_transact_time_exists then
    index, equity_transact_time = cboe_edgx_options_orderentry_boe_v2_10.equity_transact_time.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Buy Clearing Firm
  local equity_buy_clearing_firm = nil

  local equity_buy_clearing_firm_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(2) > 0

  if equity_buy_clearing_firm_exists then
    index, equity_buy_clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.equity_buy_clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Equity Sell Clearing Firm
  local equity_sell_clearing_firm = nil

  local equity_sell_clearing_firm_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(1) > 0

  if equity_sell_clearing_firm_exists then
    index, equity_sell_clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.equity_sell_clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Session Eligibility
  local session_eligibility = nil

  local session_eligibility_exists = new_order_cross_bitfield_count >= 3 and new_order_cross_byte_3:bitfield(0) > 0

  if session_eligibility_exists then
    index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ors
  local ors = nil

  local ors_exists = new_order_cross_bitfield_count >= 4 and new_order_cross_byte_4:bitfield(6) > 0

  if ors_exists then
    index, ors = cboe_edgx_options_orderentry_boe_v2_10.ors.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = new_order_cross_bitfield_count >= 4 and new_order_cross_byte_4:bitfield(5) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: New Order Cross Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_new_order_cross_optional_fields)
  local index = offset + size_of_new_order_cross_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.new_order_cross_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields.fields(buffer, offset, packet, parent, size_of_new_order_cross_optional_fields)
    parent:set_len(size_of_new_order_cross_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields.fields(buffer, offset, packet, parent, size_of_new_order_cross_optional_fields)

    return index
  end
end

-- New Order Cross Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message = {}

-- Read runtime size of: New Order Cross Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: New Order Cross Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Cross Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.fields = function(buffer, offset, packet, parent, size_of_new_order_cross_message)
  local index = offset

  -- Cross Id: 20 Byte Ascii String
  index, cross_id = cboe_edgx_options_orderentry_boe_v2_10.cross_id.dissect(buffer, index, packet, parent)

  -- Cross Type: 1 Byte Ascii String
  index, cross_type = cboe_edgx_options_orderentry_boe_v2_10.cross_type.dissect(buffer, index, packet, parent)

  -- Cross Prioritization: 1 Byte Ascii String Enum with 2 values
  index, cross_prioritization = cboe_edgx_options_orderentry_boe_v2_10.cross_prioritization.dissect(buffer, index, packet, parent)

  -- Price: 8 Byte Signed Fixed Width Integer
  index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: New Order Cross Optional Fields
  local size_of_new_order_cross_optional_fields = message_length - (index - offset) - 8

  -- New Order Cross Optional Fields: Struct of 31 fields
  index, new_order_cross_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_optional_fields.dissect(buffer, index, packet, parent, size_of_new_order_cross_optional_fields)

  return index
end

-- Dissect: New Order Cross Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_new_order_cross_message = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.new_order_cross_message then
    local range = buffer(offset, size_of_new_order_cross_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cross_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.fields(buffer, offset, packet, parent, size_of_new_order_cross_message)

  return offset + size_of_new_order_cross_message
end

-- Display Range
cboe_edgx_options_orderentry_boe_v2_10.display_range = {}

-- Size Of: Display Range
cboe_edgx_options_orderentry_boe_v2_10.display_range.size = 4

-- Display: Display Range
cboe_edgx_options_orderentry_boe_v2_10.display_range.display = function(value)
  return "Display Range: "..value
end

-- Dissect: Display Range
cboe_edgx_options_orderentry_boe_v2_10.display_range.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.display_range.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.display_range.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.display_range, range, value, display)

  return offset + length, value
end

-- New Order Byte 9
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9 = {}

-- Size Of: New Order Byte 9
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9.size = 1

-- Display: New Order Byte 9
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Price Type Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Price Type Exists|"
  end
  -- Is New Order Ors Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Ors Exists|"
  end
  -- Is New Order Order Origin Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Order Origin Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 9
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9.bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Price Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_price_type_exists, buffer(offset, 1))

  -- New Order Ors Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ors_exists, buffer(offset, 1))

  -- New Order Order Origin Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_order_origin_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 9
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_9, range, display)

  if show.new_order_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 8
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8 = {}

-- Size Of: New Order Byte 8
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8.size = 1

-- Display: New Order Byte 8
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Frequent Trader Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Frequent Trader Id Exists|"
  end
  -- Is New Order Client Id Attr Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Client Id Attr Exists|"
  end
  -- Is New Order Clearing Optional Data Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Clearing Optional Data Exists|"
  end
  -- Is New Order Custom Group Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Custom Group Id Exists|"
  end
  -- Is New Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 8
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8.bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_frequent_trader_id_exists, buffer(offset, 1))

  -- New Order Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_client_id_attr_exists, buffer(offset, 1))

  -- New Order Clearing Optional Data Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_clearing_optional_data_exists, buffer(offset, 1))

  -- New Order Custom Group Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_custom_group_id_exists, buffer(offset, 1))

  -- New Order Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 8
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_8, range, display)

  if show.new_order_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 7
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7 = {}

-- Size Of: New Order Byte 7
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7.size = 1

-- Display: New Order Byte 7
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Custom Group Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Custom Group Id Exists|"
  end
  -- Is New Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 7
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7.bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Custom Group Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_custom_group_id_exists, buffer(offset, 1))

  -- New Order Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 7
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_7, range, display)

  if show.new_order_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 6
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6 = {}

-- Size Of: New Order Byte 6
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6.size = 1

-- Display: New Order Byte 6
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Routing Firm Id Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Routing Firm Id Exists|"
  end
  -- Is New Order Auction Id Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Auction Id Exists|"
  end
  -- Is New Order Echo Text Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Echo Text Exists|"
  end
  -- Is New Order Ex Destination Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Ex Destination Exists|"
  end
  -- Is New Order Route Delivery Method Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Route Delivery Method Exists|"
  end
  -- Is New Order Rout Strategy Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Rout Strategy Exists|"
  end
  -- Is New Order Stop Px Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Stop Px Exists|"
  end
  -- Is New Order Display Range Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Display Range Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 6
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6.bits = function(buffer, offset, packet, parent)

  -- New Order Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_routing_firm_id_exists, buffer(offset, 1))

  -- New Order Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_auction_id_exists, buffer(offset, 1))

  -- New Order Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_echo_text_exists, buffer(offset, 1))

  -- New Order Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ex_destination_exists, buffer(offset, 1))

  -- New Order Route Delivery Method Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_route_delivery_method_exists, buffer(offset, 1))

  -- New Order Rout Strategy Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_rout_strategy_exists, buffer(offset, 1))

  -- New Order Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_stop_px_exists, buffer(offset, 1))

  -- New Order Display Range Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_display_range_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 6
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_6, range, display)

  if show.new_order_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5 = {}

-- Size Of: New Order Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5.size = 1

-- Display: New Order Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Ext Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Ext Exec Inst Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Attributed Quote Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Attributed Quote Exists|"
  end
  -- Is New Order Session Eligibility Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Session Eligibility Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5.bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Ext Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ext_exec_inst_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_attributed_quote_exists, buffer(offset, 1))

  -- New Order Session Eligibility Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_session_eligibility_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 5
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_5, range, display)

  if show.new_order_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4 = {}

-- Size Of: New Order Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4.size = 1

-- Display: New Order Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Target Party Id Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Target Party Id Exists|"
  end
  -- Is New Order Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cmta Number Exists|"
  end
  -- Is New Order Open Close Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Open Close Exists|"
  end
  -- Is New Order Risk Reset Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Risk Reset Exists|"
  end
  -- Is New Order Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Put Or Call Exists|"
  end
  -- Is New Order Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Strike Price Exists|"
  end
  -- Is New Order Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4.bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_target_party_id_exists, buffer(offset, 1))

  -- New Order Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_cmta_number_exists, buffer(offset, 1))

  -- New Order Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_open_close_exists, buffer(offset, 1))

  -- New Order Risk Reset Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_risk_reset_exists, buffer(offset, 1))

  -- New Order Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_put_or_call_exists, buffer(offset, 1))

  -- New Order Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_strike_price_exists, buffer(offset, 1))

  -- New Order Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 4
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_4, range, display)

  if show.new_order_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3 = {}

-- Size Of: New Order Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3.size = 1

-- Display: New Order Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Expire Time Exists|"
  end
  -- Is New Order Locate Reqd Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Locate Reqd Exists|"
  end
  -- Is New Order Prevent Match Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Prevent Match Exists|"
  end
  -- Is New Order Peg Difference Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Peg Difference Exists|"
  end
  -- Is New Order Discretion Amount Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Discretion Amount Exists|"
  end
  -- Is New Order Max Remove Pct Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Max Remove Pct Exists|"
  end
  -- Is New Order Display Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Display Indicator Exists|"
  end
  -- Is New Order Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3.bits = function(buffer, offset, packet, parent)

  -- New Order Expire Time Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_expire_time_exists, buffer(offset, 1))

  -- New Order Locate Reqd Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_locate_reqd_exists, buffer(offset, 1))

  -- New Order Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_prevent_match_exists, buffer(offset, 1))

  -- New Order Peg Difference Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_peg_difference_exists, buffer(offset, 1))

  -- New Order Discretion Amount Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_discretion_amount_exists, buffer(offset, 1))

  -- New Order Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_max_remove_pct_exists, buffer(offset, 1))

  -- New Order Display Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_display_indicator_exists, buffer(offset, 1))

  -- New Order Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_account_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 3
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_3, range, display)

  if show.new_order_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2 = {}

-- Size Of: New Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2.size = 1

-- Display: New Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Routing Inst Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Routing Inst Exists|"
  end
  -- Is New Order Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Capacity Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Symbol Sfx Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Symbol Sfx Exists|"
  end
  -- Is New Order Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2.bits = function(buffer, offset, packet, parent)

  -- New Order Routing Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_routing_inst_exists, buffer(offset, 1))

  -- New Order Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_capacity_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Symbol Sfx Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_symbol_sfx_exists, buffer(offset, 1))

  -- New Order Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_symbol_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 2
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_2, range, display)

  if show.new_order_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1 = {}

-- Size Of: New Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1.size = 1

-- Display: New Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Max Floor Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Max Floor Exists|"
  end
  -- Is New Order Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Min Qty Exists|"
  end
  -- Is New Order Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Time In Force Exists|"
  end
  -- Is New Order Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Ord Type Exists|"
  end
  -- Is New Order Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Exec Inst Exists|"
  end
  -- Is New Order Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Price Exists|"
  end
  -- Is New Order Clearing Account Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Clearing Account Exists|"
  end
  -- Is New Order Clearing Firm Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Clearing Firm Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1.bits = function(buffer, offset, packet, parent)

  -- New Order Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_max_floor_exists, buffer(offset, 1))

  -- New Order Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_min_qty_exists, buffer(offset, 1))

  -- New Order Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_time_in_force_exists, buffer(offset, 1))

  -- New Order Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_ord_type_exists, buffer(offset, 1))

  -- New Order Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_exec_inst_exists, buffer(offset, 1))

  -- New Order Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_price_exists, buffer(offset, 1))

  -- New Order Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_clearing_account_exists, buffer(offset, 1))

  -- New Order Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_clearing_firm_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 1
cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_byte_1, range, display)

  if show.new_order_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- New Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_bitfield_count = {}

-- Size Of: New Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_bitfield_count.size = 1

-- Display: New Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_bitfield_count.display = function(value)
  return "New Order Bitfield Count: "..value
end

-- Dissect: New Order Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.new_order_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.new_order_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_bitfield_count, range, value, display)

  return offset + length, value
end

-- New Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields = {}

-- Display: New Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields.fields = function(buffer, offset, packet, parent, size_of_new_order_optional_fields)
  local index = offset

  -- New Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, new_order_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.new_order_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: New Order Byte 1
  local new_order_byte_1 = nil

  local new_order_byte_1_exists = new_order_bitfield_count >= 1

  if new_order_byte_1_exists then

    -- New Order Byte 1: Struct of 8 fields
    index, new_order_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 2
  local new_order_byte_2 = nil

  local new_order_byte_2_exists = new_order_bitfield_count >= 2

  if new_order_byte_2_exists then

    -- New Order Byte 2: Struct of 8 fields
    index, new_order_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 3
  local new_order_byte_3 = nil

  local new_order_byte_3_exists = new_order_bitfield_count >= 3

  if new_order_byte_3_exists then

    -- New Order Byte 3: Struct of 8 fields
    index, new_order_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 4
  local new_order_byte_4 = nil

  local new_order_byte_4_exists = new_order_bitfield_count >= 4

  if new_order_byte_4_exists then

    -- New Order Byte 4: Struct of 8 fields
    index, new_order_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 5
  local new_order_byte_5 = nil

  local new_order_byte_5_exists = new_order_bitfield_count >= 5

  if new_order_byte_5_exists then

    -- New Order Byte 5: Struct of 8 fields
    index, new_order_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 6
  local new_order_byte_6 = nil

  local new_order_byte_6_exists = new_order_bitfield_count >= 6

  if new_order_byte_6_exists then

    -- New Order Byte 6: Struct of 8 fields
    index, new_order_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 7
  local new_order_byte_7 = nil

  local new_order_byte_7_exists = new_order_bitfield_count >= 7

  if new_order_byte_7_exists then

    -- New Order Byte 7: Struct of 8 fields
    index, new_order_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 8
  local new_order_byte_8 = nil

  local new_order_byte_8_exists = new_order_bitfield_count >= 8

  if new_order_byte_8_exists then

    -- New Order Byte 8: Struct of 8 fields
    index, new_order_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: New Order Byte 9
  local new_order_byte_9 = nil

  local new_order_byte_9_exists = new_order_bitfield_count >= 9

  if new_order_byte_9_exists then

    -- New Order Byte 9: Struct of 8 fields
    index, new_order_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.new_order_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Firm
  local clearing_firm = nil

  local clearing_firm_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(7) > 0

  if clearing_firm_exists then
    index, clearing_firm = cboe_edgx_options_orderentry_boe_v2_10.clearing_firm.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Account
  local clearing_account = nil

  local clearing_account_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(6) > 0

  if clearing_account_exists then
    index, clearing_account = cboe_edgx_options_orderentry_boe_v2_10.clearing_account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price
  local price = nil

  local price_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(5) > 0

  if price_exists then
    index, price = cboe_edgx_options_orderentry_boe_v2_10.price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Exec Inst
  local exec_inst = nil

  local exec_inst_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(4) > 0

  if exec_inst_exists then
    index, exec_inst = cboe_edgx_options_orderentry_boe_v2_10.exec_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ord Type
  local ord_type = nil

  local ord_type_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(3) > 0

  if ord_type_exists then
    index, ord_type = cboe_edgx_options_orderentry_boe_v2_10.ord_type.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Time In Force
  local time_in_force = nil

  local time_in_force_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(2) > 0

  if time_in_force_exists then
    index, time_in_force = cboe_edgx_options_orderentry_boe_v2_10.time_in_force.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Min Qty
  local min_qty = nil

  local min_qty_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(1) > 0

  if min_qty_exists then
    index, min_qty = cboe_edgx_options_orderentry_boe_v2_10.min_qty.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Floor
  local max_floor = nil

  local max_floor_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(0) > 0

  if max_floor_exists then
    index, max_floor = cboe_edgx_options_orderentry_boe_v2_10.max_floor.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Symbol
  local symbol = nil

  local symbol_exists = new_order_bitfield_count >= 2 and new_order_byte_2:bitfield(7) > 0

  if symbol_exists then
    index, symbol = cboe_edgx_options_orderentry_boe_v2_10.symbol.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Capacity
  local capacity = nil

  local capacity_exists = new_order_bitfield_count >= 2 and new_order_byte_2:bitfield(1) > 0

  if capacity_exists then
    index, capacity = cboe_edgx_options_orderentry_boe_v2_10.capacity.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Inst
  local routing_inst = nil

  local routing_inst_exists = new_order_bitfield_count >= 2 and new_order_byte_2:bitfield(0) > 0

  if routing_inst_exists then
    index, routing_inst = cboe_edgx_options_orderentry_boe_v2_10.routing_inst.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Account
  local account = nil

  local account_exists = new_order_bitfield_count >= 3 and new_order_byte_3:bitfield(7) > 0

  if account_exists then
    index, account = cboe_edgx_options_orderentry_boe_v2_10.account.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Indicator
  local display_indicator = nil

  local display_indicator_exists = new_order_bitfield_count >= 3 and new_order_byte_3:bitfield(6) > 0

  if display_indicator_exists then
    index, display_indicator = cboe_edgx_options_orderentry_boe_v2_10.display_indicator.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Max Remove Pct
  local max_remove_pct = nil

  local max_remove_pct_exists = new_order_bitfield_count >= 3 and new_order_byte_3:bitfield(5) > 0

  if max_remove_pct_exists then
    index, max_remove_pct = cboe_edgx_options_orderentry_boe_v2_10.max_remove_pct.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Prevent Match
  local prevent_match = nil

  local prevent_match_exists = new_order_bitfield_count >= 3 and new_order_byte_3:bitfield(2) > 0

  if prevent_match_exists then
    index, prevent_match = cboe_edgx_options_orderentry_boe_v2_10.prevent_match.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Maturity Date
  local maturity_date = nil

  local maturity_date_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(7) > 0

  if maturity_date_exists then
    index, maturity_date = cboe_edgx_options_orderentry_boe_v2_10.maturity_date.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Strike Price
  local strike_price = nil

  local strike_price_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(6) > 0

  if strike_price_exists then
    index, strike_price = cboe_edgx_options_orderentry_boe_v2_10.strike_price.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Put Or Call
  local put_or_call = nil

  local put_or_call_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(5) > 0

  if put_or_call_exists then
    index, put_or_call = cboe_edgx_options_orderentry_boe_v2_10.put_or_call.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Risk Reset
  local risk_reset = nil

  local risk_reset_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(4) > 0

  if risk_reset_exists then
    index, risk_reset = cboe_edgx_options_orderentry_boe_v2_10.risk_reset.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Open Close
  local open_close = nil

  local open_close_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(3) > 0

  if open_close_exists then
    index, open_close = cboe_edgx_options_orderentry_boe_v2_10.open_close.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cmta Number
  local cmta_number = nil

  local cmta_number_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(2) > 0

  if cmta_number_exists then
    index, cmta_number = cboe_edgx_options_orderentry_boe_v2_10.cmta_number.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Target Party Id
  local target_party_id = nil

  local target_party_id_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(1) > 0

  if target_party_id_exists then
    index, target_party_id = cboe_edgx_options_orderentry_boe_v2_10.target_party_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Session Eligibility
  local session_eligibility = nil

  local session_eligibility_exists = new_order_bitfield_count >= 5 and new_order_byte_5:bitfield(7) > 0

  if session_eligibility_exists then
    index, session_eligibility = cboe_edgx_options_orderentry_boe_v2_10.session_eligibility.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Attributed Quote
  local attributed_quote = nil

  local attributed_quote_exists = new_order_bitfield_count >= 5 and new_order_byte_5:bitfield(6) > 0

  if attributed_quote_exists then
    index, attributed_quote = cboe_edgx_options_orderentry_boe_v2_10.attributed_quote.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Display Range
  local display_range = nil

  local display_range_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(7) > 0

  if display_range_exists then
    index, display_range = cboe_edgx_options_orderentry_boe_v2_10.display_range.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Stop Px
  local stop_px = nil

  local stop_px_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(6) > 0

  if stop_px_exists then
    index, stop_px = cboe_edgx_options_orderentry_boe_v2_10.stop_px.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Rout Strategy
  local rout_strategy = nil

  local rout_strategy_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(5) > 0

  if rout_strategy_exists then
    index, rout_strategy = cboe_edgx_options_orderentry_boe_v2_10.rout_strategy.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Route Delivery Method
  local route_delivery_method = nil

  local route_delivery_method_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(4) > 0

  if route_delivery_method_exists then
    index, route_delivery_method = cboe_edgx_options_orderentry_boe_v2_10.route_delivery_method.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ex Destination
  local ex_destination = nil

  local ex_destination_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(3) > 0

  if ex_destination_exists then
    index, ex_destination = cboe_edgx_options_orderentry_boe_v2_10.ex_destination.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Echo Text
  local echo_text = nil

  local echo_text_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(2) > 0

  if echo_text_exists then
    index, echo_text = cboe_edgx_options_orderentry_boe_v2_10.echo_text.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Auction Id
  local auction_id = nil

  local auction_id_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(1) > 0

  if auction_id_exists then
    index, auction_id = cboe_edgx_options_orderentry_boe_v2_10.auction_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Routing Firm Id
  local routing_firm_id = nil

  local routing_firm_id_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(0) > 0

  if routing_firm_id_exists then
    index, routing_firm_id = cboe_edgx_options_orderentry_boe_v2_10.routing_firm_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Custom Group Id
  local custom_group_id = nil

  local custom_group_id_exists = new_order_bitfield_count >= 7 and new_order_byte_8:bitfield(6) > 0

  if custom_group_id_exists then
    index, custom_group_id = cboe_edgx_options_orderentry_boe_v2_10.custom_group_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Clearing Optional Data
  local clearing_optional_data = nil

  local clearing_optional_data_exists = new_order_bitfield_count >= 8 and new_order_byte_8:bitfield(5) > 0

  if clearing_optional_data_exists then
    index, clearing_optional_data = cboe_edgx_options_orderentry_boe_v2_10.clearing_optional_data.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Client Id Attr
  local client_id_attr = nil

  local client_id_attr_exists = new_order_bitfield_count >= 8 and new_order_byte_8:bitfield(4) > 0

  if client_id_attr_exists then
    index, client_id_attr = cboe_edgx_options_orderentry_boe_v2_10.client_id_attr.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Frequent Trader Id
  local frequent_trader_id = nil

  local frequent_trader_id_exists = new_order_bitfield_count >= 8 and new_order_byte_8:bitfield(3) > 0

  if frequent_trader_id_exists then
    index, frequent_trader_id = cboe_edgx_options_orderentry_boe_v2_10.frequent_trader_id.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Origin
  local order_origin = nil

  local order_origin_exists = new_order_bitfield_count >= 9 and new_order_byte_9:bitfield(7) > 0

  if order_origin_exists then
    index, order_origin = cboe_edgx_options_orderentry_boe_v2_10.order_origin.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Ors
  local ors = nil

  local ors_exists = new_order_bitfield_count >= 9 and new_order_byte_9:bitfield(6) > 0

  if ors_exists then
    index, ors = cboe_edgx_options_orderentry_boe_v2_10.ors.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Price Type
  local price_type = nil

  local price_type_exists = new_order_bitfield_count >= 9 and new_order_byte_9:bitfield(5) > 0

  if price_type_exists then
    index, price_type = cboe_edgx_options_orderentry_boe_v2_10.price_type.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: New Order Optional Fields
cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields.dissect = function(buffer, offset, packet, parent, size_of_new_order_optional_fields)
  local index = offset + size_of_new_order_optional_fields

  -- Optionally add group/struct element to protocol tree
  if show.new_order_optional_fields then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_optional_fields, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields.fields(buffer, offset, packet, parent, size_of_new_order_optional_fields)
    parent:set_len(size_of_new_order_optional_fields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields.fields(buffer, offset, packet, parent, size_of_new_order_optional_fields)

    return index
  end
end

-- New Order Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_message = {}

-- Read runtime size of: New Order Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: New Order Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_message.fields = function(buffer, offset, packet, parent, size_of_new_order_message)
  local index = offset

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_edgx_options_orderentry_boe_v2_10.cl_ord_id.dissect(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 6 values
  index, side = cboe_edgx_options_orderentry_boe_v2_10.side.dissect(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_edgx_options_orderentry_boe_v2_10.order_qty.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: New Order Optional Fields
  local size_of_new_order_optional_fields = message_length - (index - offset) - 8

  -- New Order Optional Fields: Struct of 49 fields
  index, new_order_optional_fields = cboe_edgx_options_orderentry_boe_v2_10.new_order_optional_fields.dissect(buffer, index, packet, parent, size_of_new_order_optional_fields)

  return index
end

-- Dissect: New Order Message
cboe_edgx_options_orderentry_boe_v2_10.new_order_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_new_order_message = cboe_edgx_options_orderentry_boe_v2_10.new_order_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.new_order_message then
    local range = buffer(offset, size_of_new_order_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.new_order_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.new_order_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.new_order_message.fields(buffer, offset, packet, parent, size_of_new_order_message)

  return offset + size_of_new_order_message
end

-- Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.sequence_number = {}

-- Size Of: Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.sequence_number.size = 4

-- Display: Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.sequence_number.display = function(value)
  return "Sequence Number: "..value
end

-- Dissect: Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.sequence_number.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.sequence_number.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.sequence_number.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.sequence_number, range, value, display)

  return offset + length, value
end

-- Unit Number
cboe_edgx_options_orderentry_boe_v2_10.unit_number = {}

-- Size Of: Unit Number
cboe_edgx_options_orderentry_boe_v2_10.unit_number.size = 1

-- Display: Unit Number
cboe_edgx_options_orderentry_boe_v2_10.unit_number.display = function(value)
  return "Unit Number: "..value
end

-- Dissect: Unit Number
cboe_edgx_options_orderentry_boe_v2_10.unit_number.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.unit_number.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.unit_number.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_number, range, value, display)

  return offset + length, value
end

-- Unit Sequence
cboe_edgx_options_orderentry_boe_v2_10.unit_sequence = {}

-- Size Of: Unit Sequence
cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.size =
  cboe_edgx_options_orderentry_boe_v2_10.unit_number.size + 
  cboe_edgx_options_orderentry_boe_v2_10.sequence_number.size;

-- Display: Unit Sequence
cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Unit Sequence
cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.fields = function(buffer, offset, packet, parent, unit_sequence_index)
  local index = offset

  -- Implicit Unit Sequence Index
  if unit_sequence_index ~= nil then
    local iteration = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_sequence_index, unit_sequence_index)
    iteration:set_generated()
  end

  -- Unit Number: 1 Byte Unsigned Fixed Width Integer
  index, unit_number = cboe_edgx_options_orderentry_boe_v2_10.unit_number.dissect(buffer, index, packet, parent)

  -- Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, sequence_number = cboe_edgx_options_orderentry_boe_v2_10.sequence_number.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Unit Sequence
cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.dissect = function(buffer, offset, packet, parent, unit_sequence_index)
  if show.unit_sequence then
    -- Optionally add element to protocol tree
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_sequence, buffer(offset, 0))
    local index = cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.fields(buffer, offset, packet, parent, unit_sequence_index)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.display(packet, parent, length)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    return cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.fields(buffer, offset, packet, parent, unit_sequence_index)
  end
end

-- Number Of Units
cboe_edgx_options_orderentry_boe_v2_10.number_of_units = {}

-- Size Of: Number Of Units
cboe_edgx_options_orderentry_boe_v2_10.number_of_units.size = 1

-- Display: Number Of Units
cboe_edgx_options_orderentry_boe_v2_10.number_of_units.display = function(value)
  return "Number Of Units: "..value
end

-- Dissect: Number Of Units
cboe_edgx_options_orderentry_boe_v2_10.number_of_units.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.number_of_units.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.number_of_units.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_units, range, value, display)

  return offset + length, value
end

-- Last Received Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number = {}

-- Size Of: Last Received Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number.size = 4

-- Display: Last Received Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number.display = function(value)
  return "Last Received Sequence Number: "..value
end

-- Dissect: Last Received Sequence Number
cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.last_received_sequence_number, range, value, display)

  return offset + length, value
end

-- Logout Reason Text
cboe_edgx_options_orderentry_boe_v2_10.logout_reason_text = {}

-- Size Of: Logout Reason Text
cboe_edgx_options_orderentry_boe_v2_10.logout_reason_text.size = 60

-- Display: Logout Reason Text
cboe_edgx_options_orderentry_boe_v2_10.logout_reason_text.display = function(value)
  return "Logout Reason Text: "..value
end

-- Dissect: Logout Reason Text
cboe_edgx_options_orderentry_boe_v2_10.logout_reason_text.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.logout_reason_text.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.logout_reason_text.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.logout_reason_text, range, value, display)

  return offset + length, value
end

-- Logout Reason
cboe_edgx_options_orderentry_boe_v2_10.logout_reason = {}

-- Size Of: Logout Reason
cboe_edgx_options_orderentry_boe_v2_10.logout_reason.size = 1

-- Display: Logout Reason
cboe_edgx_options_orderentry_boe_v2_10.logout_reason.display = function(value)
  if value == "U" then
    return "Logout Reason: User Requested (U)"
  end
  if value == "E" then
    return "Logout Reason: End Of Day (E)"
  end
  if value == "A" then
    return "Logout Reason: Administrative (A)"
  end
  if value == "!" then
    return "Logout Reason: Protocol Violation (!)"
  end

  return "Logout Reason: Unknown("..value..")"
end

-- Dissect: Logout Reason
cboe_edgx_options_orderentry_boe_v2_10.logout_reason.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.logout_reason.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.logout_reason.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.logout_reason, range, value, display)

  return offset + length, value
end

-- Logout Message
cboe_edgx_options_orderentry_boe_v2_10.logout_message = {}

-- Read runtime size of: Logout Message
cboe_edgx_options_orderentry_boe_v2_10.logout_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Logout Message
cboe_edgx_options_orderentry_boe_v2_10.logout_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Logout Message
cboe_edgx_options_orderentry_boe_v2_10.logout_message.fields = function(buffer, offset, packet, parent, size_of_logout_message)
  local index = offset

  -- Logout Reason: 1 Byte Ascii String Enum with 4 values
  index, logout_reason = cboe_edgx_options_orderentry_boe_v2_10.logout_reason.dissect(buffer, index, packet, parent)

  -- Logout Reason Text: 60 Byte Ascii String
  index, logout_reason_text = cboe_edgx_options_orderentry_boe_v2_10.logout_reason_text.dissect(buffer, index, packet, parent)

  -- Last Received Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, last_received_sequence_number = cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number.dissect(buffer, index, packet, parent)

  -- Number Of Units: 1 Byte Unsigned Fixed Width Integer
  index, number_of_units = cboe_edgx_options_orderentry_boe_v2_10.number_of_units.dissect(buffer, index, packet, parent)

  -- Repeating: Unit Sequence
  for unit_sequence_index = 1, number_of_units do
    index, unit_sequence = cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.dissect(buffer, index, packet, parent, unit_sequence_index)
  end

  return index
end

-- Dissect: Logout Message
cboe_edgx_options_orderentry_boe_v2_10.logout_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_logout_message = cboe_edgx_options_orderentry_boe_v2_10.logout_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.logout_message then
    local range = buffer(offset, size_of_logout_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.logout_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.logout_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.logout_message.fields(buffer, offset, packet, parent, size_of_logout_message)

  return offset + size_of_logout_message
end

-- Complex Instrument Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields = {}

-- Read runtime size of: Complex Instrument Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Complex Instrument Rejected Bitfield Count
  local complex_instrument_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return complex_instrument_rejected_bitfield_count + 1
end

-- Display: Complex Instrument Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Complex Instrument Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_complex_instrument_rejected_return_bitfields)
  local index = offset

  -- Complex Instrument Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, complex_instrument_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Complex Instrument Rejected Byte 1
  local complex_instrument_rejected_byte_1 = nil

  local complex_instrument_rejected_byte_1_exists = complex_instrument_rejected_bitfield_count >= 1

  if complex_instrument_rejected_byte_1_exists then

    -- Complex Instrument Rejected Byte 1: Struct of 8 fields
    index, complex_instrument_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 2
  local complex_instrument_rejected_byte_2 = nil

  local complex_instrument_rejected_byte_2_exists = complex_instrument_rejected_bitfield_count >= 2

  if complex_instrument_rejected_byte_2_exists then

    -- Complex Instrument Rejected Byte 2: Struct of 8 fields
    index, complex_instrument_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 3
  local complex_instrument_rejected_byte_3 = nil

  local complex_instrument_rejected_byte_3_exists = complex_instrument_rejected_bitfield_count >= 3

  if complex_instrument_rejected_byte_3_exists then

    -- Complex Instrument Rejected Byte 3: Struct of 8 fields
    index, complex_instrument_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 4
  local complex_instrument_rejected_byte_4 = nil

  local complex_instrument_rejected_byte_4_exists = complex_instrument_rejected_bitfield_count >= 4

  if complex_instrument_rejected_byte_4_exists then

    -- Complex Instrument Rejected Byte 4: Struct of 8 fields
    index, complex_instrument_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 5
  local complex_instrument_rejected_byte_5 = nil

  local complex_instrument_rejected_byte_5_exists = complex_instrument_rejected_bitfield_count >= 5

  if complex_instrument_rejected_byte_5_exists then

    -- Complex Instrument Rejected Byte 5: Struct of 8 fields
    index, complex_instrument_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 6
  local complex_instrument_rejected_byte_6 = nil

  local complex_instrument_rejected_byte_6_exists = complex_instrument_rejected_bitfield_count >= 6

  if complex_instrument_rejected_byte_6_exists then

    -- Complex Instrument Rejected Byte 6: Struct of 8 fields
    index, complex_instrument_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 7
  local complex_instrument_rejected_byte_7 = nil

  local complex_instrument_rejected_byte_7_exists = complex_instrument_rejected_bitfield_count >= 7

  if complex_instrument_rejected_byte_7_exists then

    -- Complex Instrument Rejected Byte 7: Struct of 8 fields
    index, complex_instrument_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 8
  local complex_instrument_rejected_byte_8 = nil

  local complex_instrument_rejected_byte_8_exists = complex_instrument_rejected_bitfield_count >= 8

  if complex_instrument_rejected_byte_8_exists then

    -- Complex Instrument Rejected Byte 8: Struct of 8 fields
    index, complex_instrument_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 9
  local complex_instrument_rejected_byte_9 = nil

  local complex_instrument_rejected_byte_9_exists = complex_instrument_rejected_bitfield_count >= 9

  if complex_instrument_rejected_byte_9_exists then

    -- Complex Instrument Rejected Byte 9: Struct of 8 fields
    index, complex_instrument_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 10
  local complex_instrument_rejected_byte_10 = nil

  local complex_instrument_rejected_byte_10_exists = complex_instrument_rejected_bitfield_count >= 10

  if complex_instrument_rejected_byte_10_exists then

    -- Complex Instrument Rejected Byte 10: Struct of 8 fields
    index, complex_instrument_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 11
  local complex_instrument_rejected_byte_11 = nil

  local complex_instrument_rejected_byte_11_exists = complex_instrument_rejected_bitfield_count >= 11

  if complex_instrument_rejected_byte_11_exists then

    -- Complex Instrument Rejected Byte 11: Struct of 8 fields
    index, complex_instrument_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 12
  local complex_instrument_rejected_byte_12 = nil

  local complex_instrument_rejected_byte_12_exists = complex_instrument_rejected_bitfield_count >= 12

  if complex_instrument_rejected_byte_12_exists then

    -- Complex Instrument Rejected Byte 12: Struct of 8 fields
    index, complex_instrument_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 13
  local complex_instrument_rejected_byte_13 = nil

  local complex_instrument_rejected_byte_13_exists = complex_instrument_rejected_bitfield_count >= 13

  if complex_instrument_rejected_byte_13_exists then

    -- Complex Instrument Rejected Byte 13: Struct of 8 fields
    index, complex_instrument_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 14
  local complex_instrument_rejected_byte_14 = nil

  local complex_instrument_rejected_byte_14_exists = complex_instrument_rejected_bitfield_count >= 14

  if complex_instrument_rejected_byte_14_exists then

    -- Complex Instrument Rejected Byte 14: Struct of 8 fields
    index, complex_instrument_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 15
  local complex_instrument_rejected_byte_15 = nil

  local complex_instrument_rejected_byte_15_exists = complex_instrument_rejected_bitfield_count >= 15

  if complex_instrument_rejected_byte_15_exists then

    -- Complex Instrument Rejected Byte 15: Struct of 8 fields
    index, complex_instrument_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 16
  local complex_instrument_rejected_byte_16 = nil

  local complex_instrument_rejected_byte_16_exists = complex_instrument_rejected_bitfield_count >= 16

  if complex_instrument_rejected_byte_16_exists then

    -- Complex Instrument Rejected Byte 16: Struct of 8 fields
    index, complex_instrument_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Rejected Byte 17
  local complex_instrument_rejected_byte_17 = nil

  local complex_instrument_rejected_byte_17_exists = complex_instrument_rejected_bitfield_count >= 17

  if complex_instrument_rejected_byte_17_exists then

    -- Complex Instrument Rejected Byte 17: Struct of 8 fields
    index, complex_instrument_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Complex Instrument Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_complex_instrument_rejected_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.complex_instrument_rejected_return_bitfields then
    local range = buffer(offset, size_of_complex_instrument_rejected_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_rejected_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.fields(buffer, offset, packet, parent, size_of_complex_instrument_rejected_return_bitfields)

  return offset + size_of_complex_instrument_rejected_return_bitfields
end

-- Complex Instrument Accepted Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields = {}

-- Read runtime size of: Complex Instrument Accepted Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Complex Instrument Accepted Bitfield Count
  local complex_instrument_accepted_bitfield_count = buffer(offset, 1):le_uint()

  return complex_instrument_accepted_bitfield_count + 1
end

-- Display: Complex Instrument Accepted Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Complex Instrument Accepted Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_complex_instrument_accepted_return_bitfields)
  local index = offset

  -- Complex Instrument Accepted Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, complex_instrument_accepted_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Complex Instrument Accepted Byte 1
  local complex_instrument_accepted_byte_1 = nil

  local complex_instrument_accepted_byte_1_exists = complex_instrument_accepted_bitfield_count >= 1

  if complex_instrument_accepted_byte_1_exists then

    -- Complex Instrument Accepted Byte 1: Struct of 8 fields
    index, complex_instrument_accepted_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 2
  local complex_instrument_accepted_byte_2 = nil

  local complex_instrument_accepted_byte_2_exists = complex_instrument_accepted_bitfield_count >= 2

  if complex_instrument_accepted_byte_2_exists then

    -- Complex Instrument Accepted Byte 2: Struct of 8 fields
    index, complex_instrument_accepted_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 3
  local complex_instrument_accepted_byte_3 = nil

  local complex_instrument_accepted_byte_3_exists = complex_instrument_accepted_bitfield_count >= 3

  if complex_instrument_accepted_byte_3_exists then

    -- Complex Instrument Accepted Byte 3: Struct of 8 fields
    index, complex_instrument_accepted_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 4
  local complex_instrument_accepted_byte_4 = nil

  local complex_instrument_accepted_byte_4_exists = complex_instrument_accepted_bitfield_count >= 4

  if complex_instrument_accepted_byte_4_exists then

    -- Complex Instrument Accepted Byte 4: Struct of 8 fields
    index, complex_instrument_accepted_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 5
  local complex_instrument_accepted_byte_5 = nil

  local complex_instrument_accepted_byte_5_exists = complex_instrument_accepted_bitfield_count >= 5

  if complex_instrument_accepted_byte_5_exists then

    -- Complex Instrument Accepted Byte 5: Struct of 8 fields
    index, complex_instrument_accepted_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 6
  local complex_instrument_accepted_byte_6 = nil

  local complex_instrument_accepted_byte_6_exists = complex_instrument_accepted_bitfield_count >= 6

  if complex_instrument_accepted_byte_6_exists then

    -- Complex Instrument Accepted Byte 6: Struct of 8 fields
    index, complex_instrument_accepted_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 7
  local complex_instrument_accepted_byte_7 = nil

  local complex_instrument_accepted_byte_7_exists = complex_instrument_accepted_bitfield_count >= 7

  if complex_instrument_accepted_byte_7_exists then

    -- Complex Instrument Accepted Byte 7: Struct of 8 fields
    index, complex_instrument_accepted_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 8
  local complex_instrument_accepted_byte_8 = nil

  local complex_instrument_accepted_byte_8_exists = complex_instrument_accepted_bitfield_count >= 8

  if complex_instrument_accepted_byte_8_exists then

    -- Complex Instrument Accepted Byte 8: Struct of 8 fields
    index, complex_instrument_accepted_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 9
  local complex_instrument_accepted_byte_9 = nil

  local complex_instrument_accepted_byte_9_exists = complex_instrument_accepted_bitfield_count >= 9

  if complex_instrument_accepted_byte_9_exists then

    -- Complex Instrument Accepted Byte 9: Struct of 8 fields
    index, complex_instrument_accepted_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 10
  local complex_instrument_accepted_byte_10 = nil

  local complex_instrument_accepted_byte_10_exists = complex_instrument_accepted_bitfield_count >= 10

  if complex_instrument_accepted_byte_10_exists then

    -- Complex Instrument Accepted Byte 10: Struct of 8 fields
    index, complex_instrument_accepted_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 11
  local complex_instrument_accepted_byte_11 = nil

  local complex_instrument_accepted_byte_11_exists = complex_instrument_accepted_bitfield_count >= 11

  if complex_instrument_accepted_byte_11_exists then

    -- Complex Instrument Accepted Byte 11: Struct of 8 fields
    index, complex_instrument_accepted_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 12
  local complex_instrument_accepted_byte_12 = nil

  local complex_instrument_accepted_byte_12_exists = complex_instrument_accepted_bitfield_count >= 12

  if complex_instrument_accepted_byte_12_exists then

    -- Complex Instrument Accepted Byte 12: Struct of 8 fields
    index, complex_instrument_accepted_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 13
  local complex_instrument_accepted_byte_13 = nil

  local complex_instrument_accepted_byte_13_exists = complex_instrument_accepted_bitfield_count >= 13

  if complex_instrument_accepted_byte_13_exists then

    -- Complex Instrument Accepted Byte 13: Struct of 8 fields
    index, complex_instrument_accepted_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 14
  local complex_instrument_accepted_byte_14 = nil

  local complex_instrument_accepted_byte_14_exists = complex_instrument_accepted_bitfield_count >= 14

  if complex_instrument_accepted_byte_14_exists then

    -- Complex Instrument Accepted Byte 14: Struct of 8 fields
    index, complex_instrument_accepted_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 15
  local complex_instrument_accepted_byte_15 = nil

  local complex_instrument_accepted_byte_15_exists = complex_instrument_accepted_bitfield_count >= 15

  if complex_instrument_accepted_byte_15_exists then

    -- Complex Instrument Accepted Byte 15: Struct of 8 fields
    index, complex_instrument_accepted_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 16
  local complex_instrument_accepted_byte_16 = nil

  local complex_instrument_accepted_byte_16_exists = complex_instrument_accepted_bitfield_count >= 16

  if complex_instrument_accepted_byte_16_exists then

    -- Complex Instrument Accepted Byte 16: Struct of 8 fields
    index, complex_instrument_accepted_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Complex Instrument Accepted Byte 17
  local complex_instrument_accepted_byte_17 = nil

  local complex_instrument_accepted_byte_17_exists = complex_instrument_accepted_bitfield_count >= 17

  if complex_instrument_accepted_byte_17_exists then

    -- Complex Instrument Accepted Byte 17: Struct of 8 fields
    index, complex_instrument_accepted_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Complex Instrument Accepted Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_complex_instrument_accepted_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.complex_instrument_accepted_return_bitfields then
    local range = buffer(offset, size_of_complex_instrument_accepted_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.complex_instrument_accepted_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.fields(buffer, offset, packet, parent, size_of_complex_instrument_accepted_return_bitfields)

  return offset + size_of_complex_instrument_accepted_return_bitfields
end

-- Purge Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields = {}

-- Read runtime size of: Purge Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Purge Rejected Bitfield Count
  local purge_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return purge_rejected_bitfield_count + 1
end

-- Display: Purge Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_purge_rejected_return_bitfields)
  local index = offset

  -- Purge Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, purge_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Purge Rejected Byte 1
  local purge_rejected_byte_1 = nil

  local purge_rejected_byte_1_exists = purge_rejected_bitfield_count >= 1

  if purge_rejected_byte_1_exists then

    -- Purge Rejected Byte 1: Struct of 8 fields
    index, purge_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 2
  local purge_rejected_byte_2 = nil

  local purge_rejected_byte_2_exists = purge_rejected_bitfield_count >= 2

  if purge_rejected_byte_2_exists then

    -- Purge Rejected Byte 2: Struct of 8 fields
    index, purge_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 3
  local purge_rejected_byte_3 = nil

  local purge_rejected_byte_3_exists = purge_rejected_bitfield_count >= 3

  if purge_rejected_byte_3_exists then

    -- Purge Rejected Byte 3: Struct of 8 fields
    index, purge_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 4
  local purge_rejected_byte_4 = nil

  local purge_rejected_byte_4_exists = purge_rejected_bitfield_count >= 4

  if purge_rejected_byte_4_exists then

    -- Purge Rejected Byte 4: Struct of 8 fields
    index, purge_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 5
  local purge_rejected_byte_5 = nil

  local purge_rejected_byte_5_exists = purge_rejected_bitfield_count >= 5

  if purge_rejected_byte_5_exists then

    -- Purge Rejected Byte 5: Struct of 8 fields
    index, purge_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 6
  local purge_rejected_byte_6 = nil

  local purge_rejected_byte_6_exists = purge_rejected_bitfield_count >= 6

  if purge_rejected_byte_6_exists then

    -- Purge Rejected Byte 6: Struct of 8 fields
    index, purge_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 7
  local purge_rejected_byte_7 = nil

  local purge_rejected_byte_7_exists = purge_rejected_bitfield_count >= 7

  if purge_rejected_byte_7_exists then

    -- Purge Rejected Byte 7: Struct of 8 fields
    index, purge_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 8
  local purge_rejected_byte_8 = nil

  local purge_rejected_byte_8_exists = purge_rejected_bitfield_count >= 8

  if purge_rejected_byte_8_exists then

    -- Purge Rejected Byte 8: Struct of 8 fields
    index, purge_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 9
  local purge_rejected_byte_9 = nil

  local purge_rejected_byte_9_exists = purge_rejected_bitfield_count >= 9

  if purge_rejected_byte_9_exists then

    -- Purge Rejected Byte 9: Struct of 8 fields
    index, purge_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 10
  local purge_rejected_byte_10 = nil

  local purge_rejected_byte_10_exists = purge_rejected_bitfield_count >= 10

  if purge_rejected_byte_10_exists then

    -- Purge Rejected Byte 10: Struct of 8 fields
    index, purge_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 11
  local purge_rejected_byte_11 = nil

  local purge_rejected_byte_11_exists = purge_rejected_bitfield_count >= 11

  if purge_rejected_byte_11_exists then

    -- Purge Rejected Byte 11: Struct of 8 fields
    index, purge_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 12
  local purge_rejected_byte_12 = nil

  local purge_rejected_byte_12_exists = purge_rejected_bitfield_count >= 12

  if purge_rejected_byte_12_exists then

    -- Purge Rejected Byte 12: Struct of 8 fields
    index, purge_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 13
  local purge_rejected_byte_13 = nil

  local purge_rejected_byte_13_exists = purge_rejected_bitfield_count >= 13

  if purge_rejected_byte_13_exists then

    -- Purge Rejected Byte 13: Struct of 8 fields
    index, purge_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 14
  local purge_rejected_byte_14 = nil

  local purge_rejected_byte_14_exists = purge_rejected_bitfield_count >= 14

  if purge_rejected_byte_14_exists then

    -- Purge Rejected Byte 14: Struct of 8 fields
    index, purge_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 15
  local purge_rejected_byte_15 = nil

  local purge_rejected_byte_15_exists = purge_rejected_bitfield_count >= 15

  if purge_rejected_byte_15_exists then

    -- Purge Rejected Byte 15: Struct of 8 fields
    index, purge_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 16
  local purge_rejected_byte_16 = nil

  local purge_rejected_byte_16_exists = purge_rejected_bitfield_count >= 16

  if purge_rejected_byte_16_exists then

    -- Purge Rejected Byte 16: Struct of 8 fields
    index, purge_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Purge Rejected Byte 17
  local purge_rejected_byte_17 = nil

  local purge_rejected_byte_17_exists = purge_rejected_bitfield_count >= 17

  if purge_rejected_byte_17_exists then

    -- Purge Rejected Byte 17: Struct of 8 fields
    index, purge_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Purge Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_purge_rejected_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.purge_rejected_return_bitfields then
    local range = buffer(offset, size_of_purge_rejected_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.purge_rejected_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.fields(buffer, offset, packet, parent, size_of_purge_rejected_return_bitfields)

  return offset + size_of_purge_rejected_return_bitfields
end

-- Trade Cancel Or Correct Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields = {}

-- Read runtime size of: Trade Cancel Or Correct Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Trade Cancel Or Correct Bitfield Count
  local trade_cancel_or_correct_bitfield_count = buffer(offset, 1):le_uint()

  return trade_cancel_or_correct_bitfield_count + 1
end

-- Display: Trade Cancel Or Correct Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Trade Cancel Or Correct Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_return_bitfields)
  local index = offset

  -- Trade Cancel Or Correct Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, trade_cancel_or_correct_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Trade Cancel Or Correct Byte 1
  local trade_cancel_or_correct_byte_1 = nil

  local trade_cancel_or_correct_byte_1_exists = trade_cancel_or_correct_bitfield_count >= 1

  if trade_cancel_or_correct_byte_1_exists then

    -- Trade Cancel Or Correct Byte 1: Struct of 8 fields
    index, trade_cancel_or_correct_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 2
  local trade_cancel_or_correct_byte_2 = nil

  local trade_cancel_or_correct_byte_2_exists = trade_cancel_or_correct_bitfield_count >= 2

  if trade_cancel_or_correct_byte_2_exists then

    -- Trade Cancel Or Correct Byte 2: Struct of 8 fields
    index, trade_cancel_or_correct_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 3
  local trade_cancel_or_correct_byte_3 = nil

  local trade_cancel_or_correct_byte_3_exists = trade_cancel_or_correct_bitfield_count >= 3

  if trade_cancel_or_correct_byte_3_exists then

    -- Trade Cancel Or Correct Byte 3: Struct of 8 fields
    index, trade_cancel_or_correct_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 4
  local trade_cancel_or_correct_byte_4 = nil

  local trade_cancel_or_correct_byte_4_exists = trade_cancel_or_correct_bitfield_count >= 4

  if trade_cancel_or_correct_byte_4_exists then

    -- Trade Cancel Or Correct Byte 4: Struct of 8 fields
    index, trade_cancel_or_correct_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 5
  local trade_cancel_or_correct_byte_5 = nil

  local trade_cancel_or_correct_byte_5_exists = trade_cancel_or_correct_bitfield_count >= 5

  if trade_cancel_or_correct_byte_5_exists then

    -- Trade Cancel Or Correct Byte 5: Struct of 8 fields
    index, trade_cancel_or_correct_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 6
  local trade_cancel_or_correct_byte_6 = nil

  local trade_cancel_or_correct_byte_6_exists = trade_cancel_or_correct_bitfield_count >= 6

  if trade_cancel_or_correct_byte_6_exists then

    -- Trade Cancel Or Correct Byte 6: Struct of 8 fields
    index, trade_cancel_or_correct_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 7
  local trade_cancel_or_correct_byte_7 = nil

  local trade_cancel_or_correct_byte_7_exists = trade_cancel_or_correct_bitfield_count >= 7

  if trade_cancel_or_correct_byte_7_exists then

    -- Trade Cancel Or Correct Byte 7: Struct of 8 fields
    index, trade_cancel_or_correct_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 8
  local trade_cancel_or_correct_byte_8 = nil

  local trade_cancel_or_correct_byte_8_exists = trade_cancel_or_correct_bitfield_count >= 8

  if trade_cancel_or_correct_byte_8_exists then

    -- Trade Cancel Or Correct Byte 8: Struct of 8 fields
    index, trade_cancel_or_correct_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 9
  local trade_cancel_or_correct_byte_9 = nil

  local trade_cancel_or_correct_byte_9_exists = trade_cancel_or_correct_bitfield_count >= 9

  if trade_cancel_or_correct_byte_9_exists then

    -- Trade Cancel Or Correct Byte 9: Struct of 8 fields
    index, trade_cancel_or_correct_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 10
  local trade_cancel_or_correct_byte_10 = nil

  local trade_cancel_or_correct_byte_10_exists = trade_cancel_or_correct_bitfield_count >= 10

  if trade_cancel_or_correct_byte_10_exists then

    -- Trade Cancel Or Correct Byte 10: Struct of 8 fields
    index, trade_cancel_or_correct_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 11
  local trade_cancel_or_correct_byte_11 = nil

  local trade_cancel_or_correct_byte_11_exists = trade_cancel_or_correct_bitfield_count >= 11

  if trade_cancel_or_correct_byte_11_exists then

    -- Trade Cancel Or Correct Byte 11: Struct of 8 fields
    index, trade_cancel_or_correct_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 12
  local trade_cancel_or_correct_byte_12 = nil

  local trade_cancel_or_correct_byte_12_exists = trade_cancel_or_correct_bitfield_count >= 12

  if trade_cancel_or_correct_byte_12_exists then

    -- Trade Cancel Or Correct Byte 12: Struct of 8 fields
    index, trade_cancel_or_correct_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 13
  local trade_cancel_or_correct_byte_13 = nil

  local trade_cancel_or_correct_byte_13_exists = trade_cancel_or_correct_bitfield_count >= 13

  if trade_cancel_or_correct_byte_13_exists then

    -- Trade Cancel Or Correct Byte 13: Struct of 8 fields
    index, trade_cancel_or_correct_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 14
  local trade_cancel_or_correct_byte_14 = nil

  local trade_cancel_or_correct_byte_14_exists = trade_cancel_or_correct_bitfield_count >= 14

  if trade_cancel_or_correct_byte_14_exists then

    -- Trade Cancel Or Correct Byte 14: Struct of 8 fields
    index, trade_cancel_or_correct_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 15
  local trade_cancel_or_correct_byte_15 = nil

  local trade_cancel_or_correct_byte_15_exists = trade_cancel_or_correct_bitfield_count >= 15

  if trade_cancel_or_correct_byte_15_exists then

    -- Trade Cancel Or Correct Byte 15: Struct of 8 fields
    index, trade_cancel_or_correct_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 16
  local trade_cancel_or_correct_byte_16 = nil

  local trade_cancel_or_correct_byte_16_exists = trade_cancel_or_correct_bitfield_count >= 16

  if trade_cancel_or_correct_byte_16_exists then

    -- Trade Cancel Or Correct Byte 16: Struct of 8 fields
    index, trade_cancel_or_correct_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Trade Cancel Or Correct Byte 17
  local trade_cancel_or_correct_byte_17 = nil

  local trade_cancel_or_correct_byte_17_exists = trade_cancel_or_correct_bitfield_count >= 17

  if trade_cancel_or_correct_byte_17_exists then

    -- Trade Cancel Or Correct Byte 17: Struct of 8 fields
    index, trade_cancel_or_correct_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Trade Cancel Or Correct Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_trade_cancel_or_correct_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.trade_cancel_or_correct_return_bitfields then
    local range = buffer(offset, size_of_trade_cancel_or_correct_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.trade_cancel_or_correct_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.fields(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_return_bitfields)

  return offset + size_of_trade_cancel_or_correct_return_bitfields
end

-- Order Execution Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17 = {}

-- Size Of: Order Execution Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17.size = 1

-- Display: Order Execution Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Floor Trader Acronym Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Floor Trader Acronym Exists|"
  end
  -- Is Order Execution Sender Location Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Sender Location Id Exists|"
  end
  -- Is Order Execution Trade Through Alert Type Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Trade Through Alert Type Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Strategy Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Strategy Id Exists|"
  end
  -- Is Order Execution Price Type Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Price Type Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Floor Trader Acronym Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_floor_trader_acronym_exists, buffer(offset, 1))

  -- Order Execution Sender Location Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_sender_location_id_exists, buffer(offset, 1))

  -- Order Execution Trade Through Alert Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_trade_through_alert_type_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Strategy Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_strategy_id_exists, buffer(offset, 1))

  -- Order Execution Price Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_price_type_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 17
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_17, range, display)

  if show.order_execution_byte_17 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16 = {}

-- Size Of: Order Execution Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16.size = 1

-- Display: Order Execution Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Order Origin Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Order Origin Exists|"
  end
  -- Is Order Execution Multi Class Sprd Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Multi Class Sprd Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16.bits = function(buffer, offset, packet, parent)

  -- Order Execution Order Origin Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_order_origin_exists, buffer(offset, 1))

  -- Order Execution Multi Class Sprd Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_multi_class_sprd_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Frequent Trader Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 16
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_16, range, display)

  if show.order_execution_byte_16 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15 = {}

-- Size Of: Order Execution Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15.size = 1

-- Display: Order Execution Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Client Id Attr Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Client Id Attr Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Equity Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Equity Party Id Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15.bits = function(buffer, offset, packet, parent)

  -- Order Execution Client Id Attr Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_client_id_attr_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Equity Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_equity_party_id_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 15
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_15, range, display)

  if show.order_execution_byte_15 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14 = {}

-- Size Of: Order Execution Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14.size = 1

-- Display: Order Execution Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Secondary Exec Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Secondary Exec Id Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Secondary Exec Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_secondary_exec_id_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 14
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_14, range, display)

  if show.order_execution_byte_14 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13 = {}

-- Size Of: Order Execution Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13.size = 1

-- Display: Order Execution Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Multileg Reporting Type Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Multileg Reporting Type Exists|"
  end
  -- Is Order Execution Drill Thru Protection Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Drill Thru Protection Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Day Avg Px Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Day Avg Px Exists|"
  end
  -- Is Order Execution Avg Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Avg Px Exists|"
  end
  -- Is Order Execution Day Cum Qty Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Day Cum Qty Exists|"
  end
  -- Is Order Execution Day Order Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Day Order Qty Exists|"
  end
  -- Is Order Execution Cum Qty Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Cum Qty Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13.bits = function(buffer, offset, packet, parent)

  -- Order Execution Multileg Reporting Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_multileg_reporting_type_exists, buffer(offset, 1))

  -- Order Execution Drill Thru Protection Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_drill_thru_protection_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Day Avg Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_day_avg_px_exists, buffer(offset, 1))

  -- Order Execution Avg Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_avg_px_exists, buffer(offset, 1))

  -- Order Execution Day Cum Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_day_cum_qty_exists, buffer(offset, 1))

  -- Order Execution Day Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_day_order_qty_exists, buffer(offset, 1))

  -- Order Execution Cum Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cum_qty_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 13
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_13, range, display)

  if show.order_execution_byte_13 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12 = {}

-- Size Of: Order Execution Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12.size = 1

-- Display: Order Execution Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Clearing Optional Data Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Clearing Optional Data Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12.bits = function(buffer, offset, packet, parent)

  -- Order Execution Clearing Optional Data Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_clearing_optional_data_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 12
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_12, range, display)

  if show.order_execution_byte_12 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11 = {}

-- Size Of: Order Execution Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11.size = 1

-- Display: Order Execution Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 11
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_11, range, display)

  if show.order_execution_byte_11 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10 = {}

-- Size Of: Order Execution Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10.size = 1

-- Display: Order Execution Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Cross Exclusion Indicator Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Cross Exclusion Indicator Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Routing Firm Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Routing Firm Id Exists|"
  end
  -- Is Order Execution Give Up Firm Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Give Up Firm Id Exists|"
  end
  -- Is Order Execution Alloc Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Alloc Qty Exists|"
  end
  -- Is Order Execution Cross Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Cross Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Cross Exclusion Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_exclusion_indicator_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Routing Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_routing_firm_id_exists, buffer(offset, 1))

  -- Order Execution Give Up Firm Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_give_up_firm_id_exists, buffer(offset, 1))

  -- Order Execution Alloc Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_alloc_qty_exists, buffer(offset, 1))

  -- Order Execution Cross Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_id_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 10
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_10, range, display)

  if show.order_execution_byte_10 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9 = {}

-- Size Of: Order Execution Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9.size = 1

-- Display: Order Execution Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Cross Prioritization Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Cross Prioritization Exists|"
  end
  -- Is Order Execution Cross Type Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Cross Type Exists|"
  end
  -- Is Order Execution Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Cmta Number Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Auction Id Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Auction Id Exists|"
  end
  -- Is Order Execution Target Party Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Target Party Id Exists|"
  end
  -- Is Order Execution Marketing Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Marketing Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9.bits = function(buffer, offset, packet, parent)

  -- Order Execution Cross Prioritization Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_prioritization_exists, buffer(offset, 1))

  -- Order Execution Cross Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cross_type_exists, buffer(offset, 1))

  -- Order Execution Cmta Number Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_cmta_number_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Auction Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_auction_id_exists, buffer(offset, 1))

  -- Order Execution Target Party Id Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_target_party_id_exists, buffer(offset, 1))

  -- Order Execution Marketing Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_marketing_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 9
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_9, range, display)

  if show.order_execution_byte_9 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8 = {}

-- Size Of: Order Execution Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8.size = 1

-- Display: Order Execution Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Ex Destination Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Ex Destination Exists|"
  end
  -- Is Order Execution Route Delivery Method Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Route Delivery Method Exists|"
  end
  -- Is Order Execution Rout Strategy Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Rout Strategy Exists|"
  end
  -- Is Order Execution Routing Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Routing Inst Exists|"
  end
  -- Is Order Execution Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Stop Px Exists|"
  end
  -- Is Order Execution Echo Text Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Echo Text Exists|"
  end
  -- Is Order Execution Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Ex Destination Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_ex_destination_exists, buffer(offset, 1))

  -- Order Execution Route Delivery Method Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_route_delivery_method_exists, buffer(offset, 1))

  -- Order Execution Rout Strategy Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_rout_strategy_exists, buffer(offset, 1))

  -- Order Execution Routing Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_routing_inst_exists, buffer(offset, 1))

  -- Order Execution Stop Px Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_stop_px_exists, buffer(offset, 1))

  -- Order Execution Echo Text Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_echo_text_exists, buffer(offset, 1))

  -- Order Execution Fee Code Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 8
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_8, range, display)

  if show.order_execution_byte_8 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7 = {}

-- Size Of: Order Execution Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7.size = 1

-- Display: Order Execution Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 7
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_7, range, display)

  if show.order_execution_byte_7 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6 = {}

-- Size Of: Order Execution Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6.size = 1

-- Display: Order Execution Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Attributed Quote Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Attributed Quote Exists|"
  end
  -- Is Order Execution Contra Capacity Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Contra Capacity Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Attributed Quote Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_attributed_quote_exists, buffer(offset, 1))

  -- Order Execution Contra Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_contra_capacity_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 6
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_6, range, display)

  if show.order_execution_byte_6 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5 = {}

-- Size Of: Order Execution Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5.size = 1

-- Display: Order Execution Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 5
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_5, range, display)

  if show.order_execution_byte_5 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4 = {}

-- Size Of: Order Execution Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4.size = 1

-- Display: Order Execution Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Corrected Size Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Open Close Exists|"
  end
  -- Is Order Execution Put Or Call Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Put Or Call Exists|"
  end
  -- Is Order Execution Strike Price Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Strike Price Exists|"
  end
  -- Is Order Execution Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4.bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Corrected Size Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_corrected_size_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Open Close Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_open_close_exists, buffer(offset, 1))

  -- Order Execution Put Or Call Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_put_or_call_exists, buffer(offset, 1))

  -- Order Execution Strike Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_strike_price_exists, buffer(offset, 1))

  -- Order Execution Maturity Date Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 4
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_4, range, display)

  if show.order_execution_byte_4 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3 = {}

-- Size Of: Order Execution Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3.size = 1

-- Display: Order Execution Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Prevent Match Exists|"
  end
  -- Is Order Execution Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Order Qty Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Max Floor Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Max Floor Exists|"
  end
  -- Is Order Execution Display Indicator Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Display Indicator Exists|"
  end
  -- Is Order Execution Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Clearing Account Exists|"
  end
  -- Is Order Execution Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Clearing Firm Exists|"
  end
  -- Is Order Execution Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3.bits = function(buffer, offset, packet, parent)

  -- Order Execution Prevent Match Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_prevent_match_exists, buffer(offset, 1))

  -- Order Execution Order Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_order_qty_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Max Floor Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_max_floor_exists, buffer(offset, 1))

  -- Order Execution Display Indicator Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_display_indicator_exists, buffer(offset, 1))

  -- Order Execution Clearing Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_clearing_account_exists, buffer(offset, 1))

  -- Order Execution Clearing Firm Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_clearing_firm_exists, buffer(offset, 1))

  -- Order Execution Account Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_account_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 3
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_3, range, display)

  if show.order_execution_byte_3 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2 = {}

-- Size Of: Order Execution Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2.size = 1

-- Display: Order Execution Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Contra Trader Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Contra Trader Exists|"
  end
  -- Is Order Execution Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Capacity Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2.bits = function(buffer, offset, packet, parent)

  -- Order Execution Contra Trader Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_contra_trader_exists, buffer(offset, 1))

  -- Order Execution Capacity Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_capacity_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Symbol Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 2
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_2, range, display)

  if show.order_execution_byte_2 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1 = {}

-- Size Of: Order Execution Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1.size = 1

-- Display: Order Execution Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1.display = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Max Remove Pct Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Max Remove Pct Exists|"
  end
  -- Is Order Execution Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Min Qty Exists|"
  end
  -- Is Order Execution Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Time In Force Exists|"
  end
  -- Is Order Execution Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Ord Type Exists|"
  end
  -- Is Order Execution Exec Inst Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Exec Inst Exists|"
  end
  -- Is Order Execution Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Price Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1.bits = function(buffer, offset, packet, parent)

  -- Order Execution Max Remove Pct Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_max_remove_pct_exists, buffer(offset, 1))

  -- Order Execution Min Qty Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_min_qty_exists, buffer(offset, 1))

  -- Order Execution Time In Force Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_time_in_force_exists, buffer(offset, 1))

  -- Order Execution Ord Type Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_ord_type_exists, buffer(offset, 1))

  -- Order Execution Exec Inst Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_exec_inst_exists, buffer(offset, 1))

  -- Order Execution Price Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_price_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Side Exists: 1 Bit
  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_side_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 1
cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1.dissect = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1.display(range, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_byte_1, range, display)

  if show.order_execution_byte_1 then
    cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1.bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Order Execution Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_execution_bitfield_count = {}

-- Size Of: Order Execution Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_execution_bitfield_count.size = 1

-- Display: Order Execution Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_execution_bitfield_count.display = function(value)
  return "Order Execution Bitfield Count: "..value
end

-- Dissect: Order Execution Bitfield Count
cboe_edgx_options_orderentry_boe_v2_10.order_execution_bitfield_count.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.order_execution_bitfield_count.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_bitfield_count.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_bitfield_count, range, value, display)

  return offset + length, value
end

-- Order Execution Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields = {}

-- Read runtime size of: Order Execution Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Execution Bitfield Count
  local order_execution_bitfield_count = buffer(offset, 1):le_uint()

  return order_execution_bitfield_count + 1
end

-- Display: Order Execution Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Execution Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_order_execution_return_bitfields)
  local index = offset

  -- Order Execution Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_execution_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_execution_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Execution Byte 1
  local order_execution_byte_1 = nil

  local order_execution_byte_1_exists = order_execution_bitfield_count >= 1

  if order_execution_byte_1_exists then

    -- Order Execution Byte 1: Struct of 8 fields
    index, order_execution_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 2
  local order_execution_byte_2 = nil

  local order_execution_byte_2_exists = order_execution_bitfield_count >= 2

  if order_execution_byte_2_exists then

    -- Order Execution Byte 2: Struct of 8 fields
    index, order_execution_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 3
  local order_execution_byte_3 = nil

  local order_execution_byte_3_exists = order_execution_bitfield_count >= 3

  if order_execution_byte_3_exists then

    -- Order Execution Byte 3: Struct of 8 fields
    index, order_execution_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 4
  local order_execution_byte_4 = nil

  local order_execution_byte_4_exists = order_execution_bitfield_count >= 4

  if order_execution_byte_4_exists then

    -- Order Execution Byte 4: Struct of 8 fields
    index, order_execution_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 5
  local order_execution_byte_5 = nil

  local order_execution_byte_5_exists = order_execution_bitfield_count >= 5

  if order_execution_byte_5_exists then

    -- Order Execution Byte 5: Struct of 8 fields
    index, order_execution_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 6
  local order_execution_byte_6 = nil

  local order_execution_byte_6_exists = order_execution_bitfield_count >= 6

  if order_execution_byte_6_exists then

    -- Order Execution Byte 6: Struct of 8 fields
    index, order_execution_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 7
  local order_execution_byte_7 = nil

  local order_execution_byte_7_exists = order_execution_bitfield_count >= 7

  if order_execution_byte_7_exists then

    -- Order Execution Byte 7: Struct of 8 fields
    index, order_execution_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 8
  local order_execution_byte_8 = nil

  local order_execution_byte_8_exists = order_execution_bitfield_count >= 8

  if order_execution_byte_8_exists then

    -- Order Execution Byte 8: Struct of 8 fields
    index, order_execution_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 9
  local order_execution_byte_9 = nil

  local order_execution_byte_9_exists = order_execution_bitfield_count >= 9

  if order_execution_byte_9_exists then

    -- Order Execution Byte 9: Struct of 8 fields
    index, order_execution_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 10
  local order_execution_byte_10 = nil

  local order_execution_byte_10_exists = order_execution_bitfield_count >= 10

  if order_execution_byte_10_exists then

    -- Order Execution Byte 10: Struct of 8 fields
    index, order_execution_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 11
  local order_execution_byte_11 = nil

  local order_execution_byte_11_exists = order_execution_bitfield_count >= 11

  if order_execution_byte_11_exists then

    -- Order Execution Byte 11: Struct of 8 fields
    index, order_execution_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 12
  local order_execution_byte_12 = nil

  local order_execution_byte_12_exists = order_execution_bitfield_count >= 12

  if order_execution_byte_12_exists then

    -- Order Execution Byte 12: Struct of 8 fields
    index, order_execution_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 13
  local order_execution_byte_13 = nil

  local order_execution_byte_13_exists = order_execution_bitfield_count >= 13

  if order_execution_byte_13_exists then

    -- Order Execution Byte 13: Struct of 8 fields
    index, order_execution_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 14
  local order_execution_byte_14 = nil

  local order_execution_byte_14_exists = order_execution_bitfield_count >= 14

  if order_execution_byte_14_exists then

    -- Order Execution Byte 14: Struct of 8 fields
    index, order_execution_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 15
  local order_execution_byte_15 = nil

  local order_execution_byte_15_exists = order_execution_bitfield_count >= 15

  if order_execution_byte_15_exists then

    -- Order Execution Byte 15: Struct of 8 fields
    index, order_execution_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 16
  local order_execution_byte_16 = nil

  local order_execution_byte_16_exists = order_execution_bitfield_count >= 16

  if order_execution_byte_16_exists then

    -- Order Execution Byte 16: Struct of 8 fields
    index, order_execution_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Execution Byte 17
  local order_execution_byte_17 = nil

  local order_execution_byte_17_exists = order_execution_bitfield_count >= 17

  if order_execution_byte_17_exists then

    -- Order Execution Byte 17: Struct of 8 fields
    index, order_execution_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_execution_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Execution Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_execution_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_execution_return_bitfields then
    local range = buffer(offset, size_of_order_execution_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_execution_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.fields(buffer, offset, packet, parent, size_of_order_execution_return_bitfields)

  return offset + size_of_order_execution_return_bitfields
end

-- Cancel Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields = {}

-- Read runtime size of: Cancel Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Cancel Rejected Bitfield Count
  local cancel_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return cancel_rejected_bitfield_count + 1
end

-- Display: Cancel Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_cancel_rejected_return_bitfields)
  local index = offset

  -- Cancel Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cancel_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cancel Rejected Byte 1
  local cancel_rejected_byte_1 = nil

  local cancel_rejected_byte_1_exists = cancel_rejected_bitfield_count >= 1

  if cancel_rejected_byte_1_exists then

    -- Cancel Rejected Byte 1: Struct of 8 fields
    index, cancel_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 2
  local cancel_rejected_byte_2 = nil

  local cancel_rejected_byte_2_exists = cancel_rejected_bitfield_count >= 2

  if cancel_rejected_byte_2_exists then

    -- Cancel Rejected Byte 2: Struct of 8 fields
    index, cancel_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 3
  local cancel_rejected_byte_3 = nil

  local cancel_rejected_byte_3_exists = cancel_rejected_bitfield_count >= 3

  if cancel_rejected_byte_3_exists then

    -- Cancel Rejected Byte 3: Struct of 8 fields
    index, cancel_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 4
  local cancel_rejected_byte_4 = nil

  local cancel_rejected_byte_4_exists = cancel_rejected_bitfield_count >= 4

  if cancel_rejected_byte_4_exists then

    -- Cancel Rejected Byte 4: Struct of 8 fields
    index, cancel_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 5
  local cancel_rejected_byte_5 = nil

  local cancel_rejected_byte_5_exists = cancel_rejected_bitfield_count >= 5

  if cancel_rejected_byte_5_exists then

    -- Cancel Rejected Byte 5: Struct of 8 fields
    index, cancel_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 6
  local cancel_rejected_byte_6 = nil

  local cancel_rejected_byte_6_exists = cancel_rejected_bitfield_count >= 6

  if cancel_rejected_byte_6_exists then

    -- Cancel Rejected Byte 6: Struct of 8 fields
    index, cancel_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 7
  local cancel_rejected_byte_7 = nil

  local cancel_rejected_byte_7_exists = cancel_rejected_bitfield_count >= 7

  if cancel_rejected_byte_7_exists then

    -- Cancel Rejected Byte 7: Struct of 8 fields
    index, cancel_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 8
  local cancel_rejected_byte_8 = nil

  local cancel_rejected_byte_8_exists = cancel_rejected_bitfield_count >= 8

  if cancel_rejected_byte_8_exists then

    -- Cancel Rejected Byte 8: Struct of 8 fields
    index, cancel_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 9
  local cancel_rejected_byte_9 = nil

  local cancel_rejected_byte_9_exists = cancel_rejected_bitfield_count >= 9

  if cancel_rejected_byte_9_exists then

    -- Cancel Rejected Byte 9: Struct of 8 fields
    index, cancel_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 10
  local cancel_rejected_byte_10 = nil

  local cancel_rejected_byte_10_exists = cancel_rejected_bitfield_count >= 10

  if cancel_rejected_byte_10_exists then

    -- Cancel Rejected Byte 10: Struct of 8 fields
    index, cancel_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 11
  local cancel_rejected_byte_11 = nil

  local cancel_rejected_byte_11_exists = cancel_rejected_bitfield_count >= 11

  if cancel_rejected_byte_11_exists then

    -- Cancel Rejected Byte 11: Struct of 8 fields
    index, cancel_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 12
  local cancel_rejected_byte_12 = nil

  local cancel_rejected_byte_12_exists = cancel_rejected_bitfield_count >= 12

  if cancel_rejected_byte_12_exists then

    -- Cancel Rejected Byte 12: Struct of 8 fields
    index, cancel_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 13
  local cancel_rejected_byte_13 = nil

  local cancel_rejected_byte_13_exists = cancel_rejected_bitfield_count >= 13

  if cancel_rejected_byte_13_exists then

    -- Cancel Rejected Byte 13: Struct of 8 fields
    index, cancel_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 14
  local cancel_rejected_byte_14 = nil

  local cancel_rejected_byte_14_exists = cancel_rejected_bitfield_count >= 14

  if cancel_rejected_byte_14_exists then

    -- Cancel Rejected Byte 14: Struct of 8 fields
    index, cancel_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 15
  local cancel_rejected_byte_15 = nil

  local cancel_rejected_byte_15_exists = cancel_rejected_bitfield_count >= 15

  if cancel_rejected_byte_15_exists then

    -- Cancel Rejected Byte 15: Struct of 8 fields
    index, cancel_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 16
  local cancel_rejected_byte_16 = nil

  local cancel_rejected_byte_16_exists = cancel_rejected_bitfield_count >= 16

  if cancel_rejected_byte_16_exists then

    -- Cancel Rejected Byte 16: Struct of 8 fields
    index, cancel_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cancel Rejected Byte 17
  local cancel_rejected_byte_17 = nil

  local cancel_rejected_byte_17_exists = cancel_rejected_bitfield_count >= 17

  if cancel_rejected_byte_17_exists then

    -- Cancel Rejected Byte 17: Struct of 8 fields
    index, cancel_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cancel Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cancel_rejected_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cancel_rejected_return_bitfields then
    local range = buffer(offset, size_of_cancel_rejected_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cancel_rejected_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.fields(buffer, offset, packet, parent, size_of_cancel_rejected_return_bitfields)

  return offset + size_of_cancel_rejected_return_bitfields
end

-- Cross Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields = {}

-- Read runtime size of: Cross Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Cross Order Cancelled Bitfield Count
  local cross_order_cancelled_bitfield_count = buffer(offset, 1):le_uint()

  return cross_order_cancelled_bitfield_count + 1
end

-- Display: Cross Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_cross_order_cancelled_return_bitfields)
  local index = offset

  -- Cross Order Cancelled Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cross_order_cancelled_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cross Order Cancelled Byte 1
  local cross_order_cancelled_byte_1 = nil

  local cross_order_cancelled_byte_1_exists = cross_order_cancelled_bitfield_count >= 1

  if cross_order_cancelled_byte_1_exists then

    -- Cross Order Cancelled Byte 1: Struct of 8 fields
    index, cross_order_cancelled_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 2
  local cross_order_cancelled_byte_2 = nil

  local cross_order_cancelled_byte_2_exists = cross_order_cancelled_bitfield_count >= 2

  if cross_order_cancelled_byte_2_exists then

    -- Cross Order Cancelled Byte 2: Struct of 8 fields
    index, cross_order_cancelled_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 3
  local cross_order_cancelled_byte_3 = nil

  local cross_order_cancelled_byte_3_exists = cross_order_cancelled_bitfield_count >= 3

  if cross_order_cancelled_byte_3_exists then

    -- Cross Order Cancelled Byte 3: Struct of 8 fields
    index, cross_order_cancelled_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 4
  local cross_order_cancelled_byte_4 = nil

  local cross_order_cancelled_byte_4_exists = cross_order_cancelled_bitfield_count >= 4

  if cross_order_cancelled_byte_4_exists then

    -- Cross Order Cancelled Byte 4: Struct of 8 fields
    index, cross_order_cancelled_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 5
  local cross_order_cancelled_byte_5 = nil

  local cross_order_cancelled_byte_5_exists = cross_order_cancelled_bitfield_count >= 5

  if cross_order_cancelled_byte_5_exists then

    -- Cross Order Cancelled Byte 5: Struct of 8 fields
    index, cross_order_cancelled_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 6
  local cross_order_cancelled_byte_6 = nil

  local cross_order_cancelled_byte_6_exists = cross_order_cancelled_bitfield_count >= 6

  if cross_order_cancelled_byte_6_exists then

    -- Cross Order Cancelled Byte 6: Struct of 8 fields
    index, cross_order_cancelled_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 7
  local cross_order_cancelled_byte_7 = nil

  local cross_order_cancelled_byte_7_exists = cross_order_cancelled_bitfield_count >= 7

  if cross_order_cancelled_byte_7_exists then

    -- Cross Order Cancelled Byte 7: Struct of 8 fields
    index, cross_order_cancelled_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 8
  local cross_order_cancelled_byte_8 = nil

  local cross_order_cancelled_byte_8_exists = cross_order_cancelled_bitfield_count >= 8

  if cross_order_cancelled_byte_8_exists then

    -- Cross Order Cancelled Byte 8: Struct of 8 fields
    index, cross_order_cancelled_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 9
  local cross_order_cancelled_byte_9 = nil

  local cross_order_cancelled_byte_9_exists = cross_order_cancelled_bitfield_count >= 9

  if cross_order_cancelled_byte_9_exists then

    -- Cross Order Cancelled Byte 9: Struct of 8 fields
    index, cross_order_cancelled_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 10
  local cross_order_cancelled_byte_10 = nil

  local cross_order_cancelled_byte_10_exists = cross_order_cancelled_bitfield_count >= 10

  if cross_order_cancelled_byte_10_exists then

    -- Cross Order Cancelled Byte 10: Struct of 8 fields
    index, cross_order_cancelled_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 11
  local cross_order_cancelled_byte_11 = nil

  local cross_order_cancelled_byte_11_exists = cross_order_cancelled_bitfield_count >= 11

  if cross_order_cancelled_byte_11_exists then

    -- Cross Order Cancelled Byte 11: Struct of 8 fields
    index, cross_order_cancelled_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 12
  local cross_order_cancelled_byte_12 = nil

  local cross_order_cancelled_byte_12_exists = cross_order_cancelled_bitfield_count >= 12

  if cross_order_cancelled_byte_12_exists then

    -- Cross Order Cancelled Byte 12: Struct of 8 fields
    index, cross_order_cancelled_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 13
  local cross_order_cancelled_byte_13 = nil

  local cross_order_cancelled_byte_13_exists = cross_order_cancelled_bitfield_count >= 13

  if cross_order_cancelled_byte_13_exists then

    -- Cross Order Cancelled Byte 13: Struct of 8 fields
    index, cross_order_cancelled_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 14
  local cross_order_cancelled_byte_14 = nil

  local cross_order_cancelled_byte_14_exists = cross_order_cancelled_bitfield_count >= 14

  if cross_order_cancelled_byte_14_exists then

    -- Cross Order Cancelled Byte 14: Struct of 8 fields
    index, cross_order_cancelled_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 15
  local cross_order_cancelled_byte_15 = nil

  local cross_order_cancelled_byte_15_exists = cross_order_cancelled_bitfield_count >= 15

  if cross_order_cancelled_byte_15_exists then

    -- Cross Order Cancelled Byte 15: Struct of 8 fields
    index, cross_order_cancelled_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 16
  local cross_order_cancelled_byte_16 = nil

  local cross_order_cancelled_byte_16_exists = cross_order_cancelled_bitfield_count >= 16

  if cross_order_cancelled_byte_16_exists then

    -- Cross Order Cancelled Byte 16: Struct of 8 fields
    index, cross_order_cancelled_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Cancelled Byte 17
  local cross_order_cancelled_byte_17 = nil

  local cross_order_cancelled_byte_17_exists = cross_order_cancelled_bitfield_count >= 17

  if cross_order_cancelled_byte_17_exists then

    -- Cross Order Cancelled Byte 17: Struct of 8 fields
    index, cross_order_cancelled_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cross Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cross_order_cancelled_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cross_order_cancelled_return_bitfields then
    local range = buffer(offset, size_of_cross_order_cancelled_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_cancelled_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.fields(buffer, offset, packet, parent, size_of_cross_order_cancelled_return_bitfields)

  return offset + size_of_cross_order_cancelled_return_bitfields
end

-- Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields = {}

-- Read runtime size of: Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Cancelled Bitfield Count
  local order_cancelled_bitfield_count = buffer(offset, 1):le_uint()

  return order_cancelled_bitfield_count + 1
end

-- Display: Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_order_cancelled_return_bitfields)
  local index = offset

  -- Order Cancelled Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_cancelled_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Cancelled Byte 1
  local order_cancelled_byte_1 = nil

  local order_cancelled_byte_1_exists = order_cancelled_bitfield_count >= 1

  if order_cancelled_byte_1_exists then

    -- Order Cancelled Byte 1: Struct of 8 fields
    index, order_cancelled_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 2
  local order_cancelled_byte_2 = nil

  local order_cancelled_byte_2_exists = order_cancelled_bitfield_count >= 2

  if order_cancelled_byte_2_exists then

    -- Order Cancelled Byte 2: Struct of 8 fields
    index, order_cancelled_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 3
  local order_cancelled_byte_3 = nil

  local order_cancelled_byte_3_exists = order_cancelled_bitfield_count >= 3

  if order_cancelled_byte_3_exists then

    -- Order Cancelled Byte 3: Struct of 8 fields
    index, order_cancelled_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 4
  local order_cancelled_byte_4 = nil

  local order_cancelled_byte_4_exists = order_cancelled_bitfield_count >= 4

  if order_cancelled_byte_4_exists then

    -- Order Cancelled Byte 4: Struct of 8 fields
    index, order_cancelled_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 5
  local order_cancelled_byte_5 = nil

  local order_cancelled_byte_5_exists = order_cancelled_bitfield_count >= 5

  if order_cancelled_byte_5_exists then

    -- Order Cancelled Byte 5: Struct of 8 fields
    index, order_cancelled_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 6
  local order_cancelled_byte_6 = nil

  local order_cancelled_byte_6_exists = order_cancelled_bitfield_count >= 6

  if order_cancelled_byte_6_exists then

    -- Order Cancelled Byte 6: Struct of 8 fields
    index, order_cancelled_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 7
  local order_cancelled_byte_7 = nil

  local order_cancelled_byte_7_exists = order_cancelled_bitfield_count >= 7

  if order_cancelled_byte_7_exists then

    -- Order Cancelled Byte 7: Struct of 8 fields
    index, order_cancelled_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 8
  local order_cancelled_byte_8 = nil

  local order_cancelled_byte_8_exists = order_cancelled_bitfield_count >= 8

  if order_cancelled_byte_8_exists then

    -- Order Cancelled Byte 8: Struct of 8 fields
    index, order_cancelled_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 9
  local order_cancelled_byte_9 = nil

  local order_cancelled_byte_9_exists = order_cancelled_bitfield_count >= 9

  if order_cancelled_byte_9_exists then

    -- Order Cancelled Byte 9: Struct of 8 fields
    index, order_cancelled_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 10
  local order_cancelled_byte_10 = nil

  local order_cancelled_byte_10_exists = order_cancelled_bitfield_count >= 10

  if order_cancelled_byte_10_exists then

    -- Order Cancelled Byte 10: Struct of 8 fields
    index, order_cancelled_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 11
  local order_cancelled_byte_11 = nil

  local order_cancelled_byte_11_exists = order_cancelled_bitfield_count >= 11

  if order_cancelled_byte_11_exists then

    -- Order Cancelled Byte 11: Struct of 8 fields
    index, order_cancelled_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 12
  local order_cancelled_byte_12 = nil

  local order_cancelled_byte_12_exists = order_cancelled_bitfield_count >= 12

  if order_cancelled_byte_12_exists then

    -- Order Cancelled Byte 12: Struct of 8 fields
    index, order_cancelled_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 13
  local order_cancelled_byte_13 = nil

  local order_cancelled_byte_13_exists = order_cancelled_bitfield_count >= 13

  if order_cancelled_byte_13_exists then

    -- Order Cancelled Byte 13: Struct of 8 fields
    index, order_cancelled_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 14
  local order_cancelled_byte_14 = nil

  local order_cancelled_byte_14_exists = order_cancelled_bitfield_count >= 14

  if order_cancelled_byte_14_exists then

    -- Order Cancelled Byte 14: Struct of 8 fields
    index, order_cancelled_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 15
  local order_cancelled_byte_15 = nil

  local order_cancelled_byte_15_exists = order_cancelled_bitfield_count >= 15

  if order_cancelled_byte_15_exists then

    -- Order Cancelled Byte 15: Struct of 8 fields
    index, order_cancelled_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 16
  local order_cancelled_byte_16 = nil

  local order_cancelled_byte_16_exists = order_cancelled_bitfield_count >= 16

  if order_cancelled_byte_16_exists then

    -- Order Cancelled Byte 16: Struct of 8 fields
    index, order_cancelled_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Cancelled Byte 17
  local order_cancelled_byte_17 = nil

  local order_cancelled_byte_17_exists = order_cancelled_bitfield_count >= 17

  if order_cancelled_byte_17_exists then

    -- Order Cancelled Byte 17: Struct of 8 fields
    index, order_cancelled_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Cancelled Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_cancelled_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_cancelled_return_bitfields then
    local range = buffer(offset, size_of_order_cancelled_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_cancelled_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.fields(buffer, offset, packet, parent, size_of_order_cancelled_return_bitfields)

  return offset + size_of_order_cancelled_return_bitfields
end

-- User Modify Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields = {}

-- Read runtime size of: User Modify Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: User Modify Rejected Bitfield Count
  local user_modify_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return user_modify_rejected_bitfield_count + 1
end

-- Display: User Modify Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: User Modify Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_user_modify_rejected_return_bitfields)
  local index = offset

  -- User Modify Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, user_modify_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: User Modify Rejected Byte 1
  local user_modify_rejected_byte_1 = nil

  local user_modify_rejected_byte_1_exists = user_modify_rejected_bitfield_count >= 1

  if user_modify_rejected_byte_1_exists then

    -- User Modify Rejected Byte 1: Struct of 8 fields
    index, user_modify_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 2
  local user_modify_rejected_byte_2 = nil

  local user_modify_rejected_byte_2_exists = user_modify_rejected_bitfield_count >= 2

  if user_modify_rejected_byte_2_exists then

    -- User Modify Rejected Byte 2: Struct of 8 fields
    index, user_modify_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 3
  local user_modify_rejected_byte_3 = nil

  local user_modify_rejected_byte_3_exists = user_modify_rejected_bitfield_count >= 3

  if user_modify_rejected_byte_3_exists then

    -- User Modify Rejected Byte 3: Struct of 8 fields
    index, user_modify_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 4
  local user_modify_rejected_byte_4 = nil

  local user_modify_rejected_byte_4_exists = user_modify_rejected_bitfield_count >= 4

  if user_modify_rejected_byte_4_exists then

    -- User Modify Rejected Byte 4: Struct of 8 fields
    index, user_modify_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 5
  local user_modify_rejected_byte_5 = nil

  local user_modify_rejected_byte_5_exists = user_modify_rejected_bitfield_count >= 5

  if user_modify_rejected_byte_5_exists then

    -- User Modify Rejected Byte 5: Struct of 8 fields
    index, user_modify_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 6
  local user_modify_rejected_byte_6 = nil

  local user_modify_rejected_byte_6_exists = user_modify_rejected_bitfield_count >= 6

  if user_modify_rejected_byte_6_exists then

    -- User Modify Rejected Byte 6: Struct of 8 fields
    index, user_modify_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 7
  local user_modify_rejected_byte_7 = nil

  local user_modify_rejected_byte_7_exists = user_modify_rejected_bitfield_count >= 7

  if user_modify_rejected_byte_7_exists then

    -- User Modify Rejected Byte 7: Struct of 8 fields
    index, user_modify_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 8
  local user_modify_rejected_byte_8 = nil

  local user_modify_rejected_byte_8_exists = user_modify_rejected_bitfield_count >= 8

  if user_modify_rejected_byte_8_exists then

    -- User Modify Rejected Byte 8: Struct of 8 fields
    index, user_modify_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 9
  local user_modify_rejected_byte_9 = nil

  local user_modify_rejected_byte_9_exists = user_modify_rejected_bitfield_count >= 9

  if user_modify_rejected_byte_9_exists then

    -- User Modify Rejected Byte 9: Struct of 8 fields
    index, user_modify_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 10
  local user_modify_rejected_byte_10 = nil

  local user_modify_rejected_byte_10_exists = user_modify_rejected_bitfield_count >= 10

  if user_modify_rejected_byte_10_exists then

    -- User Modify Rejected Byte 10: Struct of 8 fields
    index, user_modify_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 11
  local user_modify_rejected_byte_11 = nil

  local user_modify_rejected_byte_11_exists = user_modify_rejected_bitfield_count >= 11

  if user_modify_rejected_byte_11_exists then

    -- User Modify Rejected Byte 11: Struct of 8 fields
    index, user_modify_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 12
  local user_modify_rejected_byte_12 = nil

  local user_modify_rejected_byte_12_exists = user_modify_rejected_bitfield_count >= 12

  if user_modify_rejected_byte_12_exists then

    -- User Modify Rejected Byte 12: Struct of 8 fields
    index, user_modify_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 13
  local user_modify_rejected_byte_13 = nil

  local user_modify_rejected_byte_13_exists = user_modify_rejected_bitfield_count >= 13

  if user_modify_rejected_byte_13_exists then

    -- User Modify Rejected Byte 13: Struct of 8 fields
    index, user_modify_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 14
  local user_modify_rejected_byte_14 = nil

  local user_modify_rejected_byte_14_exists = user_modify_rejected_bitfield_count >= 14

  if user_modify_rejected_byte_14_exists then

    -- User Modify Rejected Byte 14: Struct of 8 fields
    index, user_modify_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 15
  local user_modify_rejected_byte_15 = nil

  local user_modify_rejected_byte_15_exists = user_modify_rejected_bitfield_count >= 15

  if user_modify_rejected_byte_15_exists then

    -- User Modify Rejected Byte 15: Struct of 8 fields
    index, user_modify_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 16
  local user_modify_rejected_byte_16 = nil

  local user_modify_rejected_byte_16_exists = user_modify_rejected_bitfield_count >= 16

  if user_modify_rejected_byte_16_exists then

    -- User Modify Rejected Byte 16: Struct of 8 fields
    index, user_modify_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: User Modify Rejected Byte 17
  local user_modify_rejected_byte_17 = nil

  local user_modify_rejected_byte_17_exists = user_modify_rejected_bitfield_count >= 17

  if user_modify_rejected_byte_17_exists then

    -- User Modify Rejected Byte 17: Struct of 8 fields
    index, user_modify_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: User Modify Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_user_modify_rejected_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.user_modify_rejected_return_bitfields then
    local range = buffer(offset, size_of_user_modify_rejected_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.user_modify_rejected_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.fields(buffer, offset, packet, parent, size_of_user_modify_rejected_return_bitfields)

  return offset + size_of_user_modify_rejected_return_bitfields
end

-- Order Restated Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields = {}

-- Read runtime size of: Order Restated Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Restated Bitfield Count
  local order_restated_bitfield_count = buffer(offset, 1):le_uint()

  return order_restated_bitfield_count + 1
end

-- Display: Order Restated Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Restated Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_order_restated_return_bitfields)
  local index = offset

  -- Order Restated Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_restated_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_restated_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Restated Byte 1
  local order_restated_byte_1 = nil

  local order_restated_byte_1_exists = order_restated_bitfield_count >= 1

  if order_restated_byte_1_exists then

    -- Order Restated Byte 1: Struct of 8 fields
    index, order_restated_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 2
  local order_restated_byte_2 = nil

  local order_restated_byte_2_exists = order_restated_bitfield_count >= 2

  if order_restated_byte_2_exists then

    -- Order Restated Byte 2: Struct of 8 fields
    index, order_restated_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 3
  local order_restated_byte_3 = nil

  local order_restated_byte_3_exists = order_restated_bitfield_count >= 3

  if order_restated_byte_3_exists then

    -- Order Restated Byte 3: Struct of 8 fields
    index, order_restated_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 4
  local order_restated_byte_4 = nil

  local order_restated_byte_4_exists = order_restated_bitfield_count >= 4

  if order_restated_byte_4_exists then

    -- Order Restated Byte 4: Struct of 8 fields
    index, order_restated_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 5
  local order_restated_byte_5 = nil

  local order_restated_byte_5_exists = order_restated_bitfield_count >= 5

  if order_restated_byte_5_exists then

    -- Order Restated Byte 5: Struct of 8 fields
    index, order_restated_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 6
  local order_restated_byte_6 = nil

  local order_restated_byte_6_exists = order_restated_bitfield_count >= 6

  if order_restated_byte_6_exists then

    -- Order Restated Byte 6: Struct of 8 fields
    index, order_restated_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 7
  local order_restated_byte_7 = nil

  local order_restated_byte_7_exists = order_restated_bitfield_count >= 7

  if order_restated_byte_7_exists then

    -- Order Restated Byte 7: Struct of 8 fields
    index, order_restated_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 8
  local order_restated_byte_8 = nil

  local order_restated_byte_8_exists = order_restated_bitfield_count >= 8

  if order_restated_byte_8_exists then

    -- Order Restated Byte 8: Struct of 8 fields
    index, order_restated_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 9
  local order_restated_byte_9 = nil

  local order_restated_byte_9_exists = order_restated_bitfield_count >= 9

  if order_restated_byte_9_exists then

    -- Order Restated Byte 9: Struct of 8 fields
    index, order_restated_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 10
  local order_restated_byte_10 = nil

  local order_restated_byte_10_exists = order_restated_bitfield_count >= 10

  if order_restated_byte_10_exists then

    -- Order Restated Byte 10: Struct of 8 fields
    index, order_restated_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 11
  local order_restated_byte_11 = nil

  local order_restated_byte_11_exists = order_restated_bitfield_count >= 11

  if order_restated_byte_11_exists then

    -- Order Restated Byte 11: Struct of 8 fields
    index, order_restated_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 12
  local order_restated_byte_12 = nil

  local order_restated_byte_12_exists = order_restated_bitfield_count >= 12

  if order_restated_byte_12_exists then

    -- Order Restated Byte 12: Struct of 8 fields
    index, order_restated_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 13
  local order_restated_byte_13 = nil

  local order_restated_byte_13_exists = order_restated_bitfield_count >= 13

  if order_restated_byte_13_exists then

    -- Order Restated Byte 13: Struct of 8 fields
    index, order_restated_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 14
  local order_restated_byte_14 = nil

  local order_restated_byte_14_exists = order_restated_bitfield_count >= 14

  if order_restated_byte_14_exists then

    -- Order Restated Byte 14: Struct of 8 fields
    index, order_restated_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 15
  local order_restated_byte_15 = nil

  local order_restated_byte_15_exists = order_restated_bitfield_count >= 15

  if order_restated_byte_15_exists then

    -- Order Restated Byte 15: Struct of 8 fields
    index, order_restated_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 16
  local order_restated_byte_16 = nil

  local order_restated_byte_16_exists = order_restated_bitfield_count >= 16

  if order_restated_byte_16_exists then

    -- Order Restated Byte 16: Struct of 8 fields
    index, order_restated_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Restated Byte 17
  local order_restated_byte_17 = nil

  local order_restated_byte_17_exists = order_restated_bitfield_count >= 17

  if order_restated_byte_17_exists then

    -- Order Restated Byte 17: Struct of 8 fields
    index, order_restated_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_restated_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Restated Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_restated_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_restated_return_bitfields then
    local range = buffer(offset, size_of_order_restated_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_restated_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.fields(buffer, offset, packet, parent, size_of_order_restated_return_bitfields)

  return offset + size_of_order_restated_return_bitfields
end

-- Order Modified Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields = {}

-- Read runtime size of: Order Modified Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Modified Bitfield Count
  local order_modified_bitfield_count = buffer(offset, 1):le_uint()

  return order_modified_bitfield_count + 1
end

-- Display: Order Modified Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Modified Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_order_modified_return_bitfields)
  local index = offset

  -- Order Modified Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_modified_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_modified_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Modified Byte 1
  local order_modified_byte_1 = nil

  local order_modified_byte_1_exists = order_modified_bitfield_count >= 1

  if order_modified_byte_1_exists then

    -- Order Modified Byte 1: Struct of 8 fields
    index, order_modified_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 2
  local order_modified_byte_2 = nil

  local order_modified_byte_2_exists = order_modified_bitfield_count >= 2

  if order_modified_byte_2_exists then

    -- Order Modified Byte 2: Struct of 8 fields
    index, order_modified_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 3
  local order_modified_byte_3 = nil

  local order_modified_byte_3_exists = order_modified_bitfield_count >= 3

  if order_modified_byte_3_exists then

    -- Order Modified Byte 3: Struct of 8 fields
    index, order_modified_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 4
  local order_modified_byte_4 = nil

  local order_modified_byte_4_exists = order_modified_bitfield_count >= 4

  if order_modified_byte_4_exists then

    -- Order Modified Byte 4: Struct of 8 fields
    index, order_modified_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 5
  local order_modified_byte_5 = nil

  local order_modified_byte_5_exists = order_modified_bitfield_count >= 5

  if order_modified_byte_5_exists then

    -- Order Modified Byte 5: Struct of 8 fields
    index, order_modified_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 6
  local order_modified_byte_6 = nil

  local order_modified_byte_6_exists = order_modified_bitfield_count >= 6

  if order_modified_byte_6_exists then

    -- Order Modified Byte 6: Struct of 8 fields
    index, order_modified_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 7
  local order_modified_byte_7 = nil

  local order_modified_byte_7_exists = order_modified_bitfield_count >= 7

  if order_modified_byte_7_exists then

    -- Order Modified Byte 7: Struct of 8 fields
    index, order_modified_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 8
  local order_modified_byte_8 = nil

  local order_modified_byte_8_exists = order_modified_bitfield_count >= 8

  if order_modified_byte_8_exists then

    -- Order Modified Byte 8: Struct of 8 fields
    index, order_modified_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 9
  local order_modified_byte_9 = nil

  local order_modified_byte_9_exists = order_modified_bitfield_count >= 9

  if order_modified_byte_9_exists then

    -- Order Modified Byte 9: Struct of 8 fields
    index, order_modified_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 10
  local order_modified_byte_10 = nil

  local order_modified_byte_10_exists = order_modified_bitfield_count >= 10

  if order_modified_byte_10_exists then

    -- Order Modified Byte 10: Struct of 8 fields
    index, order_modified_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 11
  local order_modified_byte_11 = nil

  local order_modified_byte_11_exists = order_modified_bitfield_count >= 11

  if order_modified_byte_11_exists then

    -- Order Modified Byte 11: Struct of 8 fields
    index, order_modified_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 12
  local order_modified_byte_12 = nil

  local order_modified_byte_12_exists = order_modified_bitfield_count >= 12

  if order_modified_byte_12_exists then

    -- Order Modified Byte 12: Struct of 8 fields
    index, order_modified_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 13
  local order_modified_byte_13 = nil

  local order_modified_byte_13_exists = order_modified_bitfield_count >= 13

  if order_modified_byte_13_exists then

    -- Order Modified Byte 13: Struct of 8 fields
    index, order_modified_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 14
  local order_modified_byte_14 = nil

  local order_modified_byte_14_exists = order_modified_bitfield_count >= 14

  if order_modified_byte_14_exists then

    -- Order Modified Byte 14: Struct of 8 fields
    index, order_modified_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 15
  local order_modified_byte_15 = nil

  local order_modified_byte_15_exists = order_modified_bitfield_count >= 15

  if order_modified_byte_15_exists then

    -- Order Modified Byte 15: Struct of 8 fields
    index, order_modified_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 16
  local order_modified_byte_16 = nil

  local order_modified_byte_16_exists = order_modified_bitfield_count >= 16

  if order_modified_byte_16_exists then

    -- Order Modified Byte 16: Struct of 8 fields
    index, order_modified_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Modified Byte 17
  local order_modified_byte_17 = nil

  local order_modified_byte_17_exists = order_modified_bitfield_count >= 17

  if order_modified_byte_17_exists then

    -- Order Modified Byte 17: Struct of 8 fields
    index, order_modified_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_modified_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Modified Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_modified_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_modified_return_bitfields then
    local range = buffer(offset, size_of_order_modified_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_modified_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.fields(buffer, offset, packet, parent, size_of_order_modified_return_bitfields)

  return offset + size_of_order_modified_return_bitfields
end

-- Cross Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields = {}

-- Read runtime size of: Cross Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Cross Order Rejected Bitfield Count
  local cross_order_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return cross_order_rejected_bitfield_count + 1
end

-- Display: Cross Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_cross_order_rejected_return_bitfields)
  local index = offset

  -- Cross Order Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cross_order_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cross Order Rejected Byte 1
  local cross_order_rejected_byte_1 = nil

  local cross_order_rejected_byte_1_exists = cross_order_rejected_bitfield_count >= 1

  if cross_order_rejected_byte_1_exists then

    -- Cross Order Rejected Byte 1: Struct of 8 fields
    index, cross_order_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 2
  local cross_order_rejected_byte_2 = nil

  local cross_order_rejected_byte_2_exists = cross_order_rejected_bitfield_count >= 2

  if cross_order_rejected_byte_2_exists then

    -- Cross Order Rejected Byte 2: Struct of 8 fields
    index, cross_order_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 3
  local cross_order_rejected_byte_3 = nil

  local cross_order_rejected_byte_3_exists = cross_order_rejected_bitfield_count >= 3

  if cross_order_rejected_byte_3_exists then

    -- Cross Order Rejected Byte 3: Struct of 8 fields
    index, cross_order_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 4
  local cross_order_rejected_byte_4 = nil

  local cross_order_rejected_byte_4_exists = cross_order_rejected_bitfield_count >= 4

  if cross_order_rejected_byte_4_exists then

    -- Cross Order Rejected Byte 4: Struct of 8 fields
    index, cross_order_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 5
  local cross_order_rejected_byte_5 = nil

  local cross_order_rejected_byte_5_exists = cross_order_rejected_bitfield_count >= 5

  if cross_order_rejected_byte_5_exists then

    -- Cross Order Rejected Byte 5: Struct of 8 fields
    index, cross_order_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 6
  local cross_order_rejected_byte_6 = nil

  local cross_order_rejected_byte_6_exists = cross_order_rejected_bitfield_count >= 6

  if cross_order_rejected_byte_6_exists then

    -- Cross Order Rejected Byte 6: Struct of 8 fields
    index, cross_order_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 7
  local cross_order_rejected_byte_7 = nil

  local cross_order_rejected_byte_7_exists = cross_order_rejected_bitfield_count >= 7

  if cross_order_rejected_byte_7_exists then

    -- Cross Order Rejected Byte 7: Struct of 8 fields
    index, cross_order_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 8
  local cross_order_rejected_byte_8 = nil

  local cross_order_rejected_byte_8_exists = cross_order_rejected_bitfield_count >= 8

  if cross_order_rejected_byte_8_exists then

    -- Cross Order Rejected Byte 8: Struct of 8 fields
    index, cross_order_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 9
  local cross_order_rejected_byte_9 = nil

  local cross_order_rejected_byte_9_exists = cross_order_rejected_bitfield_count >= 9

  if cross_order_rejected_byte_9_exists then

    -- Cross Order Rejected Byte 9: Struct of 8 fields
    index, cross_order_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 10
  local cross_order_rejected_byte_10 = nil

  local cross_order_rejected_byte_10_exists = cross_order_rejected_bitfield_count >= 10

  if cross_order_rejected_byte_10_exists then

    -- Cross Order Rejected Byte 10: Struct of 8 fields
    index, cross_order_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 11
  local cross_order_rejected_byte_11 = nil

  local cross_order_rejected_byte_11_exists = cross_order_rejected_bitfield_count >= 11

  if cross_order_rejected_byte_11_exists then

    -- Cross Order Rejected Byte 11: Struct of 8 fields
    index, cross_order_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 12
  local cross_order_rejected_byte_12 = nil

  local cross_order_rejected_byte_12_exists = cross_order_rejected_bitfield_count >= 12

  if cross_order_rejected_byte_12_exists then

    -- Cross Order Rejected Byte 12: Struct of 8 fields
    index, cross_order_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 13
  local cross_order_rejected_byte_13 = nil

  local cross_order_rejected_byte_13_exists = cross_order_rejected_bitfield_count >= 13

  if cross_order_rejected_byte_13_exists then

    -- Cross Order Rejected Byte 13: Struct of 8 fields
    index, cross_order_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 14
  local cross_order_rejected_byte_14 = nil

  local cross_order_rejected_byte_14_exists = cross_order_rejected_bitfield_count >= 14

  if cross_order_rejected_byte_14_exists then

    -- Cross Order Rejected Byte 14: Struct of 8 fields
    index, cross_order_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 15
  local cross_order_rejected_byte_15 = nil

  local cross_order_rejected_byte_15_exists = cross_order_rejected_bitfield_count >= 15

  if cross_order_rejected_byte_15_exists then

    -- Cross Order Rejected Byte 15: Struct of 8 fields
    index, cross_order_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 16
  local cross_order_rejected_byte_16 = nil

  local cross_order_rejected_byte_16_exists = cross_order_rejected_bitfield_count >= 16

  if cross_order_rejected_byte_16_exists then

    -- Cross Order Rejected Byte 16: Struct of 8 fields
    index, cross_order_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Rejected Byte 17
  local cross_order_rejected_byte_17 = nil

  local cross_order_rejected_byte_17_exists = cross_order_rejected_bitfield_count >= 17

  if cross_order_rejected_byte_17_exists then

    -- Cross Order Rejected Byte 17: Struct of 8 fields
    index, cross_order_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cross Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cross_order_rejected_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cross_order_rejected_return_bitfields then
    local range = buffer(offset, size_of_cross_order_rejected_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_rejected_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.fields(buffer, offset, packet, parent, size_of_cross_order_rejected_return_bitfields)

  return offset + size_of_cross_order_rejected_return_bitfields
end

-- Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields = {}

-- Read runtime size of: Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Rejected Bitfield Count
  local order_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return order_rejected_bitfield_count + 1
end

-- Display: Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_order_rejected_return_bitfields)
  local index = offset

  -- Order Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_rejected_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Rejected Byte 1
  local order_rejected_byte_1 = nil

  local order_rejected_byte_1_exists = order_rejected_bitfield_count >= 1

  if order_rejected_byte_1_exists then

    -- Order Rejected Byte 1: Struct of 8 fields
    index, order_rejected_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 2
  local order_rejected_byte_2 = nil

  local order_rejected_byte_2_exists = order_rejected_bitfield_count >= 2

  if order_rejected_byte_2_exists then

    -- Order Rejected Byte 2: Struct of 8 fields
    index, order_rejected_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 3
  local order_rejected_byte_3 = nil

  local order_rejected_byte_3_exists = order_rejected_bitfield_count >= 3

  if order_rejected_byte_3_exists then

    -- Order Rejected Byte 3: Struct of 8 fields
    index, order_rejected_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 4
  local order_rejected_byte_4 = nil

  local order_rejected_byte_4_exists = order_rejected_bitfield_count >= 4

  if order_rejected_byte_4_exists then

    -- Order Rejected Byte 4: Struct of 8 fields
    index, order_rejected_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 5
  local order_rejected_byte_5 = nil

  local order_rejected_byte_5_exists = order_rejected_bitfield_count >= 5

  if order_rejected_byte_5_exists then

    -- Order Rejected Byte 5: Struct of 8 fields
    index, order_rejected_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 6
  local order_rejected_byte_6 = nil

  local order_rejected_byte_6_exists = order_rejected_bitfield_count >= 6

  if order_rejected_byte_6_exists then

    -- Order Rejected Byte 6: Struct of 8 fields
    index, order_rejected_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 7
  local order_rejected_byte_7 = nil

  local order_rejected_byte_7_exists = order_rejected_bitfield_count >= 7

  if order_rejected_byte_7_exists then

    -- Order Rejected Byte 7: Struct of 8 fields
    index, order_rejected_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 8
  local order_rejected_byte_8 = nil

  local order_rejected_byte_8_exists = order_rejected_bitfield_count >= 8

  if order_rejected_byte_8_exists then

    -- Order Rejected Byte 8: Struct of 8 fields
    index, order_rejected_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 9
  local order_rejected_byte_9 = nil

  local order_rejected_byte_9_exists = order_rejected_bitfield_count >= 9

  if order_rejected_byte_9_exists then

    -- Order Rejected Byte 9: Struct of 8 fields
    index, order_rejected_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 10
  local order_rejected_byte_10 = nil

  local order_rejected_byte_10_exists = order_rejected_bitfield_count >= 10

  if order_rejected_byte_10_exists then

    -- Order Rejected Byte 10: Struct of 8 fields
    index, order_rejected_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 11
  local order_rejected_byte_11 = nil

  local order_rejected_byte_11_exists = order_rejected_bitfield_count >= 11

  if order_rejected_byte_11_exists then

    -- Order Rejected Byte 11: Struct of 8 fields
    index, order_rejected_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 12
  local order_rejected_byte_12 = nil

  local order_rejected_byte_12_exists = order_rejected_bitfield_count >= 12

  if order_rejected_byte_12_exists then

    -- Order Rejected Byte 12: Struct of 8 fields
    index, order_rejected_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 13
  local order_rejected_byte_13 = nil

  local order_rejected_byte_13_exists = order_rejected_bitfield_count >= 13

  if order_rejected_byte_13_exists then

    -- Order Rejected Byte 13: Struct of 8 fields
    index, order_rejected_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 14
  local order_rejected_byte_14 = nil

  local order_rejected_byte_14_exists = order_rejected_bitfield_count >= 14

  if order_rejected_byte_14_exists then

    -- Order Rejected Byte 14: Struct of 8 fields
    index, order_rejected_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 15
  local order_rejected_byte_15 = nil

  local order_rejected_byte_15_exists = order_rejected_bitfield_count >= 15

  if order_rejected_byte_15_exists then

    -- Order Rejected Byte 15: Struct of 8 fields
    index, order_rejected_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 16
  local order_rejected_byte_16 = nil

  local order_rejected_byte_16_exists = order_rejected_bitfield_count >= 16

  if order_rejected_byte_16_exists then

    -- Order Rejected Byte 16: Struct of 8 fields
    index, order_rejected_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Rejected Byte 17
  local order_rejected_byte_17 = nil

  local order_rejected_byte_17_exists = order_rejected_bitfield_count >= 17

  if order_rejected_byte_17_exists then

    -- Order Rejected Byte 17: Struct of 8 fields
    index, order_rejected_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Rejected Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_rejected_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_rejected_return_bitfields then
    local range = buffer(offset, size_of_order_rejected_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_rejected_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.fields(buffer, offset, packet, parent, size_of_order_rejected_return_bitfields)

  return offset + size_of_order_rejected_return_bitfields
end

-- Cross Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields = {}

-- Read runtime size of: Cross Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Cross Order Acknowledgment Bitfield Count
  local cross_order_acknowledgment_bitfield_count = buffer(offset, 1):le_uint()

  return cross_order_acknowledgment_bitfield_count + 1
end

-- Display: Cross Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cross Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_return_bitfields)
  local index = offset

  -- Cross Order Acknowledgment Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cross_order_acknowledgment_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Cross Order Acknowledgment Byte 1
  local cross_order_acknowledgment_byte_1 = nil

  local cross_order_acknowledgment_byte_1_exists = cross_order_acknowledgment_bitfield_count >= 1

  if cross_order_acknowledgment_byte_1_exists then

    -- Cross Order Acknowledgment Byte 1: Struct of 8 fields
    index, cross_order_acknowledgment_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 2
  local cross_order_acknowledgment_byte_2 = nil

  local cross_order_acknowledgment_byte_2_exists = cross_order_acknowledgment_bitfield_count >= 2

  if cross_order_acknowledgment_byte_2_exists then

    -- Cross Order Acknowledgment Byte 2: Struct of 8 fields
    index, cross_order_acknowledgment_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 3
  local cross_order_acknowledgment_byte_3 = nil

  local cross_order_acknowledgment_byte_3_exists = cross_order_acknowledgment_bitfield_count >= 3

  if cross_order_acknowledgment_byte_3_exists then

    -- Cross Order Acknowledgment Byte 3: Struct of 8 fields
    index, cross_order_acknowledgment_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 4
  local cross_order_acknowledgment_byte_4 = nil

  local cross_order_acknowledgment_byte_4_exists = cross_order_acknowledgment_bitfield_count >= 4

  if cross_order_acknowledgment_byte_4_exists then

    -- Cross Order Acknowledgment Byte 4: Struct of 8 fields
    index, cross_order_acknowledgment_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 5
  local cross_order_acknowledgment_byte_5 = nil

  local cross_order_acknowledgment_byte_5_exists = cross_order_acknowledgment_bitfield_count >= 5

  if cross_order_acknowledgment_byte_5_exists then

    -- Cross Order Acknowledgment Byte 5: Struct of 8 fields
    index, cross_order_acknowledgment_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 6
  local cross_order_acknowledgment_byte_6 = nil

  local cross_order_acknowledgment_byte_6_exists = cross_order_acknowledgment_bitfield_count >= 6

  if cross_order_acknowledgment_byte_6_exists then

    -- Cross Order Acknowledgment Byte 6: Struct of 8 fields
    index, cross_order_acknowledgment_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 7
  local cross_order_acknowledgment_byte_7 = nil

  local cross_order_acknowledgment_byte_7_exists = cross_order_acknowledgment_bitfield_count >= 7

  if cross_order_acknowledgment_byte_7_exists then

    -- Cross Order Acknowledgment Byte 7: Struct of 8 fields
    index, cross_order_acknowledgment_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 8
  local cross_order_acknowledgment_byte_8 = nil

  local cross_order_acknowledgment_byte_8_exists = cross_order_acknowledgment_bitfield_count >= 8

  if cross_order_acknowledgment_byte_8_exists then

    -- Cross Order Acknowledgment Byte 8: Struct of 8 fields
    index, cross_order_acknowledgment_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 9
  local cross_order_acknowledgment_byte_9 = nil

  local cross_order_acknowledgment_byte_9_exists = cross_order_acknowledgment_bitfield_count >= 9

  if cross_order_acknowledgment_byte_9_exists then

    -- Cross Order Acknowledgment Byte 9: Struct of 8 fields
    index, cross_order_acknowledgment_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 10
  local cross_order_acknowledgment_byte_10 = nil

  local cross_order_acknowledgment_byte_10_exists = cross_order_acknowledgment_bitfield_count >= 10

  if cross_order_acknowledgment_byte_10_exists then

    -- Cross Order Acknowledgment Byte 10: Struct of 8 fields
    index, cross_order_acknowledgment_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 11
  local cross_order_acknowledgment_byte_11 = nil

  local cross_order_acknowledgment_byte_11_exists = cross_order_acknowledgment_bitfield_count >= 11

  if cross_order_acknowledgment_byte_11_exists then

    -- Cross Order Acknowledgment Byte 11: Struct of 8 fields
    index, cross_order_acknowledgment_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 12
  local cross_order_acknowledgment_byte_12 = nil

  local cross_order_acknowledgment_byte_12_exists = cross_order_acknowledgment_bitfield_count >= 12

  if cross_order_acknowledgment_byte_12_exists then

    -- Cross Order Acknowledgment Byte 12: Struct of 8 fields
    index, cross_order_acknowledgment_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 13
  local cross_order_acknowledgment_byte_13 = nil

  local cross_order_acknowledgment_byte_13_exists = cross_order_acknowledgment_bitfield_count >= 13

  if cross_order_acknowledgment_byte_13_exists then

    -- Cross Order Acknowledgment Byte 13: Struct of 8 fields
    index, cross_order_acknowledgment_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 14
  local cross_order_acknowledgment_byte_14 = nil

  local cross_order_acknowledgment_byte_14_exists = cross_order_acknowledgment_bitfield_count >= 14

  if cross_order_acknowledgment_byte_14_exists then

    -- Cross Order Acknowledgment Byte 14: Struct of 8 fields
    index, cross_order_acknowledgment_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 15
  local cross_order_acknowledgment_byte_15 = nil

  local cross_order_acknowledgment_byte_15_exists = cross_order_acknowledgment_bitfield_count >= 15

  if cross_order_acknowledgment_byte_15_exists then

    -- Cross Order Acknowledgment Byte 15: Struct of 8 fields
    index, cross_order_acknowledgment_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 16
  local cross_order_acknowledgment_byte_16 = nil

  local cross_order_acknowledgment_byte_16_exists = cross_order_acknowledgment_bitfield_count >= 16

  if cross_order_acknowledgment_byte_16_exists then

    -- Cross Order Acknowledgment Byte 16: Struct of 8 fields
    index, cross_order_acknowledgment_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Cross Order Acknowledgment Byte 17
  local cross_order_acknowledgment_byte_17 = nil

  local cross_order_acknowledgment_byte_17_exists = cross_order_acknowledgment_bitfield_count >= 17

  if cross_order_acknowledgment_byte_17_exists then

    -- Cross Order Acknowledgment Byte 17: Struct of 8 fields
    index, cross_order_acknowledgment_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cross Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cross_order_acknowledgment_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cross_order_acknowledgment_return_bitfields then
    local range = buffer(offset, size_of_cross_order_acknowledgment_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.cross_order_acknowledgment_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.fields(buffer, offset, packet, parent, size_of_cross_order_acknowledgment_return_bitfields)

  return offset + size_of_cross_order_acknowledgment_return_bitfields
end

-- Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields = {}

-- Read runtime size of: Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Acknowledgment Bitfield Count
  local order_acknowledgment_bitfield_count = buffer(offset, 1):le_uint()

  return order_acknowledgment_bitfield_count + 1
end

-- Display: Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.fields = function(buffer, offset, packet, parent, size_of_order_acknowledgment_return_bitfields)
  local index = offset

  -- Order Acknowledgment Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_acknowledgment_bitfield_count = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_bitfield_count.dissect(buffer, index, packet, parent)

  -- Runtime optional field: Order Acknowledgment Byte 1
  local order_acknowledgment_byte_1 = nil

  local order_acknowledgment_byte_1_exists = order_acknowledgment_bitfield_count >= 1

  if order_acknowledgment_byte_1_exists then

    -- Order Acknowledgment Byte 1: Struct of 8 fields
    index, order_acknowledgment_byte_1 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_1.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 2
  local order_acknowledgment_byte_2 = nil

  local order_acknowledgment_byte_2_exists = order_acknowledgment_bitfield_count >= 2

  if order_acknowledgment_byte_2_exists then

    -- Order Acknowledgment Byte 2: Struct of 8 fields
    index, order_acknowledgment_byte_2 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_2.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 3
  local order_acknowledgment_byte_3 = nil

  local order_acknowledgment_byte_3_exists = order_acknowledgment_bitfield_count >= 3

  if order_acknowledgment_byte_3_exists then

    -- Order Acknowledgment Byte 3: Struct of 8 fields
    index, order_acknowledgment_byte_3 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_3.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 4
  local order_acknowledgment_byte_4 = nil

  local order_acknowledgment_byte_4_exists = order_acknowledgment_bitfield_count >= 4

  if order_acknowledgment_byte_4_exists then

    -- Order Acknowledgment Byte 4: Struct of 8 fields
    index, order_acknowledgment_byte_4 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_4.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 5
  local order_acknowledgment_byte_5 = nil

  local order_acknowledgment_byte_5_exists = order_acknowledgment_bitfield_count >= 5

  if order_acknowledgment_byte_5_exists then

    -- Order Acknowledgment Byte 5: Struct of 8 fields
    index, order_acknowledgment_byte_5 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_5.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 6
  local order_acknowledgment_byte_6 = nil

  local order_acknowledgment_byte_6_exists = order_acknowledgment_bitfield_count >= 6

  if order_acknowledgment_byte_6_exists then

    -- Order Acknowledgment Byte 6: Struct of 8 fields
    index, order_acknowledgment_byte_6 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_6.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 7
  local order_acknowledgment_byte_7 = nil

  local order_acknowledgment_byte_7_exists = order_acknowledgment_bitfield_count >= 7

  if order_acknowledgment_byte_7_exists then

    -- Order Acknowledgment Byte 7: Struct of 8 fields
    index, order_acknowledgment_byte_7 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_7.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 8
  local order_acknowledgment_byte_8 = nil

  local order_acknowledgment_byte_8_exists = order_acknowledgment_bitfield_count >= 8

  if order_acknowledgment_byte_8_exists then

    -- Order Acknowledgment Byte 8: Struct of 8 fields
    index, order_acknowledgment_byte_8 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_8.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 9
  local order_acknowledgment_byte_9 = nil

  local order_acknowledgment_byte_9_exists = order_acknowledgment_bitfield_count >= 9

  if order_acknowledgment_byte_9_exists then

    -- Order Acknowledgment Byte 9: Struct of 8 fields
    index, order_acknowledgment_byte_9 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_9.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 10
  local order_acknowledgment_byte_10 = nil

  local order_acknowledgment_byte_10_exists = order_acknowledgment_bitfield_count >= 10

  if order_acknowledgment_byte_10_exists then

    -- Order Acknowledgment Byte 10: Struct of 8 fields
    index, order_acknowledgment_byte_10 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_10.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 11
  local order_acknowledgment_byte_11 = nil

  local order_acknowledgment_byte_11_exists = order_acknowledgment_bitfield_count >= 11

  if order_acknowledgment_byte_11_exists then

    -- Order Acknowledgment Byte 11: Struct of 8 fields
    index, order_acknowledgment_byte_11 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_11.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 12
  local order_acknowledgment_byte_12 = nil

  local order_acknowledgment_byte_12_exists = order_acknowledgment_bitfield_count >= 12

  if order_acknowledgment_byte_12_exists then

    -- Order Acknowledgment Byte 12: Struct of 8 fields
    index, order_acknowledgment_byte_12 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_12.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 13
  local order_acknowledgment_byte_13 = nil

  local order_acknowledgment_byte_13_exists = order_acknowledgment_bitfield_count >= 13

  if order_acknowledgment_byte_13_exists then

    -- Order Acknowledgment Byte 13: Struct of 8 fields
    index, order_acknowledgment_byte_13 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_13.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 14
  local order_acknowledgment_byte_14 = nil

  local order_acknowledgment_byte_14_exists = order_acknowledgment_bitfield_count >= 14

  if order_acknowledgment_byte_14_exists then

    -- Order Acknowledgment Byte 14: Struct of 8 fields
    index, order_acknowledgment_byte_14 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_14.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 15
  local order_acknowledgment_byte_15 = nil

  local order_acknowledgment_byte_15_exists = order_acknowledgment_bitfield_count >= 15

  if order_acknowledgment_byte_15_exists then

    -- Order Acknowledgment Byte 15: Struct of 8 fields
    index, order_acknowledgment_byte_15 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_15.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 16
  local order_acknowledgment_byte_16 = nil

  local order_acknowledgment_byte_16_exists = order_acknowledgment_bitfield_count >= 16

  if order_acknowledgment_byte_16_exists then

    -- Order Acknowledgment Byte 16: Struct of 8 fields
    index, order_acknowledgment_byte_16 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_16.dissect(buffer, index, packet, parent)
  end

  -- Runtime optional field: Order Acknowledgment Byte 17
  local order_acknowledgment_byte_17 = nil

  local order_acknowledgment_byte_17_exists = order_acknowledgment_bitfield_count >= 17

  if order_acknowledgment_byte_17_exists then

    -- Order Acknowledgment Byte 17: Struct of 8 fields
    index, order_acknowledgment_byte_17 = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_byte_17.dissect(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Acknowledgment Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_acknowledgment_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_acknowledgment_return_bitfields then
    local range = buffer(offset, size_of_order_acknowledgment_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.order_acknowledgment_return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.fields(buffer, offset, packet, parent, size_of_order_acknowledgment_return_bitfields)

  return offset + size_of_order_acknowledgment_return_bitfields
end

-- Bitfields
cboe_edgx_options_orderentry_boe_v2_10.bitfields = {}

-- Calculate runtime size of: Bitfields
cboe_edgx_options_orderentry_boe_v2_10.bitfields.size = function(buffer, offset, application_message_type)
  -- Size of Order Acknowledgment Return Bitfields
  if application_message_type == 0x25 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.size(buffer, offset)
  end
  -- Size of Cross Order Acknowledgment Return Bitfields
  if application_message_type == 0x43 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.size(buffer, offset)
  end
  -- Size of Order Rejected Return Bitfields
  if application_message_type == 0x26 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.size(buffer, offset)
  end
  -- Size of Cross Order Rejected Return Bitfields
  if application_message_type == 0x44 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.size(buffer, offset)
  end
  -- Size of Order Modified Return Bitfields
  if application_message_type == 0x27 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.size(buffer, offset)
  end
  -- Size of Order Restated Return Bitfields
  if application_message_type == 0x28 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.size(buffer, offset)
  end
  -- Size of User Modify Rejected Return Bitfields
  if application_message_type == 0x29 then
    return cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.size(buffer, offset)
  end
  -- Size of Order Cancelled Return Bitfields
  if application_message_type == 0x2A then
    return cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.size(buffer, offset)
  end
  -- Size of Cross Order Cancelled Return Bitfields
  if application_message_type == 0x46 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.size(buffer, offset)
  end
  -- Size of Cancel Rejected Return Bitfields
  if application_message_type == 0x2B then
    return cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.size(buffer, offset)
  end
  -- Size of Order Execution Return Bitfields
  if application_message_type == 0x2C then
    return cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.size(buffer, offset)
  end
  -- Size of Trade Cancel Or Correct Return Bitfields
  if application_message_type == 0x2D then
    return cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.size(buffer, offset)
  end
  -- Size of Purge Rejected Return Bitfields
  if application_message_type == 0x48 then
    return cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.size(buffer, offset)
  end
  -- Size of Complex Instrument Accepted Return Bitfields
  if application_message_type == 0x4D then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.size(buffer, offset)
  end
  -- Size of Complex Instrument Rejected Return Bitfields
  if application_message_type == 0x4E then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.size(buffer, offset)
  end

  return 0
end

-- Display: Bitfields
cboe_edgx_options_orderentry_boe_v2_10.bitfields.display = function(buffer, offset, packet, parent)
  return ""
end

-- Dissect Branches: Bitfields
cboe_edgx_options_orderentry_boe_v2_10.bitfields.branches = function(buffer, offset, packet, parent, application_message_type)
  -- Dissect Order Acknowledgment Return Bitfields
  if application_message_type == 0x25 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cross Order Acknowledgment Return Bitfields
  if application_message_type == 0x43 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Rejected Return Bitfields
  if application_message_type == 0x26 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_rejected_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cross Order Rejected Return Bitfields
  if application_message_type == 0x44 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Modified Return Bitfields
  if application_message_type == 0x27 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_modified_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Restated Return Bitfields
  if application_message_type == 0x28 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_restated_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect User Modify Rejected Return Bitfields
  if application_message_type == 0x29 then
    return cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Cancelled Return Bitfields
  if application_message_type == 0x2A then
    return cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cross Order Cancelled Return Bitfields
  if application_message_type == 0x46 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cancel Rejected Return Bitfields
  if application_message_type == 0x2B then
    return cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Execution Return Bitfields
  if application_message_type == 0x2C then
    return cboe_edgx_options_orderentry_boe_v2_10.order_execution_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Trade Cancel Or Correct Return Bitfields
  if application_message_type == 0x2D then
    return cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Purge Rejected Return Bitfields
  if application_message_type == 0x48 then
    return cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Complex Instrument Accepted Return Bitfields
  if application_message_type == 0x4D then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_return_bitfields.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Complex Instrument Rejected Return Bitfields
  if application_message_type == 0x4E then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_return_bitfields.dissect(buffer, offset, packet, parent)
  end

  return offset
end

-- Dissect: Bitfields
cboe_edgx_options_orderentry_boe_v2_10.bitfields.dissect = function(buffer, offset, packet, parent, application_message_type)
  if not show.bitfields then
    return cboe_edgx_options_orderentry_boe_v2_10.bitfields.branches(buffer, offset, packet, parent, application_message_type)
  end

  -- Calculate size and check that branch is not empty
  local size = cboe_edgx_options_orderentry_boe_v2_10.bitfields.size(buffer, offset, application_message_type)
  if size == 0 then
    return offset
  end

  -- Dissect Element
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.bitfields.display(buffer, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.bitfields, range, display)

  return cboe_edgx_options_orderentry_boe_v2_10.bitfields.branches(buffer, offset, packet, parent, application_message_type)
end

-- Application Message Type
cboe_edgx_options_orderentry_boe_v2_10.application_message_type = {}

-- Size Of: Application Message Type
cboe_edgx_options_orderentry_boe_v2_10.application_message_type.size = 1

-- Display: Application Message Type
cboe_edgx_options_orderentry_boe_v2_10.application_message_type.display = function(value)
  if value == 0x25 then
    return "Application Message Type: Order Acknowledgment (0x25)"
  end
  if value == 0x43 then
    return "Application Message Type: Cross Order Acknowledgment (0x43)"
  end
  if value == 0x26 then
    return "Application Message Type: Order Rejected (0x26)"
  end
  if value == 0x44 then
    return "Application Message Type: Cross Order Rejected (0x44)"
  end
  if value == 0x27 then
    return "Application Message Type: Order Modified (0x27)"
  end
  if value == 0x28 then
    return "Application Message Type: Order Restated (0x28)"
  end
  if value == 0x29 then
    return "Application Message Type: User Modify Rejected (0x29)"
  end
  if value == 0x2A then
    return "Application Message Type: Order Cancelled (0x2A)"
  end
  if value == 0x46 then
    return "Application Message Type: Cross Order Cancelled (0x46)"
  end
  if value == 0x2B then
    return "Application Message Type: Cancel Rejected (0x2B)"
  end
  if value == 0x2C then
    return "Application Message Type: Order Execution (0x2C)"
  end
  if value == 0x2D then
    return "Application Message Type: Trade Cancel Or Correct (0x2D)"
  end
  if value == 0x48 then
    return "Application Message Type: Purge Rejected (0x48)"
  end
  if value == 0x4D then
    return "Application Message Type: Complex Instrument Accepted (0x4D)"
  end
  if value == 0x4E then
    return "Application Message Type: Complex Instrument Rejected (0x4E)"
  end

  return "Application Message Type: Unknown("..value..")"
end

-- Dissect: Application Message Type
cboe_edgx_options_orderentry_boe_v2_10.application_message_type.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.application_message_type.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.application_message_type.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.application_message_type, range, value, display)

  return offset + length, value
end

-- Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.return_bitfields = {}

-- Read runtime size of: Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Param Group Length
  local param_group_length = buffer(offset - 3, 2):le_uint()

  return param_group_length - 3
end

-- Display: Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.fields = function(buffer, offset, packet, parent, size_of_return_bitfields)
  local index = offset

  -- Application Message Type: 1 Byte Unsigned Fixed Width Integer Enum with 15 values
  index, application_message_type = cboe_edgx_options_orderentry_boe_v2_10.application_message_type.dissect(buffer, index, packet, parent)

  -- Bitfields: Runtime Type with 15 branches
  index = cboe_edgx_options_orderentry_boe_v2_10.bitfields.dissect(buffer, index, packet, parent, application_message_type)

  return index
end

-- Dissect: Return Bitfields
cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_return_bitfields = cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.return_bitfields then
    local range = buffer(offset, size_of_return_bitfields)
    local display = cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.return_bitfields, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.fields(buffer, offset, packet, parent, size_of_return_bitfields)

  return offset + size_of_return_bitfields
end

-- No Unspecified Unit Replay
cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay = {}

-- Size Of: No Unspecified Unit Replay
cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.size = 1

-- Display: No Unspecified Unit Replay
cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.display = function(value)
  if value == "0" then
    return "No Unspecified Unit Replay: False (0)"
  end
  if value == "1" then
    return "No Unspecified Unit Replay: True (1)"
  end
  if value == "T" then
    return "No Unspecified Unit Replay: Test (T)"
  end

  return "No Unspecified Unit Replay: Unknown("..value..")"
end

-- Dissect: No Unspecified Unit Replay
cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.no_unspecified_unit_replay, range, value, display)

  return offset + length, value
end

-- Unit Sequences
cboe_edgx_options_orderentry_boe_v2_10.unit_sequences = {}

-- Calculate size of: Unit Sequences
cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.size = function(buffer, offset)
  local index = 0

  index = index + cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.size

  index = index + cboe_edgx_options_orderentry_boe_v2_10.number_of_units.size

  -- Calculate field size from count
  local unit_sequence_count = buffer(offset + index - 1, 1):le_uint()
  index = index + unit_sequence_count * 5

  return index
end

-- Display: Unit Sequences
cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Unit Sequences
cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.fields = function(buffer, offset, packet, parent)
  local index = offset

  -- No Unspecified Unit Replay: 1 Byte Ascii String Enum with 3 values
  index, no_unspecified_unit_replay = cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.dissect(buffer, index, packet, parent)

  -- Number Of Units: 1 Byte Unsigned Fixed Width Integer
  index, number_of_units = cboe_edgx_options_orderentry_boe_v2_10.number_of_units.dissect(buffer, index, packet, parent)

  -- Repeating: Unit Sequence
  for unit_sequence_index = 1, number_of_units do
    index, unit_sequence = cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.dissect(buffer, index, packet, parent, unit_sequence_index)
  end

  return index
end

-- Dissect: Unit Sequences
cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.dissect = function(buffer, offset, packet, parent)
  -- Optionally add dynamic struct element to protocol tree
  if show.unit_sequences then
    local length = cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.size(buffer, offset)
    local range = buffer(offset, length)
    local display = cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.unit_sequences, range, display)
  end

  return cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.fields(buffer, offset, packet, parent)
end

-- Parameter
cboe_edgx_options_orderentry_boe_v2_10.parameter = {}

-- Calculate runtime size of: Parameter
cboe_edgx_options_orderentry_boe_v2_10.parameter.size = function(buffer, offset, param_group_type)
  -- Size of Unit Sequences
  if param_group_type == 0x80 then
    return cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.size(buffer, offset)
  end
  -- Size of Return Bitfields
  if param_group_type == 0x81 then
    return cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.size(buffer, offset)
  end

  return 0
end

-- Display: Parameter
cboe_edgx_options_orderentry_boe_v2_10.parameter.display = function(buffer, offset, packet, parent)
  return ""
end

-- Dissect Branches: Parameter
cboe_edgx_options_orderentry_boe_v2_10.parameter.branches = function(buffer, offset, packet, parent, param_group_type)
  -- Dissect Unit Sequences
  if param_group_type == 0x80 then
    return cboe_edgx_options_orderentry_boe_v2_10.unit_sequences.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Return Bitfields
  if param_group_type == 0x81 then
    return cboe_edgx_options_orderentry_boe_v2_10.return_bitfields.dissect(buffer, offset, packet, parent)
  end

  return offset
end

-- Dissect: Parameter
cboe_edgx_options_orderentry_boe_v2_10.parameter.dissect = function(buffer, offset, packet, parent, param_group_type)
  if not show.parameter then
    return cboe_edgx_options_orderentry_boe_v2_10.parameter.branches(buffer, offset, packet, parent, param_group_type)
  end

  -- Calculate size and check that branch is not empty
  local size = cboe_edgx_options_orderentry_boe_v2_10.parameter.size(buffer, offset, param_group_type)
  if size == 0 then
    return offset
  end

  -- Dissect Element
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.parameter.display(buffer, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.parameter, range, display)

  return cboe_edgx_options_orderentry_boe_v2_10.parameter.branches(buffer, offset, packet, parent, param_group_type)
end

-- Param Group Type
cboe_edgx_options_orderentry_boe_v2_10.param_group_type = {}

-- Size Of: Param Group Type
cboe_edgx_options_orderentry_boe_v2_10.param_group_type.size = 1

-- Display: Param Group Type
cboe_edgx_options_orderentry_boe_v2_10.param_group_type.display = function(value)
  if value == 0x80 then
    return "Param Group Type: Unit Sequences (0x80)"
  end
  if value == 0x81 then
    return "Param Group Type: Return Bitfields (0x81)"
  end

  return "Param Group Type: Unknown("..value..")"
end

-- Dissect: Param Group Type
cboe_edgx_options_orderentry_boe_v2_10.param_group_type.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.param_group_type.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.param_group_type.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group_type, range, value, display)

  return offset + length, value
end

-- Param Group Length
cboe_edgx_options_orderentry_boe_v2_10.param_group_length = {}

-- Size Of: Param Group Length
cboe_edgx_options_orderentry_boe_v2_10.param_group_length.size = 2

-- Display: Param Group Length
cboe_edgx_options_orderentry_boe_v2_10.param_group_length.display = function(value)
  return "Param Group Length: "..value
end

-- Dissect: Param Group Length
cboe_edgx_options_orderentry_boe_v2_10.param_group_length.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.param_group_length.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.param_group_length.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group_length, range, value, display)

  return offset + length, value
end

-- Param Header
cboe_edgx_options_orderentry_boe_v2_10.param_header = {}

-- Size Of: Param Header
cboe_edgx_options_orderentry_boe_v2_10.param_header.size =
  cboe_edgx_options_orderentry_boe_v2_10.param_group_length.size + 
  cboe_edgx_options_orderentry_boe_v2_10.param_group_type.size;

-- Display: Param Header
cboe_edgx_options_orderentry_boe_v2_10.param_header.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Param Header
cboe_edgx_options_orderentry_boe_v2_10.param_header.fields = function(buffer, offset, packet, parent)
  local index = offset

  -- Param Group Length: 2 Byte Unsigned Fixed Width Integer
  index, param_group_length = cboe_edgx_options_orderentry_boe_v2_10.param_group_length.dissect(buffer, index, packet, parent)

  -- Param Group Type: 1 Byte Unsigned Fixed Width Integer Enum with 2 values
  index, param_group_type = cboe_edgx_options_orderentry_boe_v2_10.param_group_type.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Param Header
cboe_edgx_options_orderentry_boe_v2_10.param_header.dissect = function(buffer, offset, packet, parent)
  if show.param_header then
    -- Optionally add element to protocol tree
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_header, buffer(offset, 0))
    local index = cboe_edgx_options_orderentry_boe_v2_10.param_header.fields(buffer, offset, packet, parent)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_edgx_options_orderentry_boe_v2_10.param_header.display(packet, parent, length)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    return cboe_edgx_options_orderentry_boe_v2_10.param_header.fields(buffer, offset, packet, parent)
  end
end

-- Param Group
cboe_edgx_options_orderentry_boe_v2_10.param_group = {}

-- Display: Param Group
cboe_edgx_options_orderentry_boe_v2_10.param_group.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Param Group
cboe_edgx_options_orderentry_boe_v2_10.param_group.fields = function(buffer, offset, packet, parent, size_of_param_group, param_group_index)
  local index = offset

  -- Implicit Param Group Index
  if param_group_index ~= nil then
    local iteration = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group_index, param_group_index)
    iteration:set_generated()
  end

  -- Param Header: Struct of 2 fields
  index, param_header = cboe_edgx_options_orderentry_boe_v2_10.param_header.dissect(buffer, index, packet, parent)

  -- Dependency element: Param Group Type
  local param_group_type = buffer(index - 1, 1):le_uint()

  -- Parameter: Runtime Type with 2 branches
  index = cboe_edgx_options_orderentry_boe_v2_10.parameter.dissect(buffer, index, packet, parent, param_group_type)

  return index
end

-- Dissect: Param Group
cboe_edgx_options_orderentry_boe_v2_10.param_group.dissect = function(buffer, offset, packet, parent, size_of_param_group, param_group_index)
  local index = offset + size_of_param_group

  -- Optionally add group/struct element to protocol tree
  if show.param_group then
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.param_group, buffer(offset, 0))
    local current = cboe_edgx_options_orderentry_boe_v2_10.param_group.fields(buffer, offset, packet, parent, size_of_param_group, param_group_index)
    parent:set_len(size_of_param_group)
    local display = cboe_edgx_options_orderentry_boe_v2_10.param_group.display(buffer, packet, parent)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    cboe_edgx_options_orderentry_boe_v2_10.param_group.fields(buffer, offset, packet, parent, size_of_param_group, param_group_index)

    return index
  end
end

-- Number Of Param Groups
cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups = {}

-- Size Of: Number Of Param Groups
cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups.size = 1

-- Display: Number Of Param Groups
cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups.display = function(value)
  return "Number Of Param Groups: "..value
end

-- Dissect: Number Of Param Groups
cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.number_of_param_groups, range, value, display)

  return offset + length, value
end

-- Login Response Text
cboe_edgx_options_orderentry_boe_v2_10.login_response_text = {}

-- Size Of: Login Response Text
cboe_edgx_options_orderentry_boe_v2_10.login_response_text.size = 60

-- Display: Login Response Text
cboe_edgx_options_orderentry_boe_v2_10.login_response_text.display = function(value)
  return "Login Response Text: "..value
end

-- Dissect: Login Response Text
cboe_edgx_options_orderentry_boe_v2_10.login_response_text.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.login_response_text.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.login_response_text.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_response_text, range, value, display)

  return offset + length, value
end

-- Login Response Status
cboe_edgx_options_orderentry_boe_v2_10.login_response_status = {}

-- Size Of: Login Response Status
cboe_edgx_options_orderentry_boe_v2_10.login_response_status.size = 1

-- Display: Login Response Status
cboe_edgx_options_orderentry_boe_v2_10.login_response_status.display = function(value)
  if value == "A" then
    return "Login Response Status: Login Accepted (A)"
  end
  if value == "N" then
    return "Login Response Status: Not Authorized (N)"
  end
  if value == "D" then
    return "Login Response Status: Session Is Disabled (D)"
  end
  if value == "B" then
    return "Login Response Status: Session In Use (B)"
  end
  if value == "S" then
    return "Login Response Status: Invalid Session (S)"
  end
  if value == "Q" then
    return "Login Response Status: Sequence Ahead In Login Message (Q)"
  end
  if value == "I" then
    return "Login Response Status: Invalid Unit Given In Login Message (I)"
  end
  if value == "F" then
    return "Login Response Status: Invalid Return Bit Field In Login Message (F)"
  end
  if value == "M" then
    return "Login Response Status: Invalid Login Request Message Structure (M)"
  end

  return "Login Response Status: Unknown("..value..")"
end

-- Dissect: Login Response Status
cboe_edgx_options_orderentry_boe_v2_10.login_response_status.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.login_response_status.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.login_response_status.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_response_status, range, value, display)

  return offset + length, value
end

-- Login Response Message
cboe_edgx_options_orderentry_boe_v2_10.login_response_message = {}

-- Read runtime size of: Login Response Message
cboe_edgx_options_orderentry_boe_v2_10.login_response_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Login Response Message
cboe_edgx_options_orderentry_boe_v2_10.login_response_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Login Response Message
cboe_edgx_options_orderentry_boe_v2_10.login_response_message.fields = function(buffer, offset, packet, parent, size_of_login_response_message)
  local index = offset

  -- Login Response Status: 1 Byte Ascii String Enum with 9 values
  index, login_response_status = cboe_edgx_options_orderentry_boe_v2_10.login_response_status.dissect(buffer, index, packet, parent)

  -- Login Response Text: 60 Byte Ascii String
  index, login_response_text = cboe_edgx_options_orderentry_boe_v2_10.login_response_text.dissect(buffer, index, packet, parent)

  -- No Unspecified Unit Replay: 1 Byte Ascii String Enum with 3 values
  index, no_unspecified_unit_replay = cboe_edgx_options_orderentry_boe_v2_10.no_unspecified_unit_replay.dissect(buffer, index, packet, parent)

  -- Last Received Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, last_received_sequence_number = cboe_edgx_options_orderentry_boe_v2_10.last_received_sequence_number.dissect(buffer, index, packet, parent)

  -- Number Of Units: 1 Byte Unsigned Fixed Width Integer
  index, number_of_units = cboe_edgx_options_orderentry_boe_v2_10.number_of_units.dissect(buffer, index, packet, parent)

  -- Repeating: Unit Sequence
  for unit_sequence_index = 1, number_of_units do
    index, unit_sequence = cboe_edgx_options_orderentry_boe_v2_10.unit_sequence.dissect(buffer, index, packet, parent, unit_sequence_index)
  end

  -- Number Of Param Groups: 1 Byte Unsigned Fixed Width Integer
  index, number_of_param_groups = cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups.dissect(buffer, index, packet, parent)

  -- Repeating: Param Group
  for param_group_index = 1, number_of_param_groups do

    -- Dependency element: Param Group Length
    local param_group_length = buffer(index, 2):le_uint()

    -- Runtime Size Of: Param Group
    index, param_group = cboe_edgx_options_orderentry_boe_v2_10.param_group.dissect(buffer, index, packet, parent, param_group_length)
  end

  return index
end

-- Dissect: Login Response Message
cboe_edgx_options_orderentry_boe_v2_10.login_response_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_login_response_message = cboe_edgx_options_orderentry_boe_v2_10.login_response_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.login_response_message then
    local range = buffer(offset, size_of_login_response_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.login_response_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_response_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.login_response_message.fields(buffer, offset, packet, parent, size_of_login_response_message)

  return offset + size_of_login_response_message
end

-- Password
cboe_edgx_options_orderentry_boe_v2_10.password = {}

-- Size Of: Password
cboe_edgx_options_orderentry_boe_v2_10.password.size = 10

-- Display: Password
cboe_edgx_options_orderentry_boe_v2_10.password.display = function(value)
  return "Password: "..value
end

-- Dissect: Password
cboe_edgx_options_orderentry_boe_v2_10.password.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.password.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.password.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.password, range, value, display)

  return offset + length, value
end

-- Username
cboe_edgx_options_orderentry_boe_v2_10.username = {}

-- Size Of: Username
cboe_edgx_options_orderentry_boe_v2_10.username.size = 4

-- Display: Username
cboe_edgx_options_orderentry_boe_v2_10.username.display = function(value)
  return "Username: "..value
end

-- Dissect: Username
cboe_edgx_options_orderentry_boe_v2_10.username.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.username.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.username.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.username, range, value, display)

  return offset + length, value
end

-- Session Sub Id
cboe_edgx_options_orderentry_boe_v2_10.session_sub_id = {}

-- Size Of: Session Sub Id
cboe_edgx_options_orderentry_boe_v2_10.session_sub_id.size = 4

-- Display: Session Sub Id
cboe_edgx_options_orderentry_boe_v2_10.session_sub_id.display = function(value)
  return "Session Sub Id: "..value
end

-- Dissect: Session Sub Id
cboe_edgx_options_orderentry_boe_v2_10.session_sub_id.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.session_sub_id.size
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_edgx_options_orderentry_boe_v2_10.session_sub_id.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.session_sub_id, range, value, display)

  return offset + length, value
end

-- Login Request Message
cboe_edgx_options_orderentry_boe_v2_10.login_request_message = {}

-- Read runtime size of: Login Request Message
cboe_edgx_options_orderentry_boe_v2_10.login_request_message.size = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Login Request Message
cboe_edgx_options_orderentry_boe_v2_10.login_request_message.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Login Request Message
cboe_edgx_options_orderentry_boe_v2_10.login_request_message.fields = function(buffer, offset, packet, parent, size_of_login_request_message)
  local index = offset

  -- Session Sub Id: 4 Byte Ascii String
  index, session_sub_id = cboe_edgx_options_orderentry_boe_v2_10.session_sub_id.dissect(buffer, index, packet, parent)

  -- Username: 4 Byte Ascii String
  index, username = cboe_edgx_options_orderentry_boe_v2_10.username.dissect(buffer, index, packet, parent)

  -- Password: 10 Byte Ascii String
  index, password = cboe_edgx_options_orderentry_boe_v2_10.password.dissect(buffer, index, packet, parent)

  -- Number Of Param Groups: 1 Byte Unsigned Fixed Width Integer
  index, number_of_param_groups = cboe_edgx_options_orderentry_boe_v2_10.number_of_param_groups.dissect(buffer, index, packet, parent)

  -- Repeating: Param Group
  for param_group_index = 1, number_of_param_groups do

    -- Dependency element: Param Group Length
    local param_group_length = buffer(index, 2):le_uint()

    -- Runtime Size Of: Param Group
    index, param_group = cboe_edgx_options_orderentry_boe_v2_10.param_group.dissect(buffer, index, packet, parent, param_group_length)
  end

  return index
end

-- Dissect: Login Request Message
cboe_edgx_options_orderentry_boe_v2_10.login_request_message.dissect = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_login_request_message = cboe_edgx_options_orderentry_boe_v2_10.login_request_message.size(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.login_request_message then
    local range = buffer(offset, size_of_login_request_message)
    local display = cboe_edgx_options_orderentry_boe_v2_10.login_request_message.display(buffer, packet, parent)
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.login_request_message, range, display)
  end

  cboe_edgx_options_orderentry_boe_v2_10.login_request_message.fields(buffer, offset, packet, parent, size_of_login_request_message)

  return offset + size_of_login_request_message
end

-- Message
cboe_edgx_options_orderentry_boe_v2_10.message = {}

-- Calculate runtime size of: Message
cboe_edgx_options_orderentry_boe_v2_10.message.size = function(buffer, offset, message_type)
  -- Size of Login Request Message
  if message_type == 0x37 then
    return cboe_edgx_options_orderentry_boe_v2_10.login_request_message.size(buffer, offset)
  end
  -- Size of Logout Request Message
  if message_type == 0x02 then
    return 0
  end
  -- Size of Client Heartbeat Message
  if message_type == 0x03 then
    return 0
  end
  -- Size of Login Response Message
  if message_type == 0x24 then
    return cboe_edgx_options_orderentry_boe_v2_10.login_response_message.size(buffer, offset)
  end
  -- Size of Logout Message
  if message_type == 0x02 then
    return cboe_edgx_options_orderentry_boe_v2_10.logout_message.size(buffer, offset)
  end
  -- Size of Server Heartbeat Message
  if message_type == 0x09 then
    return 0
  end
  -- Size of Replay Complete Message
  if message_type == 0x13 then
    return 0
  end
  -- Size of New Order Message
  if message_type == 0x38 then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_message.size(buffer, offset)
  end
  -- Size of New Order Cross Message
  if message_type == 0x41 then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.size(buffer, offset)
  end
  -- Size of New Order Complex Message
  if message_type == 0x4B then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.size(buffer, offset)
  end
  -- Size of New Order Cross Multileg Message
  if message_type == 0x5A then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.size(buffer, offset)
  end
  -- Size of Cancel Order Message
  if message_type == 0x39 then
    return cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.size(buffer, offset)
  end
  -- Size of Modify Order Message
  if message_type == 0x3A then
    return cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.size(buffer, offset)
  end
  -- Size of Quote Update Message
  if message_type == 0x55 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.size(buffer, offset)
  end
  -- Size of Short Quote Update Message
  if message_type == 0x59 then
    return cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.size(buffer, offset)
  end
  -- Size of Purge Order Message
  if message_type == 0x47 then
    return cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.size(buffer, offset)
  end
  -- Size of Risk Reset Message
  if message_type == 0x56 then
    return cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.size(buffer, offset)
  end
  -- Size of New Complex Instrument Message
  if message_type == 0x4C then
    return cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.size(buffer, offset)
  end
  -- Size of Order Acknowledgment Message
  if message_type == 0x25 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.size(buffer, offset)
  end
  -- Size of Cross Order Acknowledgment Message
  if message_type == 0x43 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.size(buffer, offset)
  end
  -- Size of Quote Update Acknowledgment Message
  if message_type == 0x25 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.size(buffer, offset)
  end
  -- Size of Order Rejected Message
  if message_type == 0x26 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.size(buffer, offset)
  end
  -- Size of Cross Order Rejected Message
  if message_type == 0x44 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.size(buffer, offset)
  end
  -- Size of Quote Update Rejected Message
  if message_type == 0x58 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.size(buffer, offset)
  end
  -- Size of Order Modified Message
  if message_type == 0x27 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.size(buffer, offset)
  end
  -- Size of Order Restated Message
  if message_type == 0x28 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.size(buffer, offset)
  end
  -- Size of Quote Restated Message
  if message_type == 0x52 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.size(buffer, offset)
  end
  -- Size of User Modify Rejected Message
  if message_type == 0x29 then
    return cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.size(buffer, offset)
  end
  -- Size of Order Cancelled Message
  if message_type == 0x2a then
    return cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.size(buffer, offset)
  end
  -- Size of Quote Cancelled Message
  if message_type == 0x53 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.size(buffer, offset)
  end
  -- Size of Cross Order Cancelled Message
  if message_type == 0x46 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.size(buffer, offset)
  end
  -- Size of Cancel Rejected Message
  if message_type == 0x2B then
    return cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.size(buffer, offset)
  end
  -- Size of Quote Execution Message
  if message_type == 0x54 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.size(buffer, offset)
  end
  -- Size of Trade Cancel Or Correct Message
  if message_type == 0x2D then
    return cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.size(buffer, offset)
  end
  -- Size of Purge Rejected Message
  if message_type == 0x48 then
    return cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.size(buffer, offset)
  end
  -- Size of Reset Risk Acknowledgment Message
  if message_type == 0x57 then
    return cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.size(buffer, offset)
  end
  -- Size of Mass Cancel Acknowledgment Message
  if message_type == 0x36 then
    return cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.size(buffer, offset)
  end
  -- Size of Complex Instrument Accepted Message
  if message_type == 0x4D then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.size(buffer, offset)
  end
  -- Size of Complex Instrument Rejected Message
  if message_type == 0x4D then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.size(buffer, offset)
  end

  return 0
end

-- Display: Message
cboe_edgx_options_orderentry_boe_v2_10.message.display = function(buffer, offset, packet, parent)
  return ""
end

-- Dissect Branches: Message
cboe_edgx_options_orderentry_boe_v2_10.message.branches = function(buffer, offset, packet, parent, message_type)
  -- Dissect Login Request Message
  if message_type == 0x37 then
    return cboe_edgx_options_orderentry_boe_v2_10.login_request_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Logout Request Message
  if message_type == 0x02 then
  end
  -- Dissect Client Heartbeat Message
  if message_type == 0x03 then
  end
  -- Dissect Login Response Message
  if message_type == 0x24 then
    return cboe_edgx_options_orderentry_boe_v2_10.login_response_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Logout Message
  if message_type == 0x02 then
    return cboe_edgx_options_orderentry_boe_v2_10.logout_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Server Heartbeat Message
  if message_type == 0x09 then
  end
  -- Dissect Replay Complete Message
  if message_type == 0x13 then
  end
  -- Dissect New Order Message
  if message_type == 0x38 then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect New Order Cross Message
  if message_type == 0x41 then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect New Order Complex Message
  if message_type == 0x4B then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_complex_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect New Order Cross Multileg Message
  if message_type == 0x5A then
    return cboe_edgx_options_orderentry_boe_v2_10.new_order_cross_multileg_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cancel Order Message
  if message_type == 0x39 then
    return cboe_edgx_options_orderentry_boe_v2_10.cancel_order_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Modify Order Message
  if message_type == 0x3A then
    return cboe_edgx_options_orderentry_boe_v2_10.modify_order_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Quote Update Message
  if message_type == 0x55 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_update_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Short Quote Update Message
  if message_type == 0x59 then
    return cboe_edgx_options_orderentry_boe_v2_10.short_quote_update_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Purge Order Message
  if message_type == 0x47 then
    return cboe_edgx_options_orderentry_boe_v2_10.purge_order_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Risk Reset Message
  if message_type == 0x56 then
    return cboe_edgx_options_orderentry_boe_v2_10.risk_reset_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect New Complex Instrument Message
  if message_type == 0x4C then
    return cboe_edgx_options_orderentry_boe_v2_10.new_complex_instrument_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Acknowledgment Message
  if message_type == 0x25 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_acknowledgment_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cross Order Acknowledgment Message
  if message_type == 0x43 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_acknowledgment_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Quote Update Acknowledgment Message
  if message_type == 0x25 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_update_acknowledgment_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Rejected Message
  if message_type == 0x26 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_rejected_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cross Order Rejected Message
  if message_type == 0x44 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_rejected_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Quote Update Rejected Message
  if message_type == 0x58 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_update_rejected_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Modified Message
  if message_type == 0x27 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_modified_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Restated Message
  if message_type == 0x28 then
    return cboe_edgx_options_orderentry_boe_v2_10.order_restated_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Quote Restated Message
  if message_type == 0x52 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_restated_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect User Modify Rejected Message
  if message_type == 0x29 then
    return cboe_edgx_options_orderentry_boe_v2_10.user_modify_rejected_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Order Cancelled Message
  if message_type == 0x2a then
    return cboe_edgx_options_orderentry_boe_v2_10.order_cancelled_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Quote Cancelled Message
  if message_type == 0x53 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_cancelled_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cross Order Cancelled Message
  if message_type == 0x46 then
    return cboe_edgx_options_orderentry_boe_v2_10.cross_order_cancelled_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Cancel Rejected Message
  if message_type == 0x2B then
    return cboe_edgx_options_orderentry_boe_v2_10.cancel_rejected_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Quote Execution Message
  if message_type == 0x54 then
    return cboe_edgx_options_orderentry_boe_v2_10.quote_execution_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Trade Cancel Or Correct Message
  if message_type == 0x2D then
    return cboe_edgx_options_orderentry_boe_v2_10.trade_cancel_or_correct_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Purge Rejected Message
  if message_type == 0x48 then
    return cboe_edgx_options_orderentry_boe_v2_10.purge_rejected_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Reset Risk Acknowledgment Message
  if message_type == 0x57 then
    return cboe_edgx_options_orderentry_boe_v2_10.reset_risk_acknowledgment_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Mass Cancel Acknowledgment Message
  if message_type == 0x36 then
    return cboe_edgx_options_orderentry_boe_v2_10.mass_cancel_acknowledgment_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Complex Instrument Accepted Message
  if message_type == 0x4D then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_accepted_message.dissect(buffer, offset, packet, parent)
  end
  -- Dissect Complex Instrument Rejected Message
  if message_type == 0x4D then
    return cboe_edgx_options_orderentry_boe_v2_10.complex_instrument_rejected_message.dissect(buffer, offset, packet, parent)
  end

  return offset
end

-- Dissect: Message
cboe_edgx_options_orderentry_boe_v2_10.message.dissect = function(buffer, offset, packet, parent, message_type)
  if not show.message then
    return cboe_edgx_options_orderentry_boe_v2_10.message.branches(buffer, offset, packet, parent, message_type)
  end

  -- Calculate size and check that branch is not empty
  local size = cboe_edgx_options_orderentry_boe_v2_10.message.size(buffer, offset, message_type)
  if size == 0 then
    return offset
  end

  -- Dissect Element
  local range = buffer(offset, size)
  local display = cboe_edgx_options_orderentry_boe_v2_10.message.display(buffer, packet, parent)
  local element = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message, range, display)

  return cboe_edgx_options_orderentry_boe_v2_10.message.branches(buffer, offset, packet, parent, message_type)
end

-- Matching Unit
cboe_edgx_options_orderentry_boe_v2_10.matching_unit = {}

-- Size Of: Matching Unit
cboe_edgx_options_orderentry_boe_v2_10.matching_unit.size = 1

-- Display: Matching Unit
cboe_edgx_options_orderentry_boe_v2_10.matching_unit.display = function(value)
  return "Matching Unit: "..value
end

-- Dissect: Matching Unit
cboe_edgx_options_orderentry_boe_v2_10.matching_unit.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.matching_unit.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.matching_unit.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.matching_unit, range, value, display)

  return offset + length, value
end

-- Message Type
cboe_edgx_options_orderentry_boe_v2_10.message_type = {}

-- Size Of: Message Type
cboe_edgx_options_orderentry_boe_v2_10.message_type.size = 1

-- Display: Message Type
cboe_edgx_options_orderentry_boe_v2_10.message_type.display = function(value)
  if value == 0x37 then
    return "Message Type: Login Request Message (0x37)"
  end
  if value == 0x02 then
    return "Message Type: Logout Request Message (0x02)"
  end
  if value == 0x03 then
    return "Message Type: Client Heartbeat Message (0x03)"
  end
  if value == 0x24 then
    return "Message Type: Login Response Message (0x24)"
  end
  if value == 0x02 then
    return "Message Type: Logout Message (0x02)"
  end
  if value == 0x09 then
    return "Message Type: Server Heartbeat Message (0x09)"
  end
  if value == 0x13 then
    return "Message Type: Replay Complete Message (0x13)"
  end
  if value == 0x38 then
    return "Message Type: New Order Message (0x38)"
  end
  if value == 0x41 then
    return "Message Type: New Order Cross Message (0x41)"
  end
  if value == 0x4B then
    return "Message Type: New Order Complex Message (0x4B)"
  end
  if value == 0x5A then
    return "Message Type: New Order Cross Multileg Message (0x5A)"
  end
  if value == 0x39 then
    return "Message Type: Cancel Order Message (0x39)"
  end
  if value == 0x3A then
    return "Message Type: Modify Order Message (0x3A)"
  end
  if value == 0x55 then
    return "Message Type: Quote Update Message (0x55)"
  end
  if value == 0x59 then
    return "Message Type: Short Quote Update Message (0x59)"
  end
  if value == 0x47 then
    return "Message Type: Purge Order Message (0x47)"
  end
  if value == 0x56 then
    return "Message Type: Risk Reset Message (0x56)"
  end
  if value == 0x4C then
    return "Message Type: New Complex Instrument Message (0x4C)"
  end
  if value == 0x25 then
    return "Message Type: Order Acknowledgment Message (0x25)"
  end
  if value == 0x43 then
    return "Message Type: Cross Order Acknowledgment Message (0x43)"
  end
  if value == 0x25 then
    return "Message Type: Quote Update Acknowledgment Message (0x25)"
  end
  if value == 0x26 then
    return "Message Type: Order Rejected Message (0x26)"
  end
  if value == 0x44 then
    return "Message Type: Cross Order Rejected Message (0x44)"
  end
  if value == 0x58 then
    return "Message Type: Quote Update Rejected Message (0x58)"
  end
  if value == 0x27 then
    return "Message Type: Order Modified Message (0x27)"
  end
  if value == 0x28 then
    return "Message Type: Order Restated Message (0x28)"
  end
  if value == 0x52 then
    return "Message Type: Quote Restated Message (0x52)"
  end
  if value == 0x29 then
    return "Message Type: User Modify Rejected Message (0x29)"
  end
  if value == 0x2a then
    return "Message Type: Order Cancelled Message (0x2a)"
  end
  if value == 0x53 then
    return "Message Type: Quote Cancelled Message (0x53)"
  end
  if value == 0x46 then
    return "Message Type: Cross Order Cancelled Message (0x46)"
  end
  if value == 0x2B then
    return "Message Type: Cancel Rejected Message (0x2B)"
  end
  if value == 0x54 then
    return "Message Type: Quote Execution Message (0x54)"
  end
  if value == 0x2D then
    return "Message Type: Trade Cancel Or Correct Message (0x2D)"
  end
  if value == 0x48 then
    return "Message Type: Purge Rejected Message (0x48)"
  end
  if value == 0x57 then
    return "Message Type: Reset Risk Acknowledgment Message (0x57)"
  end
  if value == 0x36 then
    return "Message Type: Mass Cancel Acknowledgment Message (0x36)"
  end
  if value == 0x4D then
    return "Message Type: Complex Instrument Accepted Message (0x4D)"
  end
  if value == 0x4D then
    return "Message Type: Complex Instrument Rejected Message (0x4D)"
  end

  return "Message Type: Unknown("..value..")"
end

-- Dissect: Message Type
cboe_edgx_options_orderentry_boe_v2_10.message_type.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.message_type.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.message_type.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message_type, range, value, display)

  return offset + length, value
end

-- Message Length
cboe_edgx_options_orderentry_boe_v2_10.message_length = {}

-- Size Of: Message Length
cboe_edgx_options_orderentry_boe_v2_10.message_length.size = 2

-- Display: Message Length
cboe_edgx_options_orderentry_boe_v2_10.message_length.display = function(value)
  return "Message Length: "..value
end

-- Dissect: Message Length
cboe_edgx_options_orderentry_boe_v2_10.message_length.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.message_length.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.message_length.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message_length, range, value, display)

  return offset + length, value
end

-- Start Of Message
cboe_edgx_options_orderentry_boe_v2_10.start_of_message = {}

-- Size Of: Start Of Message
cboe_edgx_options_orderentry_boe_v2_10.start_of_message.size = 2

-- Display: Start Of Message
cboe_edgx_options_orderentry_boe_v2_10.start_of_message.display = function(value)
  return "Start Of Message: "..value
end

-- Dissect: Start Of Message
cboe_edgx_options_orderentry_boe_v2_10.start_of_message.dissect = function(buffer, offset, packet, parent)
  local length = cboe_edgx_options_orderentry_boe_v2_10.start_of_message.size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_edgx_options_orderentry_boe_v2_10.start_of_message.display(value, buffer, offset, packet, parent)

  parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.start_of_message, range, value, display)

  return offset + length, value
end

-- Message Header
cboe_edgx_options_orderentry_boe_v2_10.message_header = {}

-- Size Of: Message Header
cboe_edgx_options_orderentry_boe_v2_10.message_header.size =
  cboe_edgx_options_orderentry_boe_v2_10.start_of_message.size + 
  cboe_edgx_options_orderentry_boe_v2_10.message_length.size + 
  cboe_edgx_options_orderentry_boe_v2_10.message_type.size + 
  cboe_edgx_options_orderentry_boe_v2_10.matching_unit.size + 
  cboe_edgx_options_orderentry_boe_v2_10.sequence_number.size;

-- Display: Message Header
cboe_edgx_options_orderentry_boe_v2_10.message_header.display = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Message Header
cboe_edgx_options_orderentry_boe_v2_10.message_header.fields = function(buffer, offset, packet, parent)
  local index = offset

  -- Start Of Message: 2 Byte Unsigned Fixed Width Integer
  index, start_of_message = cboe_edgx_options_orderentry_boe_v2_10.start_of_message.dissect(buffer, index, packet, parent)

  -- Message Length: 2 Byte Unsigned Fixed Width Integer
  index, message_length = cboe_edgx_options_orderentry_boe_v2_10.message_length.dissect(buffer, index, packet, parent)

  -- Message Type: 1 Byte Unsigned Fixed Width Integer Enum with 39 values
  index, message_type = cboe_edgx_options_orderentry_boe_v2_10.message_type.dissect(buffer, index, packet, parent)

  -- Matching Unit: 1 Byte Unsigned Fixed Width Integer
  index, matching_unit = cboe_edgx_options_orderentry_boe_v2_10.matching_unit.dissect(buffer, index, packet, parent)

  -- Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, sequence_number = cboe_edgx_options_orderentry_boe_v2_10.sequence_number.dissect(buffer, index, packet, parent)

  return index
end

-- Dissect: Message Header
cboe_edgx_options_orderentry_boe_v2_10.message_header.dissect = function(buffer, offset, packet, parent)
  if show.message_header then
    -- Optionally add element to protocol tree
    parent = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10.fields.message_header, buffer(offset, 0))
    local index = cboe_edgx_options_orderentry_boe_v2_10.message_header.fields(buffer, offset, packet, parent)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_edgx_options_orderentry_boe_v2_10.message_header.display(packet, parent, length)
    parent:append_text(display)

    return index, parent
  else
    -- Skip element, add fields directly
    return cboe_edgx_options_orderentry_boe_v2_10.message_header.fields(buffer, offset, packet, parent)
  end
end

-- Packet
cboe_edgx_options_orderentry_boe_v2_10.packet = {}

-- Dissect Packet
cboe_edgx_options_orderentry_boe_v2_10.packet.dissect = function(buffer, packet, parent)
  local index = 0

  -- Message Header: Struct of 5 fields
  index, message_header = cboe_edgx_options_orderentry_boe_v2_10.message_header.dissect(buffer, index, packet, parent)

  -- Dependency element: Message Type
  local message_type = buffer(index - 6, 1):le_uint()

  -- Message: Runtime Type with 39 branches
  index = cboe_edgx_options_orderentry_boe_v2_10.message.dissect(buffer, index, packet, parent, message_type)

  return index
end


-----------------------------------------------------------------------
-- Protocol Dissector and Components
-----------------------------------------------------------------------

-- Initialize Dissector
function omi_cboe_edgx_options_orderentry_boe_v2_10.init()
end

-- Dissector for Cboe Edgx Options OrderEntry Boe 2.10
function omi_cboe_edgx_options_orderentry_boe_v2_10.dissector(buffer, packet, parent)

  -- Set protocol name
  packet.cols.protocol = omi_cboe_edgx_options_orderentry_boe_v2_10.name

  -- Dissect protocol
  local protocol = parent:add(omi_cboe_edgx_options_orderentry_boe_v2_10, buffer(), omi_cboe_edgx_options_orderentry_boe_v2_10.description, "("..buffer:len().." Bytes)")
  return cboe_edgx_options_orderentry_boe_v2_10.packet.dissect(buffer, packet, protocol)
end

-- Register With Tcp Table
local tcp_table = DissectorTable.get("tcp.port")
tcp_table:add(65333, omi_cboe_edgx_options_orderentry_boe_v2_10)


-----------------------------------------------------------------------
-- Protocol Heuristics
-----------------------------------------------------------------------

-- Verify size of packet
cboe_edgx_options_orderentry_boe_v2_10.packet.requiredsize = function(buffer)

  return true
end

-- Dissector Heuristic for Cboe Edgx Options OrderEntry Boe 2.10
local function omi_cboe_edgx_options_orderentry_boe_v2_10_heuristic(buffer, packet, parent)
  -- Verify packet length
  if not cboe_edgx_options_orderentry_boe_v2_10.packet.requiredsize(buffer) then return false end

  -- Protocol is valid, set conversation and dissect this packet
  packet.conversation = omi_cboe_edgx_options_orderentry_boe_v2_10
  omi_cboe_edgx_options_orderentry_boe_v2_10.dissector(buffer, packet, parent)

  return true
end

-- Register Heuristic for Cboe Edgx Options OrderEntry Boe 2.10
omi_cboe_edgx_options_orderentry_boe_v2_10:register_heuristic("tcp", omi_cboe_edgx_options_orderentry_boe_v2_10_heuristic)

-----------------------------------------------------------------------
-- Lua dissectors are an easily edited and modified cross platform dissection solution.
-- Feel free to modify. Enjoy.
-----------------------------------------------------------------------
-- 
-- Protocol:
--   Organization: Chicago Board Options Exchange
--   Version: 2.10
--   Date: Tuesday, December 3, 2019
--   Specification: BATS_US_Options_BOE2_Specification.pdf
-- 
-- Script:
--   Generator: 1.5.0.0
--   Compiler: 2.0
--   License: Public/GPLv3
--   Authors: Omi Developers
-- 
-- This script was generated by the Open Markets Initiative (Omi).
-- 
-- For full Omi information:
-- https://github.com/Open-Markets-Initiative/Directory
-----------------------------------------------------------------------
