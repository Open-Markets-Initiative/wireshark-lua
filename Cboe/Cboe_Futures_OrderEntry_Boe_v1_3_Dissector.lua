-----------------------------------------------------------------------
-- Lua Script Wireshark Dissector
-- 
-- Please see end of file for rules and regulations
-----------------------------------------------------------------------

-- Cboe Futures OrderEntry Boe 1.3 Protocol
local cboe_futures_orderentry_boe_v1_3 = Proto("Cboe.Futures.OrderEntry.Boe.v1.3.Lua", "Cboe Futures OrderEntry Boe 1.3")

-- Component Tables
local show = {}
local format = {}
local cboe_futures_orderentry_boe_v1_3_display = {}
local cboe_futures_orderentry_boe_v1_3_dissect = {}
local cboe_futures_orderentry_boe_v1_3_size_of = {}
local verify = {}

-----------------------------------------------------------------------
-- Declare Protocol Fields
-----------------------------------------------------------------------

-- Cboe Futures OrderEntry Boe 1.3 Fields
cboe_futures_orderentry_boe_v1_3.fields.account = ProtoField.new("Account", "cboe.futures.orderentry.boe.v1.3.account", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.application_message_type = ProtoField.new("Application Message Type", "cboe.futures.orderentry.boe.v1.3.applicationmessagetype", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.avg_px = ProtoField.new("Avg Px", "cboe.futures.orderentry.boe.v1.3.avgpx", ftypes.INT64)
cboe_futures_orderentry_boe_v1_3.fields.base_liquidity_indicator = ProtoField.new("Base Liquidity Indicator", "cboe.futures.orderentry.boe.v1.3.baseliquidityindicator", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.bitfields = ProtoField.new("Bitfields", "cboe.futures.orderentry.boe.v1.3.bitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_bitfield_count = ProtoField.new("Cancel Order Bitfield Count", "cboe.futures.orderentry.boe.v1.3.cancelorderbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_byte_1 = ProtoField.new("Cancel Order Byte 1", "cboe.futures.orderentry.boe.v1.3.cancelorderbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_byte_2 = ProtoField.new("Cancel Order Byte 2", "cboe.futures.orderentry.boe.v1.3.cancelorderbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_clearing_firm_exists = ProtoField.new("Cancel Order Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_manual_order_indicator_exists = ProtoField.new("Cancel Order Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.cancelordermanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_mass_cancel_id_exists = ProtoField.new("Cancel Order Mass Cancel Id Exists", "cboe.futures.orderentry.boe.v1.3.cancelordermasscancelidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_mass_cancel_inst_exists = ProtoField.new("Cancel Order Mass Cancel Inst Exists", "cboe.futures.orderentry.boe.v1.3.cancelordermasscancelinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_message = ProtoField.new("Cancel Order Message", "cboe.futures.orderentry.boe.v1.3.cancelordermessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_oeoid_exists = ProtoField.new("Cancel Order Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_optional_fields = ProtoField.new("Cancel Order Optional Fields", "cboe.futures.orderentry.boe.v1.3.cancelorderoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_product_name_exists = ProtoField.new("Cancel Order Product Name Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderproductnameexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_2_exists = ProtoField.new("Cancel Order Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_3_exists = ProtoField.new("Cancel Order Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_4_exists = ProtoField.new("Cancel Order Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_5_exists = ProtoField.new("Cancel Order Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_6_exists = ProtoField.new("Cancel Order Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_7_exists = ProtoField.new("Cancel Order Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_8_exists = ProtoField.new("Cancel Order Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.cancelorderreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.cancel_order_return_bitfields = ProtoField.new("Cancel Order Return Bitfields", "cboe.futures.orderentry.boe.v1.3.cancelorderreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_orig_on_reject = ProtoField.new("Cancel Orig On Reject", "cboe.futures.orderentry.boe.v1.3.cancelorigonreject", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_reason = ProtoField.new("Cancel Reason", "cboe.futures.orderentry.boe.v1.3.cancelreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_reject_reason = ProtoField.new("Cancel Reject Reason", "cboe.futures.orderentry.boe.v1.3.cancelrejectreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_bitfield_count = ProtoField.new("Cancel Rejected Bitfield Count", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_1 = ProtoField.new("Cancel Rejected Byte 1", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_10 = ProtoField.new("Cancel Rejected Byte 10", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_11 = ProtoField.new("Cancel Rejected Byte 11", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_12 = ProtoField.new("Cancel Rejected Byte 12", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_13 = ProtoField.new("Cancel Rejected Byte 13", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_14 = ProtoField.new("Cancel Rejected Byte 14", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_15 = ProtoField.new("Cancel Rejected Byte 15", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_16 = ProtoField.new("Cancel Rejected Byte 16", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_17 = ProtoField.new("Cancel Rejected Byte 17", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_2 = ProtoField.new("Cancel Rejected Byte 2", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_3 = ProtoField.new("Cancel Rejected Byte 3", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_4 = ProtoField.new("Cancel Rejected Byte 4", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_5 = ProtoField.new("Cancel Rejected Byte 5", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_6 = ProtoField.new("Cancel Rejected Byte 6", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_7 = ProtoField.new("Cancel Rejected Byte 7", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_8 = ProtoField.new("Cancel Rejected Byte 8", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_9 = ProtoField.new("Cancel Rejected Byte 9", "cboe.futures.orderentry.boe.v1.3.cancelrejectedbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_capacity_exists = ProtoField.new("Cancel Rejected Capacity Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_cmta_number_exists = ProtoField.new("Cancel Rejected Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_cti_code_exists = ProtoField.new("Cancel Rejected Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedcticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_expire_time_exists = ProtoField.new("Cancel Rejected Expire Time Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_manual_order_indicator_exists = ProtoField.new("Cancel Rejected Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_maturity_date_exists = ProtoField.new("Cancel Rejected Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_message = ProtoField.new("Cancel Rejected Message", "cboe.futures.orderentry.boe.v1.3.cancelrejectedmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_min_qty_exists = ProtoField.new("Cancel Rejected Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_oeoid_exists = ProtoField.new("Cancel Rejected Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_open_close_exists = ProtoField.new("Cancel Rejected Open Close Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_optional_fields = ProtoField.new("Cancel Rejected Optional Fields", "cboe.futures.orderentry.boe.v1.3.cancelrejectedoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_ord_type_exists = ProtoField.new("Cancel Rejected Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_price_exists = ProtoField.new("Cancel Rejected Price Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists = ProtoField.new("Cancel Rejected Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists = ProtoField.new("Cancel Rejected Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists = ProtoField.new("Cancel Rejected Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists = ProtoField.new("Cancel Rejected Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists = ProtoField.new("Cancel Rejected Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists = ProtoField.new("Cancel Rejected Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists = ProtoField.new("Cancel Rejected Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists = ProtoField.new("Cancel Rejected Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_return_bitfields = ProtoField.new("Cancel Rejected Return Bitfields", "cboe.futures.orderentry.boe.v1.3.cancelrejectedreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_side_exists = ProtoField.new("Cancel Rejected Side Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_stop_px_exists = ProtoField.new("Cancel Rejected Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_symbol_exists = ProtoField.new("Cancel Rejected Symbol Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_time_in_force_exists = ProtoField.new("Cancel Rejected Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.cancelrejectedtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.cancelled_order_count = ProtoField.new("Cancelled Order Count", "cboe.futures.orderentry.boe.v1.3.cancelledordercount", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.capacity = ProtoField.new("Capacity", "cboe.futures.orderentry.boe.v1.3.capacity", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cl_ord_id = ProtoField.new("Cl Ord Id", "cboe.futures.orderentry.boe.v1.3.clordid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.clearing_account = ProtoField.new("Clearing Account", "cboe.futures.orderentry.boe.v1.3.clearingaccount", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.clearing_firm = ProtoField.new("Clearing Firm", "cboe.futures.orderentry.boe.v1.3.clearingfirm", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.clearing_price = ProtoField.new("Clearing Price", "cboe.futures.orderentry.boe.v1.3.clearingprice", ftypes.INT64)
cboe_futures_orderentry_boe_v1_3.fields.clearing_size = ProtoField.new("Clearing Size", "cboe.futures.orderentry.boe.v1.3.clearingsize", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.clearing_symbol = ProtoField.new("Clearing Symbol", "cboe.futures.orderentry.boe.v1.3.clearingsymbol", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cmta_number = ProtoField.new("Cmta Number", "cboe.futures.orderentry.boe.v1.3.cmtanumber", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.contra_broker = ProtoField.new("Contra Broker", "cboe.futures.orderentry.boe.v1.3.contrabroker", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.corrected_price = ProtoField.new("Corrected Price", "cboe.futures.orderentry.boe.v1.3.correctedprice", ftypes.INT64)
cboe_futures_orderentry_boe_v1_3.fields.corrected_size = ProtoField.new("Corrected Size", "cboe.futures.orderentry.boe.v1.3.correctedsize", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.cti_code = ProtoField.new("Cti Code", "cboe.futures.orderentry.boe.v1.3.cticode", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.cum_qty = ProtoField.new("Cum Qty", "cboe.futures.orderentry.boe.v1.3.cumqty", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.custom_group_id = ProtoField.new("Custom Group Id", "cboe.futures.orderentry.boe.v1.3.customgroupid", ftypes.UINT16)
cboe_futures_orderentry_boe_v1_3.fields.day_avg_px = ProtoField.new("Day Avg Px", "cboe.futures.orderentry.boe.v1.3.dayavgpx", ftypes.INT64)
cboe_futures_orderentry_boe_v1_3.fields.day_cum_qty = ProtoField.new("Day Cum Qty", "cboe.futures.orderentry.boe.v1.3.daycumqty", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.day_order_qty = ProtoField.new("Day Order Qty", "cboe.futures.orderentry.boe.v1.3.dayorderqty", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.exec_id = ProtoField.new("Exec Id", "cboe.futures.orderentry.boe.v1.3.execid", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.exec_ref_id = ProtoField.new("Exec Ref Id", "cboe.futures.orderentry.boe.v1.3.execrefid", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.expire_time = ProtoField.new("Expire Time", "cboe.futures.orderentry.boe.v1.3.expiretime", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.fee_code = ProtoField.new("Fee Code", "cboe.futures.orderentry.boe.v1.3.feecode", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.frequent_trader_id = ProtoField.new("Frequent Trader Id", "cboe.futures.orderentry.boe.v1.3.frequenttraderid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.last_px = ProtoField.new("Last Px", "cboe.futures.orderentry.boe.v1.3.lastpx", ftypes.INT64)
cboe_futures_orderentry_boe_v1_3.fields.last_received_sequence_number = ProtoField.new("Last Received Sequence Number", "cboe.futures.orderentry.boe.v1.3.lastreceivedsequencenumber", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.last_shares = ProtoField.new("Last Shares", "cboe.futures.orderentry.boe.v1.3.lastshares", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.leaves_qty = ProtoField.new("Leaves Qty", "cboe.futures.orderentry.boe.v1.3.leavesqty", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.login_request_message = ProtoField.new("Login Request Message", "cboe.futures.orderentry.boe.v1.3.loginrequestmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.login_response_message = ProtoField.new("Login Response Message", "cboe.futures.orderentry.boe.v1.3.loginresponsemessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.login_response_status = ProtoField.new("Login Response Status", "cboe.futures.orderentry.boe.v1.3.loginresponsestatus", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.login_response_text = ProtoField.new("Login Response Text", "cboe.futures.orderentry.boe.v1.3.loginresponsetext", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.logout_message = ProtoField.new("Logout Message", "cboe.futures.orderentry.boe.v1.3.logoutmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.logout_reason = ProtoField.new("Logout Reason", "cboe.futures.orderentry.boe.v1.3.logoutreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.logout_reason_text = ProtoField.new("Logout Reason Text", "cboe.futures.orderentry.boe.v1.3.logoutreasontext", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.manual_order_indicator = ProtoField.new("Manual Order Indicator", "cboe.futures.orderentry.boe.v1.3.manualorderindicator", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.mass_cancel_acknowledgment_message = ProtoField.new("Mass Cancel Acknowledgment Message", "cboe.futures.orderentry.boe.v1.3.masscancelacknowledgmentmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.mass_cancel_id = ProtoField.new("Mass Cancel Id", "cboe.futures.orderentry.boe.v1.3.masscancelid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.mass_cancel_inst = ProtoField.new("Mass Cancel Inst", "cboe.futures.orderentry.boe.v1.3.masscancelinst", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.matching_unit = ProtoField.new("Matching Unit", "cboe.futures.orderentry.boe.v1.3.matchingunit", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.maturity_date = ProtoField.new("Maturity Date", "cboe.futures.orderentry.boe.v1.3.maturitydate", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.message = ProtoField.new("Message", "cboe.futures.orderentry.boe.v1.3.message", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.message_header = ProtoField.new("Message Header", "cboe.futures.orderentry.boe.v1.3.messageheader", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.message_length = ProtoField.new("Message Length", "cboe.futures.orderentry.boe.v1.3.messagelength", ftypes.UINT16)
cboe_futures_orderentry_boe_v1_3.fields.message_type = ProtoField.new("Message Type", "cboe.futures.orderentry.boe.v1.3.messagetype", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.min_qty = ProtoField.new("Min Qty", "cboe.futures.orderentry.boe.v1.3.minqty", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_bitfield_count = ProtoField.new("Modify Order Bitfield Count", "cboe.futures.orderentry.boe.v1.3.modifyorderbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_byte_1 = ProtoField.new("Modify Order Byte 1", "cboe.futures.orderentry.boe.v1.3.modifyorderbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_byte_2 = ProtoField.new("Modify Order Byte 2", "cboe.futures.orderentry.boe.v1.3.modifyorderbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_cancel_orig_on_reject_exists = ProtoField.new("Modify Order Cancel Orig On Reject Exists", "cboe.futures.orderentry.boe.v1.3.modifyordercancelorigonrejectexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_clearing_firm_exists = ProtoField.new("Modify Order Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_exec_inst_exists = ProtoField.new("Modify Order Exec Inst Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderexecinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_frequent_trader_id_exists = ProtoField.new("Modify Order Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_manual_order_indicator_exists = ProtoField.new("Modify Order Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.modifyordermanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_message = ProtoField.new("Modify Order Message", "cboe.futures.orderentry.boe.v1.3.modifyordermessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_oeoid_exists = ProtoField.new("Modify Order Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_optional_fields = ProtoField.new("Modify Order Optional Fields", "cboe.futures.orderentry.boe.v1.3.modifyorderoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_ord_type_exists = ProtoField.new("Modify Order Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_order_qty_exists = ProtoField.new("Modify Order Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_price_exists = ProtoField.new("Modify Order Price Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_1_exists = ProtoField.new("Modify Order Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_2_exists = ProtoField.new("Modify Order Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_3_exists = ProtoField.new("Modify Order Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_7_exists = ProtoField.new("Modify Order Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_8_exists = ProtoField.new("Modify Order Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_return_bitfields = ProtoField.new("Modify Order Return Bitfields", "cboe.futures.orderentry.boe.v1.3.modifyorderreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_side_exists = ProtoField.new("Modify Order Side Exists", "cboe.futures.orderentry.boe.v1.3.modifyordersideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.modify_order_stop_px_exists = ProtoField.new("Modify Order Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.modifyorderstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.modify_reject_reason = ProtoField.new("Modify Reject Reason", "cboe.futures.orderentry.boe.v1.3.modifyrejectreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.multileg_reporting_type = ProtoField.new("Multileg Reporting Type", "cboe.futures.orderentry.boe.v1.3.multilegreportingtype", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_account_exists = ProtoField.new("New Order Account Exists", "cboe.futures.orderentry.boe.v1.3.neworderaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.new_order_bitfield_count = ProtoField.new("New Order Bitfield Count", "cboe.futures.orderentry.boe.v1.3.neworderbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_1 = ProtoField.new("New Order Byte 1", "cboe.futures.orderentry.boe.v1.3.neworderbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_2 = ProtoField.new("New Order Byte 2", "cboe.futures.orderentry.boe.v1.3.neworderbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_3 = ProtoField.new("New Order Byte 3", "cboe.futures.orderentry.boe.v1.3.neworderbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_4 = ProtoField.new("New Order Byte 4", "cboe.futures.orderentry.boe.v1.3.neworderbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_5 = ProtoField.new("New Order Byte 5", "cboe.futures.orderentry.boe.v1.3.neworderbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_6 = ProtoField.new("New Order Byte 6", "cboe.futures.orderentry.boe.v1.3.neworderbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_7 = ProtoField.new("New Order Byte 7", "cboe.futures.orderentry.boe.v1.3.neworderbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_8 = ProtoField.new("New Order Byte 8", "cboe.futures.orderentry.boe.v1.3.neworderbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_capacity_exists = ProtoField.new("New Order Capacity Exists", "cboe.futures.orderentry.boe.v1.3.newordercapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.new_order_clearing_account_exists = ProtoField.new("New Order Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.neworderclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.new_order_clearing_firm_exists = ProtoField.new("New Order Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.neworderclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.new_order_cmta_number_exists = ProtoField.new("New Order Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.newordercmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.new_order_cti_code_exists = ProtoField.new("New Order Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.newordercticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.new_order_custom_group_id_exists = ProtoField.new("New Order Custom Group Id Exists", "cboe.futures.orderentry.boe.v1.3.newordercustomgroupidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.new_order_expire_time_exists = ProtoField.new("New Order Expire Time Exists", "cboe.futures.orderentry.boe.v1.3.neworderexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.new_order_frequent_trader_id_exists = ProtoField.new("New Order Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.neworderfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.new_order_manual_order_indicator_exists = ProtoField.new("New Order Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.newordermanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.new_order_maturity_date_exists = ProtoField.new("New Order Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.newordermaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.new_order_message = ProtoField.new("New Order Message", "cboe.futures.orderentry.boe.v1.3.newordermessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_min_qty_exists = ProtoField.new("New Order Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.neworderminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.new_order_oeoid_exists = ProtoField.new("New Order Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.neworderoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.new_order_open_close_exists = ProtoField.new("New Order Open Close Exists", "cboe.futures.orderentry.boe.v1.3.neworderopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.new_order_optional_fields = ProtoField.new("New Order Optional Fields", "cboe.futures.orderentry.boe.v1.3.neworderoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_ord_type_exists = ProtoField.new("New Order Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.neworderordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.new_order_prevent_match_exists = ProtoField.new("New Order Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.neworderpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.new_order_price_exists = ProtoField.new("New Order Price Exists", "cboe.futures.orderentry.boe.v1.3.neworderpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_1_exists = ProtoField.new("New Order Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_2_exists = ProtoField.new("New Order Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists = ProtoField.new("New Order Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists = ProtoField.new("New Order Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_5_exists = ProtoField.new("New Order Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_6_exists = ProtoField.new("New Order Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_7_exists = ProtoField.new("New Order Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_8_exists = ProtoField.new("New Order Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.neworderreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.new_order_return_bitfields = ProtoField.new("New Order Return Bitfields", "cboe.futures.orderentry.boe.v1.3.neworderreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.new_order_risk_reset_exists = ProtoField.new("New Order Risk Reset Exists", "cboe.futures.orderentry.boe.v1.3.neworderriskresetexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.new_order_stop_px_exists = ProtoField.new("New Order Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.neworderstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.new_order_symbol_exists = ProtoField.new("New Order Symbol Exists", "cboe.futures.orderentry.boe.v1.3.newordersymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.new_order_time_in_force_exists = ProtoField.new("New Order Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.newordertimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.no_unspecified_unit_replay = ProtoField.new("No Unspecified Unit Replay", "cboe.futures.orderentry.boe.v1.3.nounspecifiedunitreplay", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.number_of_param_groups = ProtoField.new("Number Of Param Groups", "cboe.futures.orderentry.boe.v1.3.numberofparamgroups", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.number_of_quote_results = ProtoField.new("Number Of Quote Results", "cboe.futures.orderentry.boe.v1.3.numberofquoteresults", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.number_of_quotes = ProtoField.new("Number Of Quotes", "cboe.futures.orderentry.boe.v1.3.numberofquotes", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.number_of_units = ProtoField.new("Number Of Units", "cboe.futures.orderentry.boe.v1.3.numberofunits", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.oeoid = ProtoField.new("Oeoid", "cboe.futures.orderentry.boe.v1.3.oeoid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.open_close = ProtoField.new("Open Close", "cboe.futures.orderentry.boe.v1.3.openclose", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.ord_type = ProtoField.new("Ord Type", "cboe.futures.orderentry.boe.v1.3.ordtype", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_account_exists = ProtoField.new("Order Acknowledgment Account Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_avg_px_exists = ProtoField.new("Order Acknowledgment Avg Px Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentavgpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_base_liquidity_indicator_exists = ProtoField.new("Order Acknowledgment Base Liquidity Indicator Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbaseliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_bitfield_count = ProtoField.new("Order Acknowledgment Bitfield Count", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_1 = ProtoField.new("Order Acknowledgment Byte 1", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_10 = ProtoField.new("Order Acknowledgment Byte 10", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_11 = ProtoField.new("Order Acknowledgment Byte 11", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_12 = ProtoField.new("Order Acknowledgment Byte 12", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_13 = ProtoField.new("Order Acknowledgment Byte 13", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_14 = ProtoField.new("Order Acknowledgment Byte 14", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_15 = ProtoField.new("Order Acknowledgment Byte 15", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_16 = ProtoField.new("Order Acknowledgment Byte 16", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_17 = ProtoField.new("Order Acknowledgment Byte 17", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_2 = ProtoField.new("Order Acknowledgment Byte 2", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_3 = ProtoField.new("Order Acknowledgment Byte 3", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_4 = ProtoField.new("Order Acknowledgment Byte 4", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_5 = ProtoField.new("Order Acknowledgment Byte 5", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_6 = ProtoField.new("Order Acknowledgment Byte 6", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_7 = ProtoField.new("Order Acknowledgment Byte 7", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_8 = ProtoField.new("Order Acknowledgment Byte 8", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_9 = ProtoField.new("Order Acknowledgment Byte 9", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_capacity_exists = ProtoField.new("Order Acknowledgment Capacity Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_clearing_account_exists = ProtoField.new("Order Acknowledgment Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_clearing_firm_exists = ProtoField.new("Order Acknowledgment Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_cmta_number_exists = ProtoField.new("Order Acknowledgment Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_cti_code_exists = ProtoField.new("Order Acknowledgment Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentcticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_cum_qty_exists = ProtoField.new("Order Acknowledgment Cum Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentcumqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_day_avg_px_exists = ProtoField.new("Order Acknowledgment Day Avg Px Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentdayavgpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_day_cum_qty_exists = ProtoField.new("Order Acknowledgment Day Cum Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentdaycumqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_day_order_qty_exists = ProtoField.new("Order Acknowledgment Day Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentdayorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_expire_time_exists = ProtoField.new("Order Acknowledgment Expire Time Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_frequent_trader_id_exists = ProtoField.new("Order Acknowledgment Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_leaves_qty_exists = ProtoField.new("Order Acknowledgment Leaves Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentleavesqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_manual_order_indicator_exists = ProtoField.new("Order Acknowledgment Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_maturity_date_exists = ProtoField.new("Order Acknowledgment Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_message = ProtoField.new("Order Acknowledgment Message", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_min_qty_exists = ProtoField.new("Order Acknowledgment Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_oeoid_exists = ProtoField.new("Order Acknowledgment Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_open_close_exists = ProtoField.new("Order Acknowledgment Open Close Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_optional_fields = ProtoField.new("Order Acknowledgment Optional Fields", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_ord_type_exists = ProtoField.new("Order Acknowledgment Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_order_qty_exists = ProtoField.new("Order Acknowledgment Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_prevent_match_exists = ProtoField.new("Order Acknowledgment Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_price_exists = ProtoField.new("Order Acknowledgment Price Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists = ProtoField.new("Order Acknowledgment Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists = ProtoField.new("Order Acknowledgment Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists = ProtoField.new("Order Acknowledgment Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists = ProtoField.new("Order Acknowledgment Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists = ProtoField.new("Order Acknowledgment Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists = ProtoField.new("Order Acknowledgment Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists = ProtoField.new("Order Acknowledgment Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists = ProtoField.new("Order Acknowledgment Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_return_bitfields = ProtoField.new("Order Acknowledgment Return Bitfields", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_side_exists = ProtoField.new("Order Acknowledgment Side Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_stop_px_exists = ProtoField.new("Order Acknowledgment Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_sub_liquidity_indicator_exists = ProtoField.new("Order Acknowledgment Sub Liquidity Indicator Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentsubliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_symbol_exists = ProtoField.new("Order Acknowledgment Symbol Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmentsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_time_in_force_exists = ProtoField.new("Order Acknowledgment Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.orderacknowledgmenttimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_account_exists = ProtoField.new("Order Cancelled Account Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_bitfield_count = ProtoField.new("Order Cancelled Bitfield Count", "cboe.futures.orderentry.boe.v1.3.ordercancelledbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_1 = ProtoField.new("Order Cancelled Byte 1", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_10 = ProtoField.new("Order Cancelled Byte 10", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_11 = ProtoField.new("Order Cancelled Byte 11", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_12 = ProtoField.new("Order Cancelled Byte 12", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_13 = ProtoField.new("Order Cancelled Byte 13", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_14 = ProtoField.new("Order Cancelled Byte 14", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_15 = ProtoField.new("Order Cancelled Byte 15", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_16 = ProtoField.new("Order Cancelled Byte 16", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_17 = ProtoField.new("Order Cancelled Byte 17", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_2 = ProtoField.new("Order Cancelled Byte 2", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_3 = ProtoField.new("Order Cancelled Byte 3", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_4 = ProtoField.new("Order Cancelled Byte 4", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_5 = ProtoField.new("Order Cancelled Byte 5", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_6 = ProtoField.new("Order Cancelled Byte 6", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_7 = ProtoField.new("Order Cancelled Byte 7", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_8 = ProtoField.new("Order Cancelled Byte 8", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_9 = ProtoField.new("Order Cancelled Byte 9", "cboe.futures.orderentry.boe.v1.3.ordercancelledbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_capacity_exists = ProtoField.new("Order Cancelled Capacity Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_clearing_account_exists = ProtoField.new("Order Cancelled Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_clearing_firm_exists = ProtoField.new("Order Cancelled Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_cmta_number_exists = ProtoField.new("Order Cancelled Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_cti_code_exists = ProtoField.new("Order Cancelled Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledcticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_expire_time_exists = ProtoField.new("Order Cancelled Expire Time Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_frequent_trader_id_exists = ProtoField.new("Order Cancelled Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_last_px_exists = ProtoField.new("Order Cancelled Last Px Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledlastpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_last_shares_exists = ProtoField.new("Order Cancelled Last Shares Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledlastsharesexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_leaves_qty_exists = ProtoField.new("Order Cancelled Leaves Qty Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledleavesqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_manual_order_indicator_exists = ProtoField.new("Order Cancelled Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_maturity_date_exists = ProtoField.new("Order Cancelled Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_message = ProtoField.new("Order Cancelled Message", "cboe.futures.orderentry.boe.v1.3.ordercancelledmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_min_qty_exists = ProtoField.new("Order Cancelled Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_oeoid_exists = ProtoField.new("Order Cancelled Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_open_close_exists = ProtoField.new("Order Cancelled Open Close Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_optional_fields = ProtoField.new("Order Cancelled Optional Fields", "cboe.futures.orderentry.boe.v1.3.ordercancelledoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_ord_type_exists = ProtoField.new("Order Cancelled Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_order_qty_exists = ProtoField.new("Order Cancelled Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_prevent_match_exists = ProtoField.new("Order Cancelled Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_price_exists = ProtoField.new("Order Cancelled Price Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists = ProtoField.new("Order Cancelled Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists = ProtoField.new("Order Cancelled Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists = ProtoField.new("Order Cancelled Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists = ProtoField.new("Order Cancelled Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists = ProtoField.new("Order Cancelled Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists = ProtoField.new("Order Cancelled Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists = ProtoField.new("Order Cancelled Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists = ProtoField.new("Order Cancelled Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_return_bitfields = ProtoField.new("Order Cancelled Return Bitfields", "cboe.futures.orderentry.boe.v1.3.ordercancelledreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_secondary_order_id_exists = ProtoField.new("Order Cancelled Secondary Order Id Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledsecondaryorderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_side_exists = ProtoField.new("Order Cancelled Side Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_stop_px_exists = ProtoField.new("Order Cancelled Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_symbol_exists = ProtoField.new("Order Cancelled Symbol Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_time_in_force_exists = ProtoField.new("Order Cancelled Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.ordercancelledtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_account_exists = ProtoField.new("Order Execution Account Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_avg_px_exists = ProtoField.new("Order Execution Avg Px Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionavgpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_bitfield_count = ProtoField.new("Order Execution Bitfield Count", "cboe.futures.orderentry.boe.v1.3.orderexecutionbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_1 = ProtoField.new("Order Execution Byte 1", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_10 = ProtoField.new("Order Execution Byte 10", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_11 = ProtoField.new("Order Execution Byte 11", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_12 = ProtoField.new("Order Execution Byte 12", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_13 = ProtoField.new("Order Execution Byte 13", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_14 = ProtoField.new("Order Execution Byte 14", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_15 = ProtoField.new("Order Execution Byte 15", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_16 = ProtoField.new("Order Execution Byte 16", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_17 = ProtoField.new("Order Execution Byte 17", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_2 = ProtoField.new("Order Execution Byte 2", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_3 = ProtoField.new("Order Execution Byte 3", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_4 = ProtoField.new("Order Execution Byte 4", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_5 = ProtoField.new("Order Execution Byte 5", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_6 = ProtoField.new("Order Execution Byte 6", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_7 = ProtoField.new("Order Execution Byte 7", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_8 = ProtoField.new("Order Execution Byte 8", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_9 = ProtoField.new("Order Execution Byte 9", "cboe.futures.orderentry.boe.v1.3.orderexecutionbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_capacity_exists = ProtoField.new("Order Execution Capacity Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutioncapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_clearing_account_exists = ProtoField.new("Order Execution Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_clearing_firm_exists = ProtoField.new("Order Execution Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_clearing_size_exists = ProtoField.new("Order Execution Clearing Size Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionclearingsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_cmta_number_exists = ProtoField.new("Order Execution Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutioncmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_cti_code_exists = ProtoField.new("Order Execution Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutioncticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_cum_qty_exists = ProtoField.new("Order Execution Cum Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutioncumqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_day_avg_px_exists = ProtoField.new("Order Execution Day Avg Px Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutiondayavgpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_day_cum_qty_exists = ProtoField.new("Order Execution Day Cum Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutiondaycumqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_day_order_qty_exists = ProtoField.new("Order Execution Day Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutiondayorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_expire_time_exists = ProtoField.new("Order Execution Expire Time Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_fee_code_exists = ProtoField.new("Order Execution Fee Code Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_frequent_trader_id_exists = ProtoField.new("Order Execution Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_manual_order_indicator_exists = ProtoField.new("Order Execution Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_maturity_date_exists = ProtoField.new("Order Execution Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_message = ProtoField.new("Order Execution Message", "cboe.futures.orderentry.boe.v1.3.orderexecutionmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_min_qty_exists = ProtoField.new("Order Execution Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_multileg_reporting_type_exists = ProtoField.new("Order Execution Multileg Reporting Type Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionmultilegreportingtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_oeoid_exists = ProtoField.new("Order Execution Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_open_close_exists = ProtoField.new("Order Execution Open Close Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_optional_fields = ProtoField.new("Order Execution Optional Fields", "cboe.futures.orderentry.boe.v1.3.orderexecutionoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_ord_type_exists = ProtoField.new("Order Execution Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_order_qty_exists = ProtoField.new("Order Execution Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_pending_status_exists = ProtoField.new("Order Execution Pending Status Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionpendingstatusexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_prevent_match_exists = ProtoField.new("Order Execution Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_price_exists = ProtoField.new("Order Execution Price Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists = ProtoField.new("Order Execution Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists = ProtoField.new("Order Execution Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists = ProtoField.new("Order Execution Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists = ProtoField.new("Order Execution Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists = ProtoField.new("Order Execution Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists = ProtoField.new("Order Execution Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists = ProtoField.new("Order Execution Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists = ProtoField.new("Order Execution Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_return_bitfields = ProtoField.new("Order Execution Return Bitfields", "cboe.futures.orderentry.boe.v1.3.orderexecutionreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_secondary_exec_id_exists = ProtoField.new("Order Execution Secondary Exec Id Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionsecondaryexecidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_side_exists = ProtoField.new("Order Execution Side Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_stop_px_exists = ProtoField.new("Order Execution Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_symbol_exists = ProtoField.new("Order Execution Symbol Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutionsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_time_in_force_exists = ProtoField.new("Order Execution Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutiontimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_execution_trade_date_exists = ProtoField.new("Order Execution Trade Date Exists", "cboe.futures.orderentry.boe.v1.3.orderexecutiontradedateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_id = ProtoField.new("Order Id", "cboe.futures.orderentry.boe.v1.3.orderid", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_account_exists = ProtoField.new("Order Modified Account Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_base_liquidity_indicator_exists = ProtoField.new("Order Modified Base Liquidity Indicator Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbaseliquidityindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_bitfield_count = ProtoField.new("Order Modified Bitfield Count", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_1 = ProtoField.new("Order Modified Byte 1", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_10 = ProtoField.new("Order Modified Byte 10", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_11 = ProtoField.new("Order Modified Byte 11", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_12 = ProtoField.new("Order Modified Byte 12", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_13 = ProtoField.new("Order Modified Byte 13", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_14 = ProtoField.new("Order Modified Byte 14", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_15 = ProtoField.new("Order Modified Byte 15", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_16 = ProtoField.new("Order Modified Byte 16", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_17 = ProtoField.new("Order Modified Byte 17", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_2 = ProtoField.new("Order Modified Byte 2", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_3 = ProtoField.new("Order Modified Byte 3", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_4 = ProtoField.new("Order Modified Byte 4", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_5 = ProtoField.new("Order Modified Byte 5", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_6 = ProtoField.new("Order Modified Byte 6", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_7 = ProtoField.new("Order Modified Byte 7", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_8 = ProtoField.new("Order Modified Byte 8", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_9 = ProtoField.new("Order Modified Byte 9", "cboe.futures.orderentry.boe.v1.3.ordermodifiedbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_capacity_exists = ProtoField.new("Order Modified Capacity Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_clearing_account_exists = ProtoField.new("Order Modified Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_clearing_firm_exists = ProtoField.new("Order Modified Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_cmta_number_exists = ProtoField.new("Order Modified Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_cti_code_exists = ProtoField.new("Order Modified Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedcticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_expire_time_exists = ProtoField.new("Order Modified Expire Time Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedexpiretimeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_frequent_trader_id_exists = ProtoField.new("Order Modified Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_leaves_qty_exists = ProtoField.new("Order Modified Leaves Qty Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedleavesqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_manual_order_indicator_exists = ProtoField.new("Order Modified Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_maturity_date_exists = ProtoField.new("Order Modified Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_message = ProtoField.new("Order Modified Message", "cboe.futures.orderentry.boe.v1.3.ordermodifiedmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_min_qty_exists = ProtoField.new("Order Modified Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_oeoid_exists = ProtoField.new("Order Modified Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_open_close_exists = ProtoField.new("Order Modified Open Close Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_optional_fields = ProtoField.new("Order Modified Optional Fields", "cboe.futures.orderentry.boe.v1.3.ordermodifiedoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_ord_type_exists = ProtoField.new("Order Modified Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_order_qty_exists = ProtoField.new("Order Modified Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_orig_cl_ord_id_exists = ProtoField.new("Order Modified Orig Cl Ord Id Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedorigclordidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_prevent_match_exists = ProtoField.new("Order Modified Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_price_exists = ProtoField.new("Order Modified Price Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists = ProtoField.new("Order Modified Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists = ProtoField.new("Order Modified Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists = ProtoField.new("Order Modified Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists = ProtoField.new("Order Modified Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists = ProtoField.new("Order Modified Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists = ProtoField.new("Order Modified Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists = ProtoField.new("Order Modified Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists = ProtoField.new("Order Modified Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_return_bitfields = ProtoField.new("Order Modified Return Bitfields", "cboe.futures.orderentry.boe.v1.3.ordermodifiedreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_side_exists = ProtoField.new("Order Modified Side Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_stop_px_exists = ProtoField.new("Order Modified Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_symbol_exists = ProtoField.new("Order Modified Symbol Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_modified_time_in_force_exists = ProtoField.new("Order Modified Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.ordermodifiedtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_qty = ProtoField.new("Order Qty", "cboe.futures.orderentry.boe.v1.3.orderqty", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.order_reject_reason = ProtoField.new("Order Reject Reason", "cboe.futures.orderentry.boe.v1.3.orderrejectreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_account_exists = ProtoField.new("Order Rejected Account Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_bitfield_count = ProtoField.new("Order Rejected Bitfield Count", "cboe.futures.orderentry.boe.v1.3.orderrejectedbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_1 = ProtoField.new("Order Rejected Byte 1", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_10 = ProtoField.new("Order Rejected Byte 10", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_11 = ProtoField.new("Order Rejected Byte 11", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_12 = ProtoField.new("Order Rejected Byte 12", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_13 = ProtoField.new("Order Rejected Byte 13", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_14 = ProtoField.new("Order Rejected Byte 14", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_15 = ProtoField.new("Order Rejected Byte 15", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_16 = ProtoField.new("Order Rejected Byte 16", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_17 = ProtoField.new("Order Rejected Byte 17", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_2 = ProtoField.new("Order Rejected Byte 2", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_3 = ProtoField.new("Order Rejected Byte 3", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_4 = ProtoField.new("Order Rejected Byte 4", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_5 = ProtoField.new("Order Rejected Byte 5", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_6 = ProtoField.new("Order Rejected Byte 6", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_7 = ProtoField.new("Order Rejected Byte 7", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_8 = ProtoField.new("Order Rejected Byte 8", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_9 = ProtoField.new("Order Rejected Byte 9", "cboe.futures.orderentry.boe.v1.3.orderrejectedbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_capacity_exists = ProtoField.new("Order Rejected Capacity Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_clearing_account_exists = ProtoField.new("Order Rejected Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_clearing_firm_exists = ProtoField.new("Order Rejected Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_cmta_number_exists = ProtoField.new("Order Rejected Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_cti_code_exists = ProtoField.new("Order Rejected Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedcticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_frequent_trader_id_exists = ProtoField.new("Order Rejected Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_manual_order_indicator_exists = ProtoField.new("Order Rejected Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_maturity_date_exists = ProtoField.new("Order Rejected Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_message = ProtoField.new("Order Rejected Message", "cboe.futures.orderentry.boe.v1.3.orderrejectedmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_min_qty_exists = ProtoField.new("Order Rejected Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_oeoid_exists = ProtoField.new("Order Rejected Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_open_close_exists = ProtoField.new("Order Rejected Open Close Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_optional_fields = ProtoField.new("Order Rejected Optional Fields", "cboe.futures.orderentry.boe.v1.3.orderrejectedoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_ord_type_exists = ProtoField.new("Order Rejected Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_order_qty_exists = ProtoField.new("Order Rejected Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_prevent_match_exists = ProtoField.new("Order Rejected Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_price_exists = ProtoField.new("Order Rejected Price Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists = ProtoField.new("Order Rejected Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists = ProtoField.new("Order Rejected Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists = ProtoField.new("Order Rejected Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists = ProtoField.new("Order Rejected Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists = ProtoField.new("Order Rejected Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists = ProtoField.new("Order Rejected Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists = ProtoField.new("Order Rejected Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists = ProtoField.new("Order Rejected Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_return_bitfields = ProtoField.new("Order Rejected Return Bitfields", "cboe.futures.orderentry.boe.v1.3.orderrejectedreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_side_exists = ProtoField.new("Order Rejected Side Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_stop_px_exists = ProtoField.new("Order Rejected Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_symbol_exists = ProtoField.new("Order Rejected Symbol Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.order_rejected_time_in_force_exists = ProtoField.new("Order Rejected Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.orderrejectedtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.orig_cl_ord_id = ProtoField.new("Orig Cl Ord Id", "cboe.futures.orderentry.boe.v1.3.origclordid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.orig_time = ProtoField.new("Orig Time", "cboe.futures.orderentry.boe.v1.3.origtime", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.packet = ProtoField.new("Packet", "cboe.futures.orderentry.boe.v1.3.packet", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.param_group = ProtoField.new("Param Group", "cboe.futures.orderentry.boe.v1.3.paramgroup", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.param_group_length = ProtoField.new("Param Group Length", "cboe.futures.orderentry.boe.v1.3.paramgrouplength", ftypes.UINT16)
cboe_futures_orderentry_boe_v1_3.fields.param_group_type = ProtoField.new("Param Group Type", "cboe.futures.orderentry.boe.v1.3.paramgrouptype", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.param_header = ProtoField.new("Param Header", "cboe.futures.orderentry.boe.v1.3.paramheader", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.parameter = ProtoField.new("Parameter", "cboe.futures.orderentry.boe.v1.3.parameter", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.password = ProtoField.new("Password", "cboe.futures.orderentry.boe.v1.3.password", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.pending_status = ProtoField.new("Pending Status", "cboe.futures.orderentry.boe.v1.3.pendingstatus", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.prevent_match = ProtoField.new("Prevent Match", "cboe.futures.orderentry.boe.v1.3.preventmatch", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.price = ProtoField.new("Price", "cboe.futures.orderentry.boe.v1.3.price", ftypes.INT64)
cboe_futures_orderentry_boe_v1_3.fields.product_name = ProtoField.new("Product Name", "cboe.futures.orderentry.boe.v1.3.productname", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_bitfield_count = ProtoField.new("Purge Order Bitfield Count", "cboe.futures.orderentry.boe.v1.3.purgeorderbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_byte_1 = ProtoField.new("Purge Order Byte 1", "cboe.futures.orderentry.boe.v1.3.purgeorderbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_byte_2 = ProtoField.new("Purge Order Byte 2", "cboe.futures.orderentry.boe.v1.3.purgeorderbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_clearing_firm_exists = ProtoField.new("Purge Order Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_manual_order_indicator_exists = ProtoField.new("Purge Order Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.purgeordermanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_mass_cancel_id_exists = ProtoField.new("Purge Order Mass Cancel Id Exists", "cboe.futures.orderentry.boe.v1.3.purgeordermasscancelidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_mass_cancel_inst_exists = ProtoField.new("Purge Order Mass Cancel Inst Exists", "cboe.futures.orderentry.boe.v1.3.purgeordermasscancelinstexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_message = ProtoField.new("Purge Order Message", "cboe.futures.orderentry.boe.v1.3.purgeordermessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_oeoid_exists = ProtoField.new("Purge Order Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_optional_fields = ProtoField.new("Purge Order Optional Fields", "cboe.futures.orderentry.boe.v1.3.purgeorderoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_product_name_exists = ProtoField.new("Purge Order Product Name Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderproductnameexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_1_exists = ProtoField.new("Purge Order Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_2_exists = ProtoField.new("Purge Order Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_3_exists = ProtoField.new("Purge Order Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_4_exists = ProtoField.new("Purge Order Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_5_exists = ProtoField.new("Purge Order Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_6_exists = ProtoField.new("Purge Order Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_7_exists = ProtoField.new("Purge Order Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_8_exists = ProtoField.new("Purge Order Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.purgeorderreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.purge_order_return_bitfields = ProtoField.new("Purge Order Return Bitfields", "cboe.futures.orderentry.boe.v1.3.purgeorderreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_reject_reason = ProtoField.new("Purge Reject Reason", "cboe.futures.orderentry.boe.v1.3.purgerejectreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_bitfield_count = ProtoField.new("Purge Rejected Bitfield Count", "cboe.futures.orderentry.boe.v1.3.purgerejectedbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_1 = ProtoField.new("Purge Rejected Byte 1", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_10 = ProtoField.new("Purge Rejected Byte 10", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_11 = ProtoField.new("Purge Rejected Byte 11", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_12 = ProtoField.new("Purge Rejected Byte 12", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_13 = ProtoField.new("Purge Rejected Byte 13", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_14 = ProtoField.new("Purge Rejected Byte 14", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_15 = ProtoField.new("Purge Rejected Byte 15", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_16 = ProtoField.new("Purge Rejected Byte 16", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_17 = ProtoField.new("Purge Rejected Byte 17", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_2 = ProtoField.new("Purge Rejected Byte 2", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_3 = ProtoField.new("Purge Rejected Byte 3", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_4 = ProtoField.new("Purge Rejected Byte 4", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_5 = ProtoField.new("Purge Rejected Byte 5", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_6 = ProtoField.new("Purge Rejected Byte 6", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_7 = ProtoField.new("Purge Rejected Byte 7", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_8 = ProtoField.new("Purge Rejected Byte 8", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_9 = ProtoField.new("Purge Rejected Byte 9", "cboe.futures.orderentry.boe.v1.3.purgerejectedbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_mass_cancel_id_exists = ProtoField.new("Purge Rejected Mass Cancel Id Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedmasscancelidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_message = ProtoField.new("Purge Rejected Message", "cboe.futures.orderentry.boe.v1.3.purgerejectedmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_optional_fields = ProtoField.new("Purge Rejected Optional Fields", "cboe.futures.orderentry.boe.v1.3.purgerejectedoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists = ProtoField.new("Purge Rejected Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists = ProtoField.new("Purge Rejected Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists = ProtoField.new("Purge Rejected Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists = ProtoField.new("Purge Rejected Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists = ProtoField.new("Purge Rejected Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists = ProtoField.new("Purge Rejected Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists = ProtoField.new("Purge Rejected Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists = ProtoField.new("Purge Rejected Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.purgerejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_return_bitfields = ProtoField.new("Purge Rejected Return Bitfields", "cboe.futures.orderentry.boe.v1.3.purgerejectedreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_cancelled_message = ProtoField.new("Quote Cancelled Message", "cboe.futures.orderentry.boe.v1.3.quotecancelledmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_execution_message = ProtoField.new("Quote Execution Message", "cboe.futures.orderentry.boe.v1.3.quoteexecutionmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_group = ProtoField.new("Quote Group", "cboe.futures.orderentry.boe.v1.3.quotegroup", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_liquidity_indicator = ProtoField.new("Quote Liquidity Indicator", "cboe.futures.orderentry.boe.v1.3.quoteliquidityindicator", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_reject_reason = ProtoField.new("Quote Reject Reason", "cboe.futures.orderentry.boe.v1.3.quoterejectreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_restated_message = ProtoField.new("Quote Restated Message", "cboe.futures.orderentry.boe.v1.3.quoterestatedmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_restatement_reason = ProtoField.new("Quote Restatement Reason", "cboe.futures.orderentry.boe.v1.3.quoterestatementreason", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_result = ProtoField.new("Quote Result", "cboe.futures.orderentry.boe.v1.3.quoteresult", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_result_group = ProtoField.new("Quote Result Group", "cboe.futures.orderentry.boe.v1.3.quoteresultgroup", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_update_acknowledgment_message = ProtoField.new("Quote Update Acknowledgment Message", "cboe.futures.orderentry.boe.v1.3.quoteupdateacknowledgmentmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_update_id = ProtoField.new("Quote Update Id", "cboe.futures.orderentry.boe.v1.3.quoteupdateid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_update_message = ProtoField.new("Quote Update Message", "cboe.futures.orderentry.boe.v1.3.quoteupdatemessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.quote_update_rejected_message = ProtoField.new("Quote Update Rejected Message", "cboe.futures.orderentry.boe.v1.3.quoteupdaterejectedmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.reserved_12 = ProtoField.new("Reserved 12", "cboe.futures.orderentry.boe.v1.3.reserved12", ftypes.BYTES)
cboe_futures_orderentry_boe_v1_3.fields.reserved_16 = ProtoField.new("Reserved 16", "cboe.futures.orderentry.boe.v1.3.reserved16", ftypes.BYTES)
cboe_futures_orderentry_boe_v1_3.fields.reserved_17 = ProtoField.new("Reserved 17", "cboe.futures.orderentry.boe.v1.3.reserved17", ftypes.BYTES)
cboe_futures_orderentry_boe_v1_3.fields.reserved_4 = ProtoField.new("Reserved 4", "cboe.futures.orderentry.boe.v1.3.reserved4", ftypes.BYTES)
cboe_futures_orderentry_boe_v1_3.fields.reserved_6 = ProtoField.new("Reserved 6", "cboe.futures.orderentry.boe.v1.3.reserved6", ftypes.BYTES)
cboe_futures_orderentry_boe_v1_3.fields.reserved_internal = ProtoField.new("Reserved Internal", "cboe.futures.orderentry.boe.v1.3.reservedinternal", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.reset_risk_message = ProtoField.new("Reset Risk Message", "cboe.futures.orderentry.boe.v1.3.resetriskmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.return_bitfields = ProtoField.new("Return Bitfields", "cboe.futures.orderentry.boe.v1.3.returnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.risk_reset = ProtoField.new("Risk Reset", "cboe.futures.orderentry.boe.v1.3.riskreset", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.risk_reset_acknowledgment_message = ProtoField.new("Risk Reset Acknowledgment Message", "cboe.futures.orderentry.boe.v1.3.riskresetacknowledgmentmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.risk_reset_result = ProtoField.new("Risk Reset Result", "cboe.futures.orderentry.boe.v1.3.riskresetresult", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.risk_status_id = ProtoField.new("Risk Status Id", "cboe.futures.orderentry.boe.v1.3.riskstatusid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.secondary_exec_id = ProtoField.new("Secondary Exec Id", "cboe.futures.orderentry.boe.v1.3.secondaryexecid", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.secondary_order_id = ProtoField.new("Secondary Order Id", "cboe.futures.orderentry.boe.v1.3.secondaryorderid", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.sequence_number = ProtoField.new("Sequence Number", "cboe.futures.orderentry.boe.v1.3.sequencenumber", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.session_sub_id = ProtoField.new("Session Sub Id", "cboe.futures.orderentry.boe.v1.3.sessionsubid", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.side = ProtoField.new("Side", "cboe.futures.orderentry.boe.v1.3.side", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.size_modifier = ProtoField.new("Size Modifier", "cboe.futures.orderentry.boe.v1.3.sizemodifier", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.start_of_message = ProtoField.new("Start Of Message", "cboe.futures.orderentry.boe.v1.3.startofmessage", ftypes.UINT16)
cboe_futures_orderentry_boe_v1_3.fields.stop_px = ProtoField.new("Stop Px", "cboe.futures.orderentry.boe.v1.3.stoppx", ftypes.INT64)
cboe_futures_orderentry_boe_v1_3.fields.sub_liquidity_indicator = ProtoField.new("Sub Liquidity Indicator", "cboe.futures.orderentry.boe.v1.3.subliquidityindicator", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.symbol = ProtoField.new("Symbol", "cboe.futures.orderentry.boe.v1.3.symbol", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_quote_restatement_message = ProtoField.new("Tas Quote Restatement Message", "cboe.futures.orderentry.boe.v1.3.tasquoterestatementmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_account_exists = ProtoField.new("Tas Restatement Account Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_bitfield_count = ProtoField.new("Tas Restatement Bitfield Count", "cboe.futures.orderentry.boe.v1.3.tasrestatementbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_1 = ProtoField.new("Tas Restatement Byte 1", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_10 = ProtoField.new("Tas Restatement Byte 10", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_11 = ProtoField.new("Tas Restatement Byte 11", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_12 = ProtoField.new("Tas Restatement Byte 12", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_13 = ProtoField.new("Tas Restatement Byte 13", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_14 = ProtoField.new("Tas Restatement Byte 14", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_15 = ProtoField.new("Tas Restatement Byte 15", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_16 = ProtoField.new("Tas Restatement Byte 16", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_17 = ProtoField.new("Tas Restatement Byte 17", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_2 = ProtoField.new("Tas Restatement Byte 2", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_3 = ProtoField.new("Tas Restatement Byte 3", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_4 = ProtoField.new("Tas Restatement Byte 4", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_5 = ProtoField.new("Tas Restatement Byte 5", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_6 = ProtoField.new("Tas Restatement Byte 6", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_7 = ProtoField.new("Tas Restatement Byte 7", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_8 = ProtoField.new("Tas Restatement Byte 8", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_9 = ProtoField.new("Tas Restatement Byte 9", "cboe.futures.orderentry.boe.v1.3.tasrestatementbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_capacity_exists = ProtoField.new("Tas Restatement Capacity Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_account_exists = ProtoField.new("Tas Restatement Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_firm_exists = ProtoField.new("Tas Restatement Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_price_exists = ProtoField.new("Tas Restatement Clearing Price Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementclearingpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_size_exists = ProtoField.new("Tas Restatement Clearing Size Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementclearingsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_symbol_exists = ProtoField.new("Tas Restatement Clearing Symbol Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementclearingsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_cmta_number_exists = ProtoField.new("Tas Restatement Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_cti_code_exists = ProtoField.new("Tas Restatement Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementcticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_fee_code_exists = ProtoField.new("Tas Restatement Fee Code Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_frequent_trader_id_exists = ProtoField.new("Tas Restatement Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_last_px_exists = ProtoField.new("Tas Restatement Last Px Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementlastpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_last_shares_exists = ProtoField.new("Tas Restatement Last Shares Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementlastsharesexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_manual_order_indicator_exists = ProtoField.new("Tas Restatement Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_maturity_date_exists = ProtoField.new("Tas Restatement Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_message = ProtoField.new("Tas Restatement Message", "cboe.futures.orderentry.boe.v1.3.tasrestatementmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_min_qty_exists = ProtoField.new("Tas Restatement Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_multileg_reporting_type_exists = ProtoField.new("Tas Restatement Multileg Reporting Type Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementmultilegreportingtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_oeoid_exists = ProtoField.new("Tas Restatement Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_open_close_exists = ProtoField.new("Tas Restatement Open Close Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_optional_fields = ProtoField.new("Tas Restatement Optional Fields", "cboe.futures.orderentry.boe.v1.3.tasrestatementoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_ord_type_exists = ProtoField.new("Tas Restatement Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_order_qty_exists = ProtoField.new("Tas Restatement Order Qty Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementorderqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_orig_cl_ord_id_exists = ProtoField.new("Tas Restatement Orig Cl Ord Id Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementorigclordidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_prevent_match_exists = ProtoField.new("Tas Restatement Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_price_exists = ProtoField.new("Tas Restatement Price Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists = ProtoField.new("Tas Restatement Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists = ProtoField.new("Tas Restatement Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists = ProtoField.new("Tas Restatement Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists = ProtoField.new("Tas Restatement Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists = ProtoField.new("Tas Restatement Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists = ProtoField.new("Tas Restatement Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists = ProtoField.new("Tas Restatement Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists = ProtoField.new("Tas Restatement Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_return_bitfields = ProtoField.new("Tas Restatement Return Bitfields", "cboe.futures.orderentry.boe.v1.3.tasrestatementreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_secondary_exec_id_exists = ProtoField.new("Tas Restatement Secondary Exec Id Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementsecondaryexecidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_side_exists = ProtoField.new("Tas Restatement Side Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_stop_px_exists = ProtoField.new("Tas Restatement Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_symbol_exists = ProtoField.new("Tas Restatement Symbol Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_time_in_force_exists = ProtoField.new("Tas Restatement Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_trade_date_exists = ProtoField.new("Tas Restatement Trade Date Exists", "cboe.futures.orderentry.boe.v1.3.tasrestatementtradedateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.text = ProtoField.new("Text", "cboe.futures.orderentry.boe.v1.3.text", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.time_in_force = ProtoField.new("Time In Force", "cboe.futures.orderentry.boe.v1.3.timeinforce", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_bitfield_count = ProtoField.new("Trade Cancel Or Correct Bitfield Count", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_1 = ProtoField.new("Trade Cancel Or Correct Byte 1", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_10 = ProtoField.new("Trade Cancel Or Correct Byte 10", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_11 = ProtoField.new("Trade Cancel Or Correct Byte 11", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_12 = ProtoField.new("Trade Cancel Or Correct Byte 12", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_13 = ProtoField.new("Trade Cancel Or Correct Byte 13", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_14 = ProtoField.new("Trade Cancel Or Correct Byte 14", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_15 = ProtoField.new("Trade Cancel Or Correct Byte 15", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_16 = ProtoField.new("Trade Cancel Or Correct Byte 16", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_17 = ProtoField.new("Trade Cancel Or Correct Byte 17", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_2 = ProtoField.new("Trade Cancel Or Correct Byte 2", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_3 = ProtoField.new("Trade Cancel Or Correct Byte 3", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_4 = ProtoField.new("Trade Cancel Or Correct Byte 4", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_5 = ProtoField.new("Trade Cancel Or Correct Byte 5", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_6 = ProtoField.new("Trade Cancel Or Correct Byte 6", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_7 = ProtoField.new("Trade Cancel Or Correct Byte 7", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_8 = ProtoField.new("Trade Cancel Or Correct Byte 8", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_9 = ProtoField.new("Trade Cancel Or Correct Byte 9", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_capacity_exists = ProtoField.new("Trade Cancel Or Correct Capacity Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_cmta_number_exists = ProtoField.new("Trade Cancel Or Correct Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_corrected_size_exists = ProtoField.new("Trade Cancel Or Correct Corrected Size Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectcorrectedsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_maturity_date_exists = ProtoField.new("Trade Cancel Or Correct Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_message = ProtoField.new("Trade Cancel Or Correct Message", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_open_close_exists = ProtoField.new("Trade Cancel Or Correct Open Close Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_optional_fields = ProtoField.new("Trade Cancel Or Correct Optional Fields", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists = ProtoField.new("Trade Cancel Or Correct Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_return_bitfields = ProtoField.new("Trade Cancel Or Correct Return Bitfields", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_symbol_exists = ProtoField.new("Trade Cancel Or Correct Symbol Exists", "cboe.futures.orderentry.boe.v1.3.tradecancelorcorrectsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.trade_date = ProtoField.new("Trade Date", "cboe.futures.orderentry.boe.v1.3.tradedate", ftypes.UINT32)
cboe_futures_orderentry_boe_v1_3.fields.transaction_time = ProtoField.new("Transaction Time", "cboe.futures.orderentry.boe.v1.3.transactiontime", ftypes.UINT64)
cboe_futures_orderentry_boe_v1_3.fields.unit_number = ProtoField.new("Unit Number", "cboe.futures.orderentry.boe.v1.3.unitnumber", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.unit_sequence = ProtoField.new("Unit Sequence", "cboe.futures.orderentry.boe.v1.3.unitsequence", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.unit_sequences = ProtoField.new("Unit Sequences", "cboe.futures.orderentry.boe.v1.3.unitsequences", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_bitfield_count = ProtoField.new("User Modify Rejected Bitfield Count", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_1 = ProtoField.new("User Modify Rejected Byte 1", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_10 = ProtoField.new("User Modify Rejected Byte 10", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_11 = ProtoField.new("User Modify Rejected Byte 11", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_12 = ProtoField.new("User Modify Rejected Byte 12", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_13 = ProtoField.new("User Modify Rejected Byte 13", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_14 = ProtoField.new("User Modify Rejected Byte 14", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_15 = ProtoField.new("User Modify Rejected Byte 15", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_16 = ProtoField.new("User Modify Rejected Byte 16", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_17 = ProtoField.new("User Modify Rejected Byte 17", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_2 = ProtoField.new("User Modify Rejected Byte 2", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_3 = ProtoField.new("User Modify Rejected Byte 3", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_4 = ProtoField.new("User Modify Rejected Byte 4", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_5 = ProtoField.new("User Modify Rejected Byte 5", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_6 = ProtoField.new("User Modify Rejected Byte 6", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_7 = ProtoField.new("User Modify Rejected Byte 7", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_8 = ProtoField.new("User Modify Rejected Byte 8", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_9 = ProtoField.new("User Modify Rejected Byte 9", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_message = ProtoField.new("User Modify Rejected Message", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_optional_fields = ProtoField.new("User Modify Rejected Optional Fields", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists = ProtoField.new("User Modify Rejected Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists = ProtoField.new("User Modify Rejected Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists = ProtoField.new("User Modify Rejected Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists = ProtoField.new("User Modify Rejected Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists = ProtoField.new("User Modify Rejected Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists = ProtoField.new("User Modify Rejected Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists = ProtoField.new("User Modify Rejected Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists = ProtoField.new("User Modify Rejected Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_return_bitfields = ProtoField.new("User Modify Rejected Return Bitfields", "cboe.futures.orderentry.boe.v1.3.usermodifyrejectedreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.username = ProtoField.new("Username", "cboe.futures.orderentry.boe.v1.3.username", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_quote_restatement_message = ProtoField.new("Variance Quote Restatement Message", "cboe.futures.orderentry.boe.v1.3.variancequoterestatementmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_account_exists = ProtoField.new("Variance Restatement Account Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_bitfield_count = ProtoField.new("Variance Restatement Bitfield Count", "cboe.futures.orderentry.boe.v1.3.variancerestatementbitfieldcount", ftypes.UINT8)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_1 = ProtoField.new("Variance Restatement Byte 1", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte1", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_10 = ProtoField.new("Variance Restatement Byte 10", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte10", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_11 = ProtoField.new("Variance Restatement Byte 11", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte11", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_12 = ProtoField.new("Variance Restatement Byte 12", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte12", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_13 = ProtoField.new("Variance Restatement Byte 13", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte13", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_14 = ProtoField.new("Variance Restatement Byte 14", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte14", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_15 = ProtoField.new("Variance Restatement Byte 15", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte15", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_16 = ProtoField.new("Variance Restatement Byte 16", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte16", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_17 = ProtoField.new("Variance Restatement Byte 17", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte17", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_2 = ProtoField.new("Variance Restatement Byte 2", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte2", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_3 = ProtoField.new("Variance Restatement Byte 3", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte3", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_4 = ProtoField.new("Variance Restatement Byte 4", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte4", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_5 = ProtoField.new("Variance Restatement Byte 5", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte5", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_6 = ProtoField.new("Variance Restatement Byte 6", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte6", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_7 = ProtoField.new("Variance Restatement Byte 7", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte7", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_8 = ProtoField.new("Variance Restatement Byte 8", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte8", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_9 = ProtoField.new("Variance Restatement Byte 9", "cboe.futures.orderentry.boe.v1.3.variancerestatementbyte9", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_capacity_exists = ProtoField.new("Variance Restatement Capacity Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementcapacityexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_account_exists = ProtoField.new("Variance Restatement Clearing Account Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementclearingaccountexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_firm_exists = ProtoField.new("Variance Restatement Clearing Firm Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementclearingfirmexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_price_exists = ProtoField.new("Variance Restatement Clearing Price Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementclearingpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_size_exists = ProtoField.new("Variance Restatement Clearing Size Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementclearingsizeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_symbol_exists = ProtoField.new("Variance Restatement Clearing Symbol Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementclearingsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_cmta_number_exists = ProtoField.new("Variance Restatement Cmta Number Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementcmtanumberexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_cti_code_exists = ProtoField.new("Variance Restatement Cti Code Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementcticodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_fee_code_exists = ProtoField.new("Variance Restatement Fee Code Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementfeecodeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_frequent_trader_id_exists = ProtoField.new("Variance Restatement Frequent Trader Id Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementfrequenttraderidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_last_px_exists = ProtoField.new("Variance Restatement Last Px Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementlastpxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_last_shares_exists = ProtoField.new("Variance Restatement Last Shares Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementlastsharesexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_manual_order_indicator_exists = ProtoField.new("Variance Restatement Manual Order Indicator Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementmanualorderindicatorexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_maturity_date_exists = ProtoField.new("Variance Restatement Maturity Date Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementmaturitydateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_message = ProtoField.new("Variance Restatement Message", "cboe.futures.orderentry.boe.v1.3.variancerestatementmessage", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_min_qty_exists = ProtoField.new("Variance Restatement Min Qty Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementminqtyexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_multileg_reporting_type_exists = ProtoField.new("Variance Restatement Multileg Reporting Type Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementmultilegreportingtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_oeoid_exists = ProtoField.new("Variance Restatement Oeoid Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementoeoidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_open_close_exists = ProtoField.new("Variance Restatement Open Close Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementopencloseexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_optional_fields = ProtoField.new("Variance Restatement Optional Fields", "cboe.futures.orderentry.boe.v1.3.variancerestatementoptionalfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_ord_type_exists = ProtoField.new("Variance Restatement Ord Type Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementordtypeexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_orig_cl_ord_id_exists = ProtoField.new("Variance Restatement Orig Cl Ord Id Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementorigclordidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_prevent_match_exists = ProtoField.new("Variance Restatement Prevent Match Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementpreventmatchexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_price_exists = ProtoField.new("Variance Restatement Price Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementpriceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists = ProtoField.new("Variance Restatement Reserved Bit 1 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit1exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists = ProtoField.new("Variance Restatement Reserved Bit 2 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit2exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x02)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists = ProtoField.new("Variance Restatement Reserved Bit 3 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit3exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists = ProtoField.new("Variance Restatement Reserved Bit 4 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit4exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists = ProtoField.new("Variance Restatement Reserved Bit 5 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit5exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists = ProtoField.new("Variance Restatement Reserved Bit 6 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit6exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists = ProtoField.new("Variance Restatement Reserved Bit 7 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit7exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x40)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists = ProtoField.new("Variance Restatement Reserved Bit 8 Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementreservedbit8exists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x80)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_return_bitfields = ProtoField.new("Variance Restatement Return Bitfields", "cboe.futures.orderentry.boe.v1.3.variancerestatementreturnbitfields", ftypes.STRING)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_secondary_exec_id_exists = ProtoField.new("Variance Restatement Secondary Exec Id Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementsecondaryexecidexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x10)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_side_exists = ProtoField.new("Variance Restatement Side Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementsideexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_stop_px_exists = ProtoField.new("Variance Restatement Stop Px Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementstoppxexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x04)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_symbol_exists = ProtoField.new("Variance Restatement Symbol Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementsymbolexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x01)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_time_in_force_exists = ProtoField.new("Variance Restatement Time In Force Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementtimeinforceexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x20)
cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_trade_date_exists = ProtoField.new("Variance Restatement Trade Date Exists", "cboe.futures.orderentry.boe.v1.3.variancerestatementtradedateexists", ftypes.UINT8, {[1]="Yes",[0]="No"}, base.DEC, 0x08)
cboe_futures_orderentry_boe_v1_3.fields.working_price = ProtoField.new("Working Price", "cboe.futures.orderentry.boe.v1.3.workingprice", ftypes.UINT64)

-----------------------------------------------------------------------
-- Declare Dissection Options
-----------------------------------------------------------------------

-- Cboe Futures OrderEntry Boe 1.3 Element Dissection Options
show.cancel_order_byte_1 = true
show.cancel_order_byte_2 = true
show.cancel_order_message = true
show.cancel_order_optional_fields = true
show.cancel_order_return_bitfields = true
show.cancel_rejected_byte_1 = true
show.cancel_rejected_byte_10 = true
show.cancel_rejected_byte_11 = true
show.cancel_rejected_byte_12 = true
show.cancel_rejected_byte_13 = true
show.cancel_rejected_byte_14 = true
show.cancel_rejected_byte_15 = true
show.cancel_rejected_byte_16 = true
show.cancel_rejected_byte_17 = true
show.cancel_rejected_byte_2 = true
show.cancel_rejected_byte_3 = true
show.cancel_rejected_byte_4 = true
show.cancel_rejected_byte_5 = true
show.cancel_rejected_byte_6 = true
show.cancel_rejected_byte_7 = true
show.cancel_rejected_byte_8 = true
show.cancel_rejected_byte_9 = true
show.cancel_rejected_message = true
show.cancel_rejected_optional_fields = true
show.cancel_rejected_return_bitfields = true
show.login_request_message = true
show.login_response_message = true
show.logout_message = true
show.mass_cancel_acknowledgment_message = true
show.message_header = true
show.modify_order_byte_1 = true
show.modify_order_byte_2 = true
show.modify_order_message = true
show.modify_order_optional_fields = true
show.modify_order_return_bitfields = true
show.new_order_byte_1 = true
show.new_order_byte_2 = true
show.new_order_byte_3 = true
show.new_order_byte_4 = true
show.new_order_byte_5 = true
show.new_order_byte_6 = true
show.new_order_byte_7 = true
show.new_order_byte_8 = true
show.new_order_message = true
show.new_order_optional_fields = true
show.new_order_return_bitfields = true
show.order_acknowledgment_byte_1 = true
show.order_acknowledgment_byte_10 = true
show.order_acknowledgment_byte_11 = true
show.order_acknowledgment_byte_12 = true
show.order_acknowledgment_byte_13 = true
show.order_acknowledgment_byte_14 = true
show.order_acknowledgment_byte_15 = true
show.order_acknowledgment_byte_16 = true
show.order_acknowledgment_byte_17 = true
show.order_acknowledgment_byte_2 = true
show.order_acknowledgment_byte_3 = true
show.order_acknowledgment_byte_4 = true
show.order_acknowledgment_byte_5 = true
show.order_acknowledgment_byte_6 = true
show.order_acknowledgment_byte_7 = true
show.order_acknowledgment_byte_8 = true
show.order_acknowledgment_byte_9 = true
show.order_acknowledgment_message = true
show.order_acknowledgment_optional_fields = true
show.order_acknowledgment_return_bitfields = true
show.order_cancelled_byte_1 = true
show.order_cancelled_byte_10 = true
show.order_cancelled_byte_11 = true
show.order_cancelled_byte_12 = true
show.order_cancelled_byte_13 = true
show.order_cancelled_byte_14 = true
show.order_cancelled_byte_15 = true
show.order_cancelled_byte_16 = true
show.order_cancelled_byte_17 = true
show.order_cancelled_byte_2 = true
show.order_cancelled_byte_3 = true
show.order_cancelled_byte_4 = true
show.order_cancelled_byte_5 = true
show.order_cancelled_byte_6 = true
show.order_cancelled_byte_7 = true
show.order_cancelled_byte_8 = true
show.order_cancelled_byte_9 = true
show.order_cancelled_message = true
show.order_cancelled_optional_fields = true
show.order_cancelled_return_bitfields = true
show.order_execution_byte_1 = true
show.order_execution_byte_10 = true
show.order_execution_byte_11 = true
show.order_execution_byte_12 = true
show.order_execution_byte_13 = true
show.order_execution_byte_14 = true
show.order_execution_byte_15 = true
show.order_execution_byte_16 = true
show.order_execution_byte_17 = true
show.order_execution_byte_2 = true
show.order_execution_byte_3 = true
show.order_execution_byte_4 = true
show.order_execution_byte_5 = true
show.order_execution_byte_6 = true
show.order_execution_byte_7 = true
show.order_execution_byte_8 = true
show.order_execution_byte_9 = true
show.order_execution_message = true
show.order_execution_optional_fields = true
show.order_execution_return_bitfields = true
show.order_modified_byte_1 = true
show.order_modified_byte_10 = true
show.order_modified_byte_11 = true
show.order_modified_byte_12 = true
show.order_modified_byte_13 = true
show.order_modified_byte_14 = true
show.order_modified_byte_15 = true
show.order_modified_byte_16 = true
show.order_modified_byte_17 = true
show.order_modified_byte_2 = true
show.order_modified_byte_3 = true
show.order_modified_byte_4 = true
show.order_modified_byte_5 = true
show.order_modified_byte_6 = true
show.order_modified_byte_7 = true
show.order_modified_byte_8 = true
show.order_modified_byte_9 = true
show.order_modified_message = true
show.order_modified_optional_fields = true
show.order_modified_return_bitfields = true
show.order_rejected_byte_1 = true
show.order_rejected_byte_10 = true
show.order_rejected_byte_11 = true
show.order_rejected_byte_12 = true
show.order_rejected_byte_13 = true
show.order_rejected_byte_14 = true
show.order_rejected_byte_15 = true
show.order_rejected_byte_16 = true
show.order_rejected_byte_17 = true
show.order_rejected_byte_2 = true
show.order_rejected_byte_3 = true
show.order_rejected_byte_4 = true
show.order_rejected_byte_5 = true
show.order_rejected_byte_6 = true
show.order_rejected_byte_7 = true
show.order_rejected_byte_8 = true
show.order_rejected_byte_9 = true
show.order_rejected_message = true
show.order_rejected_optional_fields = true
show.order_rejected_return_bitfields = true
show.packet = true
show.param_group = true
show.param_header = true
show.purge_order_byte_1 = true
show.purge_order_byte_2 = true
show.purge_order_message = true
show.purge_order_optional_fields = true
show.purge_order_return_bitfields = true
show.purge_rejected_byte_1 = true
show.purge_rejected_byte_10 = true
show.purge_rejected_byte_11 = true
show.purge_rejected_byte_12 = true
show.purge_rejected_byte_13 = true
show.purge_rejected_byte_14 = true
show.purge_rejected_byte_15 = true
show.purge_rejected_byte_16 = true
show.purge_rejected_byte_17 = true
show.purge_rejected_byte_2 = true
show.purge_rejected_byte_3 = true
show.purge_rejected_byte_4 = true
show.purge_rejected_byte_5 = true
show.purge_rejected_byte_6 = true
show.purge_rejected_byte_7 = true
show.purge_rejected_byte_8 = true
show.purge_rejected_byte_9 = true
show.purge_rejected_message = true
show.purge_rejected_optional_fields = true
show.purge_rejected_return_bitfields = true
show.quote_cancelled_message = true
show.quote_execution_message = true
show.quote_group = true
show.quote_restated_message = true
show.quote_result_group = true
show.quote_update_acknowledgment_message = true
show.quote_update_message = true
show.quote_update_rejected_message = true
show.reset_risk_message = true
show.return_bitfields = true
show.risk_reset_acknowledgment_message = true
show.tas_quote_restatement_message = true
show.tas_restatement_byte_1 = true
show.tas_restatement_byte_10 = true
show.tas_restatement_byte_11 = true
show.tas_restatement_byte_12 = true
show.tas_restatement_byte_13 = true
show.tas_restatement_byte_14 = true
show.tas_restatement_byte_15 = true
show.tas_restatement_byte_16 = true
show.tas_restatement_byte_17 = true
show.tas_restatement_byte_2 = true
show.tas_restatement_byte_3 = true
show.tas_restatement_byte_4 = true
show.tas_restatement_byte_5 = true
show.tas_restatement_byte_6 = true
show.tas_restatement_byte_7 = true
show.tas_restatement_byte_8 = true
show.tas_restatement_byte_9 = true
show.tas_restatement_message = true
show.tas_restatement_optional_fields = true
show.tas_restatement_return_bitfields = true
show.trade_cancel_or_correct_byte_1 = true
show.trade_cancel_or_correct_byte_10 = true
show.trade_cancel_or_correct_byte_11 = true
show.trade_cancel_or_correct_byte_12 = true
show.trade_cancel_or_correct_byte_13 = true
show.trade_cancel_or_correct_byte_14 = true
show.trade_cancel_or_correct_byte_15 = true
show.trade_cancel_or_correct_byte_16 = true
show.trade_cancel_or_correct_byte_17 = true
show.trade_cancel_or_correct_byte_2 = true
show.trade_cancel_or_correct_byte_3 = true
show.trade_cancel_or_correct_byte_4 = true
show.trade_cancel_or_correct_byte_5 = true
show.trade_cancel_or_correct_byte_6 = true
show.trade_cancel_or_correct_byte_7 = true
show.trade_cancel_or_correct_byte_8 = true
show.trade_cancel_or_correct_byte_9 = true
show.trade_cancel_or_correct_message = true
show.trade_cancel_or_correct_optional_fields = true
show.trade_cancel_or_correct_return_bitfields = true
show.unit_sequence = true
show.unit_sequences = true
show.user_modify_rejected_byte_1 = true
show.user_modify_rejected_byte_10 = true
show.user_modify_rejected_byte_11 = true
show.user_modify_rejected_byte_12 = true
show.user_modify_rejected_byte_13 = true
show.user_modify_rejected_byte_14 = true
show.user_modify_rejected_byte_15 = true
show.user_modify_rejected_byte_16 = true
show.user_modify_rejected_byte_17 = true
show.user_modify_rejected_byte_2 = true
show.user_modify_rejected_byte_3 = true
show.user_modify_rejected_byte_4 = true
show.user_modify_rejected_byte_5 = true
show.user_modify_rejected_byte_6 = true
show.user_modify_rejected_byte_7 = true
show.user_modify_rejected_byte_8 = true
show.user_modify_rejected_byte_9 = true
show.user_modify_rejected_message = true
show.user_modify_rejected_optional_fields = true
show.user_modify_rejected_return_bitfields = true
show.variance_quote_restatement_message = true
show.variance_restatement_byte_1 = true
show.variance_restatement_byte_10 = true
show.variance_restatement_byte_11 = true
show.variance_restatement_byte_12 = true
show.variance_restatement_byte_13 = true
show.variance_restatement_byte_14 = true
show.variance_restatement_byte_15 = true
show.variance_restatement_byte_16 = true
show.variance_restatement_byte_17 = true
show.variance_restatement_byte_2 = true
show.variance_restatement_byte_3 = true
show.variance_restatement_byte_4 = true
show.variance_restatement_byte_5 = true
show.variance_restatement_byte_6 = true
show.variance_restatement_byte_7 = true
show.variance_restatement_byte_8 = true
show.variance_restatement_byte_9 = true
show.variance_restatement_message = true
show.variance_restatement_optional_fields = true
show.variance_restatement_return_bitfields = true
show.bitfields = false
show.message = false
show.parameter = false

-- Register Cboe Futures OrderEntry Boe 1.3 Show Options
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_byte_1 = Pref.bool("Show Cancel Order Byte 1", show.cancel_order_byte_1, "Parse and add Cancel Order Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_byte_2 = Pref.bool("Show Cancel Order Byte 2", show.cancel_order_byte_2, "Parse and add Cancel Order Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_message = Pref.bool("Show Cancel Order Message", show.cancel_order_message, "Parse and add Cancel Order Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_optional_fields = Pref.bool("Show Cancel Order Optional Fields", show.cancel_order_optional_fields, "Parse and add Cancel Order Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_return_bitfields = Pref.bool("Show Cancel Order Return Bitfields", show.cancel_order_return_bitfields, "Parse and add Cancel Order Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_1 = Pref.bool("Show Cancel Rejected Byte 1", show.cancel_rejected_byte_1, "Parse and add Cancel Rejected Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_10 = Pref.bool("Show Cancel Rejected Byte 10", show.cancel_rejected_byte_10, "Parse and add Cancel Rejected Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_11 = Pref.bool("Show Cancel Rejected Byte 11", show.cancel_rejected_byte_11, "Parse and add Cancel Rejected Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_12 = Pref.bool("Show Cancel Rejected Byte 12", show.cancel_rejected_byte_12, "Parse and add Cancel Rejected Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_13 = Pref.bool("Show Cancel Rejected Byte 13", show.cancel_rejected_byte_13, "Parse and add Cancel Rejected Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_14 = Pref.bool("Show Cancel Rejected Byte 14", show.cancel_rejected_byte_14, "Parse and add Cancel Rejected Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_15 = Pref.bool("Show Cancel Rejected Byte 15", show.cancel_rejected_byte_15, "Parse and add Cancel Rejected Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_16 = Pref.bool("Show Cancel Rejected Byte 16", show.cancel_rejected_byte_16, "Parse and add Cancel Rejected Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_17 = Pref.bool("Show Cancel Rejected Byte 17", show.cancel_rejected_byte_17, "Parse and add Cancel Rejected Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_2 = Pref.bool("Show Cancel Rejected Byte 2", show.cancel_rejected_byte_2, "Parse and add Cancel Rejected Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_3 = Pref.bool("Show Cancel Rejected Byte 3", show.cancel_rejected_byte_3, "Parse and add Cancel Rejected Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_4 = Pref.bool("Show Cancel Rejected Byte 4", show.cancel_rejected_byte_4, "Parse and add Cancel Rejected Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_5 = Pref.bool("Show Cancel Rejected Byte 5", show.cancel_rejected_byte_5, "Parse and add Cancel Rejected Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_6 = Pref.bool("Show Cancel Rejected Byte 6", show.cancel_rejected_byte_6, "Parse and add Cancel Rejected Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_7 = Pref.bool("Show Cancel Rejected Byte 7", show.cancel_rejected_byte_7, "Parse and add Cancel Rejected Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_8 = Pref.bool("Show Cancel Rejected Byte 8", show.cancel_rejected_byte_8, "Parse and add Cancel Rejected Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_9 = Pref.bool("Show Cancel Rejected Byte 9", show.cancel_rejected_byte_9, "Parse and add Cancel Rejected Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_message = Pref.bool("Show Cancel Rejected Message", show.cancel_rejected_message, "Parse and add Cancel Rejected Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_optional_fields = Pref.bool("Show Cancel Rejected Optional Fields", show.cancel_rejected_optional_fields, "Parse and add Cancel Rejected Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_return_bitfields = Pref.bool("Show Cancel Rejected Return Bitfields", show.cancel_rejected_return_bitfields, "Parse and add Cancel Rejected Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_login_request_message = Pref.bool("Show Login Request Message", show.login_request_message, "Parse and add Login Request Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_login_response_message = Pref.bool("Show Login Response Message", show.login_response_message, "Parse and add Login Response Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_logout_message = Pref.bool("Show Logout Message", show.logout_message, "Parse and add Logout Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_mass_cancel_acknowledgment_message = Pref.bool("Show Mass Cancel Acknowledgment Message", show.mass_cancel_acknowledgment_message, "Parse and add Mass Cancel Acknowledgment Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_message_header = Pref.bool("Show Message Header", show.message_header, "Parse and add Message Header to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_byte_1 = Pref.bool("Show Modify Order Byte 1", show.modify_order_byte_1, "Parse and add Modify Order Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_byte_2 = Pref.bool("Show Modify Order Byte 2", show.modify_order_byte_2, "Parse and add Modify Order Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_message = Pref.bool("Show Modify Order Message", show.modify_order_message, "Parse and add Modify Order Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_optional_fields = Pref.bool("Show Modify Order Optional Fields", show.modify_order_optional_fields, "Parse and add Modify Order Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_return_bitfields = Pref.bool("Show Modify Order Return Bitfields", show.modify_order_return_bitfields, "Parse and add Modify Order Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_1 = Pref.bool("Show New Order Byte 1", show.new_order_byte_1, "Parse and add New Order Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_2 = Pref.bool("Show New Order Byte 2", show.new_order_byte_2, "Parse and add New Order Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_3 = Pref.bool("Show New Order Byte 3", show.new_order_byte_3, "Parse and add New Order Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_4 = Pref.bool("Show New Order Byte 4", show.new_order_byte_4, "Parse and add New Order Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_5 = Pref.bool("Show New Order Byte 5", show.new_order_byte_5, "Parse and add New Order Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_6 = Pref.bool("Show New Order Byte 6", show.new_order_byte_6, "Parse and add New Order Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_7 = Pref.bool("Show New Order Byte 7", show.new_order_byte_7, "Parse and add New Order Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_8 = Pref.bool("Show New Order Byte 8", show.new_order_byte_8, "Parse and add New Order Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_message = Pref.bool("Show New Order Message", show.new_order_message, "Parse and add New Order Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_optional_fields = Pref.bool("Show New Order Optional Fields", show.new_order_optional_fields, "Parse and add New Order Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_return_bitfields = Pref.bool("Show New Order Return Bitfields", show.new_order_return_bitfields, "Parse and add New Order Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_1 = Pref.bool("Show Order Acknowledgment Byte 1", show.order_acknowledgment_byte_1, "Parse and add Order Acknowledgment Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_10 = Pref.bool("Show Order Acknowledgment Byte 10", show.order_acknowledgment_byte_10, "Parse and add Order Acknowledgment Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_11 = Pref.bool("Show Order Acknowledgment Byte 11", show.order_acknowledgment_byte_11, "Parse and add Order Acknowledgment Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_12 = Pref.bool("Show Order Acknowledgment Byte 12", show.order_acknowledgment_byte_12, "Parse and add Order Acknowledgment Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_13 = Pref.bool("Show Order Acknowledgment Byte 13", show.order_acknowledgment_byte_13, "Parse and add Order Acknowledgment Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_14 = Pref.bool("Show Order Acknowledgment Byte 14", show.order_acknowledgment_byte_14, "Parse and add Order Acknowledgment Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_15 = Pref.bool("Show Order Acknowledgment Byte 15", show.order_acknowledgment_byte_15, "Parse and add Order Acknowledgment Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_16 = Pref.bool("Show Order Acknowledgment Byte 16", show.order_acknowledgment_byte_16, "Parse and add Order Acknowledgment Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_17 = Pref.bool("Show Order Acknowledgment Byte 17", show.order_acknowledgment_byte_17, "Parse and add Order Acknowledgment Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_2 = Pref.bool("Show Order Acknowledgment Byte 2", show.order_acknowledgment_byte_2, "Parse and add Order Acknowledgment Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_3 = Pref.bool("Show Order Acknowledgment Byte 3", show.order_acknowledgment_byte_3, "Parse and add Order Acknowledgment Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_4 = Pref.bool("Show Order Acknowledgment Byte 4", show.order_acknowledgment_byte_4, "Parse and add Order Acknowledgment Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_5 = Pref.bool("Show Order Acknowledgment Byte 5", show.order_acknowledgment_byte_5, "Parse and add Order Acknowledgment Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_6 = Pref.bool("Show Order Acknowledgment Byte 6", show.order_acknowledgment_byte_6, "Parse and add Order Acknowledgment Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_7 = Pref.bool("Show Order Acknowledgment Byte 7", show.order_acknowledgment_byte_7, "Parse and add Order Acknowledgment Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_8 = Pref.bool("Show Order Acknowledgment Byte 8", show.order_acknowledgment_byte_8, "Parse and add Order Acknowledgment Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_9 = Pref.bool("Show Order Acknowledgment Byte 9", show.order_acknowledgment_byte_9, "Parse and add Order Acknowledgment Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_message = Pref.bool("Show Order Acknowledgment Message", show.order_acknowledgment_message, "Parse and add Order Acknowledgment Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_optional_fields = Pref.bool("Show Order Acknowledgment Optional Fields", show.order_acknowledgment_optional_fields, "Parse and add Order Acknowledgment Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_return_bitfields = Pref.bool("Show Order Acknowledgment Return Bitfields", show.order_acknowledgment_return_bitfields, "Parse and add Order Acknowledgment Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_1 = Pref.bool("Show Order Cancelled Byte 1", show.order_cancelled_byte_1, "Parse and add Order Cancelled Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_10 = Pref.bool("Show Order Cancelled Byte 10", show.order_cancelled_byte_10, "Parse and add Order Cancelled Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_11 = Pref.bool("Show Order Cancelled Byte 11", show.order_cancelled_byte_11, "Parse and add Order Cancelled Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_12 = Pref.bool("Show Order Cancelled Byte 12", show.order_cancelled_byte_12, "Parse and add Order Cancelled Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_13 = Pref.bool("Show Order Cancelled Byte 13", show.order_cancelled_byte_13, "Parse and add Order Cancelled Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_14 = Pref.bool("Show Order Cancelled Byte 14", show.order_cancelled_byte_14, "Parse and add Order Cancelled Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_15 = Pref.bool("Show Order Cancelled Byte 15", show.order_cancelled_byte_15, "Parse and add Order Cancelled Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_16 = Pref.bool("Show Order Cancelled Byte 16", show.order_cancelled_byte_16, "Parse and add Order Cancelled Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_17 = Pref.bool("Show Order Cancelled Byte 17", show.order_cancelled_byte_17, "Parse and add Order Cancelled Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_2 = Pref.bool("Show Order Cancelled Byte 2", show.order_cancelled_byte_2, "Parse and add Order Cancelled Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_3 = Pref.bool("Show Order Cancelled Byte 3", show.order_cancelled_byte_3, "Parse and add Order Cancelled Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_4 = Pref.bool("Show Order Cancelled Byte 4", show.order_cancelled_byte_4, "Parse and add Order Cancelled Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_5 = Pref.bool("Show Order Cancelled Byte 5", show.order_cancelled_byte_5, "Parse and add Order Cancelled Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_6 = Pref.bool("Show Order Cancelled Byte 6", show.order_cancelled_byte_6, "Parse and add Order Cancelled Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_7 = Pref.bool("Show Order Cancelled Byte 7", show.order_cancelled_byte_7, "Parse and add Order Cancelled Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_8 = Pref.bool("Show Order Cancelled Byte 8", show.order_cancelled_byte_8, "Parse and add Order Cancelled Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_9 = Pref.bool("Show Order Cancelled Byte 9", show.order_cancelled_byte_9, "Parse and add Order Cancelled Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_message = Pref.bool("Show Order Cancelled Message", show.order_cancelled_message, "Parse and add Order Cancelled Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_optional_fields = Pref.bool("Show Order Cancelled Optional Fields", show.order_cancelled_optional_fields, "Parse and add Order Cancelled Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_return_bitfields = Pref.bool("Show Order Cancelled Return Bitfields", show.order_cancelled_return_bitfields, "Parse and add Order Cancelled Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_1 = Pref.bool("Show Order Execution Byte 1", show.order_execution_byte_1, "Parse and add Order Execution Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_10 = Pref.bool("Show Order Execution Byte 10", show.order_execution_byte_10, "Parse and add Order Execution Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_11 = Pref.bool("Show Order Execution Byte 11", show.order_execution_byte_11, "Parse and add Order Execution Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_12 = Pref.bool("Show Order Execution Byte 12", show.order_execution_byte_12, "Parse and add Order Execution Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_13 = Pref.bool("Show Order Execution Byte 13", show.order_execution_byte_13, "Parse and add Order Execution Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_14 = Pref.bool("Show Order Execution Byte 14", show.order_execution_byte_14, "Parse and add Order Execution Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_15 = Pref.bool("Show Order Execution Byte 15", show.order_execution_byte_15, "Parse and add Order Execution Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_16 = Pref.bool("Show Order Execution Byte 16", show.order_execution_byte_16, "Parse and add Order Execution Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_17 = Pref.bool("Show Order Execution Byte 17", show.order_execution_byte_17, "Parse and add Order Execution Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_2 = Pref.bool("Show Order Execution Byte 2", show.order_execution_byte_2, "Parse and add Order Execution Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_3 = Pref.bool("Show Order Execution Byte 3", show.order_execution_byte_3, "Parse and add Order Execution Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_4 = Pref.bool("Show Order Execution Byte 4", show.order_execution_byte_4, "Parse and add Order Execution Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_5 = Pref.bool("Show Order Execution Byte 5", show.order_execution_byte_5, "Parse and add Order Execution Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_6 = Pref.bool("Show Order Execution Byte 6", show.order_execution_byte_6, "Parse and add Order Execution Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_7 = Pref.bool("Show Order Execution Byte 7", show.order_execution_byte_7, "Parse and add Order Execution Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_8 = Pref.bool("Show Order Execution Byte 8", show.order_execution_byte_8, "Parse and add Order Execution Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_9 = Pref.bool("Show Order Execution Byte 9", show.order_execution_byte_9, "Parse and add Order Execution Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_message = Pref.bool("Show Order Execution Message", show.order_execution_message, "Parse and add Order Execution Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_optional_fields = Pref.bool("Show Order Execution Optional Fields", show.order_execution_optional_fields, "Parse and add Order Execution Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_return_bitfields = Pref.bool("Show Order Execution Return Bitfields", show.order_execution_return_bitfields, "Parse and add Order Execution Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_1 = Pref.bool("Show Order Modified Byte 1", show.order_modified_byte_1, "Parse and add Order Modified Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_10 = Pref.bool("Show Order Modified Byte 10", show.order_modified_byte_10, "Parse and add Order Modified Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_11 = Pref.bool("Show Order Modified Byte 11", show.order_modified_byte_11, "Parse and add Order Modified Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_12 = Pref.bool("Show Order Modified Byte 12", show.order_modified_byte_12, "Parse and add Order Modified Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_13 = Pref.bool("Show Order Modified Byte 13", show.order_modified_byte_13, "Parse and add Order Modified Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_14 = Pref.bool("Show Order Modified Byte 14", show.order_modified_byte_14, "Parse and add Order Modified Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_15 = Pref.bool("Show Order Modified Byte 15", show.order_modified_byte_15, "Parse and add Order Modified Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_16 = Pref.bool("Show Order Modified Byte 16", show.order_modified_byte_16, "Parse and add Order Modified Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_17 = Pref.bool("Show Order Modified Byte 17", show.order_modified_byte_17, "Parse and add Order Modified Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_2 = Pref.bool("Show Order Modified Byte 2", show.order_modified_byte_2, "Parse and add Order Modified Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_3 = Pref.bool("Show Order Modified Byte 3", show.order_modified_byte_3, "Parse and add Order Modified Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_4 = Pref.bool("Show Order Modified Byte 4", show.order_modified_byte_4, "Parse and add Order Modified Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_5 = Pref.bool("Show Order Modified Byte 5", show.order_modified_byte_5, "Parse and add Order Modified Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_6 = Pref.bool("Show Order Modified Byte 6", show.order_modified_byte_6, "Parse and add Order Modified Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_7 = Pref.bool("Show Order Modified Byte 7", show.order_modified_byte_7, "Parse and add Order Modified Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_8 = Pref.bool("Show Order Modified Byte 8", show.order_modified_byte_8, "Parse and add Order Modified Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_9 = Pref.bool("Show Order Modified Byte 9", show.order_modified_byte_9, "Parse and add Order Modified Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_message = Pref.bool("Show Order Modified Message", show.order_modified_message, "Parse and add Order Modified Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_optional_fields = Pref.bool("Show Order Modified Optional Fields", show.order_modified_optional_fields, "Parse and add Order Modified Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_return_bitfields = Pref.bool("Show Order Modified Return Bitfields", show.order_modified_return_bitfields, "Parse and add Order Modified Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_1 = Pref.bool("Show Order Rejected Byte 1", show.order_rejected_byte_1, "Parse and add Order Rejected Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_10 = Pref.bool("Show Order Rejected Byte 10", show.order_rejected_byte_10, "Parse and add Order Rejected Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_11 = Pref.bool("Show Order Rejected Byte 11", show.order_rejected_byte_11, "Parse and add Order Rejected Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_12 = Pref.bool("Show Order Rejected Byte 12", show.order_rejected_byte_12, "Parse and add Order Rejected Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_13 = Pref.bool("Show Order Rejected Byte 13", show.order_rejected_byte_13, "Parse and add Order Rejected Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_14 = Pref.bool("Show Order Rejected Byte 14", show.order_rejected_byte_14, "Parse and add Order Rejected Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_15 = Pref.bool("Show Order Rejected Byte 15", show.order_rejected_byte_15, "Parse and add Order Rejected Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_16 = Pref.bool("Show Order Rejected Byte 16", show.order_rejected_byte_16, "Parse and add Order Rejected Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_17 = Pref.bool("Show Order Rejected Byte 17", show.order_rejected_byte_17, "Parse and add Order Rejected Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_2 = Pref.bool("Show Order Rejected Byte 2", show.order_rejected_byte_2, "Parse and add Order Rejected Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_3 = Pref.bool("Show Order Rejected Byte 3", show.order_rejected_byte_3, "Parse and add Order Rejected Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_4 = Pref.bool("Show Order Rejected Byte 4", show.order_rejected_byte_4, "Parse and add Order Rejected Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_5 = Pref.bool("Show Order Rejected Byte 5", show.order_rejected_byte_5, "Parse and add Order Rejected Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_6 = Pref.bool("Show Order Rejected Byte 6", show.order_rejected_byte_6, "Parse and add Order Rejected Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_7 = Pref.bool("Show Order Rejected Byte 7", show.order_rejected_byte_7, "Parse and add Order Rejected Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_8 = Pref.bool("Show Order Rejected Byte 8", show.order_rejected_byte_8, "Parse and add Order Rejected Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_9 = Pref.bool("Show Order Rejected Byte 9", show.order_rejected_byte_9, "Parse and add Order Rejected Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_message = Pref.bool("Show Order Rejected Message", show.order_rejected_message, "Parse and add Order Rejected Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_optional_fields = Pref.bool("Show Order Rejected Optional Fields", show.order_rejected_optional_fields, "Parse and add Order Rejected Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_return_bitfields = Pref.bool("Show Order Rejected Return Bitfields", show.order_rejected_return_bitfields, "Parse and add Order Rejected Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_packet = Pref.bool("Show Packet", show.packet, "Parse and add Packet to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_param_group = Pref.bool("Show Param Group", show.param_group, "Parse and add Param Group to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_param_header = Pref.bool("Show Param Header", show.param_header, "Parse and add Param Header to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_byte_1 = Pref.bool("Show Purge Order Byte 1", show.purge_order_byte_1, "Parse and add Purge Order Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_byte_2 = Pref.bool("Show Purge Order Byte 2", show.purge_order_byte_2, "Parse and add Purge Order Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_message = Pref.bool("Show Purge Order Message", show.purge_order_message, "Parse and add Purge Order Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_optional_fields = Pref.bool("Show Purge Order Optional Fields", show.purge_order_optional_fields, "Parse and add Purge Order Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_return_bitfields = Pref.bool("Show Purge Order Return Bitfields", show.purge_order_return_bitfields, "Parse and add Purge Order Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_1 = Pref.bool("Show Purge Rejected Byte 1", show.purge_rejected_byte_1, "Parse and add Purge Rejected Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_10 = Pref.bool("Show Purge Rejected Byte 10", show.purge_rejected_byte_10, "Parse and add Purge Rejected Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_11 = Pref.bool("Show Purge Rejected Byte 11", show.purge_rejected_byte_11, "Parse and add Purge Rejected Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_12 = Pref.bool("Show Purge Rejected Byte 12", show.purge_rejected_byte_12, "Parse and add Purge Rejected Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_13 = Pref.bool("Show Purge Rejected Byte 13", show.purge_rejected_byte_13, "Parse and add Purge Rejected Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_14 = Pref.bool("Show Purge Rejected Byte 14", show.purge_rejected_byte_14, "Parse and add Purge Rejected Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_15 = Pref.bool("Show Purge Rejected Byte 15", show.purge_rejected_byte_15, "Parse and add Purge Rejected Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_16 = Pref.bool("Show Purge Rejected Byte 16", show.purge_rejected_byte_16, "Parse and add Purge Rejected Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_17 = Pref.bool("Show Purge Rejected Byte 17", show.purge_rejected_byte_17, "Parse and add Purge Rejected Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_2 = Pref.bool("Show Purge Rejected Byte 2", show.purge_rejected_byte_2, "Parse and add Purge Rejected Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_3 = Pref.bool("Show Purge Rejected Byte 3", show.purge_rejected_byte_3, "Parse and add Purge Rejected Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_4 = Pref.bool("Show Purge Rejected Byte 4", show.purge_rejected_byte_4, "Parse and add Purge Rejected Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_5 = Pref.bool("Show Purge Rejected Byte 5", show.purge_rejected_byte_5, "Parse and add Purge Rejected Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_6 = Pref.bool("Show Purge Rejected Byte 6", show.purge_rejected_byte_6, "Parse and add Purge Rejected Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_7 = Pref.bool("Show Purge Rejected Byte 7", show.purge_rejected_byte_7, "Parse and add Purge Rejected Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_8 = Pref.bool("Show Purge Rejected Byte 8", show.purge_rejected_byte_8, "Parse and add Purge Rejected Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_9 = Pref.bool("Show Purge Rejected Byte 9", show.purge_rejected_byte_9, "Parse and add Purge Rejected Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_message = Pref.bool("Show Purge Rejected Message", show.purge_rejected_message, "Parse and add Purge Rejected Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_optional_fields = Pref.bool("Show Purge Rejected Optional Fields", show.purge_rejected_optional_fields, "Parse and add Purge Rejected Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_return_bitfields = Pref.bool("Show Purge Rejected Return Bitfields", show.purge_rejected_return_bitfields, "Parse and add Purge Rejected Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_cancelled_message = Pref.bool("Show Quote Cancelled Message", show.quote_cancelled_message, "Parse and add Quote Cancelled Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_execution_message = Pref.bool("Show Quote Execution Message", show.quote_execution_message, "Parse and add Quote Execution Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_group = Pref.bool("Show Quote Group", show.quote_group, "Parse and add Quote Group to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_restated_message = Pref.bool("Show Quote Restated Message", show.quote_restated_message, "Parse and add Quote Restated Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_result_group = Pref.bool("Show Quote Result Group", show.quote_result_group, "Parse and add Quote Result Group to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_acknowledgment_message = Pref.bool("Show Quote Update Acknowledgment Message", show.quote_update_acknowledgment_message, "Parse and add Quote Update Acknowledgment Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_message = Pref.bool("Show Quote Update Message", show.quote_update_message, "Parse and add Quote Update Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_rejected_message = Pref.bool("Show Quote Update Rejected Message", show.quote_update_rejected_message, "Parse and add Quote Update Rejected Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_reset_risk_message = Pref.bool("Show Reset Risk Message", show.reset_risk_message, "Parse and add Reset Risk Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_return_bitfields = Pref.bool("Show Return Bitfields", show.return_bitfields, "Parse and add Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_risk_reset_acknowledgment_message = Pref.bool("Show Risk Reset Acknowledgment Message", show.risk_reset_acknowledgment_message, "Parse and add Risk Reset Acknowledgment Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_quote_restatement_message = Pref.bool("Show Tas Quote Restatement Message", show.tas_quote_restatement_message, "Parse and add Tas Quote Restatement Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_1 = Pref.bool("Show Tas Restatement Byte 1", show.tas_restatement_byte_1, "Parse and add Tas Restatement Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_10 = Pref.bool("Show Tas Restatement Byte 10", show.tas_restatement_byte_10, "Parse and add Tas Restatement Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_11 = Pref.bool("Show Tas Restatement Byte 11", show.tas_restatement_byte_11, "Parse and add Tas Restatement Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_12 = Pref.bool("Show Tas Restatement Byte 12", show.tas_restatement_byte_12, "Parse and add Tas Restatement Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_13 = Pref.bool("Show Tas Restatement Byte 13", show.tas_restatement_byte_13, "Parse and add Tas Restatement Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_14 = Pref.bool("Show Tas Restatement Byte 14", show.tas_restatement_byte_14, "Parse and add Tas Restatement Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_15 = Pref.bool("Show Tas Restatement Byte 15", show.tas_restatement_byte_15, "Parse and add Tas Restatement Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_16 = Pref.bool("Show Tas Restatement Byte 16", show.tas_restatement_byte_16, "Parse and add Tas Restatement Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_17 = Pref.bool("Show Tas Restatement Byte 17", show.tas_restatement_byte_17, "Parse and add Tas Restatement Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_2 = Pref.bool("Show Tas Restatement Byte 2", show.tas_restatement_byte_2, "Parse and add Tas Restatement Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_3 = Pref.bool("Show Tas Restatement Byte 3", show.tas_restatement_byte_3, "Parse and add Tas Restatement Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_4 = Pref.bool("Show Tas Restatement Byte 4", show.tas_restatement_byte_4, "Parse and add Tas Restatement Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_5 = Pref.bool("Show Tas Restatement Byte 5", show.tas_restatement_byte_5, "Parse and add Tas Restatement Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_6 = Pref.bool("Show Tas Restatement Byte 6", show.tas_restatement_byte_6, "Parse and add Tas Restatement Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_7 = Pref.bool("Show Tas Restatement Byte 7", show.tas_restatement_byte_7, "Parse and add Tas Restatement Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_8 = Pref.bool("Show Tas Restatement Byte 8", show.tas_restatement_byte_8, "Parse and add Tas Restatement Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_9 = Pref.bool("Show Tas Restatement Byte 9", show.tas_restatement_byte_9, "Parse and add Tas Restatement Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_message = Pref.bool("Show Tas Restatement Message", show.tas_restatement_message, "Parse and add Tas Restatement Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_optional_fields = Pref.bool("Show Tas Restatement Optional Fields", show.tas_restatement_optional_fields, "Parse and add Tas Restatement Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_return_bitfields = Pref.bool("Show Tas Restatement Return Bitfields", show.tas_restatement_return_bitfields, "Parse and add Tas Restatement Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_1 = Pref.bool("Show Trade Cancel Or Correct Byte 1", show.trade_cancel_or_correct_byte_1, "Parse and add Trade Cancel Or Correct Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_10 = Pref.bool("Show Trade Cancel Or Correct Byte 10", show.trade_cancel_or_correct_byte_10, "Parse and add Trade Cancel Or Correct Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_11 = Pref.bool("Show Trade Cancel Or Correct Byte 11", show.trade_cancel_or_correct_byte_11, "Parse and add Trade Cancel Or Correct Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_12 = Pref.bool("Show Trade Cancel Or Correct Byte 12", show.trade_cancel_or_correct_byte_12, "Parse and add Trade Cancel Or Correct Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_13 = Pref.bool("Show Trade Cancel Or Correct Byte 13", show.trade_cancel_or_correct_byte_13, "Parse and add Trade Cancel Or Correct Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_14 = Pref.bool("Show Trade Cancel Or Correct Byte 14", show.trade_cancel_or_correct_byte_14, "Parse and add Trade Cancel Or Correct Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_15 = Pref.bool("Show Trade Cancel Or Correct Byte 15", show.trade_cancel_or_correct_byte_15, "Parse and add Trade Cancel Or Correct Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_16 = Pref.bool("Show Trade Cancel Or Correct Byte 16", show.trade_cancel_or_correct_byte_16, "Parse and add Trade Cancel Or Correct Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_17 = Pref.bool("Show Trade Cancel Or Correct Byte 17", show.trade_cancel_or_correct_byte_17, "Parse and add Trade Cancel Or Correct Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_2 = Pref.bool("Show Trade Cancel Or Correct Byte 2", show.trade_cancel_or_correct_byte_2, "Parse and add Trade Cancel Or Correct Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_3 = Pref.bool("Show Trade Cancel Or Correct Byte 3", show.trade_cancel_or_correct_byte_3, "Parse and add Trade Cancel Or Correct Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_4 = Pref.bool("Show Trade Cancel Or Correct Byte 4", show.trade_cancel_or_correct_byte_4, "Parse and add Trade Cancel Or Correct Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_5 = Pref.bool("Show Trade Cancel Or Correct Byte 5", show.trade_cancel_or_correct_byte_5, "Parse and add Trade Cancel Or Correct Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_6 = Pref.bool("Show Trade Cancel Or Correct Byte 6", show.trade_cancel_or_correct_byte_6, "Parse and add Trade Cancel Or Correct Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_7 = Pref.bool("Show Trade Cancel Or Correct Byte 7", show.trade_cancel_or_correct_byte_7, "Parse and add Trade Cancel Or Correct Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_8 = Pref.bool("Show Trade Cancel Or Correct Byte 8", show.trade_cancel_or_correct_byte_8, "Parse and add Trade Cancel Or Correct Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_9 = Pref.bool("Show Trade Cancel Or Correct Byte 9", show.trade_cancel_or_correct_byte_9, "Parse and add Trade Cancel Or Correct Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_message = Pref.bool("Show Trade Cancel Or Correct Message", show.trade_cancel_or_correct_message, "Parse and add Trade Cancel Or Correct Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_optional_fields = Pref.bool("Show Trade Cancel Or Correct Optional Fields", show.trade_cancel_or_correct_optional_fields, "Parse and add Trade Cancel Or Correct Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_return_bitfields = Pref.bool("Show Trade Cancel Or Correct Return Bitfields", show.trade_cancel_or_correct_return_bitfields, "Parse and add Trade Cancel Or Correct Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_unit_sequence = Pref.bool("Show Unit Sequence", show.unit_sequence, "Parse and add Unit Sequence to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_unit_sequences = Pref.bool("Show Unit Sequences", show.unit_sequences, "Parse and add Unit Sequences to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_1 = Pref.bool("Show User Modify Rejected Byte 1", show.user_modify_rejected_byte_1, "Parse and add User Modify Rejected Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_10 = Pref.bool("Show User Modify Rejected Byte 10", show.user_modify_rejected_byte_10, "Parse and add User Modify Rejected Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_11 = Pref.bool("Show User Modify Rejected Byte 11", show.user_modify_rejected_byte_11, "Parse and add User Modify Rejected Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_12 = Pref.bool("Show User Modify Rejected Byte 12", show.user_modify_rejected_byte_12, "Parse and add User Modify Rejected Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_13 = Pref.bool("Show User Modify Rejected Byte 13", show.user_modify_rejected_byte_13, "Parse and add User Modify Rejected Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_14 = Pref.bool("Show User Modify Rejected Byte 14", show.user_modify_rejected_byte_14, "Parse and add User Modify Rejected Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_15 = Pref.bool("Show User Modify Rejected Byte 15", show.user_modify_rejected_byte_15, "Parse and add User Modify Rejected Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_16 = Pref.bool("Show User Modify Rejected Byte 16", show.user_modify_rejected_byte_16, "Parse and add User Modify Rejected Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_17 = Pref.bool("Show User Modify Rejected Byte 17", show.user_modify_rejected_byte_17, "Parse and add User Modify Rejected Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_2 = Pref.bool("Show User Modify Rejected Byte 2", show.user_modify_rejected_byte_2, "Parse and add User Modify Rejected Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_3 = Pref.bool("Show User Modify Rejected Byte 3", show.user_modify_rejected_byte_3, "Parse and add User Modify Rejected Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_4 = Pref.bool("Show User Modify Rejected Byte 4", show.user_modify_rejected_byte_4, "Parse and add User Modify Rejected Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_5 = Pref.bool("Show User Modify Rejected Byte 5", show.user_modify_rejected_byte_5, "Parse and add User Modify Rejected Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_6 = Pref.bool("Show User Modify Rejected Byte 6", show.user_modify_rejected_byte_6, "Parse and add User Modify Rejected Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_7 = Pref.bool("Show User Modify Rejected Byte 7", show.user_modify_rejected_byte_7, "Parse and add User Modify Rejected Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_8 = Pref.bool("Show User Modify Rejected Byte 8", show.user_modify_rejected_byte_8, "Parse and add User Modify Rejected Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_9 = Pref.bool("Show User Modify Rejected Byte 9", show.user_modify_rejected_byte_9, "Parse and add User Modify Rejected Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_message = Pref.bool("Show User Modify Rejected Message", show.user_modify_rejected_message, "Parse and add User Modify Rejected Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_optional_fields = Pref.bool("Show User Modify Rejected Optional Fields", show.user_modify_rejected_optional_fields, "Parse and add User Modify Rejected Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_return_bitfields = Pref.bool("Show User Modify Rejected Return Bitfields", show.user_modify_rejected_return_bitfields, "Parse and add User Modify Rejected Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_quote_restatement_message = Pref.bool("Show Variance Quote Restatement Message", show.variance_quote_restatement_message, "Parse and add Variance Quote Restatement Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_1 = Pref.bool("Show Variance Restatement Byte 1", show.variance_restatement_byte_1, "Parse and add Variance Restatement Byte 1 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_10 = Pref.bool("Show Variance Restatement Byte 10", show.variance_restatement_byte_10, "Parse and add Variance Restatement Byte 10 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_11 = Pref.bool("Show Variance Restatement Byte 11", show.variance_restatement_byte_11, "Parse and add Variance Restatement Byte 11 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_12 = Pref.bool("Show Variance Restatement Byte 12", show.variance_restatement_byte_12, "Parse and add Variance Restatement Byte 12 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_13 = Pref.bool("Show Variance Restatement Byte 13", show.variance_restatement_byte_13, "Parse and add Variance Restatement Byte 13 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_14 = Pref.bool("Show Variance Restatement Byte 14", show.variance_restatement_byte_14, "Parse and add Variance Restatement Byte 14 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_15 = Pref.bool("Show Variance Restatement Byte 15", show.variance_restatement_byte_15, "Parse and add Variance Restatement Byte 15 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_16 = Pref.bool("Show Variance Restatement Byte 16", show.variance_restatement_byte_16, "Parse and add Variance Restatement Byte 16 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_17 = Pref.bool("Show Variance Restatement Byte 17", show.variance_restatement_byte_17, "Parse and add Variance Restatement Byte 17 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_2 = Pref.bool("Show Variance Restatement Byte 2", show.variance_restatement_byte_2, "Parse and add Variance Restatement Byte 2 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_3 = Pref.bool("Show Variance Restatement Byte 3", show.variance_restatement_byte_3, "Parse and add Variance Restatement Byte 3 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_4 = Pref.bool("Show Variance Restatement Byte 4", show.variance_restatement_byte_4, "Parse and add Variance Restatement Byte 4 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_5 = Pref.bool("Show Variance Restatement Byte 5", show.variance_restatement_byte_5, "Parse and add Variance Restatement Byte 5 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_6 = Pref.bool("Show Variance Restatement Byte 6", show.variance_restatement_byte_6, "Parse and add Variance Restatement Byte 6 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_7 = Pref.bool("Show Variance Restatement Byte 7", show.variance_restatement_byte_7, "Parse and add Variance Restatement Byte 7 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_8 = Pref.bool("Show Variance Restatement Byte 8", show.variance_restatement_byte_8, "Parse and add Variance Restatement Byte 8 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_9 = Pref.bool("Show Variance Restatement Byte 9", show.variance_restatement_byte_9, "Parse and add Variance Restatement Byte 9 to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_message = Pref.bool("Show Variance Restatement Message", show.variance_restatement_message, "Parse and add Variance Restatement Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_optional_fields = Pref.bool("Show Variance Restatement Optional Fields", show.variance_restatement_optional_fields, "Parse and add Variance Restatement Optional Fields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_return_bitfields = Pref.bool("Show Variance Restatement Return Bitfields", show.variance_restatement_return_bitfields, "Parse and add Variance Restatement Return Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_bitfields = Pref.bool("Show Bitfields", show.bitfields, "Parse and add Bitfields to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_message = Pref.bool("Show Message", show.message, "Parse and add Message to protocol tree")
cboe_futures_orderentry_boe_v1_3.prefs.show_parameter = Pref.bool("Show Parameter", show.parameter, "Parse and add Parameter to protocol tree")

-- Handle changed preferences
function cboe_futures_orderentry_boe_v1_3.prefs_changed()
  local changed = false

  -- Check if show options have changed
  if show.cancel_order_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_byte_1 then
    show.cancel_order_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_byte_1
    changed = true
  end
  if show.cancel_order_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_byte_2 then
    show.cancel_order_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_byte_2
    changed = true
  end
  if show.cancel_order_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_message then
    show.cancel_order_message = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_message
    changed = true
  end
  if show.cancel_order_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_optional_fields then
    show.cancel_order_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_optional_fields
    changed = true
  end
  if show.cancel_order_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_return_bitfields then
    show.cancel_order_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_order_return_bitfields
    changed = true
  end
  if show.cancel_rejected_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_1 then
    show.cancel_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_1
    changed = true
  end
  if show.cancel_rejected_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_10 then
    show.cancel_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_10
    changed = true
  end
  if show.cancel_rejected_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_11 then
    show.cancel_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_11
    changed = true
  end
  if show.cancel_rejected_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_12 then
    show.cancel_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_12
    changed = true
  end
  if show.cancel_rejected_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_13 then
    show.cancel_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_13
    changed = true
  end
  if show.cancel_rejected_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_14 then
    show.cancel_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_14
    changed = true
  end
  if show.cancel_rejected_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_15 then
    show.cancel_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_15
    changed = true
  end
  if show.cancel_rejected_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_16 then
    show.cancel_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_16
    changed = true
  end
  if show.cancel_rejected_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_17 then
    show.cancel_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_17
    changed = true
  end
  if show.cancel_rejected_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_2 then
    show.cancel_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_2
    changed = true
  end
  if show.cancel_rejected_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_3 then
    show.cancel_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_3
    changed = true
  end
  if show.cancel_rejected_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_4 then
    show.cancel_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_4
    changed = true
  end
  if show.cancel_rejected_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_5 then
    show.cancel_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_5
    changed = true
  end
  if show.cancel_rejected_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_6 then
    show.cancel_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_6
    changed = true
  end
  if show.cancel_rejected_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_7 then
    show.cancel_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_7
    changed = true
  end
  if show.cancel_rejected_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_8 then
    show.cancel_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_8
    changed = true
  end
  if show.cancel_rejected_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_9 then
    show.cancel_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_byte_9
    changed = true
  end
  if show.cancel_rejected_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_message then
    show.cancel_rejected_message = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_message
    changed = true
  end
  if show.cancel_rejected_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_optional_fields then
    show.cancel_rejected_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_optional_fields
    changed = true
  end
  if show.cancel_rejected_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_return_bitfields then
    show.cancel_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_cancel_rejected_return_bitfields
    changed = true
  end
  if show.login_request_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_login_request_message then
    show.login_request_message = cboe_futures_orderentry_boe_v1_3.prefs.show_login_request_message
    changed = true
  end
  if show.login_response_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_login_response_message then
    show.login_response_message = cboe_futures_orderentry_boe_v1_3.prefs.show_login_response_message
    changed = true
  end
  if show.logout_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_logout_message then
    show.logout_message = cboe_futures_orderentry_boe_v1_3.prefs.show_logout_message
    changed = true
  end
  if show.mass_cancel_acknowledgment_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_mass_cancel_acknowledgment_message then
    show.mass_cancel_acknowledgment_message = cboe_futures_orderentry_boe_v1_3.prefs.show_mass_cancel_acknowledgment_message
    changed = true
  end
  if show.message_header ~= cboe_futures_orderentry_boe_v1_3.prefs.show_message_header then
    show.message_header = cboe_futures_orderentry_boe_v1_3.prefs.show_message_header
    changed = true
  end
  if show.modify_order_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_byte_1 then
    show.modify_order_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_byte_1
    changed = true
  end
  if show.modify_order_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_byte_2 then
    show.modify_order_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_byte_2
    changed = true
  end
  if show.modify_order_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_message then
    show.modify_order_message = cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_message
    changed = true
  end
  if show.modify_order_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_optional_fields then
    show.modify_order_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_optional_fields
    changed = true
  end
  if show.modify_order_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_return_bitfields then
    show.modify_order_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_modify_order_return_bitfields
    changed = true
  end
  if show.new_order_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_1 then
    show.new_order_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_1
    changed = true
  end
  if show.new_order_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_2 then
    show.new_order_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_2
    changed = true
  end
  if show.new_order_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_3 then
    show.new_order_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_3
    changed = true
  end
  if show.new_order_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_4 then
    show.new_order_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_4
    changed = true
  end
  if show.new_order_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_5 then
    show.new_order_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_5
    changed = true
  end
  if show.new_order_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_6 then
    show.new_order_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_6
    changed = true
  end
  if show.new_order_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_7 then
    show.new_order_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_7
    changed = true
  end
  if show.new_order_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_8 then
    show.new_order_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_byte_8
    changed = true
  end
  if show.new_order_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_message then
    show.new_order_message = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_message
    changed = true
  end
  if show.new_order_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_optional_fields then
    show.new_order_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_optional_fields
    changed = true
  end
  if show.new_order_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_return_bitfields then
    show.new_order_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_new_order_return_bitfields
    changed = true
  end
  if show.order_acknowledgment_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_1 then
    show.order_acknowledgment_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_1
    changed = true
  end
  if show.order_acknowledgment_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_10 then
    show.order_acknowledgment_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_10
    changed = true
  end
  if show.order_acknowledgment_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_11 then
    show.order_acknowledgment_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_11
    changed = true
  end
  if show.order_acknowledgment_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_12 then
    show.order_acknowledgment_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_12
    changed = true
  end
  if show.order_acknowledgment_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_13 then
    show.order_acknowledgment_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_13
    changed = true
  end
  if show.order_acknowledgment_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_14 then
    show.order_acknowledgment_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_14
    changed = true
  end
  if show.order_acknowledgment_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_15 then
    show.order_acknowledgment_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_15
    changed = true
  end
  if show.order_acknowledgment_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_16 then
    show.order_acknowledgment_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_16
    changed = true
  end
  if show.order_acknowledgment_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_17 then
    show.order_acknowledgment_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_17
    changed = true
  end
  if show.order_acknowledgment_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_2 then
    show.order_acknowledgment_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_2
    changed = true
  end
  if show.order_acknowledgment_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_3 then
    show.order_acknowledgment_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_3
    changed = true
  end
  if show.order_acknowledgment_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_4 then
    show.order_acknowledgment_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_4
    changed = true
  end
  if show.order_acknowledgment_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_5 then
    show.order_acknowledgment_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_5
    changed = true
  end
  if show.order_acknowledgment_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_6 then
    show.order_acknowledgment_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_6
    changed = true
  end
  if show.order_acknowledgment_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_7 then
    show.order_acknowledgment_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_7
    changed = true
  end
  if show.order_acknowledgment_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_8 then
    show.order_acknowledgment_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_8
    changed = true
  end
  if show.order_acknowledgment_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_9 then
    show.order_acknowledgment_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_byte_9
    changed = true
  end
  if show.order_acknowledgment_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_message then
    show.order_acknowledgment_message = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_message
    changed = true
  end
  if show.order_acknowledgment_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_optional_fields then
    show.order_acknowledgment_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_optional_fields
    changed = true
  end
  if show.order_acknowledgment_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_return_bitfields then
    show.order_acknowledgment_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_acknowledgment_return_bitfields
    changed = true
  end
  if show.order_cancelled_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_1 then
    show.order_cancelled_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_1
    changed = true
  end
  if show.order_cancelled_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_10 then
    show.order_cancelled_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_10
    changed = true
  end
  if show.order_cancelled_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_11 then
    show.order_cancelled_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_11
    changed = true
  end
  if show.order_cancelled_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_12 then
    show.order_cancelled_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_12
    changed = true
  end
  if show.order_cancelled_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_13 then
    show.order_cancelled_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_13
    changed = true
  end
  if show.order_cancelled_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_14 then
    show.order_cancelled_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_14
    changed = true
  end
  if show.order_cancelled_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_15 then
    show.order_cancelled_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_15
    changed = true
  end
  if show.order_cancelled_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_16 then
    show.order_cancelled_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_16
    changed = true
  end
  if show.order_cancelled_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_17 then
    show.order_cancelled_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_17
    changed = true
  end
  if show.order_cancelled_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_2 then
    show.order_cancelled_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_2
    changed = true
  end
  if show.order_cancelled_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_3 then
    show.order_cancelled_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_3
    changed = true
  end
  if show.order_cancelled_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_4 then
    show.order_cancelled_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_4
    changed = true
  end
  if show.order_cancelled_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_5 then
    show.order_cancelled_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_5
    changed = true
  end
  if show.order_cancelled_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_6 then
    show.order_cancelled_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_6
    changed = true
  end
  if show.order_cancelled_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_7 then
    show.order_cancelled_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_7
    changed = true
  end
  if show.order_cancelled_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_8 then
    show.order_cancelled_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_8
    changed = true
  end
  if show.order_cancelled_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_9 then
    show.order_cancelled_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_byte_9
    changed = true
  end
  if show.order_cancelled_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_message then
    show.order_cancelled_message = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_message
    changed = true
  end
  if show.order_cancelled_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_optional_fields then
    show.order_cancelled_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_optional_fields
    changed = true
  end
  if show.order_cancelled_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_return_bitfields then
    show.order_cancelled_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_cancelled_return_bitfields
    changed = true
  end
  if show.order_execution_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_1 then
    show.order_execution_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_1
    changed = true
  end
  if show.order_execution_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_10 then
    show.order_execution_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_10
    changed = true
  end
  if show.order_execution_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_11 then
    show.order_execution_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_11
    changed = true
  end
  if show.order_execution_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_12 then
    show.order_execution_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_12
    changed = true
  end
  if show.order_execution_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_13 then
    show.order_execution_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_13
    changed = true
  end
  if show.order_execution_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_14 then
    show.order_execution_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_14
    changed = true
  end
  if show.order_execution_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_15 then
    show.order_execution_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_15
    changed = true
  end
  if show.order_execution_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_16 then
    show.order_execution_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_16
    changed = true
  end
  if show.order_execution_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_17 then
    show.order_execution_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_17
    changed = true
  end
  if show.order_execution_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_2 then
    show.order_execution_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_2
    changed = true
  end
  if show.order_execution_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_3 then
    show.order_execution_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_3
    changed = true
  end
  if show.order_execution_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_4 then
    show.order_execution_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_4
    changed = true
  end
  if show.order_execution_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_5 then
    show.order_execution_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_5
    changed = true
  end
  if show.order_execution_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_6 then
    show.order_execution_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_6
    changed = true
  end
  if show.order_execution_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_7 then
    show.order_execution_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_7
    changed = true
  end
  if show.order_execution_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_8 then
    show.order_execution_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_8
    changed = true
  end
  if show.order_execution_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_9 then
    show.order_execution_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_byte_9
    changed = true
  end
  if show.order_execution_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_message then
    show.order_execution_message = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_message
    changed = true
  end
  if show.order_execution_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_optional_fields then
    show.order_execution_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_optional_fields
    changed = true
  end
  if show.order_execution_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_return_bitfields then
    show.order_execution_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_execution_return_bitfields
    changed = true
  end
  if show.order_modified_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_1 then
    show.order_modified_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_1
    changed = true
  end
  if show.order_modified_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_10 then
    show.order_modified_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_10
    changed = true
  end
  if show.order_modified_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_11 then
    show.order_modified_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_11
    changed = true
  end
  if show.order_modified_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_12 then
    show.order_modified_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_12
    changed = true
  end
  if show.order_modified_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_13 then
    show.order_modified_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_13
    changed = true
  end
  if show.order_modified_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_14 then
    show.order_modified_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_14
    changed = true
  end
  if show.order_modified_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_15 then
    show.order_modified_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_15
    changed = true
  end
  if show.order_modified_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_16 then
    show.order_modified_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_16
    changed = true
  end
  if show.order_modified_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_17 then
    show.order_modified_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_17
    changed = true
  end
  if show.order_modified_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_2 then
    show.order_modified_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_2
    changed = true
  end
  if show.order_modified_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_3 then
    show.order_modified_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_3
    changed = true
  end
  if show.order_modified_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_4 then
    show.order_modified_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_4
    changed = true
  end
  if show.order_modified_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_5 then
    show.order_modified_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_5
    changed = true
  end
  if show.order_modified_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_6 then
    show.order_modified_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_6
    changed = true
  end
  if show.order_modified_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_7 then
    show.order_modified_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_7
    changed = true
  end
  if show.order_modified_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_8 then
    show.order_modified_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_8
    changed = true
  end
  if show.order_modified_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_9 then
    show.order_modified_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_byte_9
    changed = true
  end
  if show.order_modified_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_message then
    show.order_modified_message = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_message
    changed = true
  end
  if show.order_modified_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_optional_fields then
    show.order_modified_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_optional_fields
    changed = true
  end
  if show.order_modified_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_return_bitfields then
    show.order_modified_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_modified_return_bitfields
    changed = true
  end
  if show.order_rejected_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_1 then
    show.order_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_1
    changed = true
  end
  if show.order_rejected_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_10 then
    show.order_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_10
    changed = true
  end
  if show.order_rejected_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_11 then
    show.order_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_11
    changed = true
  end
  if show.order_rejected_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_12 then
    show.order_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_12
    changed = true
  end
  if show.order_rejected_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_13 then
    show.order_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_13
    changed = true
  end
  if show.order_rejected_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_14 then
    show.order_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_14
    changed = true
  end
  if show.order_rejected_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_15 then
    show.order_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_15
    changed = true
  end
  if show.order_rejected_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_16 then
    show.order_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_16
    changed = true
  end
  if show.order_rejected_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_17 then
    show.order_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_17
    changed = true
  end
  if show.order_rejected_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_2 then
    show.order_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_2
    changed = true
  end
  if show.order_rejected_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_3 then
    show.order_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_3
    changed = true
  end
  if show.order_rejected_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_4 then
    show.order_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_4
    changed = true
  end
  if show.order_rejected_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_5 then
    show.order_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_5
    changed = true
  end
  if show.order_rejected_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_6 then
    show.order_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_6
    changed = true
  end
  if show.order_rejected_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_7 then
    show.order_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_7
    changed = true
  end
  if show.order_rejected_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_8 then
    show.order_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_8
    changed = true
  end
  if show.order_rejected_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_9 then
    show.order_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_byte_9
    changed = true
  end
  if show.order_rejected_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_message then
    show.order_rejected_message = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_message
    changed = true
  end
  if show.order_rejected_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_optional_fields then
    show.order_rejected_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_optional_fields
    changed = true
  end
  if show.order_rejected_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_return_bitfields then
    show.order_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_order_rejected_return_bitfields
    changed = true
  end
  if show.packet ~= cboe_futures_orderentry_boe_v1_3.prefs.show_packet then
    show.packet = cboe_futures_orderentry_boe_v1_3.prefs.show_packet
    changed = true
  end
  if show.param_group ~= cboe_futures_orderentry_boe_v1_3.prefs.show_param_group then
    show.param_group = cboe_futures_orderentry_boe_v1_3.prefs.show_param_group
    changed = true
  end
  if show.param_header ~= cboe_futures_orderentry_boe_v1_3.prefs.show_param_header then
    show.param_header = cboe_futures_orderentry_boe_v1_3.prefs.show_param_header
    changed = true
  end
  if show.purge_order_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_byte_1 then
    show.purge_order_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_byte_1
    changed = true
  end
  if show.purge_order_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_byte_2 then
    show.purge_order_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_byte_2
    changed = true
  end
  if show.purge_order_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_message then
    show.purge_order_message = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_message
    changed = true
  end
  if show.purge_order_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_optional_fields then
    show.purge_order_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_optional_fields
    changed = true
  end
  if show.purge_order_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_return_bitfields then
    show.purge_order_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_order_return_bitfields
    changed = true
  end
  if show.purge_rejected_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_1 then
    show.purge_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_1
    changed = true
  end
  if show.purge_rejected_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_10 then
    show.purge_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_10
    changed = true
  end
  if show.purge_rejected_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_11 then
    show.purge_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_11
    changed = true
  end
  if show.purge_rejected_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_12 then
    show.purge_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_12
    changed = true
  end
  if show.purge_rejected_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_13 then
    show.purge_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_13
    changed = true
  end
  if show.purge_rejected_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_14 then
    show.purge_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_14
    changed = true
  end
  if show.purge_rejected_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_15 then
    show.purge_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_15
    changed = true
  end
  if show.purge_rejected_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_16 then
    show.purge_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_16
    changed = true
  end
  if show.purge_rejected_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_17 then
    show.purge_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_17
    changed = true
  end
  if show.purge_rejected_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_2 then
    show.purge_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_2
    changed = true
  end
  if show.purge_rejected_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_3 then
    show.purge_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_3
    changed = true
  end
  if show.purge_rejected_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_4 then
    show.purge_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_4
    changed = true
  end
  if show.purge_rejected_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_5 then
    show.purge_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_5
    changed = true
  end
  if show.purge_rejected_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_6 then
    show.purge_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_6
    changed = true
  end
  if show.purge_rejected_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_7 then
    show.purge_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_7
    changed = true
  end
  if show.purge_rejected_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_8 then
    show.purge_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_8
    changed = true
  end
  if show.purge_rejected_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_9 then
    show.purge_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_byte_9
    changed = true
  end
  if show.purge_rejected_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_message then
    show.purge_rejected_message = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_message
    changed = true
  end
  if show.purge_rejected_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_optional_fields then
    show.purge_rejected_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_optional_fields
    changed = true
  end
  if show.purge_rejected_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_return_bitfields then
    show.purge_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_purge_rejected_return_bitfields
    changed = true
  end
  if show.quote_cancelled_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_cancelled_message then
    show.quote_cancelled_message = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_cancelled_message
    changed = true
  end
  if show.quote_execution_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_execution_message then
    show.quote_execution_message = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_execution_message
    changed = true
  end
  if show.quote_group ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_group then
    show.quote_group = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_group
    changed = true
  end
  if show.quote_restated_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_restated_message then
    show.quote_restated_message = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_restated_message
    changed = true
  end
  if show.quote_result_group ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_result_group then
    show.quote_result_group = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_result_group
    changed = true
  end
  if show.quote_update_acknowledgment_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_acknowledgment_message then
    show.quote_update_acknowledgment_message = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_acknowledgment_message
    changed = true
  end
  if show.quote_update_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_message then
    show.quote_update_message = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_message
    changed = true
  end
  if show.quote_update_rejected_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_rejected_message then
    show.quote_update_rejected_message = cboe_futures_orderentry_boe_v1_3.prefs.show_quote_update_rejected_message
    changed = true
  end
  if show.reset_risk_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_reset_risk_message then
    show.reset_risk_message = cboe_futures_orderentry_boe_v1_3.prefs.show_reset_risk_message
    changed = true
  end
  if show.return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_return_bitfields then
    show.return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_return_bitfields
    changed = true
  end
  if show.risk_reset_acknowledgment_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_risk_reset_acknowledgment_message then
    show.risk_reset_acknowledgment_message = cboe_futures_orderentry_boe_v1_3.prefs.show_risk_reset_acknowledgment_message
    changed = true
  end
  if show.tas_quote_restatement_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_quote_restatement_message then
    show.tas_quote_restatement_message = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_quote_restatement_message
    changed = true
  end
  if show.tas_restatement_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_1 then
    show.tas_restatement_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_1
    changed = true
  end
  if show.tas_restatement_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_10 then
    show.tas_restatement_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_10
    changed = true
  end
  if show.tas_restatement_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_11 then
    show.tas_restatement_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_11
    changed = true
  end
  if show.tas_restatement_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_12 then
    show.tas_restatement_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_12
    changed = true
  end
  if show.tas_restatement_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_13 then
    show.tas_restatement_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_13
    changed = true
  end
  if show.tas_restatement_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_14 then
    show.tas_restatement_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_14
    changed = true
  end
  if show.tas_restatement_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_15 then
    show.tas_restatement_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_15
    changed = true
  end
  if show.tas_restatement_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_16 then
    show.tas_restatement_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_16
    changed = true
  end
  if show.tas_restatement_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_17 then
    show.tas_restatement_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_17
    changed = true
  end
  if show.tas_restatement_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_2 then
    show.tas_restatement_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_2
    changed = true
  end
  if show.tas_restatement_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_3 then
    show.tas_restatement_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_3
    changed = true
  end
  if show.tas_restatement_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_4 then
    show.tas_restatement_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_4
    changed = true
  end
  if show.tas_restatement_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_5 then
    show.tas_restatement_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_5
    changed = true
  end
  if show.tas_restatement_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_6 then
    show.tas_restatement_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_6
    changed = true
  end
  if show.tas_restatement_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_7 then
    show.tas_restatement_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_7
    changed = true
  end
  if show.tas_restatement_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_8 then
    show.tas_restatement_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_8
    changed = true
  end
  if show.tas_restatement_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_9 then
    show.tas_restatement_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_byte_9
    changed = true
  end
  if show.tas_restatement_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_message then
    show.tas_restatement_message = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_message
    changed = true
  end
  if show.tas_restatement_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_optional_fields then
    show.tas_restatement_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_optional_fields
    changed = true
  end
  if show.tas_restatement_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_return_bitfields then
    show.tas_restatement_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_tas_restatement_return_bitfields
    changed = true
  end
  if show.trade_cancel_or_correct_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_1 then
    show.trade_cancel_or_correct_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_1
    changed = true
  end
  if show.trade_cancel_or_correct_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_10 then
    show.trade_cancel_or_correct_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_10
    changed = true
  end
  if show.trade_cancel_or_correct_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_11 then
    show.trade_cancel_or_correct_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_11
    changed = true
  end
  if show.trade_cancel_or_correct_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_12 then
    show.trade_cancel_or_correct_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_12
    changed = true
  end
  if show.trade_cancel_or_correct_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_13 then
    show.trade_cancel_or_correct_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_13
    changed = true
  end
  if show.trade_cancel_or_correct_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_14 then
    show.trade_cancel_or_correct_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_14
    changed = true
  end
  if show.trade_cancel_or_correct_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_15 then
    show.trade_cancel_or_correct_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_15
    changed = true
  end
  if show.trade_cancel_or_correct_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_16 then
    show.trade_cancel_or_correct_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_16
    changed = true
  end
  if show.trade_cancel_or_correct_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_17 then
    show.trade_cancel_or_correct_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_17
    changed = true
  end
  if show.trade_cancel_or_correct_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_2 then
    show.trade_cancel_or_correct_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_2
    changed = true
  end
  if show.trade_cancel_or_correct_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_3 then
    show.trade_cancel_or_correct_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_3
    changed = true
  end
  if show.trade_cancel_or_correct_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_4 then
    show.trade_cancel_or_correct_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_4
    changed = true
  end
  if show.trade_cancel_or_correct_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_5 then
    show.trade_cancel_or_correct_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_5
    changed = true
  end
  if show.trade_cancel_or_correct_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_6 then
    show.trade_cancel_or_correct_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_6
    changed = true
  end
  if show.trade_cancel_or_correct_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_7 then
    show.trade_cancel_or_correct_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_7
    changed = true
  end
  if show.trade_cancel_or_correct_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_8 then
    show.trade_cancel_or_correct_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_8
    changed = true
  end
  if show.trade_cancel_or_correct_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_9 then
    show.trade_cancel_or_correct_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_byte_9
    changed = true
  end
  if show.trade_cancel_or_correct_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_message then
    show.trade_cancel_or_correct_message = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_message
    changed = true
  end
  if show.trade_cancel_or_correct_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_optional_fields then
    show.trade_cancel_or_correct_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_optional_fields
    changed = true
  end
  if show.trade_cancel_or_correct_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_return_bitfields then
    show.trade_cancel_or_correct_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_trade_cancel_or_correct_return_bitfields
    changed = true
  end
  if show.unit_sequence ~= cboe_futures_orderentry_boe_v1_3.prefs.show_unit_sequence then
    show.unit_sequence = cboe_futures_orderentry_boe_v1_3.prefs.show_unit_sequence
    changed = true
  end
  if show.unit_sequences ~= cboe_futures_orderentry_boe_v1_3.prefs.show_unit_sequences then
    show.unit_sequences = cboe_futures_orderentry_boe_v1_3.prefs.show_unit_sequences
    changed = true
  end
  if show.user_modify_rejected_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_1 then
    show.user_modify_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_1
    changed = true
  end
  if show.user_modify_rejected_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_10 then
    show.user_modify_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_10
    changed = true
  end
  if show.user_modify_rejected_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_11 then
    show.user_modify_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_11
    changed = true
  end
  if show.user_modify_rejected_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_12 then
    show.user_modify_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_12
    changed = true
  end
  if show.user_modify_rejected_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_13 then
    show.user_modify_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_13
    changed = true
  end
  if show.user_modify_rejected_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_14 then
    show.user_modify_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_14
    changed = true
  end
  if show.user_modify_rejected_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_15 then
    show.user_modify_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_15
    changed = true
  end
  if show.user_modify_rejected_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_16 then
    show.user_modify_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_16
    changed = true
  end
  if show.user_modify_rejected_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_17 then
    show.user_modify_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_17
    changed = true
  end
  if show.user_modify_rejected_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_2 then
    show.user_modify_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_2
    changed = true
  end
  if show.user_modify_rejected_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_3 then
    show.user_modify_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_3
    changed = true
  end
  if show.user_modify_rejected_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_4 then
    show.user_modify_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_4
    changed = true
  end
  if show.user_modify_rejected_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_5 then
    show.user_modify_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_5
    changed = true
  end
  if show.user_modify_rejected_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_6 then
    show.user_modify_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_6
    changed = true
  end
  if show.user_modify_rejected_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_7 then
    show.user_modify_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_7
    changed = true
  end
  if show.user_modify_rejected_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_8 then
    show.user_modify_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_8
    changed = true
  end
  if show.user_modify_rejected_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_9 then
    show.user_modify_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_byte_9
    changed = true
  end
  if show.user_modify_rejected_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_message then
    show.user_modify_rejected_message = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_message
    changed = true
  end
  if show.user_modify_rejected_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_optional_fields then
    show.user_modify_rejected_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_optional_fields
    changed = true
  end
  if show.user_modify_rejected_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_return_bitfields then
    show.user_modify_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_user_modify_rejected_return_bitfields
    changed = true
  end
  if show.variance_quote_restatement_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_quote_restatement_message then
    show.variance_quote_restatement_message = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_quote_restatement_message
    changed = true
  end
  if show.variance_restatement_byte_1 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_1 then
    show.variance_restatement_byte_1 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_1
    changed = true
  end
  if show.variance_restatement_byte_10 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_10 then
    show.variance_restatement_byte_10 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_10
    changed = true
  end
  if show.variance_restatement_byte_11 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_11 then
    show.variance_restatement_byte_11 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_11
    changed = true
  end
  if show.variance_restatement_byte_12 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_12 then
    show.variance_restatement_byte_12 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_12
    changed = true
  end
  if show.variance_restatement_byte_13 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_13 then
    show.variance_restatement_byte_13 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_13
    changed = true
  end
  if show.variance_restatement_byte_14 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_14 then
    show.variance_restatement_byte_14 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_14
    changed = true
  end
  if show.variance_restatement_byte_15 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_15 then
    show.variance_restatement_byte_15 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_15
    changed = true
  end
  if show.variance_restatement_byte_16 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_16 then
    show.variance_restatement_byte_16 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_16
    changed = true
  end
  if show.variance_restatement_byte_17 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_17 then
    show.variance_restatement_byte_17 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_17
    changed = true
  end
  if show.variance_restatement_byte_2 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_2 then
    show.variance_restatement_byte_2 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_2
    changed = true
  end
  if show.variance_restatement_byte_3 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_3 then
    show.variance_restatement_byte_3 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_3
    changed = true
  end
  if show.variance_restatement_byte_4 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_4 then
    show.variance_restatement_byte_4 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_4
    changed = true
  end
  if show.variance_restatement_byte_5 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_5 then
    show.variance_restatement_byte_5 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_5
    changed = true
  end
  if show.variance_restatement_byte_6 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_6 then
    show.variance_restatement_byte_6 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_6
    changed = true
  end
  if show.variance_restatement_byte_7 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_7 then
    show.variance_restatement_byte_7 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_7
    changed = true
  end
  if show.variance_restatement_byte_8 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_8 then
    show.variance_restatement_byte_8 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_8
    changed = true
  end
  if show.variance_restatement_byte_9 ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_9 then
    show.variance_restatement_byte_9 = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_byte_9
    changed = true
  end
  if show.variance_restatement_message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_message then
    show.variance_restatement_message = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_message
    changed = true
  end
  if show.variance_restatement_optional_fields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_optional_fields then
    show.variance_restatement_optional_fields = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_optional_fields
    changed = true
  end
  if show.variance_restatement_return_bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_return_bitfields then
    show.variance_restatement_return_bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_variance_restatement_return_bitfields
    changed = true
  end
  if show.bitfields ~= cboe_futures_orderentry_boe_v1_3.prefs.show_bitfields then
    show.bitfields = cboe_futures_orderentry_boe_v1_3.prefs.show_bitfields
    changed = true
  end
  if show.message ~= cboe_futures_orderentry_boe_v1_3.prefs.show_message then
    show.message = cboe_futures_orderentry_boe_v1_3.prefs.show_message
    changed = true
  end
  if show.parameter ~= cboe_futures_orderentry_boe_v1_3.prefs.show_parameter then
    show.parameter = cboe_futures_orderentry_boe_v1_3.prefs.show_parameter
    changed = true
  end

  -- Reload on changed preference
  if changed then
    reload()
  end
end


-----------------------------------------------------------------------
-- Dissect Cboe Futures OrderEntry Boe 1.3
-----------------------------------------------------------------------

-- Size: Reserved 16
cboe_futures_orderentry_boe_v1_3_size_of.reserved_16 = 16

-- Display: Reserved 16
cboe_futures_orderentry_boe_v1_3_display.reserved_16 = function(value)
  return "Reserved 16: "..value
end

-- Dissect: Reserved 16
cboe_futures_orderentry_boe_v1_3_dissect.reserved_16 = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.reserved_16
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_futures_orderentry_boe_v1_3_display.reserved_16(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.reserved_16, range, value, display)

  return offset + length, value
end

-- Size: Clearing Size
cboe_futures_orderentry_boe_v1_3_size_of.clearing_size = 4

-- Display: Clearing Size
cboe_futures_orderentry_boe_v1_3_display.clearing_size = function(value)
  return "Clearing Size: "..value
end

-- Dissect: Clearing Size
cboe_futures_orderentry_boe_v1_3_dissect.clearing_size = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.clearing_size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.clearing_size(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.clearing_size, range, value, display)

  return offset + length, value
end

-- Size: Clearing Price
cboe_futures_orderentry_boe_v1_3_size_of.clearing_price = 8

-- Display: Clearing Price
cboe_futures_orderentry_boe_v1_3_display.clearing_price = function(value)
  return "Clearing Price: "..value
end

-- Dissect: Clearing Price
cboe_futures_orderentry_boe_v1_3_dissect.clearing_price = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.clearing_price
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_futures_orderentry_boe_v1_3_display.clearing_price(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.clearing_price, range, value, display)

  return offset + length, value
end

-- Size: Clearing Symbol
cboe_futures_orderentry_boe_v1_3_size_of.clearing_symbol = 6

-- Display: Clearing Symbol
cboe_futures_orderentry_boe_v1_3_display.clearing_symbol = function(value)
  return "Clearing Symbol: "..value
end

-- Dissect: Clearing Symbol
cboe_futures_orderentry_boe_v1_3_dissect.clearing_symbol = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.clearing_symbol
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.clearing_symbol(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.clearing_symbol, range, value, display)

  return offset + length, value
end

-- Size: Symbol
cboe_futures_orderentry_boe_v1_3_size_of.symbol = 6

-- Display: Symbol
cboe_futures_orderentry_boe_v1_3_display.symbol = function(value)
  return "Symbol: "..value
end

-- Dissect: Symbol
cboe_futures_orderentry_boe_v1_3_dissect.symbol = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.symbol
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.symbol(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.symbol, range, value, display)

  return offset + length, value
end

-- Size: Exec Id
cboe_futures_orderentry_boe_v1_3_size_of.exec_id = 8

-- Display: Exec Id
cboe_futures_orderentry_boe_v1_3_display.exec_id = function(value)
  return "Exec Id: "..value
end

-- Dissect: Exec Id
cboe_futures_orderentry_boe_v1_3_dissect.exec_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.exec_id
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.exec_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.exec_id, range, value, display)

  return offset + length, value
end

-- Size: Quote Update Id
cboe_futures_orderentry_boe_v1_3_size_of.quote_update_id = 16

-- Display: Quote Update Id
cboe_futures_orderentry_boe_v1_3_display.quote_update_id = function(value)
  return "Quote Update Id: "..value
end

-- Dissect: Quote Update Id
cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.quote_update_id
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.quote_update_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_update_id, range, value, display)

  return offset + length, value
end

-- Size: Transaction Time
cboe_futures_orderentry_boe_v1_3_size_of.transaction_time = 8

-- Display: Transaction Time
cboe_futures_orderentry_boe_v1_3_display.transaction_time = function(value)
  return "Transaction Time: "..value
end

-- Dissect: Transaction Time
cboe_futures_orderentry_boe_v1_3_dissect.transaction_time = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.transaction_time
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.transaction_time(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.transaction_time, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Variance Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_size_of.variance_quote_restatement_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Variance Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_display.variance_quote_restatement_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Variance Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.variance_quote_restatement_message_fields = function(buffer, offset, packet, parent, size_of_variance_quote_restatement_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Exec Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_id = cboe_futures_orderentry_boe_v1_3_dissect.exec_id(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)

  -- Clearing Symbol: 6 Byte Ascii String
  index, clearing_symbol = cboe_futures_orderentry_boe_v1_3_dissect.clearing_symbol(buffer, index, packet, parent)

  -- Clearing Price: 8 Byte Signed Fixed Width Integer
  index, clearing_price = cboe_futures_orderentry_boe_v1_3_dissect.clearing_price(buffer, index, packet, parent)

  -- Clearing Size: 4 Byte Unsigned Fixed Width Integer
  index, clearing_size = cboe_futures_orderentry_boe_v1_3_dissect.clearing_size(buffer, index, packet, parent)

  -- Reserved 16: 16 Byte
  index, reserved_16 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_16(buffer, index, packet, parent)

  return index
end

-- Dissect: Variance Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.variance_quote_restatement_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_variance_quote_restatement_message = cboe_futures_orderentry_boe_v1_3_size_of.variance_quote_restatement_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.variance_quote_restatement_message then
    local range = buffer(offset, size_of_variance_quote_restatement_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.variance_quote_restatement_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_quote_restatement_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.variance_quote_restatement_message_fields(buffer, offset, packet, parent, size_of_variance_quote_restatement_message)

  return offset + size_of_variance_quote_restatement_message
end

-- Read runtime size of: Tas Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_size_of.tas_quote_restatement_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Tas Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_display.tas_quote_restatement_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Tas Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.tas_quote_restatement_message_fields = function(buffer, offset, packet, parent, size_of_tas_quote_restatement_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Exec Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_id = cboe_futures_orderentry_boe_v1_3_dissect.exec_id(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)

  -- Clearing Symbol: 6 Byte Ascii String
  index, clearing_symbol = cboe_futures_orderentry_boe_v1_3_dissect.clearing_symbol(buffer, index, packet, parent)

  -- Clearing Price: 8 Byte Signed Fixed Width Integer
  index, clearing_price = cboe_futures_orderentry_boe_v1_3_dissect.clearing_price(buffer, index, packet, parent)

  -- Reserved 16: 16 Byte
  index, reserved_16 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_16(buffer, index, packet, parent)

  return index
end

-- Dissect: Tas Quote Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.tas_quote_restatement_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_tas_quote_restatement_message = cboe_futures_orderentry_boe_v1_3_size_of.tas_quote_restatement_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.tas_quote_restatement_message then
    local range = buffer(offset, size_of_tas_quote_restatement_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.tas_quote_restatement_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_quote_restatement_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.tas_quote_restatement_message_fields(buffer, offset, packet, parent, size_of_tas_quote_restatement_message)

  return offset + size_of_tas_quote_restatement_message
end

-- Size: Frequent Trader Id
cboe_futures_orderentry_boe_v1_3_size_of.frequent_trader_id = 6

-- Display: Frequent Trader Id
cboe_futures_orderentry_boe_v1_3_display.frequent_trader_id = function(value)
  return "Frequent Trader Id: "..value
end

-- Dissect: Frequent Trader Id
cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.frequent_trader_id
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.frequent_trader_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.frequent_trader_id, range, value, display)

  return offset + length, value
end

-- Size: Secondary Exec Id
cboe_futures_orderentry_boe_v1_3_size_of.secondary_exec_id = 8

-- Display: Secondary Exec Id
cboe_futures_orderentry_boe_v1_3_display.secondary_exec_id = function(value)
  return "Secondary Exec Id: "..value
end

-- Dissect: Secondary Exec Id
cboe_futures_orderentry_boe_v1_3_dissect.secondary_exec_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.secondary_exec_id
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.secondary_exec_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.secondary_exec_id, range, value, display)

  return offset + length, value
end

-- Size: Multileg Reporting Type
cboe_futures_orderentry_boe_v1_3_size_of.multileg_reporting_type = 1

-- Display: Multileg Reporting Type
cboe_futures_orderentry_boe_v1_3_display.multileg_reporting_type = function(value)
  return "Multileg Reporting Type: "..value
end

-- Dissect: Multileg Reporting Type
cboe_futures_orderentry_boe_v1_3_dissect.multileg_reporting_type = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.multileg_reporting_type
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.multileg_reporting_type(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.multileg_reporting_type, range, value, display)

  return offset + length, value
end

-- Size: Trade Date
cboe_futures_orderentry_boe_v1_3_size_of.trade_date = 4

-- Display: Trade Date
cboe_futures_orderentry_boe_v1_3_display.trade_date = function(value)
  return "Trade Date: "..value
end

-- Dissect: Trade Date
cboe_futures_orderentry_boe_v1_3_dissect.trade_date = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.trade_date
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_date(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_date, range, value, display)

  return offset + length, value
end

-- Size: Oeoid
cboe_futures_orderentry_boe_v1_3_size_of.oeoid = 18

-- Display: Oeoid
cboe_futures_orderentry_boe_v1_3_display.oeoid = function(value)
  return "Oeoid: "..value
end

-- Dissect: Oeoid
cboe_futures_orderentry_boe_v1_3_dissect.oeoid = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.oeoid
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.oeoid(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.oeoid, range, value, display)

  return offset + length, value
end

-- Size: Manual Order Indicator
cboe_futures_orderentry_boe_v1_3_size_of.manual_order_indicator = 1

-- Display: Manual Order Indicator
cboe_futures_orderentry_boe_v1_3_display.manual_order_indicator = function(value)
  if value == "Y" then
    return "Manual Order Indicator: Manual Order Entry (Y)"
  end
  if value == "N" then
    return "Manual Order Indicator: Automated Order Entry (N)"
  end
  if value == "1" then
    return "Manual Order Indicator: Simple Instrument Execution (1)"
  end
  if value == "2" then
    return "Manual Order Indicator: Simple Instrument Execution That Is Part Of A Spread Execution (2)"
  end
  if value == "3" then
    return "Manual Order Indicator: Spread Instrument Execution (3)"
  end

  return "Manual Order Indicator: Unknown("..value..")"
end

-- Dissect: Manual Order Indicator
cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.manual_order_indicator
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.manual_order_indicator(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.manual_order_indicator, range, value, display)

  return offset + length, value
end

-- Size: Cti Code
cboe_futures_orderentry_boe_v1_3_size_of.cti_code = 1

-- Display: Cti Code
cboe_futures_orderentry_boe_v1_3_display.cti_code = function(value)
  if value == "1" then
    return "Cti Code: Cti 2 (1)"
  end
  if value == "2" then
    return "Cti Code: Cti 2 (2)"
  end
  if value == "3" then
    return "Cti Code: Cti 3 (3)"
  end
  if value == "4" then
    return "Cti Code: Cti 4 (4)"
  end

  return "Cti Code: Unknown("..value..")"
end

-- Dissect: Cti Code
cboe_futures_orderentry_boe_v1_3_dissect.cti_code = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cti_code
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.cti_code(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cti_code, range, value, display)

  return offset + length, value
end

-- Size: Cmta Number
cboe_futures_orderentry_boe_v1_3_size_of.cmta_number = 4

-- Display: Cmta Number
cboe_futures_orderentry_boe_v1_3_display.cmta_number = function(value)
  return "Cmta Number: "..value
end

-- Dissect: Cmta Number
cboe_futures_orderentry_boe_v1_3_dissect.cmta_number = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cmta_number
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.cmta_number(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cmta_number, range, value, display)

  return offset + length, value
end

-- Size: Stop Px
cboe_futures_orderentry_boe_v1_3_size_of.stop_px = 8

-- Display: Stop Px
cboe_futures_orderentry_boe_v1_3_display.stop_px = function(value)
  return "Stop Px: "..value
end

-- Dissect: Stop Px
cboe_futures_orderentry_boe_v1_3_dissect.stop_px = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.stop_px
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_futures_orderentry_boe_v1_3_display.stop_px(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.stop_px, range, value, display)

  return offset + length, value
end

-- Size: Fee Code
cboe_futures_orderentry_boe_v1_3_size_of.fee_code = 2

-- Display: Fee Code
cboe_futures_orderentry_boe_v1_3_display.fee_code = function(value)
  return "Fee Code: "..value
end

-- Dissect: Fee Code
cboe_futures_orderentry_boe_v1_3_dissect.fee_code = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.fee_code
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.fee_code(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.fee_code, range, value, display)

  return offset + length, value
end

-- Size: Last Px
cboe_futures_orderentry_boe_v1_3_size_of.last_px = 8

-- Display: Last Px
cboe_futures_orderentry_boe_v1_3_display.last_px = function(value)
  return "Last Px: "..value
end

-- Dissect: Last Px
cboe_futures_orderentry_boe_v1_3_dissect.last_px = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.last_px
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_futures_orderentry_boe_v1_3_display.last_px(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.last_px, range, value, display)

  return offset + length, value
end

-- Size: Last Shares
cboe_futures_orderentry_boe_v1_3_size_of.last_shares = 4

-- Display: Last Shares
cboe_futures_orderentry_boe_v1_3_display.last_shares = function(value)
  return "Last Shares: "..value
end

-- Dissect: Last Shares
cboe_futures_orderentry_boe_v1_3_dissect.last_shares = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.last_shares
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.last_shares(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.last_shares, range, value, display)

  return offset + length, value
end

-- Size: Orig Cl Ord Id
cboe_futures_orderentry_boe_v1_3_size_of.orig_cl_ord_id = 20

-- Display: Orig Cl Ord Id
cboe_futures_orderentry_boe_v1_3_display.orig_cl_ord_id = function(value)
  return "Orig Cl Ord Id: "..value
end

-- Dissect: Orig Cl Ord Id
cboe_futures_orderentry_boe_v1_3_dissect.orig_cl_ord_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.orig_cl_ord_id
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.orig_cl_ord_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.orig_cl_ord_id, range, value, display)

  return offset + length, value
end

-- Size: Open Close
cboe_futures_orderentry_boe_v1_3_size_of.open_close = 1

-- Display: Open Close
cboe_futures_orderentry_boe_v1_3_display.open_close = function(value)
  if value == "O" then
    return "Open Close: Open (O)"
  end
  if value == "C" then
    return "Open Close: Close (C)"
  end
  if value == "N" then
    return "Open Close: None (N)"
  end

  return "Open Close: Unknown("..value..")"
end

-- Dissect: Open Close
cboe_futures_orderentry_boe_v1_3_dissect.open_close = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.open_close
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.open_close(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.open_close, range, value, display)

  return offset + length, value
end

-- Size: Maturity Date
cboe_futures_orderentry_boe_v1_3_size_of.maturity_date = 4

-- Display: Maturity Date
cboe_futures_orderentry_boe_v1_3_display.maturity_date = function(value)
  return "Maturity Date: "..value
end

-- Dissect: Maturity Date
cboe_futures_orderentry_boe_v1_3_dissect.maturity_date = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.maturity_date
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.maturity_date(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.maturity_date, range, value, display)

  return offset + length, value
end

-- Size: Prevent Match
cboe_futures_orderentry_boe_v1_3_size_of.prevent_match = 3

-- Display: Prevent Match
cboe_futures_orderentry_boe_v1_3_display.prevent_match = function(value)
  return "Prevent Match: "..value
end

-- Dissect: Prevent Match
cboe_futures_orderentry_boe_v1_3_dissect.prevent_match = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.prevent_match
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.prevent_match(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.prevent_match, range, value, display)

  return offset + length, value
end

-- Size: Clearing Account
cboe_futures_orderentry_boe_v1_3_size_of.clearing_account = 4

-- Display: Clearing Account
cboe_futures_orderentry_boe_v1_3_display.clearing_account = function(value)
  return "Clearing Account: "..value
end

-- Dissect: Clearing Account
cboe_futures_orderentry_boe_v1_3_dissect.clearing_account = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.clearing_account
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.clearing_account(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.clearing_account, range, value, display)

  return offset + length, value
end

-- Size: Clearing Firm
cboe_futures_orderentry_boe_v1_3_size_of.clearing_firm = 4

-- Display: Clearing Firm
cboe_futures_orderentry_boe_v1_3_display.clearing_firm = function(value)
  return "Clearing Firm: "..value
end

-- Dissect: Clearing Firm
cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.clearing_firm
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.clearing_firm(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.clearing_firm, range, value, display)

  return offset + length, value
end

-- Size: Account
cboe_futures_orderentry_boe_v1_3_size_of.account = 16

-- Display: Account
cboe_futures_orderentry_boe_v1_3_display.account = function(value)
  return "Account: "..value
end

-- Dissect: Account
cboe_futures_orderentry_boe_v1_3_dissect.account = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.account
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.account(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.account, range, value, display)

  return offset + length, value
end

-- Size: Capacity
cboe_futures_orderentry_boe_v1_3_size_of.capacity = 1

-- Display: Capacity
cboe_futures_orderentry_boe_v1_3_display.capacity = function(value)
  if value == "C" then
    return "Capacity: Customer (C)"
  end
  if value == "F" then
    return "Capacity: Firm (F)"
  end

  return "Capacity: Unknown("..value..")"
end

-- Dissect: Capacity
cboe_futures_orderentry_boe_v1_3_dissect.capacity = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.capacity
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.capacity(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.capacity, range, value, display)

  return offset + length, value
end

-- Size: Min Qty
cboe_futures_orderentry_boe_v1_3_size_of.min_qty = 4

-- Display: Min Qty
cboe_futures_orderentry_boe_v1_3_display.min_qty = function(value)
  return "Min Qty: "..value
end

-- Dissect: Min Qty
cboe_futures_orderentry_boe_v1_3_dissect.min_qty = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.min_qty
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.min_qty(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.min_qty, range, value, display)

  return offset + length, value
end

-- Size: Time In Force
cboe_futures_orderentry_boe_v1_3_size_of.time_in_force = 1

-- Display: Time In Force
cboe_futures_orderentry_boe_v1_3_display.time_in_force = function(value)
  if value == "0" then
    return "Time In Force: Day (0)"
  end
  if value == "1" then
    return "Time In Force: Gtc (1)"
  end
  if value == "3" then
    return "Time In Force: Ioc (3)"
  end
  if value == "4" then
    return "Time In Force: Fok (4)"
  end
  if value == "6" then
    return "Time In Force: Gtd (6)"
  end

  return "Time In Force: Unknown("..value..")"
end

-- Dissect: Time In Force
cboe_futures_orderentry_boe_v1_3_dissect.time_in_force = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.time_in_force
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.time_in_force(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.time_in_force, range, value, display)

  return offset + length, value
end

-- Size: Ord Type
cboe_futures_orderentry_boe_v1_3_size_of.ord_type = 1

-- Display: Ord Type
cboe_futures_orderentry_boe_v1_3_display.ord_type = function(value)
  if value == "1" then
    return "Ord Type: Market (1)"
  end
  if value == "2" then
    return "Ord Type: Limit (2)"
  end
  if value == "4" then
    return "Ord Type: Stop Limit (4)"
  end

  return "Ord Type: Unknown("..value..")"
end

-- Dissect: Ord Type
cboe_futures_orderentry_boe_v1_3_dissect.ord_type = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.ord_type
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.ord_type(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.ord_type, range, value, display)

  return offset + length, value
end

-- Size: Price
cboe_futures_orderentry_boe_v1_3_size_of.price = 8

-- Display: Price
cboe_futures_orderentry_boe_v1_3_display.price = function(value)
  return "Price: "..value
end

-- Dissect: Price
cboe_futures_orderentry_boe_v1_3_dissect.price = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.price
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_futures_orderentry_boe_v1_3_display.price(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.price, range, value, display)

  return offset + length, value
end

-- Size: Side
cboe_futures_orderentry_boe_v1_3_size_of.side = 1

-- Display: Side
cboe_futures_orderentry_boe_v1_3_display.side = function(value)
  if value == "1" then
    return "Side: Buy (1)"
  end
  if value == "2" then
    return "Side: Sell (2)"
  end

  return "Side: Unknown("..value..")"
end

-- Dissect: Side
cboe_futures_orderentry_boe_v1_3_dissect.side = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.side
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.side(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.side, range, value, display)

  return offset + length, value
end

-- Size: Variance Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_17 = 1

-- Display: Variance Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_17_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_17, range, display)

  if show.variance_restatement_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_16 = 1

-- Display: Variance Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_16_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_16, range, display)

  if show.variance_restatement_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_15 = 1

-- Display: Variance Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_15_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_15, range, display)

  if show.variance_restatement_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_14 = 1

-- Display: Variance Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Secondary Exec Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Secondary Exec Id Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_14_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Secondary Exec Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_secondary_exec_id_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_14, range, display)

  if show.variance_restatement_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_13 = 1

-- Display: Variance Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Multileg Reporting Type Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Multileg Reporting Type Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_13_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Multileg Reporting Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_multileg_reporting_type_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_13, range, display)

  if show.variance_restatement_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_12 = 1

-- Display: Variance Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Clearing Symbol Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Clearing Symbol Exists|"
  end
  -- Is Variance Restatement Clearing Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Clearing Size Exists|"
  end
  -- Is Variance Restatement Clearing Price Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Clearing Price Exists|"
  end
  -- Is Variance Restatement Trade Date Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Trade Date Exists|"
  end
  -- Is Variance Restatement Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Oeoid Exists|"
  end
  -- Is Variance Restatement Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Manual Order Indicator Exists|"
  end
  -- Is Variance Restatement Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_12_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Clearing Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_symbol_exists, buffer(offset, 1))

  -- Variance Restatement Clearing Size Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_size_exists, buffer(offset, 1))

  -- Variance Restatement Clearing Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_price_exists, buffer(offset, 1))

  -- Variance Restatement Trade Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_trade_date_exists, buffer(offset, 1))

  -- Variance Restatement Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_oeoid_exists, buffer(offset, 1))

  -- Variance Restatement Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_manual_order_indicator_exists, buffer(offset, 1))

  -- Variance Restatement Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_12, range, display)

  if show.variance_restatement_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_11 = 1

-- Display: Variance Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_11_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_11, range, display)

  if show.variance_restatement_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_10 = 1

-- Display: Variance Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_10_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_10, range, display)

  if show.variance_restatement_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_9 = 1

-- Display: Variance Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Cmta Number Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_9_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_cmta_number_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_9, range, display)

  if show.variance_restatement_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_8 = 1

-- Display: Variance Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Stop Px Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_8_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_stop_px_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Fee Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_8, range, display)

  if show.variance_restatement_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_7 = 1

-- Display: Variance Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_7_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_7, range, display)

  if show.variance_restatement_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_6 = 1

-- Display: Variance Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_6_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_6, range, display)

  if show.variance_restatement_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_5 = 1

-- Display: Variance Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Last Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Last Px Exists|"
  end
  -- Is Variance Restatement Last Shares Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Last Shares Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Orig Cl Ord Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Orig Cl Ord Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_5_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Last Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_last_px_exists, buffer(offset, 1))

  -- Variance Restatement Last Shares Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_last_shares_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Orig Cl Ord Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_orig_cl_ord_id_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_5, range, display)

  if show.variance_restatement_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_4 = 1

-- Display: Variance Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Open Close Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_4_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_open_close_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_4, range, display)

  if show.variance_restatement_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_3 = 1

-- Display: Variance Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Prevent Match Exists|"
  end
  -- Is Variance Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Reserved Bit 7 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Clearing Account Exists|"
  end
  -- Is Variance Restatement Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Clearing Firm Exists|"
  end
  -- Is Variance Restatement Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_3_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_prevent_match_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_account_exists, buffer(offset, 1))

  -- Variance Restatement Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_clearing_firm_exists, buffer(offset, 1))

  -- Variance Restatement Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_account_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_3, range, display)

  if show.variance_restatement_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_2 = 1

-- Display: Variance Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Capacity Exists|"
  end
  -- Is Variance Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Reserved Bit 6 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Reserved Bit 5 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Reserved Bit 3 Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_2_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_capacity_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_symbol_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_2, range, display)

  if show.variance_restatement_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_byte_1 = 1

-- Display: Variance Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Variance Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Variance Restatement Reserved Bit 8 Exists|"
  end
  -- Is Variance Restatement Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Variance Restatement Min Qty Exists|"
  end
  -- Is Variance Restatement Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Variance Restatement Time In Force Exists|"
  end
  -- Is Variance Restatement Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Variance Restatement Ord Type Exists|"
  end
  -- Is Variance Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Variance Restatement Reserved Bit 4 Exists|"
  end
  -- Is Variance Restatement Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Variance Restatement Price Exists|"
  end
  -- Is Variance Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Variance Restatement Reserved Bit 2 Exists|"
  end
  -- Is Variance Restatement Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Variance Restatement Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Variance Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_1_bits = function(buffer, offset, packet, parent)

  -- Variance Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Variance Restatement Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_min_qty_exists, buffer(offset, 1))

  -- Variance Restatement Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_time_in_force_exists, buffer(offset, 1))

  -- Variance Restatement Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_ord_type_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Variance Restatement Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_price_exists, buffer(offset, 1))

  -- Variance Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Variance Restatement Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_side_exists, buffer(offset, 1))
end

-- Dissect: Variance Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_byte_1, range, display)

  if show.variance_restatement_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Variance Restatement Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_bitfield_count = 1

-- Display: Variance Restatement Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_bitfield_count = function(value)
  return "Variance Restatement Bitfield Count: "..value
end

-- Dissect: Variance Restatement Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Variance Restatement Optional Fields
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Variance Restatement Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_optional_fields_fields = function(buffer, offset, packet, parent, size_of_variance_restatement_optional_fields)
  local index = offset

  -- Variance Restatement Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, variance_restatement_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Variance Restatement Byte 1
  local variance_restatement_byte_1_exists = variance_restatement_bitfield_count >= 1

  -- Runtime optional field: Variance Restatement Byte 1
  if variance_restatement_byte_1_exists then

    -- Variance Restatement Byte 1: Struct of 8 fields
    index, variance_restatement_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 2
  local variance_restatement_byte_2_exists = variance_restatement_bitfield_count >= 2

  -- Runtime optional field: Variance Restatement Byte 2
  if variance_restatement_byte_2_exists then

    -- Variance Restatement Byte 2: Struct of 8 fields
    index, variance_restatement_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 3
  local variance_restatement_byte_3_exists = variance_restatement_bitfield_count >= 3

  -- Runtime optional field: Variance Restatement Byte 3
  if variance_restatement_byte_3_exists then

    -- Variance Restatement Byte 3: Struct of 8 fields
    index, variance_restatement_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 4
  local variance_restatement_byte_4_exists = variance_restatement_bitfield_count >= 4

  -- Runtime optional field: Variance Restatement Byte 4
  if variance_restatement_byte_4_exists then

    -- Variance Restatement Byte 4: Struct of 8 fields
    index, variance_restatement_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 5
  local variance_restatement_byte_5_exists = variance_restatement_bitfield_count >= 5

  -- Runtime optional field: Variance Restatement Byte 5
  if variance_restatement_byte_5_exists then

    -- Variance Restatement Byte 5: Struct of 8 fields
    index, variance_restatement_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 6
  local variance_restatement_byte_6_exists = variance_restatement_bitfield_count >= 6

  -- Runtime optional field: Variance Restatement Byte 6
  if variance_restatement_byte_6_exists then

    -- Variance Restatement Byte 6: Struct of 8 fields
    index, variance_restatement_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 7
  local variance_restatement_byte_7_exists = variance_restatement_bitfield_count >= 7

  -- Runtime optional field: Variance Restatement Byte 7
  if variance_restatement_byte_7_exists then

    -- Variance Restatement Byte 7: Struct of 8 fields
    index, variance_restatement_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 8
  local variance_restatement_byte_8_exists = variance_restatement_bitfield_count >= 8

  -- Runtime optional field: Variance Restatement Byte 8
  if variance_restatement_byte_8_exists then

    -- Variance Restatement Byte 8: Struct of 8 fields
    index, variance_restatement_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 9
  local variance_restatement_byte_9_exists = variance_restatement_bitfield_count >= 9

  -- Runtime optional field: Variance Restatement Byte 9
  if variance_restatement_byte_9_exists then

    -- Variance Restatement Byte 9: Struct of 8 fields
    index, variance_restatement_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 10
  local variance_restatement_byte_10_exists = variance_restatement_bitfield_count >= 10

  -- Runtime optional field: Variance Restatement Byte 10
  if variance_restatement_byte_10_exists then

    -- Variance Restatement Byte 10: Struct of 8 fields
    index, variance_restatement_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 11
  local variance_restatement_byte_11_exists = variance_restatement_bitfield_count >= 11

  -- Runtime optional field: Variance Restatement Byte 11
  if variance_restatement_byte_11_exists then

    -- Variance Restatement Byte 11: Struct of 8 fields
    index, variance_restatement_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 12
  local variance_restatement_byte_12_exists = variance_restatement_bitfield_count >= 12

  -- Runtime optional field: Variance Restatement Byte 12
  if variance_restatement_byte_12_exists then

    -- Variance Restatement Byte 12: Struct of 8 fields
    index, variance_restatement_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 13
  local variance_restatement_byte_13_exists = variance_restatement_bitfield_count >= 13

  -- Runtime optional field: Variance Restatement Byte 13
  if variance_restatement_byte_13_exists then

    -- Variance Restatement Byte 13: Struct of 8 fields
    index, variance_restatement_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 14
  local variance_restatement_byte_14_exists = variance_restatement_bitfield_count >= 14

  -- Runtime optional field: Variance Restatement Byte 14
  if variance_restatement_byte_14_exists then

    -- Variance Restatement Byte 14: Struct of 8 fields
    index, variance_restatement_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 15
  local variance_restatement_byte_15_exists = variance_restatement_bitfield_count >= 15

  -- Runtime optional field: Variance Restatement Byte 15
  if variance_restatement_byte_15_exists then

    -- Variance Restatement Byte 15: Struct of 8 fields
    index, variance_restatement_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 16
  local variance_restatement_byte_16_exists = variance_restatement_bitfield_count >= 16

  -- Runtime optional field: Variance Restatement Byte 16
  if variance_restatement_byte_16_exists then

    -- Variance Restatement Byte 16: Struct of 8 fields
    index, variance_restatement_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 17
  local variance_restatement_byte_17_exists = variance_restatement_bitfield_count >= 17

  -- Runtime optional field: Variance Restatement Byte 17
  if variance_restatement_byte_17_exists then

    -- Variance Restatement Byte 17: Struct of 8 fields
    index, variance_restatement_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = variance_restatement_bitfield_count >= 1 and variance_restatement_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = variance_restatement_bitfield_count >= 1 and variance_restatement_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = variance_restatement_bitfield_count >= 1 and variance_restatement_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = variance_restatement_bitfield_count >= 1 and variance_restatement_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = variance_restatement_bitfield_count >= 1 and variance_restatement_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = variance_restatement_bitfield_count >= 2 and variance_restatement_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = variance_restatement_bitfield_count >= 2 and variance_restatement_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = variance_restatement_bitfield_count >= 3 and variance_restatement_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = variance_restatement_bitfield_count >= 3 and variance_restatement_byte_3:bitfield(6) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = variance_restatement_bitfield_count >= 3 and variance_restatement_byte_3:bitfield(5) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = variance_restatement_bitfield_count >= 3 and variance_restatement_byte_3:bitfield(0) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = variance_restatement_bitfield_count >= 4 and variance_restatement_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = variance_restatement_bitfield_count >= 4 and variance_restatement_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Orig Cl Ord Id
  local orig_cl_ord_id_exists = variance_restatement_bitfield_count >= 5 and variance_restatement_byte_5:bitfield(7) > 0

  -- Runtime optional field: Orig Cl Ord Id
  if orig_cl_ord_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.orig_cl_ord_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Last Shares
  local last_shares_exists = variance_restatement_bitfield_count >= 5 and variance_restatement_byte_5:bitfield(5) > 0

  -- Runtime optional field: Last Shares
  if last_shares_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.last_shares(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Last Px
  local last_px_exists = variance_restatement_bitfield_count >= 5 and variance_restatement_byte_5:bitfield(4) > 0

  -- Runtime optional field: Last Px
  if last_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.last_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Fee Code
  local fee_code_exists = variance_restatement_bitfield_count >= 8 and variance_restatement_byte_8:bitfield(7) > 0

  -- Runtime optional field: Fee Code
  if fee_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.fee_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = variance_restatement_bitfield_count >= 8 and variance_restatement_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = variance_restatement_bitfield_count >= 9 and variance_restatement_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = variance_restatement_bitfield_count >= 12 and variance_restatement_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = variance_restatement_bitfield_count >= 12 and variance_restatement_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = variance_restatement_bitfield_count >= 12 and variance_restatement_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Date
  local trade_date_exists = variance_restatement_bitfield_count >= 12 and variance_restatement_byte_12:bitfield(4) > 0

  -- Runtime optional field: Trade Date
  if trade_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.trade_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Price
  local clearing_price_exists = variance_restatement_bitfield_count >= 12 and variance_restatement_byte_12:bitfield(3) > 0

  -- Runtime optional field: Clearing Price
  if clearing_price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Size
  local clearing_size_exists = variance_restatement_bitfield_count >= 12 and variance_restatement_byte_12:bitfield(2) > 0

  -- Runtime optional field: Clearing Size
  if clearing_size_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_size(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Symbol
  local clearing_symbol_exists = variance_restatement_bitfield_count >= 12 and variance_restatement_byte_12:bitfield(1) > 0

  -- Runtime optional field: Clearing Symbol
  if clearing_symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Multileg Reporting Type
  local multileg_reporting_type_exists = variance_restatement_bitfield_count >= 13 and variance_restatement_byte_13:bitfield(0) > 0

  -- Runtime optional field: Multileg Reporting Type
  if multileg_reporting_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.multileg_reporting_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Secondary Exec Id
  local secondary_exec_id_exists = variance_restatement_bitfield_count >= 14 and variance_restatement_byte_14:bitfield(3) > 0

  -- Runtime optional field: Secondary Exec Id
  if secondary_exec_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.secondary_exec_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = variance_restatement_bitfield_count >= 16 and variance_restatement_byte_16:bitfield(7) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Variance Restatement Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_optional_fields = function(buffer, offset, packet, parent, size_of_variance_restatement_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.variance_restatement_optional_fields then
    local range = buffer(offset, size_of_variance_restatement_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_optional_fields_fields(buffer, offset, packet, parent, size_of_variance_restatement_optional_fields)

  return offset + size_of_variance_restatement_optional_fields
end

-- Size: Reserved Internal
cboe_futures_orderentry_boe_v1_3_size_of.reserved_internal = 1

-- Display: Reserved Internal
cboe_futures_orderentry_boe_v1_3_display.reserved_internal = function(value)
  return "Reserved Internal: "..value
end

-- Dissect: Reserved Internal
cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.reserved_internal
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.reserved_internal(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.reserved_internal, range, value, display)

  return offset + length, value
end

-- Size: Cl Ord Id
cboe_futures_orderentry_boe_v1_3_size_of.cl_ord_id = 20

-- Display: Cl Ord Id
cboe_futures_orderentry_boe_v1_3_display.cl_ord_id = function(value)
  return "Cl Ord Id: "..value
end

-- Dissect: Cl Ord Id
cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cl_ord_id
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.cl_ord_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cl_ord_id, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Variance Restatement Message
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Variance Restatement Message
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Variance Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_message_fields = function(buffer, offset, packet, parent, size_of_variance_restatement_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Exec Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_id = cboe_futures_orderentry_boe_v1_3_dissect.exec_id(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Variance Restatement Optional Fields
  local size_of_variance_restatement_optional_fields = message_length - (index - offset) - 8

  -- Variance Restatement Optional Fields: Struct of 47 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_optional_fields(buffer, index, packet, parent, size_of_variance_restatement_optional_fields)

  return index
end

-- Dissect: Variance Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_variance_restatement_message = cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.variance_restatement_message then
    local range = buffer(offset, size_of_variance_restatement_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_message_fields(buffer, offset, packet, parent, size_of_variance_restatement_message)

  return offset + size_of_variance_restatement_message
end

-- Size: Order Qty
cboe_futures_orderentry_boe_v1_3_size_of.order_qty = 4

-- Display: Order Qty
cboe_futures_orderentry_boe_v1_3_display.order_qty = function(value)
  return "Order Qty: "..value
end

-- Dissect: Order Qty
cboe_futures_orderentry_boe_v1_3_dissect.order_qty = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_qty
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_qty(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_qty, range, value, display)

  return offset + length, value
end

-- Size: Tas Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_17 = 1

-- Display: Tas Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_17_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_17, range, display)

  if show.tas_restatement_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_16 = 1

-- Display: Tas Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_16_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_16, range, display)

  if show.tas_restatement_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_15 = 1

-- Display: Tas Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_15_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_15, range, display)

  if show.tas_restatement_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_14 = 1

-- Display: Tas Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Secondary Exec Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Secondary Exec Id Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_14_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Secondary Exec Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_secondary_exec_id_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_14, range, display)

  if show.tas_restatement_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_13 = 1

-- Display: Tas Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Multileg Reporting Type Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Multileg Reporting Type Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_13_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Multileg Reporting Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_multileg_reporting_type_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_13, range, display)

  if show.tas_restatement_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_12 = 1

-- Display: Tas Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Clearing Symbol Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Clearing Symbol Exists|"
  end
  -- Is Tas Restatement Clearing Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Clearing Size Exists|"
  end
  -- Is Tas Restatement Clearing Price Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Clearing Price Exists|"
  end
  -- Is Tas Restatement Trade Date Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Trade Date Exists|"
  end
  -- Is Tas Restatement Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Oeoid Exists|"
  end
  -- Is Tas Restatement Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Manual Order Indicator Exists|"
  end
  -- Is Tas Restatement Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_12_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Clearing Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_symbol_exists, buffer(offset, 1))

  -- Tas Restatement Clearing Size Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_size_exists, buffer(offset, 1))

  -- Tas Restatement Clearing Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_price_exists, buffer(offset, 1))

  -- Tas Restatement Trade Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_trade_date_exists, buffer(offset, 1))

  -- Tas Restatement Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_oeoid_exists, buffer(offset, 1))

  -- Tas Restatement Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_manual_order_indicator_exists, buffer(offset, 1))

  -- Tas Restatement Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_12, range, display)

  if show.tas_restatement_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_11 = 1

-- Display: Tas Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_11_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_11, range, display)

  if show.tas_restatement_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_10 = 1

-- Display: Tas Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_10_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_10, range, display)

  if show.tas_restatement_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_9 = 1

-- Display: Tas Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Cmta Number Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_9_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_cmta_number_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_9, range, display)

  if show.tas_restatement_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_8 = 1

-- Display: Tas Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Stop Px Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_8_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_stop_px_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Fee Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_8, range, display)

  if show.tas_restatement_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_7 = 1

-- Display: Tas Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_7_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_7, range, display)

  if show.tas_restatement_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_6 = 1

-- Display: Tas Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_6_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_6, range, display)

  if show.tas_restatement_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_5 = 1

-- Display: Tas Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Last Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Last Px Exists|"
  end
  -- Is Tas Restatement Last Shares Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Last Shares Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Orig Cl Ord Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Orig Cl Ord Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_5_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Last Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_last_px_exists, buffer(offset, 1))

  -- Tas Restatement Last Shares Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_last_shares_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Orig Cl Ord Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_orig_cl_ord_id_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_5, range, display)

  if show.tas_restatement_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_4 = 1

-- Display: Tas Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Reserved Bit 7 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Open Close Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_4_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_7_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_open_close_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_4, range, display)

  if show.tas_restatement_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_3 = 1

-- Display: Tas Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Prevent Match Exists|"
  end
  -- Is Tas Restatement Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Order Qty Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Clearing Account Exists|"
  end
  -- Is Tas Restatement Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Clearing Firm Exists|"
  end
  -- Is Tas Restatement Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_3_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_prevent_match_exists, buffer(offset, 1))

  -- Tas Restatement Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_order_qty_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_account_exists, buffer(offset, 1))

  -- Tas Restatement Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_clearing_firm_exists, buffer(offset, 1))

  -- Tas Restatement Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_account_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_3, range, display)

  if show.tas_restatement_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_2 = 1

-- Display: Tas Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Capacity Exists|"
  end
  -- Is Tas Restatement Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Reserved Bit 6 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Reserved Bit 5 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Reserved Bit 3 Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_2_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_capacity_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_6_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_5_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_3_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_symbol_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_2, range, display)

  if show.tas_restatement_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_byte_1 = 1

-- Display: Tas Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Tas Restatement Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Tas Restatement Reserved Bit 8 Exists|"
  end
  -- Is Tas Restatement Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Tas Restatement Min Qty Exists|"
  end
  -- Is Tas Restatement Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Tas Restatement Time In Force Exists|"
  end
  -- Is Tas Restatement Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Tas Restatement Ord Type Exists|"
  end
  -- Is Tas Restatement Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Tas Restatement Reserved Bit 4 Exists|"
  end
  -- Is Tas Restatement Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Tas Restatement Price Exists|"
  end
  -- Is Tas Restatement Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Tas Restatement Reserved Bit 2 Exists|"
  end
  -- Is Tas Restatement Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Tas Restatement Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Tas Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_1_bits = function(buffer, offset, packet, parent)

  -- Tas Restatement Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_8_exists, buffer(offset, 1))

  -- Tas Restatement Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_min_qty_exists, buffer(offset, 1))

  -- Tas Restatement Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_time_in_force_exists, buffer(offset, 1))

  -- Tas Restatement Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_ord_type_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_4_exists, buffer(offset, 1))

  -- Tas Restatement Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_price_exists, buffer(offset, 1))

  -- Tas Restatement Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_reserved_bit_2_exists, buffer(offset, 1))

  -- Tas Restatement Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_side_exists, buffer(offset, 1))
end

-- Dissect: Tas Restatement Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_byte_1, range, display)

  if show.tas_restatement_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Tas Restatement Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_bitfield_count = 1

-- Display: Tas Restatement Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_bitfield_count = function(value)
  return "Tas Restatement Bitfield Count: "..value
end

-- Dissect: Tas Restatement Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Tas Restatement Optional Fields
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Tas Restatement Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_optional_fields_fields = function(buffer, offset, packet, parent, size_of_tas_restatement_optional_fields)
  local index = offset

  -- Tas Restatement Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, tas_restatement_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Tas Restatement Byte 1
  local tas_restatement_byte_1_exists = tas_restatement_bitfield_count >= 1

  -- Runtime optional field: Tas Restatement Byte 1
  if tas_restatement_byte_1_exists then

    -- Tas Restatement Byte 1: Struct of 8 fields
    index, tas_restatement_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 2
  local tas_restatement_byte_2_exists = tas_restatement_bitfield_count >= 2

  -- Runtime optional field: Tas Restatement Byte 2
  if tas_restatement_byte_2_exists then

    -- Tas Restatement Byte 2: Struct of 8 fields
    index, tas_restatement_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 3
  local tas_restatement_byte_3_exists = tas_restatement_bitfield_count >= 3

  -- Runtime optional field: Tas Restatement Byte 3
  if tas_restatement_byte_3_exists then

    -- Tas Restatement Byte 3: Struct of 8 fields
    index, tas_restatement_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 4
  local tas_restatement_byte_4_exists = tas_restatement_bitfield_count >= 4

  -- Runtime optional field: Tas Restatement Byte 4
  if tas_restatement_byte_4_exists then

    -- Tas Restatement Byte 4: Struct of 8 fields
    index, tas_restatement_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 5
  local tas_restatement_byte_5_exists = tas_restatement_bitfield_count >= 5

  -- Runtime optional field: Tas Restatement Byte 5
  if tas_restatement_byte_5_exists then

    -- Tas Restatement Byte 5: Struct of 8 fields
    index, tas_restatement_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 6
  local tas_restatement_byte_6_exists = tas_restatement_bitfield_count >= 6

  -- Runtime optional field: Tas Restatement Byte 6
  if tas_restatement_byte_6_exists then

    -- Tas Restatement Byte 6: Struct of 8 fields
    index, tas_restatement_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 7
  local tas_restatement_byte_7_exists = tas_restatement_bitfield_count >= 7

  -- Runtime optional field: Tas Restatement Byte 7
  if tas_restatement_byte_7_exists then

    -- Tas Restatement Byte 7: Struct of 8 fields
    index, tas_restatement_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 8
  local tas_restatement_byte_8_exists = tas_restatement_bitfield_count >= 8

  -- Runtime optional field: Tas Restatement Byte 8
  if tas_restatement_byte_8_exists then

    -- Tas Restatement Byte 8: Struct of 8 fields
    index, tas_restatement_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 9
  local tas_restatement_byte_9_exists = tas_restatement_bitfield_count >= 9

  -- Runtime optional field: Tas Restatement Byte 9
  if tas_restatement_byte_9_exists then

    -- Tas Restatement Byte 9: Struct of 8 fields
    index, tas_restatement_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 10
  local tas_restatement_byte_10_exists = tas_restatement_bitfield_count >= 10

  -- Runtime optional field: Tas Restatement Byte 10
  if tas_restatement_byte_10_exists then

    -- Tas Restatement Byte 10: Struct of 8 fields
    index, tas_restatement_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 11
  local tas_restatement_byte_11_exists = tas_restatement_bitfield_count >= 11

  -- Runtime optional field: Tas Restatement Byte 11
  if tas_restatement_byte_11_exists then

    -- Tas Restatement Byte 11: Struct of 8 fields
    index, tas_restatement_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 12
  local tas_restatement_byte_12_exists = tas_restatement_bitfield_count >= 12

  -- Runtime optional field: Tas Restatement Byte 12
  if tas_restatement_byte_12_exists then

    -- Tas Restatement Byte 12: Struct of 8 fields
    index, tas_restatement_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 13
  local tas_restatement_byte_13_exists = tas_restatement_bitfield_count >= 13

  -- Runtime optional field: Tas Restatement Byte 13
  if tas_restatement_byte_13_exists then

    -- Tas Restatement Byte 13: Struct of 8 fields
    index, tas_restatement_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 14
  local tas_restatement_byte_14_exists = tas_restatement_bitfield_count >= 14

  -- Runtime optional field: Tas Restatement Byte 14
  if tas_restatement_byte_14_exists then

    -- Tas Restatement Byte 14: Struct of 8 fields
    index, tas_restatement_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 15
  local tas_restatement_byte_15_exists = tas_restatement_bitfield_count >= 15

  -- Runtime optional field: Tas Restatement Byte 15
  if tas_restatement_byte_15_exists then

    -- Tas Restatement Byte 15: Struct of 8 fields
    index, tas_restatement_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 16
  local tas_restatement_byte_16_exists = tas_restatement_bitfield_count >= 16

  -- Runtime optional field: Tas Restatement Byte 16
  if tas_restatement_byte_16_exists then

    -- Tas Restatement Byte 16: Struct of 8 fields
    index, tas_restatement_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 17
  local tas_restatement_byte_17_exists = tas_restatement_bitfield_count >= 17

  -- Runtime optional field: Tas Restatement Byte 17
  if tas_restatement_byte_17_exists then

    -- Tas Restatement Byte 17: Struct of 8 fields
    index, tas_restatement_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = tas_restatement_bitfield_count >= 1 and tas_restatement_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = tas_restatement_bitfield_count >= 1 and tas_restatement_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = tas_restatement_bitfield_count >= 1 and tas_restatement_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = tas_restatement_bitfield_count >= 1 and tas_restatement_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = tas_restatement_bitfield_count >= 1 and tas_restatement_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = tas_restatement_bitfield_count >= 2 and tas_restatement_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = tas_restatement_bitfield_count >= 2 and tas_restatement_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = tas_restatement_bitfield_count >= 3 and tas_restatement_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = tas_restatement_bitfield_count >= 3 and tas_restatement_byte_3:bitfield(6) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = tas_restatement_bitfield_count >= 3 and tas_restatement_byte_3:bitfield(5) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Qty
  local order_qty_exists = tas_restatement_bitfield_count >= 3 and tas_restatement_byte_3:bitfield(1) > 0

  -- Runtime optional field: Order Qty
  if order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = tas_restatement_bitfield_count >= 3 and tas_restatement_byte_3:bitfield(0) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = tas_restatement_bitfield_count >= 4 and tas_restatement_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = tas_restatement_bitfield_count >= 4 and tas_restatement_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Orig Cl Ord Id
  local orig_cl_ord_id_exists = tas_restatement_bitfield_count >= 5 and tas_restatement_byte_5:bitfield(7) > 0

  -- Runtime optional field: Orig Cl Ord Id
  if orig_cl_ord_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.orig_cl_ord_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Last Shares
  local last_shares_exists = tas_restatement_bitfield_count >= 5 and tas_restatement_byte_5:bitfield(5) > 0

  -- Runtime optional field: Last Shares
  if last_shares_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.last_shares(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Last Px
  local last_px_exists = tas_restatement_bitfield_count >= 5 and tas_restatement_byte_5:bitfield(4) > 0

  -- Runtime optional field: Last Px
  if last_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.last_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Fee Code
  local fee_code_exists = tas_restatement_bitfield_count >= 8 and tas_restatement_byte_8:bitfield(7) > 0

  -- Runtime optional field: Fee Code
  if fee_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.fee_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = tas_restatement_bitfield_count >= 8 and tas_restatement_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = tas_restatement_bitfield_count >= 9 and tas_restatement_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = tas_restatement_bitfield_count >= 12 and tas_restatement_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = tas_restatement_bitfield_count >= 12 and tas_restatement_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = tas_restatement_bitfield_count >= 12 and tas_restatement_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Date
  local trade_date_exists = tas_restatement_bitfield_count >= 12 and tas_restatement_byte_12:bitfield(4) > 0

  -- Runtime optional field: Trade Date
  if trade_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.trade_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Price
  local clearing_price_exists = tas_restatement_bitfield_count >= 12 and tas_restatement_byte_12:bitfield(3) > 0

  -- Runtime optional field: Clearing Price
  if clearing_price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Size
  local clearing_size_exists = tas_restatement_bitfield_count >= 12 and tas_restatement_byte_12:bitfield(2) > 0

  -- Runtime optional field: Clearing Size
  if clearing_size_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_size(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Symbol
  local clearing_symbol_exists = tas_restatement_bitfield_count >= 12 and tas_restatement_byte_12:bitfield(1) > 0

  -- Runtime optional field: Clearing Symbol
  if clearing_symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Multileg Reporting Type
  local multileg_reporting_type_exists = tas_restatement_bitfield_count >= 13 and tas_restatement_byte_13:bitfield(0) > 0

  -- Runtime optional field: Multileg Reporting Type
  if multileg_reporting_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.multileg_reporting_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Secondary Exec Id
  local secondary_exec_id_exists = tas_restatement_bitfield_count >= 14 and tas_restatement_byte_14:bitfield(3) > 0

  -- Runtime optional field: Secondary Exec Id
  if secondary_exec_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.secondary_exec_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = tas_restatement_bitfield_count >= 16 and tas_restatement_byte_16:bitfield(7) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Tas Restatement Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_optional_fields = function(buffer, offset, packet, parent, size_of_tas_restatement_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.tas_restatement_optional_fields then
    local range = buffer(offset, size_of_tas_restatement_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_optional_fields_fields(buffer, offset, packet, parent, size_of_tas_restatement_optional_fields)

  return offset + size_of_tas_restatement_optional_fields
end

-- Read runtime size of: Tas Restatement Message
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Tas Restatement Message
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Tas Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_message_fields = function(buffer, offset, packet, parent, size_of_tas_restatement_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Exec Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_id = cboe_futures_orderentry_boe_v1_3_dissect.exec_id(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Tas Restatement Optional Fields
  local size_of_tas_restatement_optional_fields = message_length - (index - offset) - 8

  -- Tas Restatement Optional Fields: Struct of 48 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_optional_fields(buffer, index, packet, parent, size_of_tas_restatement_optional_fields)

  return index
end

-- Dissect: Tas Restatement Message
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_tas_restatement_message = cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.tas_restatement_message then
    local range = buffer(offset, size_of_tas_restatement_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_message_fields(buffer, offset, packet, parent, size_of_tas_restatement_message)

  return offset + size_of_tas_restatement_message
end

-- Size: Cancelled Order Count
cboe_futures_orderentry_boe_v1_3_size_of.cancelled_order_count = 4

-- Display: Cancelled Order Count
cboe_futures_orderentry_boe_v1_3_display.cancelled_order_count = function(value)
  return "Cancelled Order Count: "..value
end

-- Dissect: Cancelled Order Count
cboe_futures_orderentry_boe_v1_3_dissect.cancelled_order_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cancelled_order_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.cancelled_order_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancelled_order_count, range, value, display)

  return offset + length, value
end

-- Size: Mass Cancel Id
cboe_futures_orderentry_boe_v1_3_size_of.mass_cancel_id = 20

-- Display: Mass Cancel Id
cboe_futures_orderentry_boe_v1_3_display.mass_cancel_id = function(value)
  return "Mass Cancel Id: "..value
end

-- Dissect: Mass Cancel Id
cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.mass_cancel_id
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.mass_cancel_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.mass_cancel_id, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Mass Cancel Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_size_of.mass_cancel_acknowledgment_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Mass Cancel Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_display.mass_cancel_acknowledgment_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Mass Cancel Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_acknowledgment_message_fields = function(buffer, offset, packet, parent, size_of_mass_cancel_acknowledgment_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Mass Cancel Id: 20 Byte Ascii String
  index, mass_cancel_id = cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_id(buffer, index, packet, parent)

  -- Cancelled Order Count: 4 Byte Unsigned Fixed Width Integer
  index, cancelled_order_count = cboe_futures_orderentry_boe_v1_3_dissect.cancelled_order_count(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  return index
end

-- Dissect: Mass Cancel Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_acknowledgment_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_mass_cancel_acknowledgment_message = cboe_futures_orderentry_boe_v1_3_size_of.mass_cancel_acknowledgment_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.mass_cancel_acknowledgment_message then
    local range = buffer(offset, size_of_mass_cancel_acknowledgment_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.mass_cancel_acknowledgment_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.mass_cancel_acknowledgment_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_acknowledgment_message_fields(buffer, offset, packet, parent, size_of_mass_cancel_acknowledgment_message)

  return offset + size_of_mass_cancel_acknowledgment_message
end

-- Size: Risk Reset Result
cboe_futures_orderentry_boe_v1_3_size_of.risk_reset_result = 1

-- Display: Risk Reset Result
cboe_futures_orderentry_boe_v1_3_display.risk_reset_result = function(value)
  if value == " " then
    return "Risk Reset Result: Ignored (<whitespace>)"
  end
  if value == "Y" then
    return "Risk Reset Result: Success (Y)"
  end
  if value == "F" then
    return "Risk Reset Result: Rejected Exceeds Firm Reset Limit (F)"
  end
  if value == "C" then
    return "Risk Reset Result: Rejected Exceeds Custom Group Id Limit (C)"
  end
  if value == "E" then
    return "Risk Reset Result: Rejected Empty Reset Risk Field (E)"
  end
  if value == "I" then
    return "Risk Reset Result: Rejected Incorrect Data Center (I)"
  end
  if value == "S" then
    return "Risk Reset Result: Rejected Exceeds Product Level Reset Limit (S)"
  end
  if value == "U" then
    return "Risk Reset Result: Rejected Invalid Risk Root (U)"
  end
  if value == "c" then
    return "Risk Reset Result: Rejected Invalid Efid Or Clearing Firm (c)"
  end
  if value == "y" then
    return "Risk Reset Result: Rejected In Replay (y)"
  end

  return "Risk Reset Result: Unknown("..value..")"
end

-- Dissect: Risk Reset Result
cboe_futures_orderentry_boe_v1_3_dissect.risk_reset_result = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.risk_reset_result
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.risk_reset_result(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.risk_reset_result, range, value, display)

  return offset + length, value
end

-- Size: Risk Status Id
cboe_futures_orderentry_boe_v1_3_size_of.risk_status_id = 16

-- Display: Risk Status Id
cboe_futures_orderentry_boe_v1_3_display.risk_status_id = function(value)
  return "Risk Status Id: "..value
end

-- Dissect: Risk Status Id
cboe_futures_orderentry_boe_v1_3_dissect.risk_status_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.risk_status_id
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.risk_status_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.risk_status_id, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Risk Reset Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_size_of.risk_reset_acknowledgment_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Risk Reset Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_display.risk_reset_acknowledgment_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Risk Reset Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.risk_reset_acknowledgment_message_fields = function(buffer, offset, packet, parent, size_of_risk_reset_acknowledgment_message)
  local index = offset

  -- Risk Status Id: 16 Byte Ascii String
  index, risk_status_id = cboe_futures_orderentry_boe_v1_3_dissect.risk_status_id(buffer, index, packet, parent)

  -- Risk Reset Result: 1 Byte Ascii String Enum with 10 values
  index, risk_reset_result = cboe_futures_orderentry_boe_v1_3_dissect.risk_reset_result(buffer, index, packet, parent)

  return index
end

-- Dissect: Risk Reset Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.risk_reset_acknowledgment_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_risk_reset_acknowledgment_message = cboe_futures_orderentry_boe_v1_3_size_of.risk_reset_acknowledgment_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.risk_reset_acknowledgment_message then
    local range = buffer(offset, size_of_risk_reset_acknowledgment_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.risk_reset_acknowledgment_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.risk_reset_acknowledgment_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.risk_reset_acknowledgment_message_fields(buffer, offset, packet, parent, size_of_risk_reset_acknowledgment_message)

  return offset + size_of_risk_reset_acknowledgment_message
end

-- Size: Purge Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_17 = 1

-- Display: Purge Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_17_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_17, range, display)

  if show.purge_rejected_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_16 = 1

-- Display: Purge Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_16_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_16, range, display)

  if show.purge_rejected_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_15 = 1

-- Display: Purge Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Mass Cancel Id Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Mass Cancel Id Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_15_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Mass Cancel Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_mass_cancel_id_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_15, range, display)

  if show.purge_rejected_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_14 = 1

-- Display: Purge Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_14_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_14, range, display)

  if show.purge_rejected_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_13 = 1

-- Display: Purge Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_13_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_13, range, display)

  if show.purge_rejected_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_12 = 1

-- Display: Purge Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_12_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_12, range, display)

  if show.purge_rejected_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_11 = 1

-- Display: Purge Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_11_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_11, range, display)

  if show.purge_rejected_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_10 = 1

-- Display: Purge Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_10_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_10, range, display)

  if show.purge_rejected_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_9 = 1

-- Display: Purge Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_9_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_9, range, display)

  if show.purge_rejected_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_8 = 1

-- Display: Purge Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_8_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_8, range, display)

  if show.purge_rejected_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_7 = 1

-- Display: Purge Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_7_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_7, range, display)

  if show.purge_rejected_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_6 = 1

-- Display: Purge Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_6_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_6, range, display)

  if show.purge_rejected_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_5 = 1

-- Display: Purge Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_5_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_5, range, display)

  if show.purge_rejected_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_4 = 1

-- Display: Purge Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_4_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_4, range, display)

  if show.purge_rejected_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_3 = 1

-- Display: Purge Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_3_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_3, range, display)

  if show.purge_rejected_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_2 = 1

-- Display: Purge Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_2_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_2, range, display)

  if show.purge_rejected_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_byte_1 = 1

-- Display: Purge Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Rejected Reserved Bit 8 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Rejected Reserved Bit 7 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Rejected Reserved Bit 6 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Rejected Reserved Bit 5 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Rejected Reserved Bit 4 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Rejected Reserved Bit 3 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Rejected Reserved Bit 2 Exists|"
  end
  -- Is Purge Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_1_bits = function(buffer, offset, packet, parent)

  -- Purge Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_byte_1, range, display)

  if show.purge_rejected_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_bitfield_count = 1

-- Display: Purge Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_bitfield_count = function(value)
  return "Purge Rejected Bitfield Count: "..value
end

-- Dissect: Purge Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Purge Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_optional_fields_fields = function(buffer, offset, packet, parent, size_of_purge_rejected_optional_fields)
  local index = offset

  -- Purge Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, purge_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Purge Rejected Byte 1
  local purge_rejected_byte_1_exists = purge_rejected_bitfield_count >= 1

  -- Runtime optional field: Purge Rejected Byte 1
  if purge_rejected_byte_1_exists then

    -- Purge Rejected Byte 1: Struct of 8 fields
    index, purge_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 2
  local purge_rejected_byte_2_exists = purge_rejected_bitfield_count >= 2

  -- Runtime optional field: Purge Rejected Byte 2
  if purge_rejected_byte_2_exists then

    -- Purge Rejected Byte 2: Struct of 8 fields
    index, purge_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 3
  local purge_rejected_byte_3_exists = purge_rejected_bitfield_count >= 3

  -- Runtime optional field: Purge Rejected Byte 3
  if purge_rejected_byte_3_exists then

    -- Purge Rejected Byte 3: Struct of 8 fields
    index, purge_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 4
  local purge_rejected_byte_4_exists = purge_rejected_bitfield_count >= 4

  -- Runtime optional field: Purge Rejected Byte 4
  if purge_rejected_byte_4_exists then

    -- Purge Rejected Byte 4: Struct of 8 fields
    index, purge_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 5
  local purge_rejected_byte_5_exists = purge_rejected_bitfield_count >= 5

  -- Runtime optional field: Purge Rejected Byte 5
  if purge_rejected_byte_5_exists then

    -- Purge Rejected Byte 5: Struct of 8 fields
    index, purge_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 6
  local purge_rejected_byte_6_exists = purge_rejected_bitfield_count >= 6

  -- Runtime optional field: Purge Rejected Byte 6
  if purge_rejected_byte_6_exists then

    -- Purge Rejected Byte 6: Struct of 8 fields
    index, purge_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 7
  local purge_rejected_byte_7_exists = purge_rejected_bitfield_count >= 7

  -- Runtime optional field: Purge Rejected Byte 7
  if purge_rejected_byte_7_exists then

    -- Purge Rejected Byte 7: Struct of 8 fields
    index, purge_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 8
  local purge_rejected_byte_8_exists = purge_rejected_bitfield_count >= 8

  -- Runtime optional field: Purge Rejected Byte 8
  if purge_rejected_byte_8_exists then

    -- Purge Rejected Byte 8: Struct of 8 fields
    index, purge_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 9
  local purge_rejected_byte_9_exists = purge_rejected_bitfield_count >= 9

  -- Runtime optional field: Purge Rejected Byte 9
  if purge_rejected_byte_9_exists then

    -- Purge Rejected Byte 9: Struct of 8 fields
    index, purge_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 10
  local purge_rejected_byte_10_exists = purge_rejected_bitfield_count >= 10

  -- Runtime optional field: Purge Rejected Byte 10
  if purge_rejected_byte_10_exists then

    -- Purge Rejected Byte 10: Struct of 8 fields
    index, purge_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 11
  local purge_rejected_byte_11_exists = purge_rejected_bitfield_count >= 11

  -- Runtime optional field: Purge Rejected Byte 11
  if purge_rejected_byte_11_exists then

    -- Purge Rejected Byte 11: Struct of 8 fields
    index, purge_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 12
  local purge_rejected_byte_12_exists = purge_rejected_bitfield_count >= 12

  -- Runtime optional field: Purge Rejected Byte 12
  if purge_rejected_byte_12_exists then

    -- Purge Rejected Byte 12: Struct of 8 fields
    index, purge_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 13
  local purge_rejected_byte_13_exists = purge_rejected_bitfield_count >= 13

  -- Runtime optional field: Purge Rejected Byte 13
  if purge_rejected_byte_13_exists then

    -- Purge Rejected Byte 13: Struct of 8 fields
    index, purge_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 14
  local purge_rejected_byte_14_exists = purge_rejected_bitfield_count >= 14

  -- Runtime optional field: Purge Rejected Byte 14
  if purge_rejected_byte_14_exists then

    -- Purge Rejected Byte 14: Struct of 8 fields
    index, purge_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 15
  local purge_rejected_byte_15_exists = purge_rejected_bitfield_count >= 15

  -- Runtime optional field: Purge Rejected Byte 15
  if purge_rejected_byte_15_exists then

    -- Purge Rejected Byte 15: Struct of 8 fields
    index, purge_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 16
  local purge_rejected_byte_16_exists = purge_rejected_bitfield_count >= 16

  -- Runtime optional field: Purge Rejected Byte 16
  if purge_rejected_byte_16_exists then

    -- Purge Rejected Byte 16: Struct of 8 fields
    index, purge_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 17
  local purge_rejected_byte_17_exists = purge_rejected_bitfield_count >= 17

  -- Runtime optional field: Purge Rejected Byte 17
  if purge_rejected_byte_17_exists then

    -- Purge Rejected Byte 17: Struct of 8 fields
    index, purge_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Mass Cancel Id
  local mass_cancel_id_exists = purge_rejected_bitfield_count >= 15 and purge_rejected_byte_15:bitfield(4) > 0

  -- Runtime optional field: Mass Cancel Id
  if mass_cancel_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Purge Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_optional_fields = function(buffer, offset, packet, parent, size_of_purge_rejected_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.purge_rejected_optional_fields then
    local range = buffer(offset, size_of_purge_rejected_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_optional_fields_fields(buffer, offset, packet, parent, size_of_purge_rejected_optional_fields)

  return offset + size_of_purge_rejected_optional_fields
end

-- Size: Text
cboe_futures_orderentry_boe_v1_3_size_of.text = 60

-- Display: Text
cboe_futures_orderentry_boe_v1_3_display.text = function(value)
  return "Text: "..value
end

-- Dissect: Text
cboe_futures_orderentry_boe_v1_3_dissect.text = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.text
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.text(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.text, range, value, display)

  return offset + length, value
end

-- Size: Purge Reject Reason
cboe_futures_orderentry_boe_v1_3_size_of.purge_reject_reason = 1

-- Display: Purge Reject Reason
cboe_futures_orderentry_boe_v1_3_display.purge_reject_reason = function(value)
  if value == "A" then
    return "Purge Reject Reason: Admin (A)"
  end
  if value == "B" then
    return "Purge Reject Reason: Unknown Maturity Date (B)"
  end
  if value == "C" then
    return "Purge Reject Reason: Unknown Product Name (C)"
  end
  if value == "D" then
    return "Purge Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Purge Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Purge Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Purge Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Purge Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "M" then
    return "Purge Reject Reason: Liquidity Available Exceeds Order Size (M)"
  end
  if value == "N" then
    return "Purge Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Purge Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Purge Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "U" then
    return "Purge Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Purge Reject Reason: Would Wash (V)"
  end
  if value == "X" then
    return "Purge Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Purge Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Purge Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "f" then
    return "Purge Reject Reason: Risk Management Mpid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Purge Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "n" then
    return "Purge Reject Reason: Risk Management Configuration Is Insufficient (n)"
  end
  if value == "o" then
    return "Purge Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "s" then
    return "Purge Reject Reason: Risk Management Product Level (s)"
  end
  if value == "y" then
    return "Purge Reject Reason: Order Received By Cfe During Replay (y)"
  end
  if value == "z" then
    return "Purge Reject Reason: Session End (z)"
  end

  return "Purge Reject Reason: Unknown("..value..")"
end

-- Dissect: Purge Reject Reason
cboe_futures_orderentry_boe_v1_3_dissect.purge_reject_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.purge_reject_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_reject_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_reject_reason, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Purge Rejected Message
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Purge Rejected Message
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_message_fields = function(buffer, offset, packet, parent, size_of_purge_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Purge Reject Reason: 1 Byte Ascii String Enum with 24 values
  index, purge_reject_reason = cboe_futures_orderentry_boe_v1_3_dissect.purge_reject_reason(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_futures_orderentry_boe_v1_3_dissect.text(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Purge Rejected Optional Fields
  local size_of_purge_rejected_optional_fields = message_length - (index - offset) - 8

  -- Purge Rejected Optional Fields: Struct of 19 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_optional_fields(buffer, index, packet, parent, size_of_purge_rejected_optional_fields)

  return index
end

-- Dissect: Purge Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_purge_rejected_message = cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.purge_rejected_message then
    local range = buffer(offset, size_of_purge_rejected_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_message_fields(buffer, offset, packet, parent, size_of_purge_rejected_message)

  return offset + size_of_purge_rejected_message
end

-- Size: Corrected Size
cboe_futures_orderentry_boe_v1_3_size_of.corrected_size = 4

-- Display: Corrected Size
cboe_futures_orderentry_boe_v1_3_display.corrected_size = function(value)
  return "Corrected Size: "..value
end

-- Dissect: Corrected Size
cboe_futures_orderentry_boe_v1_3_dissect.corrected_size = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.corrected_size
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.corrected_size(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.corrected_size, range, value, display)

  return offset + length, value
end

-- Size: Trade Cancel Or Correct Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_17 = 1

-- Display: Trade Cancel Or Correct Byte 17
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_17_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_17, range, display)

  if show.trade_cancel_or_correct_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_16 = 1

-- Display: Trade Cancel Or Correct Byte 16
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_16_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_16, range, display)

  if show.trade_cancel_or_correct_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_15 = 1

-- Display: Trade Cancel Or Correct Byte 15
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_15_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_15, range, display)

  if show.trade_cancel_or_correct_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_14 = 1

-- Display: Trade Cancel Or Correct Byte 14
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_14_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_14, range, display)

  if show.trade_cancel_or_correct_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_13 = 1

-- Display: Trade Cancel Or Correct Byte 13
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_13_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_13, range, display)

  if show.trade_cancel_or_correct_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_12 = 1

-- Display: Trade Cancel Or Correct Byte 12
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_12_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_12, range, display)

  if show.trade_cancel_or_correct_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_11 = 1

-- Display: Trade Cancel Or Correct Byte 11
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_11_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_11, range, display)

  if show.trade_cancel_or_correct_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_10 = 1

-- Display: Trade Cancel Or Correct Byte 10
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_10_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_10, range, display)

  if show.trade_cancel_or_correct_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_9 = 1

-- Display: Trade Cancel Or Correct Byte 9
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Cmta Number Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_9_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_cmta_number_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_9, range, display)

  if show.trade_cancel_or_correct_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_8 = 1

-- Display: Trade Cancel Or Correct Byte 8
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_8_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_8, range, display)

  if show.trade_cancel_or_correct_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_7 = 1

-- Display: Trade Cancel Or Correct Byte 7
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_7_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_7, range, display)

  if show.trade_cancel_or_correct_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_6 = 1

-- Display: Trade Cancel Or Correct Byte 6
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_6_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_6, range, display)

  if show.trade_cancel_or_correct_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_5 = 1

-- Display: Trade Cancel Or Correct Byte 5
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_5_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_5, range, display)

  if show.trade_cancel_or_correct_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_4 = 1

-- Display: Trade Cancel Or Correct Byte 4
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Corrected Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Corrected Size Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Open Close Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_4_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Corrected Size Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_corrected_size_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_open_close_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_4, range, display)

  if show.trade_cancel_or_correct_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_3 = 1

-- Display: Trade Cancel Or Correct Byte 3
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_3_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_3, range, display)

  if show.trade_cancel_or_correct_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_2 = 1

-- Display: Trade Cancel Or Correct Byte 2
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Capacity Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_2_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_capacity_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_symbol_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_2, range, display)

  if show.trade_cancel_or_correct_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_byte_1 = 1

-- Display: Trade Cancel Or Correct Byte 1
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Trade Cancel Or Correct Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 8 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 7 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 6 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 5 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 4 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 3 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 2 Exists|"
  end
  -- Is Trade Cancel Or Correct Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Trade Cancel Or Correct Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Trade Cancel Or Correct Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_1_bits = function(buffer, offset, packet, parent)

  -- Trade Cancel Or Correct Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_8_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_7_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_6_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_5_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_4_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_3_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_2_exists, buffer(offset, 1))

  -- Trade Cancel Or Correct Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Trade Cancel Or Correct Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_byte_1, range, display)

  if show.trade_cancel_or_correct_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Trade Cancel Or Correct Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_bitfield_count = 1

-- Display: Trade Cancel Or Correct Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_bitfield_count = function(value)
  return "Trade Cancel Or Correct Bitfield Count: "..value
end

-- Dissect: Trade Cancel Or Correct Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Trade Cancel Or Correct Optional Fields
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Trade Cancel Or Correct Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_optional_fields_fields = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_optional_fields)
  local index = offset

  -- Trade Cancel Or Correct Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, trade_cancel_or_correct_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 1
  local trade_cancel_or_correct_byte_1_exists = trade_cancel_or_correct_bitfield_count >= 1

  -- Runtime optional field: Trade Cancel Or Correct Byte 1
  if trade_cancel_or_correct_byte_1_exists then

    -- Trade Cancel Or Correct Byte 1: Struct of 8 fields
    index, trade_cancel_or_correct_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 2
  local trade_cancel_or_correct_byte_2_exists = trade_cancel_or_correct_bitfield_count >= 2

  -- Runtime optional field: Trade Cancel Or Correct Byte 2
  if trade_cancel_or_correct_byte_2_exists then

    -- Trade Cancel Or Correct Byte 2: Struct of 8 fields
    index, trade_cancel_or_correct_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 3
  local trade_cancel_or_correct_byte_3_exists = trade_cancel_or_correct_bitfield_count >= 3

  -- Runtime optional field: Trade Cancel Or Correct Byte 3
  if trade_cancel_or_correct_byte_3_exists then

    -- Trade Cancel Or Correct Byte 3: Struct of 8 fields
    index, trade_cancel_or_correct_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 4
  local trade_cancel_or_correct_byte_4_exists = trade_cancel_or_correct_bitfield_count >= 4

  -- Runtime optional field: Trade Cancel Or Correct Byte 4
  if trade_cancel_or_correct_byte_4_exists then

    -- Trade Cancel Or Correct Byte 4: Struct of 8 fields
    index, trade_cancel_or_correct_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 5
  local trade_cancel_or_correct_byte_5_exists = trade_cancel_or_correct_bitfield_count >= 5

  -- Runtime optional field: Trade Cancel Or Correct Byte 5
  if trade_cancel_or_correct_byte_5_exists then

    -- Trade Cancel Or Correct Byte 5: Struct of 8 fields
    index, trade_cancel_or_correct_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 6
  local trade_cancel_or_correct_byte_6_exists = trade_cancel_or_correct_bitfield_count >= 6

  -- Runtime optional field: Trade Cancel Or Correct Byte 6
  if trade_cancel_or_correct_byte_6_exists then

    -- Trade Cancel Or Correct Byte 6: Struct of 8 fields
    index, trade_cancel_or_correct_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 7
  local trade_cancel_or_correct_byte_7_exists = trade_cancel_or_correct_bitfield_count >= 7

  -- Runtime optional field: Trade Cancel Or Correct Byte 7
  if trade_cancel_or_correct_byte_7_exists then

    -- Trade Cancel Or Correct Byte 7: Struct of 8 fields
    index, trade_cancel_or_correct_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 8
  local trade_cancel_or_correct_byte_8_exists = trade_cancel_or_correct_bitfield_count >= 8

  -- Runtime optional field: Trade Cancel Or Correct Byte 8
  if trade_cancel_or_correct_byte_8_exists then

    -- Trade Cancel Or Correct Byte 8: Struct of 8 fields
    index, trade_cancel_or_correct_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 9
  local trade_cancel_or_correct_byte_9_exists = trade_cancel_or_correct_bitfield_count >= 9

  -- Runtime optional field: Trade Cancel Or Correct Byte 9
  if trade_cancel_or_correct_byte_9_exists then

    -- Trade Cancel Or Correct Byte 9: Struct of 8 fields
    index, trade_cancel_or_correct_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 10
  local trade_cancel_or_correct_byte_10_exists = trade_cancel_or_correct_bitfield_count >= 10

  -- Runtime optional field: Trade Cancel Or Correct Byte 10
  if trade_cancel_or_correct_byte_10_exists then

    -- Trade Cancel Or Correct Byte 10: Struct of 8 fields
    index, trade_cancel_or_correct_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 11
  local trade_cancel_or_correct_byte_11_exists = trade_cancel_or_correct_bitfield_count >= 11

  -- Runtime optional field: Trade Cancel Or Correct Byte 11
  if trade_cancel_or_correct_byte_11_exists then

    -- Trade Cancel Or Correct Byte 11: Struct of 8 fields
    index, trade_cancel_or_correct_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 12
  local trade_cancel_or_correct_byte_12_exists = trade_cancel_or_correct_bitfield_count >= 12

  -- Runtime optional field: Trade Cancel Or Correct Byte 12
  if trade_cancel_or_correct_byte_12_exists then

    -- Trade Cancel Or Correct Byte 12: Struct of 8 fields
    index, trade_cancel_or_correct_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 13
  local trade_cancel_or_correct_byte_13_exists = trade_cancel_or_correct_bitfield_count >= 13

  -- Runtime optional field: Trade Cancel Or Correct Byte 13
  if trade_cancel_or_correct_byte_13_exists then

    -- Trade Cancel Or Correct Byte 13: Struct of 8 fields
    index, trade_cancel_or_correct_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 14
  local trade_cancel_or_correct_byte_14_exists = trade_cancel_or_correct_bitfield_count >= 14

  -- Runtime optional field: Trade Cancel Or Correct Byte 14
  if trade_cancel_or_correct_byte_14_exists then

    -- Trade Cancel Or Correct Byte 14: Struct of 8 fields
    index, trade_cancel_or_correct_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 15
  local trade_cancel_or_correct_byte_15_exists = trade_cancel_or_correct_bitfield_count >= 15

  -- Runtime optional field: Trade Cancel Or Correct Byte 15
  if trade_cancel_or_correct_byte_15_exists then

    -- Trade Cancel Or Correct Byte 15: Struct of 8 fields
    index, trade_cancel_or_correct_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 16
  local trade_cancel_or_correct_byte_16_exists = trade_cancel_or_correct_bitfield_count >= 16

  -- Runtime optional field: Trade Cancel Or Correct Byte 16
  if trade_cancel_or_correct_byte_16_exists then

    -- Trade Cancel Or Correct Byte 16: Struct of 8 fields
    index, trade_cancel_or_correct_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 17
  local trade_cancel_or_correct_byte_17_exists = trade_cancel_or_correct_bitfield_count >= 17

  -- Runtime optional field: Trade Cancel Or Correct Byte 17
  if trade_cancel_or_correct_byte_17_exists then

    -- Trade Cancel Or Correct Byte 17: Struct of 8 fields
    index, trade_cancel_or_correct_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = trade_cancel_or_correct_bitfield_count >= 2 and trade_cancel_or_correct_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = trade_cancel_or_correct_bitfield_count >= 2 and trade_cancel_or_correct_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Corrected Size
  local corrected_size_exists = trade_cancel_or_correct_bitfield_count >= 4 and trade_cancel_or_correct_byte_4:bitfield(2) > 0

  -- Runtime optional field: Corrected Size
  if corrected_size_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.corrected_size(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = trade_cancel_or_correct_bitfield_count >= 9 and trade_cancel_or_correct_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Trade Cancel Or Correct Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_optional_fields = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.trade_cancel_or_correct_optional_fields then
    local range = buffer(offset, size_of_trade_cancel_or_correct_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_optional_fields_fields(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_optional_fields)

  return offset + size_of_trade_cancel_or_correct_optional_fields
end

-- Size: Orig Time
cboe_futures_orderentry_boe_v1_3_size_of.orig_time = 8

-- Display: Orig Time
cboe_futures_orderentry_boe_v1_3_display.orig_time = function(value)
  return "Orig Time: "..value
end

-- Dissect: Orig Time
cboe_futures_orderentry_boe_v1_3_dissect.orig_time = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.orig_time
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.orig_time(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.orig_time, range, value, display)

  return offset + length, value
end

-- Size: Corrected Price
cboe_futures_orderentry_boe_v1_3_size_of.corrected_price = 8

-- Display: Corrected Price
cboe_futures_orderentry_boe_v1_3_display.corrected_price = function(value)
  return "Corrected Price: "..value
end

-- Dissect: Corrected Price
cboe_futures_orderentry_boe_v1_3_dissect.corrected_price = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.corrected_price
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_futures_orderentry_boe_v1_3_display.corrected_price(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.corrected_price, range, value, display)

  return offset + length, value
end

-- Size: Base Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_size_of.base_liquidity_indicator = 1

-- Display: Base Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_display.base_liquidity_indicator = function(value)
  if value == "A" then
    return "Base Liquidity Indicator: Added Liquidity (A)"
  end
  if value == "R" then
    return "Base Liquidity Indicator: Removed Liquidity (R)"
  end
  if value == "C" then
    return "Base Liquidity Indicator: Market Opening (C)"
  end

  return "Base Liquidity Indicator: Unknown("..value..")"
end

-- Dissect: Base Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_dissect.base_liquidity_indicator = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.base_liquidity_indicator
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.base_liquidity_indicator(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.base_liquidity_indicator, range, value, display)

  return offset + length, value
end

-- Size: Exec Ref Id
cboe_futures_orderentry_boe_v1_3_size_of.exec_ref_id = 8

-- Display: Exec Ref Id
cboe_futures_orderentry_boe_v1_3_display.exec_ref_id = function(value)
  return "Exec Ref Id: "..value
end

-- Dissect: Exec Ref Id
cboe_futures_orderentry_boe_v1_3_dissect.exec_ref_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.exec_ref_id
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.exec_ref_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.exec_ref_id, range, value, display)

  return offset + length, value
end

-- Size: Order Id
cboe_futures_orderentry_boe_v1_3_size_of.order_id = 8

-- Display: Order Id
cboe_futures_orderentry_boe_v1_3_display.order_id = function(value)
  return "Order Id: "..value
end

-- Dissect: Order Id
cboe_futures_orderentry_boe_v1_3_dissect.order_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_id
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_id, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Trade Cancel Or Correct Message
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Trade Cancel Or Correct Message
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Trade Cancel Or Correct Message
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_message_fields = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_futures_orderentry_boe_v1_3_dissect.order_id(buffer, index, packet, parent)

  -- Exec Ref Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_ref_id = cboe_futures_orderentry_boe_v1_3_dissect.exec_ref_id(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 2 values
  index, side = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)

  -- Base Liquidity Indicator: 1 Byte Ascii String Enum with 3 values
  index, base_liquidity_indicator = cboe_futures_orderentry_boe_v1_3_dissect.base_liquidity_indicator(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)

  -- Clearing Account: 4 Byte Ascii String
  index, clearing_account = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)

  -- Last Shares: 4 Byte Unsigned Fixed Width Integer
  index, last_shares = cboe_futures_orderentry_boe_v1_3_dissect.last_shares(buffer, index, packet, parent)

  -- Last Px: 8 Byte Signed Fixed Width Integer
  index, last_px = cboe_futures_orderentry_boe_v1_3_dissect.last_px(buffer, index, packet, parent)

  -- Corrected Price: 8 Byte Signed Fixed Width Integer
  index, corrected_price = cboe_futures_orderentry_boe_v1_3_dissect.corrected_price(buffer, index, packet, parent)

  -- Orig Time: 8 Byte Unsigned Fixed Width Integer
  index, orig_time = cboe_futures_orderentry_boe_v1_3_dissect.orig_time(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Trade Cancel Or Correct Optional Fields
  local size_of_trade_cancel_or_correct_optional_fields = message_length - (index - offset) - 8

  -- Trade Cancel Or Correct Optional Fields: Struct of 24 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_optional_fields(buffer, index, packet, parent, size_of_trade_cancel_or_correct_optional_fields)

  return index
end

-- Dissect: Trade Cancel Or Correct Message
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_trade_cancel_or_correct_message = cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.trade_cancel_or_correct_message then
    local range = buffer(offset, size_of_trade_cancel_or_correct_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_message_fields(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_message)

  return offset + size_of_trade_cancel_or_correct_message
end

-- Size: Sub Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_size_of.sub_liquidity_indicator = 1

-- Display: Sub Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_display.sub_liquidity_indicator = function(value)
  if value == "C" then
    return "Sub Liquidity Indicator: Carried Order Indicator (C)"
  end
  if value == "U" then
    return "Sub Liquidity Indicator: Qualifying Market Turner Order (U)"
  end

  return "Sub Liquidity Indicator: Unknown("..value..")"
end

-- Dissect: Sub Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_dissect.sub_liquidity_indicator = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.sub_liquidity_indicator
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.sub_liquidity_indicator(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.sub_liquidity_indicator, range, value, display)

  return offset + length, value
end

-- Size: Leaves Qty
cboe_futures_orderentry_boe_v1_3_size_of.leaves_qty = 4

-- Display: Leaves Qty
cboe_futures_orderentry_boe_v1_3_display.leaves_qty = function(value)
  return "Leaves Qty: "..value
end

-- Dissect: Leaves Qty
cboe_futures_orderentry_boe_v1_3_dissect.leaves_qty = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.leaves_qty
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.leaves_qty(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.leaves_qty, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Quote Execution Message
cboe_futures_orderentry_boe_v1_3_size_of.quote_execution_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Execution Message
cboe_futures_orderentry_boe_v1_3_display.quote_execution_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Execution Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_execution_message_fields = function(buffer, offset, packet, parent, size_of_quote_execution_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_futures_orderentry_boe_v1_3_dissect.order_id(buffer, index, packet, parent)

  -- Exec Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_id = cboe_futures_orderentry_boe_v1_3_dissect.exec_id(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)

  -- Last Shares: 4 Byte Unsigned Fixed Width Integer
  index, last_shares = cboe_futures_orderentry_boe_v1_3_dissect.last_shares(buffer, index, packet, parent)

  -- Last Px: 8 Byte Signed Fixed Width Integer
  index, last_px = cboe_futures_orderentry_boe_v1_3_dissect.last_px(buffer, index, packet, parent)

  -- Leaves Qty: 4 Byte Unsigned Fixed Width Integer
  index, leaves_qty = cboe_futures_orderentry_boe_v1_3_dissect.leaves_qty(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 2 values
  index, side = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)

  -- Base Liquidity Indicator: 1 Byte Ascii String Enum with 3 values
  index, base_liquidity_indicator = cboe_futures_orderentry_boe_v1_3_dissect.base_liquidity_indicator(buffer, index, packet, parent)

  -- Sub Liquidity Indicator: 1 Byte Ascii String Enum with 2 values
  index, sub_liquidity_indicator = cboe_futures_orderentry_boe_v1_3_dissect.sub_liquidity_indicator(buffer, index, packet, parent)

  -- Fee Code: 2 Byte Ascii String
  index, fee_code = cboe_futures_orderentry_boe_v1_3_dissect.fee_code(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Execution Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_execution_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_execution_message = cboe_futures_orderentry_boe_v1_3_size_of.quote_execution_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_execution_message then
    local range = buffer(offset, size_of_quote_execution_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_execution_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_execution_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.quote_execution_message_fields(buffer, offset, packet, parent, size_of_quote_execution_message)

  return offset + size_of_quote_execution_message
end

-- Size: Pending Status
cboe_futures_orderentry_boe_v1_3_size_of.pending_status = 1

-- Display: Pending Status
cboe_futures_orderentry_boe_v1_3_display.pending_status = function(value)
  if value == "N" then
    return "Pending Status: Not Applicable (N)"
  end
  if value == "P" then
    return "Pending Status: Pending (P)"
  end

  return "Pending Status: Unknown("..value..")"
end

-- Dissect: Pending Status
cboe_futures_orderentry_boe_v1_3_dissect.pending_status = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.pending_status
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.pending_status(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.pending_status, range, value, display)

  return offset + length, value
end

-- Size: Day Avg Px
cboe_futures_orderentry_boe_v1_3_size_of.day_avg_px = 8

-- Display: Day Avg Px
cboe_futures_orderentry_boe_v1_3_display.day_avg_px = function(value)
  return "Day Avg Px: "..value
end

-- Dissect: Day Avg Px
cboe_futures_orderentry_boe_v1_3_dissect.day_avg_px = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.day_avg_px
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_futures_orderentry_boe_v1_3_display.day_avg_px(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.day_avg_px, range, value, display)

  return offset + length, value
end

-- Size: Avg Px
cboe_futures_orderentry_boe_v1_3_size_of.avg_px = 8

-- Display: Avg Px
cboe_futures_orderentry_boe_v1_3_display.avg_px = function(value)
  return "Avg Px: "..value
end

-- Dissect: Avg Px
cboe_futures_orderentry_boe_v1_3_dissect.avg_px = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.avg_px
  local range = buffer(offset, length)
  local value = range:le_int64()
  local display = cboe_futures_orderentry_boe_v1_3_display.avg_px(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.avg_px, range, value, display)

  return offset + length, value
end

-- Size: Day Cum Qty
cboe_futures_orderentry_boe_v1_3_size_of.day_cum_qty = 4

-- Display: Day Cum Qty
cboe_futures_orderentry_boe_v1_3_display.day_cum_qty = function(value)
  return "Day Cum Qty: "..value
end

-- Dissect: Day Cum Qty
cboe_futures_orderentry_boe_v1_3_dissect.day_cum_qty = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.day_cum_qty
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.day_cum_qty(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.day_cum_qty, range, value, display)

  return offset + length, value
end

-- Size: Day Order Qty
cboe_futures_orderentry_boe_v1_3_size_of.day_order_qty = 4

-- Display: Day Order Qty
cboe_futures_orderentry_boe_v1_3_display.day_order_qty = function(value)
  return "Day Order Qty: "..value
end

-- Dissect: Day Order Qty
cboe_futures_orderentry_boe_v1_3_dissect.day_order_qty = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.day_order_qty
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.day_order_qty(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.day_order_qty, range, value, display)

  return offset + length, value
end

-- Size: Cum Qty
cboe_futures_orderentry_boe_v1_3_size_of.cum_qty = 4

-- Display: Cum Qty
cboe_futures_orderentry_boe_v1_3_display.cum_qty = function(value)
  return "Cum Qty: "..value
end

-- Dissect: Cum Qty
cboe_futures_orderentry_boe_v1_3_dissect.cum_qty = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cum_qty
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.cum_qty(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cum_qty, range, value, display)

  return offset + length, value
end

-- Size: Expire Time
cboe_futures_orderentry_boe_v1_3_size_of.expire_time = 8

-- Display: Expire Time
cboe_futures_orderentry_boe_v1_3_display.expire_time = function(value)
  return "Expire Time: "..value
end

-- Dissect: Expire Time
cboe_futures_orderentry_boe_v1_3_dissect.expire_time = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.expire_time
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.expire_time(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.expire_time, range, value, display)

  return offset + length, value
end

-- Size: Order Execution Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_17 = 1

-- Display: Order Execution Byte 17
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_17_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_17, range, display)

  if show.order_execution_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_16 = 1

-- Display: Order Execution Byte 16
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_16_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_16, range, display)

  if show.order_execution_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_15 = 1

-- Display: Order Execution Byte 15
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_15_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_15, range, display)

  if show.order_execution_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_14 = 1

-- Display: Order Execution Byte 14
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Secondary Exec Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Secondary Exec Id Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_14_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Secondary Exec Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_secondary_exec_id_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_14, range, display)

  if show.order_execution_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_13 = 1

-- Display: Order Execution Byte 13
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Multileg Reporting Type Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Multileg Reporting Type Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Pending Status Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Pending Status Exists|"
  end
  -- Is Order Execution Day Avg Px Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Day Avg Px Exists|"
  end
  -- Is Order Execution Avg Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Avg Px Exists|"
  end
  -- Is Order Execution Day Cum Qty Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Day Cum Qty Exists|"
  end
  -- Is Order Execution Day Order Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Day Order Qty Exists|"
  end
  -- Is Order Execution Cum Qty Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Cum Qty Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_13_bits = function(buffer, offset, packet, parent)

  -- Order Execution Multileg Reporting Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_multileg_reporting_type_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Pending Status Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_pending_status_exists, buffer(offset, 1))

  -- Order Execution Day Avg Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_day_avg_px_exists, buffer(offset, 1))

  -- Order Execution Avg Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_avg_px_exists, buffer(offset, 1))

  -- Order Execution Day Cum Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_day_cum_qty_exists, buffer(offset, 1))

  -- Order Execution Day Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_day_order_qty_exists, buffer(offset, 1))

  -- Order Execution Cum Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_cum_qty_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_13, range, display)

  if show.order_execution_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_12 = 1

-- Display: Order Execution Byte 12
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Clearing Size Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Clearing Size Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Trade Date Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Trade Date Exists|"
  end
  -- Is Order Execution Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Oeoid Exists|"
  end
  -- Is Order Execution Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Manual Order Indicator Exists|"
  end
  -- Is Order Execution Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_12_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Clearing Size Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_clearing_size_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Trade Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_trade_date_exists, buffer(offset, 1))

  -- Order Execution Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_oeoid_exists, buffer(offset, 1))

  -- Order Execution Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_manual_order_indicator_exists, buffer(offset, 1))

  -- Order Execution Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_12, range, display)

  if show.order_execution_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_11 = 1

-- Display: Order Execution Byte 11
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_11_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_11, range, display)

  if show.order_execution_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_10 = 1

-- Display: Order Execution Byte 10
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_10_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_10, range, display)

  if show.order_execution_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_9 = 1

-- Display: Order Execution Byte 9
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Cmta Number Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_9_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_cmta_number_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_9, range, display)

  if show.order_execution_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_8 = 1

-- Display: Order Execution Byte 8
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Stop Px Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Fee Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Fee Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_8_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_stop_px_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Fee Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_fee_code_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_8, range, display)

  if show.order_execution_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_7 = 1

-- Display: Order Execution Byte 7
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_7_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_7, range, display)

  if show.order_execution_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_6 = 1

-- Display: Order Execution Byte 6
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_6_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_6, range, display)

  if show.order_execution_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_5 = 1

-- Display: Order Execution Byte 5
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Expire Time Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_5_bits = function(buffer, offset, packet, parent)

  -- Order Execution Expire Time Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_expire_time_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_5, range, display)

  if show.order_execution_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_4 = 1

-- Display: Order Execution Byte 4
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Reserved Bit 7 Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Open Close Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_4_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_open_close_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_4, range, display)

  if show.order_execution_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_3 = 1

-- Display: Order Execution Byte 3
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Prevent Match Exists|"
  end
  -- Is Order Execution Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Order Qty Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Clearing Account Exists|"
  end
  -- Is Order Execution Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Clearing Firm Exists|"
  end
  -- Is Order Execution Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_3_bits = function(buffer, offset, packet, parent)

  -- Order Execution Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_prevent_match_exists, buffer(offset, 1))

  -- Order Execution Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_order_qty_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_clearing_account_exists, buffer(offset, 1))

  -- Order Execution Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_clearing_firm_exists, buffer(offset, 1))

  -- Order Execution Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_account_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_3, range, display)

  if show.order_execution_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_2 = 1

-- Display: Order Execution Byte 2
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Capacity Exists|"
  end
  -- Is Order Execution Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Reserved Bit 6 Exists|"
  end
  -- Is Order Execution Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Reserved Bit 5 Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Reserved Bit 3 Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_2_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_capacity_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_2, range, display)

  if show.order_execution_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_byte_1 = 1

-- Display: Order Execution Byte 1
cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Execution Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Execution Reserved Bit 8 Exists|"
  end
  -- Is Order Execution Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Execution Min Qty Exists|"
  end
  -- Is Order Execution Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Execution Time In Force Exists|"
  end
  -- Is Order Execution Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Execution Ord Type Exists|"
  end
  -- Is Order Execution Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Execution Reserved Bit 4 Exists|"
  end
  -- Is Order Execution Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Execution Price Exists|"
  end
  -- Is Order Execution Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Execution Reserved Bit 2 Exists|"
  end
  -- Is Order Execution Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Execution Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Execution Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_1_bits = function(buffer, offset, packet, parent)

  -- Order Execution Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Execution Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_min_qty_exists, buffer(offset, 1))

  -- Order Execution Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_time_in_force_exists, buffer(offset, 1))

  -- Order Execution Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_ord_type_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Execution Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_price_exists, buffer(offset, 1))

  -- Order Execution Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Execution Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_side_exists, buffer(offset, 1))
end

-- Dissect: Order Execution Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_byte_1, range, display)

  if show.order_execution_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Execution Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_bitfield_count = 1

-- Display: Order Execution Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.order_execution_bitfield_count = function(value)
  return "Order Execution Bitfield Count: "..value
end

-- Dissect: Order Execution Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_execution_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Order Execution Optional Fields
cboe_futures_orderentry_boe_v1_3_display.order_execution_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Execution Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_optional_fields_fields = function(buffer, offset, packet, parent, size_of_order_execution_optional_fields)
  local index = offset

  -- Order Execution Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_execution_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Execution Byte 1
  local order_execution_byte_1_exists = order_execution_bitfield_count >= 1

  -- Runtime optional field: Order Execution Byte 1
  if order_execution_byte_1_exists then

    -- Order Execution Byte 1: Struct of 8 fields
    index, order_execution_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 2
  local order_execution_byte_2_exists = order_execution_bitfield_count >= 2

  -- Runtime optional field: Order Execution Byte 2
  if order_execution_byte_2_exists then

    -- Order Execution Byte 2: Struct of 8 fields
    index, order_execution_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 3
  local order_execution_byte_3_exists = order_execution_bitfield_count >= 3

  -- Runtime optional field: Order Execution Byte 3
  if order_execution_byte_3_exists then

    -- Order Execution Byte 3: Struct of 8 fields
    index, order_execution_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 4
  local order_execution_byte_4_exists = order_execution_bitfield_count >= 4

  -- Runtime optional field: Order Execution Byte 4
  if order_execution_byte_4_exists then

    -- Order Execution Byte 4: Struct of 8 fields
    index, order_execution_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 5
  local order_execution_byte_5_exists = order_execution_bitfield_count >= 5

  -- Runtime optional field: Order Execution Byte 5
  if order_execution_byte_5_exists then

    -- Order Execution Byte 5: Struct of 8 fields
    index, order_execution_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 6
  local order_execution_byte_6_exists = order_execution_bitfield_count >= 6

  -- Runtime optional field: Order Execution Byte 6
  if order_execution_byte_6_exists then

    -- Order Execution Byte 6: Struct of 8 fields
    index, order_execution_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 7
  local order_execution_byte_7_exists = order_execution_bitfield_count >= 7

  -- Runtime optional field: Order Execution Byte 7
  if order_execution_byte_7_exists then

    -- Order Execution Byte 7: Struct of 8 fields
    index, order_execution_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 8
  local order_execution_byte_8_exists = order_execution_bitfield_count >= 8

  -- Runtime optional field: Order Execution Byte 8
  if order_execution_byte_8_exists then

    -- Order Execution Byte 8: Struct of 8 fields
    index, order_execution_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 9
  local order_execution_byte_9_exists = order_execution_bitfield_count >= 9

  -- Runtime optional field: Order Execution Byte 9
  if order_execution_byte_9_exists then

    -- Order Execution Byte 9: Struct of 8 fields
    index, order_execution_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 10
  local order_execution_byte_10_exists = order_execution_bitfield_count >= 10

  -- Runtime optional field: Order Execution Byte 10
  if order_execution_byte_10_exists then

    -- Order Execution Byte 10: Struct of 8 fields
    index, order_execution_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 11
  local order_execution_byte_11_exists = order_execution_bitfield_count >= 11

  -- Runtime optional field: Order Execution Byte 11
  if order_execution_byte_11_exists then

    -- Order Execution Byte 11: Struct of 8 fields
    index, order_execution_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 12
  local order_execution_byte_12_exists = order_execution_bitfield_count >= 12

  -- Runtime optional field: Order Execution Byte 12
  if order_execution_byte_12_exists then

    -- Order Execution Byte 12: Struct of 8 fields
    index, order_execution_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 13
  local order_execution_byte_13_exists = order_execution_bitfield_count >= 13

  -- Runtime optional field: Order Execution Byte 13
  if order_execution_byte_13_exists then

    -- Order Execution Byte 13: Struct of 8 fields
    index, order_execution_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 14
  local order_execution_byte_14_exists = order_execution_bitfield_count >= 14

  -- Runtime optional field: Order Execution Byte 14
  if order_execution_byte_14_exists then

    -- Order Execution Byte 14: Struct of 8 fields
    index, order_execution_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 15
  local order_execution_byte_15_exists = order_execution_bitfield_count >= 15

  -- Runtime optional field: Order Execution Byte 15
  if order_execution_byte_15_exists then

    -- Order Execution Byte 15: Struct of 8 fields
    index, order_execution_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 16
  local order_execution_byte_16_exists = order_execution_bitfield_count >= 16

  -- Runtime optional field: Order Execution Byte 16
  if order_execution_byte_16_exists then

    -- Order Execution Byte 16: Struct of 8 fields
    index, order_execution_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 17
  local order_execution_byte_17_exists = order_execution_bitfield_count >= 17

  -- Runtime optional field: Order Execution Byte 17
  if order_execution_byte_17_exists then

    -- Order Execution Byte 17: Struct of 8 fields
    index, order_execution_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = order_execution_bitfield_count >= 1 and order_execution_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = order_execution_bitfield_count >= 1 and order_execution_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = order_execution_bitfield_count >= 1 and order_execution_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = order_execution_bitfield_count >= 1 and order_execution_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = order_execution_bitfield_count >= 1 and order_execution_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = order_execution_bitfield_count >= 2 and order_execution_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = order_execution_bitfield_count >= 2 and order_execution_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = order_execution_bitfield_count >= 3 and order_execution_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = order_execution_bitfield_count >= 3 and order_execution_byte_3:bitfield(6) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = order_execution_bitfield_count >= 3 and order_execution_byte_3:bitfield(5) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Qty
  local order_qty_exists = order_execution_bitfield_count >= 3 and order_execution_byte_3:bitfield(1) > 0

  -- Runtime optional field: Order Qty
  if order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = order_execution_bitfield_count >= 3 and order_execution_byte_3:bitfield(0) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = order_execution_bitfield_count >= 4 and order_execution_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = order_execution_bitfield_count >= 4 and order_execution_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Expire Time
  local expire_time_exists = order_execution_bitfield_count >= 5 and order_execution_byte_5:bitfield(0) > 0

  -- Runtime optional field: Expire Time
  if expire_time_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.expire_time(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Fee Code
  local fee_code_exists = order_execution_bitfield_count >= 8 and order_execution_byte_8:bitfield(7) > 0

  -- Runtime optional field: Fee Code
  if fee_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.fee_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = order_execution_bitfield_count >= 8 and order_execution_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = order_execution_bitfield_count >= 9 and order_execution_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = order_execution_bitfield_count >= 12 and order_execution_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = order_execution_bitfield_count >= 12 and order_execution_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = order_execution_bitfield_count >= 12 and order_execution_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Date
  local trade_date_exists = order_execution_bitfield_count >= 12 and order_execution_byte_12:bitfield(4) > 0

  -- Runtime optional field: Trade Date
  if trade_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.trade_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Size
  local clearing_size_exists = order_execution_bitfield_count >= 12 and order_execution_byte_12:bitfield(2) > 0

  -- Runtime optional field: Clearing Size
  if clearing_size_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_size(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cum Qty
  local cum_qty_exists = order_execution_bitfield_count >= 13 and order_execution_byte_13:bitfield(7) > 0

  -- Runtime optional field: Cum Qty
  if cum_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cum_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Day Order Qty
  local day_order_qty_exists = order_execution_bitfield_count >= 13 and order_execution_byte_13:bitfield(6) > 0

  -- Runtime optional field: Day Order Qty
  if day_order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.day_order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Day Cum Qty
  local day_cum_qty_exists = order_execution_bitfield_count >= 13 and order_execution_byte_13:bitfield(5) > 0

  -- Runtime optional field: Day Cum Qty
  if day_cum_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.day_cum_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Avg Px
  local avg_px_exists = order_execution_bitfield_count >= 13 and order_execution_byte_13:bitfield(4) > 0

  -- Runtime optional field: Avg Px
  if avg_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.avg_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Day Avg Px
  local day_avg_px_exists = order_execution_bitfield_count >= 13 and order_execution_byte_13:bitfield(3) > 0

  -- Runtime optional field: Day Avg Px
  if day_avg_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.day_avg_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Pending Status
  local pending_status_exists = order_execution_bitfield_count >= 13 and order_execution_byte_13:bitfield(2) > 0

  -- Runtime optional field: Pending Status
  if pending_status_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.pending_status(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Multileg Reporting Type
  local multileg_reporting_type_exists = order_execution_bitfield_count >= 13 and order_execution_byte_13:bitfield(0) > 0

  -- Runtime optional field: Multileg Reporting Type
  if multileg_reporting_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.multileg_reporting_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Secondary Exec Id
  local secondary_exec_id_exists = order_execution_bitfield_count >= 14 and order_execution_byte_14:bitfield(3) > 0

  -- Runtime optional field: Secondary Exec Id
  if secondary_exec_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.secondary_exec_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = order_execution_bitfield_count >= 16 and order_execution_byte_16:bitfield(7) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Execution Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_optional_fields = function(buffer, offset, packet, parent, size_of_order_execution_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.order_execution_optional_fields then
    local range = buffer(offset, size_of_order_execution_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_execution_optional_fields_fields(buffer, offset, packet, parent, size_of_order_execution_optional_fields)

  return offset + size_of_order_execution_optional_fields
end

-- Size: Contra Broker
cboe_futures_orderentry_boe_v1_3_size_of.contra_broker = 4

-- Display: Contra Broker
cboe_futures_orderentry_boe_v1_3_display.contra_broker = function(value)
  return "Contra Broker: "..value
end

-- Dissect: Contra Broker
cboe_futures_orderentry_boe_v1_3_dissect.contra_broker = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.contra_broker
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.contra_broker(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.contra_broker, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Order Execution Message
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Execution Message
cboe_futures_orderentry_boe_v1_3_display.order_execution_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Execution Message
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_message_fields = function(buffer, offset, packet, parent, size_of_order_execution_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Exec Id: 8 Byte Unsigned Fixed Width Integer
  index, exec_id = cboe_futures_orderentry_boe_v1_3_dissect.exec_id(buffer, index, packet, parent)

  -- Last Shares: 4 Byte Unsigned Fixed Width Integer
  index, last_shares = cboe_futures_orderentry_boe_v1_3_dissect.last_shares(buffer, index, packet, parent)

  -- Last Px: 8 Byte Signed Fixed Width Integer
  index, last_px = cboe_futures_orderentry_boe_v1_3_dissect.last_px(buffer, index, packet, parent)

  -- Leaves Qty: 4 Byte Unsigned Fixed Width Integer
  index, leaves_qty = cboe_futures_orderentry_boe_v1_3_dissect.leaves_qty(buffer, index, packet, parent)

  -- Base Liquidity Indicator: 1 Byte Ascii String Enum with 3 values
  index, base_liquidity_indicator = cboe_futures_orderentry_boe_v1_3_dissect.base_liquidity_indicator(buffer, index, packet, parent)

  -- Sub Liquidity Indicator: 1 Byte Ascii String Enum with 2 values
  index, sub_liquidity_indicator = cboe_futures_orderentry_boe_v1_3_dissect.sub_liquidity_indicator(buffer, index, packet, parent)

  -- Contra Broker: 4 Byte Ascii String
  index, contra_broker = cboe_futures_orderentry_boe_v1_3_dissect.contra_broker(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Execution Optional Fields
  local size_of_order_execution_optional_fields = message_length - (index - offset) - 8

  -- Order Execution Optional Fields: Struct of 50 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_optional_fields(buffer, index, packet, parent, size_of_order_execution_optional_fields)

  return index
end

-- Dissect: Order Execution Message
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_execution_message = cboe_futures_orderentry_boe_v1_3_size_of.order_execution_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_execution_message then
    local range = buffer(offset, size_of_order_execution_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_execution_message_fields(buffer, offset, packet, parent, size_of_order_execution_message)

  return offset + size_of_order_execution_message
end

-- Size: Cancel Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_17 = 1

-- Display: Cancel Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_17_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_17, range, display)

  if show.cancel_rejected_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_16 = 1

-- Display: Cancel Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_16_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_16, range, display)

  if show.cancel_rejected_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_15 = 1

-- Display: Cancel Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_15_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_15, range, display)

  if show.cancel_rejected_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_14 = 1

-- Display: Cancel Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_14_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_14, range, display)

  if show.cancel_rejected_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_13 = 1

-- Display: Cancel Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_13_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_13, range, display)

  if show.cancel_rejected_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_12 = 1

-- Display: Cancel Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Oeoid Exists|"
  end
  -- Is Cancel Rejected Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Manual Order Indicator Exists|"
  end
  -- Is Cancel Rejected Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_12_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_oeoid_exists, buffer(offset, 1))

  -- Cancel Rejected Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_manual_order_indicator_exists, buffer(offset, 1))

  -- Cancel Rejected Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_12, range, display)

  if show.cancel_rejected_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_11 = 1

-- Display: Cancel Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_11_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_11, range, display)

  if show.cancel_rejected_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_10 = 1

-- Display: Cancel Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_10_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_10, range, display)

  if show.cancel_rejected_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_9 = 1

-- Display: Cancel Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Cmta Number Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_9_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_cmta_number_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_9, range, display)

  if show.cancel_rejected_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_8 = 1

-- Display: Cancel Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Stop Px Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_8_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_stop_px_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_8, range, display)

  if show.cancel_rejected_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_7 = 1

-- Display: Cancel Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_7_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_7, range, display)

  if show.cancel_rejected_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_6 = 1

-- Display: Cancel Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_6_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_6, range, display)

  if show.cancel_rejected_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_5 = 1

-- Display: Cancel Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Expire Time Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_5_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Expire Time Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_expire_time_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_5, range, display)

  if show.cancel_rejected_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_4 = 1

-- Display: Cancel Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Open Close Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_4_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_open_close_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_4, range, display)

  if show.cancel_rejected_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_3 = 1

-- Display: Cancel Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Reserved Bit 7 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_3_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_3, range, display)

  if show.cancel_rejected_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_2 = 1

-- Display: Cancel Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Capacity Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Reserved Bit 6 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Reserved Bit 5 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Reserved Bit 3 Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_2_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_capacity_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_symbol_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_2, range, display)

  if show.cancel_rejected_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_byte_1 = 1

-- Display: Cancel Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Rejected Reserved Bit 8 Exists|"
  end
  -- Is Cancel Rejected Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Rejected Min Qty Exists|"
  end
  -- Is Cancel Rejected Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Rejected Time In Force Exists|"
  end
  -- Is Cancel Rejected Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Rejected Ord Type Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Rejected Reserved Bit 4 Exists|"
  end
  -- Is Cancel Rejected Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Rejected Price Exists|"
  end
  -- Is Cancel Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Rejected Reserved Bit 2 Exists|"
  end
  -- Is Cancel Rejected Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Rejected Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_1_bits = function(buffer, offset, packet, parent)

  -- Cancel Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Rejected Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_min_qty_exists, buffer(offset, 1))

  -- Cancel Rejected Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_time_in_force_exists, buffer(offset, 1))

  -- Cancel Rejected Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_ord_type_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Rejected Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_price_exists, buffer(offset, 1))

  -- Cancel Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Rejected Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_side_exists, buffer(offset, 1))
end

-- Dissect: Cancel Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_byte_1, range, display)

  if show.cancel_rejected_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_bitfield_count = 1

-- Display: Cancel Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_bitfield_count = function(value)
  return "Cancel Rejected Bitfield Count: "..value
end

-- Dissect: Cancel Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Cancel Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_optional_fields_fields = function(buffer, offset, packet, parent, size_of_cancel_rejected_optional_fields)
  local index = offset

  -- Cancel Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cancel_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Cancel Rejected Byte 1
  local cancel_rejected_byte_1_exists = cancel_rejected_bitfield_count >= 1

  -- Runtime optional field: Cancel Rejected Byte 1
  if cancel_rejected_byte_1_exists then

    -- Cancel Rejected Byte 1: Struct of 8 fields
    index, cancel_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 2
  local cancel_rejected_byte_2_exists = cancel_rejected_bitfield_count >= 2

  -- Runtime optional field: Cancel Rejected Byte 2
  if cancel_rejected_byte_2_exists then

    -- Cancel Rejected Byte 2: Struct of 8 fields
    index, cancel_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 3
  local cancel_rejected_byte_3_exists = cancel_rejected_bitfield_count >= 3

  -- Runtime optional field: Cancel Rejected Byte 3
  if cancel_rejected_byte_3_exists then

    -- Cancel Rejected Byte 3: Struct of 8 fields
    index, cancel_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 4
  local cancel_rejected_byte_4_exists = cancel_rejected_bitfield_count >= 4

  -- Runtime optional field: Cancel Rejected Byte 4
  if cancel_rejected_byte_4_exists then

    -- Cancel Rejected Byte 4: Struct of 8 fields
    index, cancel_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 5
  local cancel_rejected_byte_5_exists = cancel_rejected_bitfield_count >= 5

  -- Runtime optional field: Cancel Rejected Byte 5
  if cancel_rejected_byte_5_exists then

    -- Cancel Rejected Byte 5: Struct of 8 fields
    index, cancel_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 6
  local cancel_rejected_byte_6_exists = cancel_rejected_bitfield_count >= 6

  -- Runtime optional field: Cancel Rejected Byte 6
  if cancel_rejected_byte_6_exists then

    -- Cancel Rejected Byte 6: Struct of 8 fields
    index, cancel_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 7
  local cancel_rejected_byte_7_exists = cancel_rejected_bitfield_count >= 7

  -- Runtime optional field: Cancel Rejected Byte 7
  if cancel_rejected_byte_7_exists then

    -- Cancel Rejected Byte 7: Struct of 8 fields
    index, cancel_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 8
  local cancel_rejected_byte_8_exists = cancel_rejected_bitfield_count >= 8

  -- Runtime optional field: Cancel Rejected Byte 8
  if cancel_rejected_byte_8_exists then

    -- Cancel Rejected Byte 8: Struct of 8 fields
    index, cancel_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 9
  local cancel_rejected_byte_9_exists = cancel_rejected_bitfield_count >= 9

  -- Runtime optional field: Cancel Rejected Byte 9
  if cancel_rejected_byte_9_exists then

    -- Cancel Rejected Byte 9: Struct of 8 fields
    index, cancel_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 10
  local cancel_rejected_byte_10_exists = cancel_rejected_bitfield_count >= 10

  -- Runtime optional field: Cancel Rejected Byte 10
  if cancel_rejected_byte_10_exists then

    -- Cancel Rejected Byte 10: Struct of 8 fields
    index, cancel_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 11
  local cancel_rejected_byte_11_exists = cancel_rejected_bitfield_count >= 11

  -- Runtime optional field: Cancel Rejected Byte 11
  if cancel_rejected_byte_11_exists then

    -- Cancel Rejected Byte 11: Struct of 8 fields
    index, cancel_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 12
  local cancel_rejected_byte_12_exists = cancel_rejected_bitfield_count >= 12

  -- Runtime optional field: Cancel Rejected Byte 12
  if cancel_rejected_byte_12_exists then

    -- Cancel Rejected Byte 12: Struct of 8 fields
    index, cancel_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 13
  local cancel_rejected_byte_13_exists = cancel_rejected_bitfield_count >= 13

  -- Runtime optional field: Cancel Rejected Byte 13
  if cancel_rejected_byte_13_exists then

    -- Cancel Rejected Byte 13: Struct of 8 fields
    index, cancel_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 14
  local cancel_rejected_byte_14_exists = cancel_rejected_bitfield_count >= 14

  -- Runtime optional field: Cancel Rejected Byte 14
  if cancel_rejected_byte_14_exists then

    -- Cancel Rejected Byte 14: Struct of 8 fields
    index, cancel_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 15
  local cancel_rejected_byte_15_exists = cancel_rejected_bitfield_count >= 15

  -- Runtime optional field: Cancel Rejected Byte 15
  if cancel_rejected_byte_15_exists then

    -- Cancel Rejected Byte 15: Struct of 8 fields
    index, cancel_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 16
  local cancel_rejected_byte_16_exists = cancel_rejected_bitfield_count >= 16

  -- Runtime optional field: Cancel Rejected Byte 16
  if cancel_rejected_byte_16_exists then

    -- Cancel Rejected Byte 16: Struct of 8 fields
    index, cancel_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 17
  local cancel_rejected_byte_17_exists = cancel_rejected_bitfield_count >= 17

  -- Runtime optional field: Cancel Rejected Byte 17
  if cancel_rejected_byte_17_exists then

    -- Cancel Rejected Byte 17: Struct of 8 fields
    index, cancel_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = cancel_rejected_bitfield_count >= 1 and cancel_rejected_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = cancel_rejected_bitfield_count >= 2 and cancel_rejected_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = cancel_rejected_bitfield_count >= 2 and cancel_rejected_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = cancel_rejected_bitfield_count >= 4 and cancel_rejected_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = cancel_rejected_bitfield_count >= 4 and cancel_rejected_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Expire Time
  local expire_time_exists = cancel_rejected_bitfield_count >= 5 and cancel_rejected_byte_5:bitfield(0) > 0

  -- Runtime optional field: Expire Time
  if expire_time_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.expire_time(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = cancel_rejected_bitfield_count >= 8 and cancel_rejected_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = cancel_rejected_bitfield_count >= 9 and cancel_rejected_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = cancel_rejected_bitfield_count >= 12 and cancel_rejected_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = cancel_rejected_bitfield_count >= 12 and cancel_rejected_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = cancel_rejected_bitfield_count >= 12 and cancel_rejected_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cancel Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_optional_fields = function(buffer, offset, packet, parent, size_of_cancel_rejected_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.cancel_rejected_optional_fields then
    local range = buffer(offset, size_of_cancel_rejected_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_optional_fields_fields(buffer, offset, packet, parent, size_of_cancel_rejected_optional_fields)

  return offset + size_of_cancel_rejected_optional_fields
end

-- Size: Cancel Reject Reason
cboe_futures_orderentry_boe_v1_3_size_of.cancel_reject_reason = 1

-- Display: Cancel Reject Reason
cboe_futures_orderentry_boe_v1_3_display.cancel_reject_reason = function(value)
  if value == "A" then
    return "Cancel Reject Reason: Admin (A)"
  end
  if value == "B" then
    return "Cancel Reject Reason: Unknown Maturity Date (B)"
  end
  if value == "C" then
    return "Cancel Reject Reason: Unknown Product Name (C)"
  end
  if value == "D" then
    return "Cancel Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Cancel Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Cancel Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Cancel Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Cancel Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "M" then
    return "Cancel Reject Reason: Liquidity Available Exceeds Order Size (M)"
  end
  if value == "N" then
    return "Cancel Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Cancel Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Cancel Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "U" then
    return "Cancel Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Cancel Reject Reason: Would Wash (V)"
  end
  if value == "X" then
    return "Cancel Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Cancel Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Cancel Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "f" then
    return "Cancel Reject Reason: Risk Management Mpid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Cancel Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "n" then
    return "Cancel Reject Reason: Risk Management Configuration Is Insufficient (n)"
  end
  if value == "o" then
    return "Cancel Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "s" then
    return "Cancel Reject Reason: Risk Management Product Level (s)"
  end
  if value == "y" then
    return "Cancel Reject Reason: Order Received By Cfe During Replay (y)"
  end
  if value == "z" then
    return "Cancel Reject Reason: Session End (z)"
  end

  return "Cancel Reject Reason: Unknown("..value..")"
end

-- Dissect: Cancel Reject Reason
cboe_futures_orderentry_boe_v1_3_dissect.cancel_reject_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cancel_reject_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_reject_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_reject_reason, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Cancel Rejected Message
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Cancel Rejected Message
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_message_fields = function(buffer, offset, packet, parent, size_of_cancel_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Cancel Reject Reason: 1 Byte Ascii String Enum with 24 values
  index, cancel_reject_reason = cboe_futures_orderentry_boe_v1_3_dissect.cancel_reject_reason(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_futures_orderentry_boe_v1_3_dissect.text(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Cancel Rejected Optional Fields
  local size_of_cancel_rejected_optional_fields = message_length - (index - offset) - 8

  -- Cancel Rejected Optional Fields: Struct of 33 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_optional_fields(buffer, index, packet, parent, size_of_cancel_rejected_optional_fields)

  return index
end

-- Dissect: Cancel Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cancel_rejected_message = cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cancel_rejected_message then
    local range = buffer(offset, size_of_cancel_rejected_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_message_fields(buffer, offset, packet, parent, size_of_cancel_rejected_message)

  return offset + size_of_cancel_rejected_message
end

-- Size: Cancel Reason
cboe_futures_orderentry_boe_v1_3_size_of.cancel_reason = 1

-- Display: Cancel Reason
cboe_futures_orderentry_boe_v1_3_display.cancel_reason = function(value)
  if value == "A" then
    return "Cancel Reason: Admin (A)"
  end
  if value == "B" then
    return "Cancel Reason: Unknown Maturity Date (B)"
  end
  if value == "C" then
    return "Cancel Reason: Unknown Product Name (C)"
  end
  if value == "D" then
    return "Cancel Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Cancel Reason: Halted (H)"
  end
  if value == "I" then
    return "Cancel Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Cancel Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Cancel Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "M" then
    return "Cancel Reason: Liquidity Available Exceeds Order Size (M)"
  end
  if value == "N" then
    return "Cancel Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Cancel Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Cancel Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "U" then
    return "Cancel Reason: User Requested (U)"
  end
  if value == "V" then
    return "Cancel Reason: Would Wash (V)"
  end
  if value == "X" then
    return "Cancel Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Cancel Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Cancel Reason: Unforeseen Reason (Z)"
  end
  if value == "f" then
    return "Cancel Reason: Risk Management Mpid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Cancel Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "n" then
    return "Cancel Reason: Risk Management Configuration Is Insufficient (n)"
  end
  if value == "o" then
    return "Cancel Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "s" then
    return "Cancel Reason: Risk Management Product Level (s)"
  end
  if value == "y" then
    return "Cancel Reason: Order Received By Cfe During Replay (y)"
  end
  if value == "z" then
    return "Cancel Reason: Session End (z)"
  end

  return "Cancel Reason: Unknown("..value..")"
end

-- Dissect: Cancel Reason
cboe_futures_orderentry_boe_v1_3_dissect.cancel_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cancel_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_reason, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Quote Cancelled Message
cboe_futures_orderentry_boe_v1_3_size_of.quote_cancelled_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Cancelled Message
cboe_futures_orderentry_boe_v1_3_display.quote_cancelled_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Cancelled Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_cancelled_message_fields = function(buffer, offset, packet, parent, size_of_quote_cancelled_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_futures_orderentry_boe_v1_3_dissect.order_id(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 2 values
  index, side = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)

  -- Cancel Reason: 1 Byte Ascii String Enum with 24 values
  index, cancel_reason = cboe_futures_orderentry_boe_v1_3_dissect.cancel_reason(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Cancelled Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_cancelled_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_cancelled_message = cboe_futures_orderentry_boe_v1_3_size_of.quote_cancelled_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_cancelled_message then
    local range = buffer(offset, size_of_quote_cancelled_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_cancelled_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_cancelled_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.quote_cancelled_message_fields(buffer, offset, packet, parent, size_of_quote_cancelled_message)

  return offset + size_of_quote_cancelled_message
end

-- Size: Secondary Order Id
cboe_futures_orderentry_boe_v1_3_size_of.secondary_order_id = 8

-- Display: Secondary Order Id
cboe_futures_orderentry_boe_v1_3_display.secondary_order_id = function(value)
  return "Secondary Order Id: "..value
end

-- Dissect: Secondary Order Id
cboe_futures_orderentry_boe_v1_3_dissect.secondary_order_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.secondary_order_id
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.secondary_order_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.secondary_order_id, range, value, display)

  return offset + length, value
end

-- Size: Order Cancelled Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_17 = 1

-- Display: Order Cancelled Byte 17
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_17_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_17, range, display)

  if show.order_cancelled_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_16 = 1

-- Display: Order Cancelled Byte 16
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_16_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_16, range, display)

  if show.order_cancelled_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_15 = 1

-- Display: Order Cancelled Byte 15
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_15_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_15, range, display)

  if show.order_cancelled_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_14 = 1

-- Display: Order Cancelled Byte 14
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_14_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_14, range, display)

  if show.order_cancelled_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_13 = 1

-- Display: Order Cancelled Byte 13
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_13_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_13, range, display)

  if show.order_cancelled_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_12 = 1

-- Display: Order Cancelled Byte 12
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Oeoid Exists|"
  end
  -- Is Order Cancelled Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Manual Order Indicator Exists|"
  end
  -- Is Order Cancelled Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_12_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_oeoid_exists, buffer(offset, 1))

  -- Order Cancelled Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_manual_order_indicator_exists, buffer(offset, 1))

  -- Order Cancelled Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_12, range, display)

  if show.order_cancelled_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_11 = 1

-- Display: Order Cancelled Byte 11
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_11_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_11, range, display)

  if show.order_cancelled_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_10 = 1

-- Display: Order Cancelled Byte 10
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_10_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_10, range, display)

  if show.order_cancelled_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_9 = 1

-- Display: Order Cancelled Byte 9
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Cmta Number Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_9_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_cmta_number_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_9, range, display)

  if show.order_cancelled_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_8 = 1

-- Display: Order Cancelled Byte 8
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Stop Px Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_8_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_stop_px_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_8, range, display)

  if show.order_cancelled_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_7 = 1

-- Display: Order Cancelled Byte 7
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_7_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_7, range, display)

  if show.order_cancelled_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_6 = 1

-- Display: Order Cancelled Byte 6
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Secondary Order Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Secondary Order Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_6_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Secondary Order Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_secondary_order_id_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_6, range, display)

  if show.order_cancelled_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_5 = 1

-- Display: Order Cancelled Byte 5
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Expire Time Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Last Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Last Px Exists|"
  end
  -- Is Order Cancelled Last Shares Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Last Shares Exists|"
  end
  -- Is Order Cancelled Leaves Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Leaves Qty Exists|"
  end
  -- Is Order Cancelled Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_5_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Expire Time Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_expire_time_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Last Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_last_px_exists, buffer(offset, 1))

  -- Order Cancelled Last Shares Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_last_shares_exists, buffer(offset, 1))

  -- Order Cancelled Leaves Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_leaves_qty_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_5, range, display)

  if show.order_cancelled_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_4 = 1

-- Display: Order Cancelled Byte 4
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Reserved Bit 7 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Open Close Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_4_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_open_close_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_4, range, display)

  if show.order_cancelled_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_3 = 1

-- Display: Order Cancelled Byte 3
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Prevent Match Exists|"
  end
  -- Is Order Cancelled Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Order Qty Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Clearing Account Exists|"
  end
  -- Is Order Cancelled Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Clearing Firm Exists|"
  end
  -- Is Order Cancelled Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_3_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_prevent_match_exists, buffer(offset, 1))

  -- Order Cancelled Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_order_qty_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_clearing_account_exists, buffer(offset, 1))

  -- Order Cancelled Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_clearing_firm_exists, buffer(offset, 1))

  -- Order Cancelled Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_account_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_3, range, display)

  if show.order_cancelled_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_2 = 1

-- Display: Order Cancelled Byte 2
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Capacity Exists|"
  end
  -- Is Order Cancelled Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Reserved Bit 6 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Reserved Bit 5 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Reserved Bit 3 Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_2_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_capacity_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_2, range, display)

  if show.order_cancelled_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_byte_1 = 1

-- Display: Order Cancelled Byte 1
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Cancelled Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Cancelled Reserved Bit 8 Exists|"
  end
  -- Is Order Cancelled Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Cancelled Min Qty Exists|"
  end
  -- Is Order Cancelled Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Cancelled Time In Force Exists|"
  end
  -- Is Order Cancelled Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Cancelled Ord Type Exists|"
  end
  -- Is Order Cancelled Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Cancelled Reserved Bit 4 Exists|"
  end
  -- Is Order Cancelled Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Cancelled Price Exists|"
  end
  -- Is Order Cancelled Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Cancelled Reserved Bit 2 Exists|"
  end
  -- Is Order Cancelled Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Cancelled Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Cancelled Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_1_bits = function(buffer, offset, packet, parent)

  -- Order Cancelled Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Cancelled Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_min_qty_exists, buffer(offset, 1))

  -- Order Cancelled Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_time_in_force_exists, buffer(offset, 1))

  -- Order Cancelled Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_ord_type_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Cancelled Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_price_exists, buffer(offset, 1))

  -- Order Cancelled Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Cancelled Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_side_exists, buffer(offset, 1))
end

-- Dissect: Order Cancelled Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_byte_1, range, display)

  if show.order_cancelled_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Cancelled Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_bitfield_count = 1

-- Display: Order Cancelled Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_bitfield_count = function(value)
  return "Order Cancelled Bitfield Count: "..value
end

-- Dissect: Order Cancelled Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Order Cancelled Optional Fields
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Cancelled Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_optional_fields_fields = function(buffer, offset, packet, parent, size_of_order_cancelled_optional_fields)
  local index = offset

  -- Order Cancelled Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_cancelled_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Cancelled Byte 1
  local order_cancelled_byte_1_exists = order_cancelled_bitfield_count >= 1

  -- Runtime optional field: Order Cancelled Byte 1
  if order_cancelled_byte_1_exists then

    -- Order Cancelled Byte 1: Struct of 8 fields
    index, order_cancelled_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 2
  local order_cancelled_byte_2_exists = order_cancelled_bitfield_count >= 2

  -- Runtime optional field: Order Cancelled Byte 2
  if order_cancelled_byte_2_exists then

    -- Order Cancelled Byte 2: Struct of 8 fields
    index, order_cancelled_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 3
  local order_cancelled_byte_3_exists = order_cancelled_bitfield_count >= 3

  -- Runtime optional field: Order Cancelled Byte 3
  if order_cancelled_byte_3_exists then

    -- Order Cancelled Byte 3: Struct of 8 fields
    index, order_cancelled_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 4
  local order_cancelled_byte_4_exists = order_cancelled_bitfield_count >= 4

  -- Runtime optional field: Order Cancelled Byte 4
  if order_cancelled_byte_4_exists then

    -- Order Cancelled Byte 4: Struct of 8 fields
    index, order_cancelled_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 5
  local order_cancelled_byte_5_exists = order_cancelled_bitfield_count >= 5

  -- Runtime optional field: Order Cancelled Byte 5
  if order_cancelled_byte_5_exists then

    -- Order Cancelled Byte 5: Struct of 8 fields
    index, order_cancelled_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 6
  local order_cancelled_byte_6_exists = order_cancelled_bitfield_count >= 6

  -- Runtime optional field: Order Cancelled Byte 6
  if order_cancelled_byte_6_exists then

    -- Order Cancelled Byte 6: Struct of 8 fields
    index, order_cancelled_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 7
  local order_cancelled_byte_7_exists = order_cancelled_bitfield_count >= 7

  -- Runtime optional field: Order Cancelled Byte 7
  if order_cancelled_byte_7_exists then

    -- Order Cancelled Byte 7: Struct of 8 fields
    index, order_cancelled_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 8
  local order_cancelled_byte_8_exists = order_cancelled_bitfield_count >= 8

  -- Runtime optional field: Order Cancelled Byte 8
  if order_cancelled_byte_8_exists then

    -- Order Cancelled Byte 8: Struct of 8 fields
    index, order_cancelled_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 9
  local order_cancelled_byte_9_exists = order_cancelled_bitfield_count >= 9

  -- Runtime optional field: Order Cancelled Byte 9
  if order_cancelled_byte_9_exists then

    -- Order Cancelled Byte 9: Struct of 8 fields
    index, order_cancelled_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 10
  local order_cancelled_byte_10_exists = order_cancelled_bitfield_count >= 10

  -- Runtime optional field: Order Cancelled Byte 10
  if order_cancelled_byte_10_exists then

    -- Order Cancelled Byte 10: Struct of 8 fields
    index, order_cancelled_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 11
  local order_cancelled_byte_11_exists = order_cancelled_bitfield_count >= 11

  -- Runtime optional field: Order Cancelled Byte 11
  if order_cancelled_byte_11_exists then

    -- Order Cancelled Byte 11: Struct of 8 fields
    index, order_cancelled_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 12
  local order_cancelled_byte_12_exists = order_cancelled_bitfield_count >= 12

  -- Runtime optional field: Order Cancelled Byte 12
  if order_cancelled_byte_12_exists then

    -- Order Cancelled Byte 12: Struct of 8 fields
    index, order_cancelled_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 13
  local order_cancelled_byte_13_exists = order_cancelled_bitfield_count >= 13

  -- Runtime optional field: Order Cancelled Byte 13
  if order_cancelled_byte_13_exists then

    -- Order Cancelled Byte 13: Struct of 8 fields
    index, order_cancelled_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 14
  local order_cancelled_byte_14_exists = order_cancelled_bitfield_count >= 14

  -- Runtime optional field: Order Cancelled Byte 14
  if order_cancelled_byte_14_exists then

    -- Order Cancelled Byte 14: Struct of 8 fields
    index, order_cancelled_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 15
  local order_cancelled_byte_15_exists = order_cancelled_bitfield_count >= 15

  -- Runtime optional field: Order Cancelled Byte 15
  if order_cancelled_byte_15_exists then

    -- Order Cancelled Byte 15: Struct of 8 fields
    index, order_cancelled_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 16
  local order_cancelled_byte_16_exists = order_cancelled_bitfield_count >= 16

  -- Runtime optional field: Order Cancelled Byte 16
  if order_cancelled_byte_16_exists then

    -- Order Cancelled Byte 16: Struct of 8 fields
    index, order_cancelled_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 17
  local order_cancelled_byte_17_exists = order_cancelled_bitfield_count >= 17

  -- Runtime optional field: Order Cancelled Byte 17
  if order_cancelled_byte_17_exists then

    -- Order Cancelled Byte 17: Struct of 8 fields
    index, order_cancelled_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = order_cancelled_bitfield_count >= 1 and order_cancelled_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = order_cancelled_bitfield_count >= 2 and order_cancelled_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = order_cancelled_bitfield_count >= 2 and order_cancelled_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(6) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(5) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Qty
  local order_qty_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(1) > 0

  -- Runtime optional field: Order Qty
  if order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = order_cancelled_bitfield_count >= 3 and order_cancelled_byte_3:bitfield(0) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = order_cancelled_bitfield_count >= 4 and order_cancelled_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = order_cancelled_bitfield_count >= 4 and order_cancelled_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Leaves Qty
  local leaves_qty_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(6) > 0

  -- Runtime optional field: Leaves Qty
  if leaves_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.leaves_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Last Shares
  local last_shares_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(5) > 0

  -- Runtime optional field: Last Shares
  if last_shares_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.last_shares(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Last Px
  local last_px_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(4) > 0

  -- Runtime optional field: Last Px
  if last_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.last_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Expire Time
  local expire_time_exists = order_cancelled_bitfield_count >= 5 and order_cancelled_byte_5:bitfield(0) > 0

  -- Runtime optional field: Expire Time
  if expire_time_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.expire_time(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Secondary Order Id
  local secondary_order_id_exists = order_cancelled_bitfield_count >= 6 and order_cancelled_byte_6:bitfield(7) > 0

  -- Runtime optional field: Secondary Order Id
  if secondary_order_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.secondary_order_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = order_cancelled_bitfield_count >= 8 and order_cancelled_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = order_cancelled_bitfield_count >= 9 and order_cancelled_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = order_cancelled_bitfield_count >= 12 and order_cancelled_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = order_cancelled_bitfield_count >= 12 and order_cancelled_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = order_cancelled_bitfield_count >= 12 and order_cancelled_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = order_cancelled_bitfield_count >= 16 and order_cancelled_byte_16:bitfield(7) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Cancelled Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_optional_fields = function(buffer, offset, packet, parent, size_of_order_cancelled_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.order_cancelled_optional_fields then
    local range = buffer(offset, size_of_order_cancelled_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_optional_fields_fields(buffer, offset, packet, parent, size_of_order_cancelled_optional_fields)

  return offset + size_of_order_cancelled_optional_fields
end

-- Read runtime size of: Order Cancelled Message
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Cancelled Message
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Cancelled Message
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_message_fields = function(buffer, offset, packet, parent, size_of_order_cancelled_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Cancel Reason: 1 Byte Ascii String Enum with 24 values
  index, cancel_reason = cboe_futures_orderentry_boe_v1_3_dissect.cancel_reason(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Cancelled Optional Fields
  local size_of_order_cancelled_optional_fields = message_length - (index - offset) - 8

  -- Order Cancelled Optional Fields: Struct of 43 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_optional_fields(buffer, index, packet, parent, size_of_order_cancelled_optional_fields)

  return index
end

-- Dissect: Order Cancelled Message
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_cancelled_message = cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_cancelled_message then
    local range = buffer(offset, size_of_order_cancelled_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_message_fields(buffer, offset, packet, parent, size_of_order_cancelled_message)

  return offset + size_of_order_cancelled_message
end

-- Size: User Modify Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_17 = 1

-- Display: User Modify Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_17_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_17, range, display)

  if show.user_modify_rejected_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_16 = 1

-- Display: User Modify Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_16_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_16, range, display)

  if show.user_modify_rejected_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_15 = 1

-- Display: User Modify Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_15_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_15, range, display)

  if show.user_modify_rejected_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_14 = 1

-- Display: User Modify Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_14_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_14, range, display)

  if show.user_modify_rejected_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_13 = 1

-- Display: User Modify Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_13_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_13, range, display)

  if show.user_modify_rejected_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_12 = 1

-- Display: User Modify Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_12_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_12, range, display)

  if show.user_modify_rejected_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_11 = 1

-- Display: User Modify Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_11_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_11, range, display)

  if show.user_modify_rejected_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_10 = 1

-- Display: User Modify Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_10_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_10, range, display)

  if show.user_modify_rejected_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_9 = 1

-- Display: User Modify Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_9_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_9, range, display)

  if show.user_modify_rejected_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_8 = 1

-- Display: User Modify Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_8_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_8, range, display)

  if show.user_modify_rejected_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_7 = 1

-- Display: User Modify Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_7_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_7, range, display)

  if show.user_modify_rejected_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_6 = 1

-- Display: User Modify Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_6_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_6, range, display)

  if show.user_modify_rejected_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_5 = 1

-- Display: User Modify Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_5_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_5, range, display)

  if show.user_modify_rejected_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_4 = 1

-- Display: User Modify Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_4_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_4, range, display)

  if show.user_modify_rejected_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_3 = 1

-- Display: User Modify Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_3_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_3, range, display)

  if show.user_modify_rejected_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_2 = 1

-- Display: User Modify Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_2_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_2, range, display)

  if show.user_modify_rejected_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_byte_1 = 1

-- Display: User Modify Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is User Modify Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."User Modify Rejected Reserved Bit 8 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."User Modify Rejected Reserved Bit 7 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."User Modify Rejected Reserved Bit 6 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."User Modify Rejected Reserved Bit 5 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."User Modify Rejected Reserved Bit 4 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."User Modify Rejected Reserved Bit 3 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."User Modify Rejected Reserved Bit 2 Exists|"
  end
  -- Is User Modify Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."User Modify Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: User Modify Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_1_bits = function(buffer, offset, packet, parent)

  -- User Modify Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- User Modify Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: User Modify Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_byte_1, range, display)

  if show.user_modify_rejected_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: User Modify Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_bitfield_count = 1

-- Display: User Modify Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_bitfield_count = function(value)
  return "User Modify Rejected Bitfield Count: "..value
end

-- Dissect: User Modify Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: User Modify Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: User Modify Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_optional_fields_fields = function(buffer, offset, packet, parent, size_of_user_modify_rejected_optional_fields)
  local index = offset

  -- User Modify Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, user_modify_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: User Modify Rejected Byte 1
  local user_modify_rejected_byte_1_exists = user_modify_rejected_bitfield_count >= 1

  -- Runtime optional field: User Modify Rejected Byte 1
  if user_modify_rejected_byte_1_exists then

    -- User Modify Rejected Byte 1: Struct of 8 fields
    index, user_modify_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 2
  local user_modify_rejected_byte_2_exists = user_modify_rejected_bitfield_count >= 2

  -- Runtime optional field: User Modify Rejected Byte 2
  if user_modify_rejected_byte_2_exists then

    -- User Modify Rejected Byte 2: Struct of 8 fields
    index, user_modify_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 3
  local user_modify_rejected_byte_3_exists = user_modify_rejected_bitfield_count >= 3

  -- Runtime optional field: User Modify Rejected Byte 3
  if user_modify_rejected_byte_3_exists then

    -- User Modify Rejected Byte 3: Struct of 8 fields
    index, user_modify_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 4
  local user_modify_rejected_byte_4_exists = user_modify_rejected_bitfield_count >= 4

  -- Runtime optional field: User Modify Rejected Byte 4
  if user_modify_rejected_byte_4_exists then

    -- User Modify Rejected Byte 4: Struct of 8 fields
    index, user_modify_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 5
  local user_modify_rejected_byte_5_exists = user_modify_rejected_bitfield_count >= 5

  -- Runtime optional field: User Modify Rejected Byte 5
  if user_modify_rejected_byte_5_exists then

    -- User Modify Rejected Byte 5: Struct of 8 fields
    index, user_modify_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 6
  local user_modify_rejected_byte_6_exists = user_modify_rejected_bitfield_count >= 6

  -- Runtime optional field: User Modify Rejected Byte 6
  if user_modify_rejected_byte_6_exists then

    -- User Modify Rejected Byte 6: Struct of 8 fields
    index, user_modify_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 7
  local user_modify_rejected_byte_7_exists = user_modify_rejected_bitfield_count >= 7

  -- Runtime optional field: User Modify Rejected Byte 7
  if user_modify_rejected_byte_7_exists then

    -- User Modify Rejected Byte 7: Struct of 8 fields
    index, user_modify_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 8
  local user_modify_rejected_byte_8_exists = user_modify_rejected_bitfield_count >= 8

  -- Runtime optional field: User Modify Rejected Byte 8
  if user_modify_rejected_byte_8_exists then

    -- User Modify Rejected Byte 8: Struct of 8 fields
    index, user_modify_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 9
  local user_modify_rejected_byte_9_exists = user_modify_rejected_bitfield_count >= 9

  -- Runtime optional field: User Modify Rejected Byte 9
  if user_modify_rejected_byte_9_exists then

    -- User Modify Rejected Byte 9: Struct of 8 fields
    index, user_modify_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 10
  local user_modify_rejected_byte_10_exists = user_modify_rejected_bitfield_count >= 10

  -- Runtime optional field: User Modify Rejected Byte 10
  if user_modify_rejected_byte_10_exists then

    -- User Modify Rejected Byte 10: Struct of 8 fields
    index, user_modify_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 11
  local user_modify_rejected_byte_11_exists = user_modify_rejected_bitfield_count >= 11

  -- Runtime optional field: User Modify Rejected Byte 11
  if user_modify_rejected_byte_11_exists then

    -- User Modify Rejected Byte 11: Struct of 8 fields
    index, user_modify_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 12
  local user_modify_rejected_byte_12_exists = user_modify_rejected_bitfield_count >= 12

  -- Runtime optional field: User Modify Rejected Byte 12
  if user_modify_rejected_byte_12_exists then

    -- User Modify Rejected Byte 12: Struct of 8 fields
    index, user_modify_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 13
  local user_modify_rejected_byte_13_exists = user_modify_rejected_bitfield_count >= 13

  -- Runtime optional field: User Modify Rejected Byte 13
  if user_modify_rejected_byte_13_exists then

    -- User Modify Rejected Byte 13: Struct of 8 fields
    index, user_modify_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 14
  local user_modify_rejected_byte_14_exists = user_modify_rejected_bitfield_count >= 14

  -- Runtime optional field: User Modify Rejected Byte 14
  if user_modify_rejected_byte_14_exists then

    -- User Modify Rejected Byte 14: Struct of 8 fields
    index, user_modify_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 15
  local user_modify_rejected_byte_15_exists = user_modify_rejected_bitfield_count >= 15

  -- Runtime optional field: User Modify Rejected Byte 15
  if user_modify_rejected_byte_15_exists then

    -- User Modify Rejected Byte 15: Struct of 8 fields
    index, user_modify_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 16
  local user_modify_rejected_byte_16_exists = user_modify_rejected_bitfield_count >= 16

  -- Runtime optional field: User Modify Rejected Byte 16
  if user_modify_rejected_byte_16_exists then

    -- User Modify Rejected Byte 16: Struct of 8 fields
    index, user_modify_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 17
  local user_modify_rejected_byte_17_exists = user_modify_rejected_bitfield_count >= 17

  -- Runtime optional field: User Modify Rejected Byte 17
  if user_modify_rejected_byte_17_exists then

    -- User Modify Rejected Byte 17: Struct of 8 fields
    index, user_modify_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: User Modify Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_optional_fields = function(buffer, offset, packet, parent, size_of_user_modify_rejected_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.user_modify_rejected_optional_fields then
    local range = buffer(offset, size_of_user_modify_rejected_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_optional_fields_fields(buffer, offset, packet, parent, size_of_user_modify_rejected_optional_fields)

  return offset + size_of_user_modify_rejected_optional_fields
end

-- Size: Modify Reject Reason
cboe_futures_orderentry_boe_v1_3_size_of.modify_reject_reason = 1

-- Display: Modify Reject Reason
cboe_futures_orderentry_boe_v1_3_display.modify_reject_reason = function(value)
  if value == "A" then
    return "Modify Reject Reason: Admin (A)"
  end
  if value == "B" then
    return "Modify Reject Reason: Unknown Maturity Date (B)"
  end
  if value == "C" then
    return "Modify Reject Reason: Unknown Product Name (C)"
  end
  if value == "D" then
    return "Modify Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Modify Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Modify Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Modify Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Modify Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "M" then
    return "Modify Reject Reason: Liquidity Available Exceeds Order Size (M)"
  end
  if value == "N" then
    return "Modify Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Modify Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Modify Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "U" then
    return "Modify Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Modify Reject Reason: Would Wash (V)"
  end
  if value == "X" then
    return "Modify Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Modify Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Modify Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "f" then
    return "Modify Reject Reason: Risk Management Mpid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Modify Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "n" then
    return "Modify Reject Reason: Risk Management Configuration Is Insufficient (n)"
  end
  if value == "o" then
    return "Modify Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "s" then
    return "Modify Reject Reason: Risk Management Product Level (s)"
  end
  if value == "y" then
    return "Modify Reject Reason: Order Received By Cfe During Replay (y)"
  end
  if value == "z" then
    return "Modify Reject Reason: Session End (z)"
  end

  return "Modify Reject Reason: Unknown("..value..")"
end

-- Dissect: Modify Reject Reason
cboe_futures_orderentry_boe_v1_3_dissect.modify_reject_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.modify_reject_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.modify_reject_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_reject_reason, range, value, display)

  return offset + length, value
end

-- Read runtime size of: User Modify Rejected Message
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: User Modify Rejected Message
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: User Modify Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_message_fields = function(buffer, offset, packet, parent, size_of_user_modify_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Modify Reject Reason: 1 Byte Ascii String Enum with 24 values
  index, modify_reject_reason = cboe_futures_orderentry_boe_v1_3_dissect.modify_reject_reason(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_futures_orderentry_boe_v1_3_dissect.text(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: User Modify Rejected Optional Fields
  local size_of_user_modify_rejected_optional_fields = message_length - (index - offset) - 8

  -- User Modify Rejected Optional Fields: Struct of 18 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_optional_fields(buffer, index, packet, parent, size_of_user_modify_rejected_optional_fields)

  return index
end

-- Dissect: User Modify Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_user_modify_rejected_message = cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.user_modify_rejected_message then
    local range = buffer(offset, size_of_user_modify_rejected_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_message_fields(buffer, offset, packet, parent, size_of_user_modify_rejected_message)

  return offset + size_of_user_modify_rejected_message
end

-- Size: Quote Restatement Reason
cboe_futures_orderentry_boe_v1_3_size_of.quote_restatement_reason = 1

-- Display: Quote Restatement Reason
cboe_futures_orderentry_boe_v1_3_display.quote_restatement_reason = function(value)
  return "Quote Restatement Reason: "..value
end

-- Dissect: Quote Restatement Reason
cboe_futures_orderentry_boe_v1_3_dissect.quote_restatement_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.quote_restatement_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.quote_restatement_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_restatement_reason, range, value, display)

  return offset + length, value
end

-- Size: Working Price
cboe_futures_orderentry_boe_v1_3_size_of.working_price = 8

-- Display: Working Price
cboe_futures_orderentry_boe_v1_3_display.working_price = function(value)
  return "Working Price: "..value
end

-- Dissect: Working Price
cboe_futures_orderentry_boe_v1_3_dissect.working_price = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.working_price
  local range = buffer(offset, length)
  local value = range:le_uint64()
  local display = cboe_futures_orderentry_boe_v1_3_display.working_price(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.working_price, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Quote Restated Message
cboe_futures_orderentry_boe_v1_3_size_of.quote_restated_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Restated Message
cboe_futures_orderentry_boe_v1_3_display.quote_restated_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Restated Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_restated_message_fields = function(buffer, offset, packet, parent, size_of_quote_restated_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_futures_orderentry_boe_v1_3_dissect.order_id(buffer, index, packet, parent)

  -- Leaves Qty: 4 Byte Unsigned Fixed Width Integer
  index, leaves_qty = cboe_futures_orderentry_boe_v1_3_dissect.leaves_qty(buffer, index, packet, parent)

  -- Working Price: 8 Byte Unsigned Fixed Width Integer
  index, working_price = cboe_futures_orderentry_boe_v1_3_dissect.working_price(buffer, index, packet, parent)

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 2 values
  index, side = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)

  -- Quote Restatement Reason: 1 Byte Ascii String
  index, quote_restatement_reason = cboe_futures_orderentry_boe_v1_3_dissect.quote_restatement_reason(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Restated Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_restated_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_restated_message = cboe_futures_orderentry_boe_v1_3_size_of.quote_restated_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_restated_message then
    local range = buffer(offset, size_of_quote_restated_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_restated_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_restated_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.quote_restated_message_fields(buffer, offset, packet, parent, size_of_quote_restated_message)

  return offset + size_of_quote_restated_message
end

-- Size: Order Modified Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_17 = 1

-- Display: Order Modified Byte 17
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_17_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_17, range, display)

  if show.order_modified_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_16 = 1

-- Display: Order Modified Byte 16
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_16_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_16, range, display)

  if show.order_modified_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_15 = 1

-- Display: Order Modified Byte 15
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_15_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_15, range, display)

  if show.order_modified_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_14 = 1

-- Display: Order Modified Byte 14
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_14_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_14, range, display)

  if show.order_modified_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_13 = 1

-- Display: Order Modified Byte 13
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_13_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_13, range, display)

  if show.order_modified_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_12 = 1

-- Display: Order Modified Byte 12
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Oeoid Exists|"
  end
  -- Is Order Modified Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Manual Order Indicator Exists|"
  end
  -- Is Order Modified Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_12_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_oeoid_exists, buffer(offset, 1))

  -- Order Modified Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_manual_order_indicator_exists, buffer(offset, 1))

  -- Order Modified Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_12, range, display)

  if show.order_modified_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_11 = 1

-- Display: Order Modified Byte 11
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_11_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_11, range, display)

  if show.order_modified_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_10 = 1

-- Display: Order Modified Byte 10
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_10_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_10, range, display)

  if show.order_modified_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_9 = 1

-- Display: Order Modified Byte 9
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Cmta Number Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_9_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_cmta_number_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_9, range, display)

  if show.order_modified_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_8 = 1

-- Display: Order Modified Byte 8
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Stop Px Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_8_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_stop_px_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_8, range, display)

  if show.order_modified_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_7 = 1

-- Display: Order Modified Byte 7
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_7_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_7, range, display)

  if show.order_modified_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_6 = 1

-- Display: Order Modified Byte 6
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_6_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_6, range, display)

  if show.order_modified_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_5 = 1

-- Display: Order Modified Byte 5
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Expire Time Exists|"
  end
  -- Is Order Modified Base Liquidity Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Base Liquidity Indicator Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Leaves Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Leaves Qty Exists|"
  end
  -- Is Order Modified Orig Cl Ord Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Orig Cl Ord Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_5_bits = function(buffer, offset, packet, parent)

  -- Order Modified Expire Time Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_expire_time_exists, buffer(offset, 1))

  -- Order Modified Base Liquidity Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_base_liquidity_indicator_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Leaves Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_leaves_qty_exists, buffer(offset, 1))

  -- Order Modified Orig Cl Ord Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_orig_cl_ord_id_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_5, range, display)

  if show.order_modified_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_4 = 1

-- Display: Order Modified Byte 4
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Reserved Bit 7 Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Open Close Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_4_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_open_close_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_4, range, display)

  if show.order_modified_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_3 = 1

-- Display: Order Modified Byte 3
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Prevent Match Exists|"
  end
  -- Is Order Modified Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Order Qty Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Clearing Account Exists|"
  end
  -- Is Order Modified Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Clearing Firm Exists|"
  end
  -- Is Order Modified Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_3_bits = function(buffer, offset, packet, parent)

  -- Order Modified Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_prevent_match_exists, buffer(offset, 1))

  -- Order Modified Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_order_qty_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_clearing_account_exists, buffer(offset, 1))

  -- Order Modified Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_clearing_firm_exists, buffer(offset, 1))

  -- Order Modified Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_account_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_3, range, display)

  if show.order_modified_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_2 = 1

-- Display: Order Modified Byte 2
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Capacity Exists|"
  end
  -- Is Order Modified Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Reserved Bit 6 Exists|"
  end
  -- Is Order Modified Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Reserved Bit 5 Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Reserved Bit 3 Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_2_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_capacity_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_2, range, display)

  if show.order_modified_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_byte_1 = 1

-- Display: Order Modified Byte 1
cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Modified Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Modified Reserved Bit 8 Exists|"
  end
  -- Is Order Modified Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Modified Min Qty Exists|"
  end
  -- Is Order Modified Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Modified Time In Force Exists|"
  end
  -- Is Order Modified Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Modified Ord Type Exists|"
  end
  -- Is Order Modified Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Modified Reserved Bit 4 Exists|"
  end
  -- Is Order Modified Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Modified Price Exists|"
  end
  -- Is Order Modified Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Modified Reserved Bit 2 Exists|"
  end
  -- Is Order Modified Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Modified Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Modified Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_1_bits = function(buffer, offset, packet, parent)

  -- Order Modified Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Modified Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_min_qty_exists, buffer(offset, 1))

  -- Order Modified Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_time_in_force_exists, buffer(offset, 1))

  -- Order Modified Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_ord_type_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Modified Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_price_exists, buffer(offset, 1))

  -- Order Modified Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Modified Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_side_exists, buffer(offset, 1))
end

-- Dissect: Order Modified Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_byte_1, range, display)

  if show.order_modified_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Modified Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_bitfield_count = 1

-- Display: Order Modified Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.order_modified_bitfield_count = function(value)
  return "Order Modified Bitfield Count: "..value
end

-- Dissect: Order Modified Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_modified_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Order Modified Optional Fields
cboe_futures_orderentry_boe_v1_3_display.order_modified_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Modified Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_optional_fields_fields = function(buffer, offset, packet, parent, size_of_order_modified_optional_fields)
  local index = offset

  -- Order Modified Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_modified_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Modified Byte 1
  local order_modified_byte_1_exists = order_modified_bitfield_count >= 1

  -- Runtime optional field: Order Modified Byte 1
  if order_modified_byte_1_exists then

    -- Order Modified Byte 1: Struct of 8 fields
    index, order_modified_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 2
  local order_modified_byte_2_exists = order_modified_bitfield_count >= 2

  -- Runtime optional field: Order Modified Byte 2
  if order_modified_byte_2_exists then

    -- Order Modified Byte 2: Struct of 8 fields
    index, order_modified_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 3
  local order_modified_byte_3_exists = order_modified_bitfield_count >= 3

  -- Runtime optional field: Order Modified Byte 3
  if order_modified_byte_3_exists then

    -- Order Modified Byte 3: Struct of 8 fields
    index, order_modified_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 4
  local order_modified_byte_4_exists = order_modified_bitfield_count >= 4

  -- Runtime optional field: Order Modified Byte 4
  if order_modified_byte_4_exists then

    -- Order Modified Byte 4: Struct of 8 fields
    index, order_modified_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 5
  local order_modified_byte_5_exists = order_modified_bitfield_count >= 5

  -- Runtime optional field: Order Modified Byte 5
  if order_modified_byte_5_exists then

    -- Order Modified Byte 5: Struct of 8 fields
    index, order_modified_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 6
  local order_modified_byte_6_exists = order_modified_bitfield_count >= 6

  -- Runtime optional field: Order Modified Byte 6
  if order_modified_byte_6_exists then

    -- Order Modified Byte 6: Struct of 8 fields
    index, order_modified_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 7
  local order_modified_byte_7_exists = order_modified_bitfield_count >= 7

  -- Runtime optional field: Order Modified Byte 7
  if order_modified_byte_7_exists then

    -- Order Modified Byte 7: Struct of 8 fields
    index, order_modified_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 8
  local order_modified_byte_8_exists = order_modified_bitfield_count >= 8

  -- Runtime optional field: Order Modified Byte 8
  if order_modified_byte_8_exists then

    -- Order Modified Byte 8: Struct of 8 fields
    index, order_modified_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 9
  local order_modified_byte_9_exists = order_modified_bitfield_count >= 9

  -- Runtime optional field: Order Modified Byte 9
  if order_modified_byte_9_exists then

    -- Order Modified Byte 9: Struct of 8 fields
    index, order_modified_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 10
  local order_modified_byte_10_exists = order_modified_bitfield_count >= 10

  -- Runtime optional field: Order Modified Byte 10
  if order_modified_byte_10_exists then

    -- Order Modified Byte 10: Struct of 8 fields
    index, order_modified_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 11
  local order_modified_byte_11_exists = order_modified_bitfield_count >= 11

  -- Runtime optional field: Order Modified Byte 11
  if order_modified_byte_11_exists then

    -- Order Modified Byte 11: Struct of 8 fields
    index, order_modified_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 12
  local order_modified_byte_12_exists = order_modified_bitfield_count >= 12

  -- Runtime optional field: Order Modified Byte 12
  if order_modified_byte_12_exists then

    -- Order Modified Byte 12: Struct of 8 fields
    index, order_modified_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 13
  local order_modified_byte_13_exists = order_modified_bitfield_count >= 13

  -- Runtime optional field: Order Modified Byte 13
  if order_modified_byte_13_exists then

    -- Order Modified Byte 13: Struct of 8 fields
    index, order_modified_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 14
  local order_modified_byte_14_exists = order_modified_bitfield_count >= 14

  -- Runtime optional field: Order Modified Byte 14
  if order_modified_byte_14_exists then

    -- Order Modified Byte 14: Struct of 8 fields
    index, order_modified_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 15
  local order_modified_byte_15_exists = order_modified_bitfield_count >= 15

  -- Runtime optional field: Order Modified Byte 15
  if order_modified_byte_15_exists then

    -- Order Modified Byte 15: Struct of 8 fields
    index, order_modified_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 16
  local order_modified_byte_16_exists = order_modified_bitfield_count >= 16

  -- Runtime optional field: Order Modified Byte 16
  if order_modified_byte_16_exists then

    -- Order Modified Byte 16: Struct of 8 fields
    index, order_modified_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 17
  local order_modified_byte_17_exists = order_modified_bitfield_count >= 17

  -- Runtime optional field: Order Modified Byte 17
  if order_modified_byte_17_exists then

    -- Order Modified Byte 17: Struct of 8 fields
    index, order_modified_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = order_modified_bitfield_count >= 1 and order_modified_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = order_modified_bitfield_count >= 2 and order_modified_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = order_modified_bitfield_count >= 2 and order_modified_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(6) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(5) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Qty
  local order_qty_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(1) > 0

  -- Runtime optional field: Order Qty
  if order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = order_modified_bitfield_count >= 3 and order_modified_byte_3:bitfield(0) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = order_modified_bitfield_count >= 4 and order_modified_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = order_modified_bitfield_count >= 4 and order_modified_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Orig Cl Ord Id
  local orig_cl_ord_id_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(7) > 0

  -- Runtime optional field: Orig Cl Ord Id
  if orig_cl_ord_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.orig_cl_ord_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Leaves Qty
  local leaves_qty_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(6) > 0

  -- Runtime optional field: Leaves Qty
  if leaves_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.leaves_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Base Liquidity Indicator
  local base_liquidity_indicator_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(1) > 0

  -- Runtime optional field: Base Liquidity Indicator
  if base_liquidity_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.base_liquidity_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Expire Time
  local expire_time_exists = order_modified_bitfield_count >= 5 and order_modified_byte_5:bitfield(0) > 0

  -- Runtime optional field: Expire Time
  if expire_time_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.expire_time(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = order_modified_bitfield_count >= 8 and order_modified_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = order_modified_bitfield_count >= 9 and order_modified_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = order_modified_bitfield_count >= 12 and order_modified_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = order_modified_bitfield_count >= 12 and order_modified_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = order_modified_bitfield_count >= 12 and order_modified_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = order_modified_bitfield_count >= 16 and order_modified_byte_16:bitfield(7) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Modified Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_optional_fields = function(buffer, offset, packet, parent, size_of_order_modified_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.order_modified_optional_fields then
    local range = buffer(offset, size_of_order_modified_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_modified_optional_fields_fields(buffer, offset, packet, parent, size_of_order_modified_optional_fields)

  return offset + size_of_order_modified_optional_fields
end

-- Read runtime size of: Order Modified Message
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Modified Message
cboe_futures_orderentry_boe_v1_3_display.order_modified_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Modified Message
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_message_fields = function(buffer, offset, packet, parent, size_of_order_modified_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_futures_orderentry_boe_v1_3_dissect.order_id(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Modified Optional Fields
  local size_of_order_modified_optional_fields = message_length - (index - offset) - 8

  -- Order Modified Optional Fields: Struct of 42 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_optional_fields(buffer, index, packet, parent, size_of_order_modified_optional_fields)

  return index
end

-- Dissect: Order Modified Message
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_modified_message = cboe_futures_orderentry_boe_v1_3_size_of.order_modified_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_modified_message then
    local range = buffer(offset, size_of_order_modified_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_modified_message_fields(buffer, offset, packet, parent, size_of_order_modified_message)

  return offset + size_of_order_modified_message
end

-- Size: Reserved 17
cboe_futures_orderentry_boe_v1_3_size_of.reserved_17 = 17

-- Display: Reserved 17
cboe_futures_orderentry_boe_v1_3_display.reserved_17 = function(value)
  return "Reserved 17: "..value
end

-- Dissect: Reserved 17
cboe_futures_orderentry_boe_v1_3_dissect.reserved_17 = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.reserved_17
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_futures_orderentry_boe_v1_3_display.reserved_17(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.reserved_17, range, value, display)

  return offset + length, value
end

-- Size: Quote Reject Reason
cboe_futures_orderentry_boe_v1_3_size_of.quote_reject_reason = 1

-- Display: Quote Reject Reason
cboe_futures_orderentry_boe_v1_3_display.quote_reject_reason = function(value)
  return "Quote Reject Reason: "..value
end

-- Dissect: Quote Reject Reason
cboe_futures_orderentry_boe_v1_3_dissect.quote_reject_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.quote_reject_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.quote_reject_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_reject_reason, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Quote Update Rejected Message
cboe_futures_orderentry_boe_v1_3_size_of.quote_update_rejected_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Update Rejected Message
cboe_futures_orderentry_boe_v1_3_display.quote_update_rejected_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Update Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_update_rejected_message_fields = function(buffer, offset, packet, parent, size_of_quote_update_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Quote Reject Reason: 1 Byte Ascii String
  index, quote_reject_reason = cboe_futures_orderentry_boe_v1_3_dissect.quote_reject_reason(buffer, index, packet, parent)

  -- Reserved 17: 17 Byte
  index, reserved_17 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_17(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Update Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_update_rejected_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_update_rejected_message = cboe_futures_orderentry_boe_v1_3_size_of.quote_update_rejected_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_update_rejected_message then
    local range = buffer(offset, size_of_quote_update_rejected_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_update_rejected_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_update_rejected_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.quote_update_rejected_message_fields(buffer, offset, packet, parent, size_of_quote_update_rejected_message)

  return offset + size_of_quote_update_rejected_message
end

-- Size: Order Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_17 = 1

-- Display: Order Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_17_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_17, range, display)

  if show.order_rejected_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_16 = 1

-- Display: Order Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_16_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_16, range, display)

  if show.order_rejected_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_15 = 1

-- Display: Order Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_15_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_15, range, display)

  if show.order_rejected_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_14 = 1

-- Display: Order Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_14_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_14, range, display)

  if show.order_rejected_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_13 = 1

-- Display: Order Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_13_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_13, range, display)

  if show.order_rejected_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_12 = 1

-- Display: Order Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Oeoid Exists|"
  end
  -- Is Order Rejected Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Manual Order Indicator Exists|"
  end
  -- Is Order Rejected Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_12_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_oeoid_exists, buffer(offset, 1))

  -- Order Rejected Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_manual_order_indicator_exists, buffer(offset, 1))

  -- Order Rejected Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_12, range, display)

  if show.order_rejected_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_11 = 1

-- Display: Order Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_11_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_11, range, display)

  if show.order_rejected_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_10 = 1

-- Display: Order Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_10_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_10, range, display)

  if show.order_rejected_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_9 = 1

-- Display: Order Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Cmta Number Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_9_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_cmta_number_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_9, range, display)

  if show.order_rejected_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_8 = 1

-- Display: Order Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Stop Px Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_8_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_stop_px_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_8, range, display)

  if show.order_rejected_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_7 = 1

-- Display: Order Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_7_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_7, range, display)

  if show.order_rejected_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_6 = 1

-- Display: Order Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_6_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_6, range, display)

  if show.order_rejected_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_5 = 1

-- Display: Order Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_5_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_5, range, display)

  if show.order_rejected_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_4 = 1

-- Display: Order Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Reserved Bit 7 Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Open Close Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_4_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_open_close_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_4, range, display)

  if show.order_rejected_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_3 = 1

-- Display: Order Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Prevent Match Exists|"
  end
  -- Is Order Rejected Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Order Qty Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Clearing Account Exists|"
  end
  -- Is Order Rejected Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Clearing Firm Exists|"
  end
  -- Is Order Rejected Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_3_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_prevent_match_exists, buffer(offset, 1))

  -- Order Rejected Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_order_qty_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_clearing_account_exists, buffer(offset, 1))

  -- Order Rejected Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_clearing_firm_exists, buffer(offset, 1))

  -- Order Rejected Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_account_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_3, range, display)

  if show.order_rejected_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_2 = 1

-- Display: Order Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Capacity Exists|"
  end
  -- Is Order Rejected Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Reserved Bit 6 Exists|"
  end
  -- Is Order Rejected Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Reserved Bit 5 Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Reserved Bit 3 Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_2_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_capacity_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_2, range, display)

  if show.order_rejected_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_byte_1 = 1

-- Display: Order Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Rejected Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Rejected Reserved Bit 8 Exists|"
  end
  -- Is Order Rejected Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Rejected Min Qty Exists|"
  end
  -- Is Order Rejected Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Rejected Time In Force Exists|"
  end
  -- Is Order Rejected Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Rejected Ord Type Exists|"
  end
  -- Is Order Rejected Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Rejected Reserved Bit 4 Exists|"
  end
  -- Is Order Rejected Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Rejected Price Exists|"
  end
  -- Is Order Rejected Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Rejected Reserved Bit 2 Exists|"
  end
  -- Is Order Rejected Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Rejected Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_1_bits = function(buffer, offset, packet, parent)

  -- Order Rejected Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Rejected Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_min_qty_exists, buffer(offset, 1))

  -- Order Rejected Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_time_in_force_exists, buffer(offset, 1))

  -- Order Rejected Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_ord_type_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Rejected Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_price_exists, buffer(offset, 1))

  -- Order Rejected Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Rejected Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_side_exists, buffer(offset, 1))
end

-- Dissect: Order Rejected Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_byte_1, range, display)

  if show.order_rejected_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_bitfield_count = 1

-- Display: Order Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.order_rejected_bitfield_count = function(value)
  return "Order Rejected Bitfield Count: "..value
end

-- Dissect: Order Rejected Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Order Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_display.order_rejected_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_optional_fields_fields = function(buffer, offset, packet, parent, size_of_order_rejected_optional_fields)
  local index = offset

  -- Order Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Rejected Byte 1
  local order_rejected_byte_1_exists = order_rejected_bitfield_count >= 1

  -- Runtime optional field: Order Rejected Byte 1
  if order_rejected_byte_1_exists then

    -- Order Rejected Byte 1: Struct of 8 fields
    index, order_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 2
  local order_rejected_byte_2_exists = order_rejected_bitfield_count >= 2

  -- Runtime optional field: Order Rejected Byte 2
  if order_rejected_byte_2_exists then

    -- Order Rejected Byte 2: Struct of 8 fields
    index, order_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 3
  local order_rejected_byte_3_exists = order_rejected_bitfield_count >= 3

  -- Runtime optional field: Order Rejected Byte 3
  if order_rejected_byte_3_exists then

    -- Order Rejected Byte 3: Struct of 8 fields
    index, order_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 4
  local order_rejected_byte_4_exists = order_rejected_bitfield_count >= 4

  -- Runtime optional field: Order Rejected Byte 4
  if order_rejected_byte_4_exists then

    -- Order Rejected Byte 4: Struct of 8 fields
    index, order_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 5
  local order_rejected_byte_5_exists = order_rejected_bitfield_count >= 5

  -- Runtime optional field: Order Rejected Byte 5
  if order_rejected_byte_5_exists then

    -- Order Rejected Byte 5: Struct of 8 fields
    index, order_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 6
  local order_rejected_byte_6_exists = order_rejected_bitfield_count >= 6

  -- Runtime optional field: Order Rejected Byte 6
  if order_rejected_byte_6_exists then

    -- Order Rejected Byte 6: Struct of 8 fields
    index, order_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 7
  local order_rejected_byte_7_exists = order_rejected_bitfield_count >= 7

  -- Runtime optional field: Order Rejected Byte 7
  if order_rejected_byte_7_exists then

    -- Order Rejected Byte 7: Struct of 8 fields
    index, order_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 8
  local order_rejected_byte_8_exists = order_rejected_bitfield_count >= 8

  -- Runtime optional field: Order Rejected Byte 8
  if order_rejected_byte_8_exists then

    -- Order Rejected Byte 8: Struct of 8 fields
    index, order_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 9
  local order_rejected_byte_9_exists = order_rejected_bitfield_count >= 9

  -- Runtime optional field: Order Rejected Byte 9
  if order_rejected_byte_9_exists then

    -- Order Rejected Byte 9: Struct of 8 fields
    index, order_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 10
  local order_rejected_byte_10_exists = order_rejected_bitfield_count >= 10

  -- Runtime optional field: Order Rejected Byte 10
  if order_rejected_byte_10_exists then

    -- Order Rejected Byte 10: Struct of 8 fields
    index, order_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 11
  local order_rejected_byte_11_exists = order_rejected_bitfield_count >= 11

  -- Runtime optional field: Order Rejected Byte 11
  if order_rejected_byte_11_exists then

    -- Order Rejected Byte 11: Struct of 8 fields
    index, order_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 12
  local order_rejected_byte_12_exists = order_rejected_bitfield_count >= 12

  -- Runtime optional field: Order Rejected Byte 12
  if order_rejected_byte_12_exists then

    -- Order Rejected Byte 12: Struct of 8 fields
    index, order_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 13
  local order_rejected_byte_13_exists = order_rejected_bitfield_count >= 13

  -- Runtime optional field: Order Rejected Byte 13
  if order_rejected_byte_13_exists then

    -- Order Rejected Byte 13: Struct of 8 fields
    index, order_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 14
  local order_rejected_byte_14_exists = order_rejected_bitfield_count >= 14

  -- Runtime optional field: Order Rejected Byte 14
  if order_rejected_byte_14_exists then

    -- Order Rejected Byte 14: Struct of 8 fields
    index, order_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 15
  local order_rejected_byte_15_exists = order_rejected_bitfield_count >= 15

  -- Runtime optional field: Order Rejected Byte 15
  if order_rejected_byte_15_exists then

    -- Order Rejected Byte 15: Struct of 8 fields
    index, order_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 16
  local order_rejected_byte_16_exists = order_rejected_bitfield_count >= 16

  -- Runtime optional field: Order Rejected Byte 16
  if order_rejected_byte_16_exists then

    -- Order Rejected Byte 16: Struct of 8 fields
    index, order_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 17
  local order_rejected_byte_17_exists = order_rejected_bitfield_count >= 17

  -- Runtime optional field: Order Rejected Byte 17
  if order_rejected_byte_17_exists then

    -- Order Rejected Byte 17: Struct of 8 fields
    index, order_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = order_rejected_bitfield_count >= 1 and order_rejected_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = order_rejected_bitfield_count >= 2 and order_rejected_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = order_rejected_bitfield_count >= 2 and order_rejected_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(6) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(5) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Qty
  local order_qty_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(1) > 0

  -- Runtime optional field: Order Qty
  if order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = order_rejected_bitfield_count >= 3 and order_rejected_byte_3:bitfield(0) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = order_rejected_bitfield_count >= 4 and order_rejected_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = order_rejected_bitfield_count >= 4 and order_rejected_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = order_rejected_bitfield_count >= 8 and order_rejected_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = order_rejected_bitfield_count >= 9 and order_rejected_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = order_rejected_bitfield_count >= 12 and order_rejected_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = order_rejected_bitfield_count >= 12 and order_rejected_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = order_rejected_bitfield_count >= 12 and order_rejected_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = order_rejected_bitfield_count >= 16 and order_rejected_byte_16:bitfield(7) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Rejected Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_optional_fields = function(buffer, offset, packet, parent, size_of_order_rejected_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.order_rejected_optional_fields then
    local range = buffer(offset, size_of_order_rejected_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_optional_fields_fields(buffer, offset, packet, parent, size_of_order_rejected_optional_fields)

  return offset + size_of_order_rejected_optional_fields
end

-- Size: Order Reject Reason
cboe_futures_orderentry_boe_v1_3_size_of.order_reject_reason = 1

-- Display: Order Reject Reason
cboe_futures_orderentry_boe_v1_3_display.order_reject_reason = function(value)
  if value == "A" then
    return "Order Reject Reason: Admin (A)"
  end
  if value == "B" then
    return "Order Reject Reason: Unknown Maturity Date (B)"
  end
  if value == "C" then
    return "Order Reject Reason: Unknown Product Name (C)"
  end
  if value == "D" then
    return "Order Reject Reason: Duplicate Identifier (D)"
  end
  if value == "H" then
    return "Order Reject Reason: Halted (H)"
  end
  if value == "I" then
    return "Order Reject Reason: Incorrect Data Center (I)"
  end
  if value == "J" then
    return "Order Reject Reason: Too Late To Cancel (J)"
  end
  if value == "K" then
    return "Order Reject Reason: Order Rate Threshold Exceeded (K)"
  end
  if value == "M" then
    return "Order Reject Reason: Liquidity Available Exceeds Order Size (M)"
  end
  if value == "N" then
    return "Order Reject Reason: Ran Out Of Liquidity To Execute Against (N)"
  end
  if value == "O" then
    return "Order Reject Reason: Cl Ord Id Doesnt Match A Known Order (O)"
  end
  if value == "P" then
    return "Order Reject Reason: Cant Modify An Order That Is Pending Fill (P)"
  end
  if value == "U" then
    return "Order Reject Reason: User Requested (U)"
  end
  if value == "V" then
    return "Order Reject Reason: Would Wash (V)"
  end
  if value == "X" then
    return "Order Reject Reason: Order Expired (X)"
  end
  if value == "Y" then
    return "Order Reject Reason: Symbol Not Supported (Y)"
  end
  if value == "Z" then
    return "Order Reject Reason: Unforeseen Reason (Z)"
  end
  if value == "f" then
    return "Order Reject Reason: Risk Management Mpid Or Custom Group Id Level (f)"
  end
  if value == "m" then
    return "Order Reject Reason: Market Access Risk Limit Exceeded (m)"
  end
  if value == "n" then
    return "Order Reject Reason: Risk Management Configuration Is Insufficient (n)"
  end
  if value == "o" then
    return "Order Reject Reason: Max Open Orders Count Exceeded (o)"
  end
  if value == "s" then
    return "Order Reject Reason: Risk Management Product Level (s)"
  end
  if value == "y" then
    return "Order Reject Reason: Order Received By Cfe During Replay (y)"
  end
  if value == "z" then
    return "Order Reject Reason: Session End (z)"
  end

  return "Order Reject Reason: Unknown("..value..")"
end

-- Dissect: Order Reject Reason
cboe_futures_orderentry_boe_v1_3_dissect.order_reject_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_reject_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_reject_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_reject_reason, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Order Rejected Message
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Rejected Message
cboe_futures_orderentry_boe_v1_3_display.order_rejected_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_message_fields = function(buffer, offset, packet, parent, size_of_order_rejected_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Order Reject Reason: 1 Byte Ascii String Enum with 24 values
  index, order_reject_reason = cboe_futures_orderentry_boe_v1_3_dissect.order_reject_reason(buffer, index, packet, parent)

  -- Text: 60 Byte Ascii String
  index, text = cboe_futures_orderentry_boe_v1_3_dissect.text(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Rejected Optional Fields
  local size_of_order_rejected_optional_fields = message_length - (index - offset) - 8

  -- Order Rejected Optional Fields: Struct of 38 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_optional_fields(buffer, index, packet, parent, size_of_order_rejected_optional_fields)

  return index
end

-- Dissect: Order Rejected Message
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_rejected_message = cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_rejected_message then
    local range = buffer(offset, size_of_order_rejected_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_message_fields(buffer, offset, packet, parent, size_of_order_rejected_message)

  return offset + size_of_order_rejected_message
end

-- Size: Reserved 6
cboe_futures_orderentry_boe_v1_3_size_of.reserved_6 = 6

-- Display: Reserved 6
cboe_futures_orderentry_boe_v1_3_display.reserved_6 = function(value)
  return "Reserved 6: "..value
end

-- Dissect: Reserved 6
cboe_futures_orderentry_boe_v1_3_dissect.reserved_6 = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.reserved_6
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_futures_orderentry_boe_v1_3_display.reserved_6(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.reserved_6, range, value, display)

  return offset + length, value
end

-- Size: Quote Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_size_of.quote_liquidity_indicator = 1

-- Display: Quote Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_display.quote_liquidity_indicator = function(value)
  if value == "C" then
    return "Quote Liquidity Indicator: Carried Order Indicator (C)"
  end
  if value == "U" then
    return "Quote Liquidity Indicator: Market Turner (U)"
  end
  if value == "N" then
    return "Quote Liquidity Indicator: Normal (N)"
  end

  return "Quote Liquidity Indicator: Unknown("..value..")"
end

-- Dissect: Quote Liquidity Indicator
cboe_futures_orderentry_boe_v1_3_dissect.quote_liquidity_indicator = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.quote_liquidity_indicator
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.quote_liquidity_indicator(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_liquidity_indicator, range, value, display)

  return offset + length, value
end

-- Size: Quote Result
cboe_futures_orderentry_boe_v1_3_size_of.quote_result = 1

-- Display: Quote Result
cboe_futures_orderentry_boe_v1_3_display.quote_result = function(value)
  if value == "A" then
    return "Quote Result: New Quote (A)"
  end
  if value == "L" then
    return "Quote Result: Modified Loss Of Priority (L)"
  end
  if value == "R" then
    return "Quote Result: Modified Retains Priority (R)"
  end
  if value == "N" then
    return "Quote Result: No Change Matches Existing Quote (N)"
  end
  if value == "D" then
    return "Quote Result: New Quote But May Remove Liquidity (D)"
  end
  if value == "d" then
    return "Quote Result: Modified But May Remove Liquidity (d)"
  end
  if value == "U" then
    return "Quote Result: User Cancelled (U)"
  end
  if value == "a" then
    return "Quote Result: Admin Rejection (a)"
  end
  if value == "P" then
    return "Quote Result: Rejected Cant Post (P)"
  end
  if value == "f" then
    return "Quote Result: Risk Management Firm Or Custom Group Id Level (f)"
  end
  if value == "S" then
    return "Quote Result: Rejected Symbol Not Found (S)"
  end
  if value == "p" then
    return "Quote Result: Rejected Invalid Price (p)"
  end
  if value == "s" then
    return "Quote Result: Risk Management Risk Root Level (s)"
  end
  if value == "u" then
    return "Quote Result: Rejected Other Reason (u)"
  end

  return "Quote Result: Unknown("..value..")"
end

-- Dissect: Quote Result
cboe_futures_orderentry_boe_v1_3_dissect.quote_result = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.quote_result
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.quote_result(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_result, range, value, display)

  return offset + length, value
end

-- Calculate size of: Quote Result Group
cboe_futures_orderentry_boe_v1_3_size_of.quote_result_group = function(buffer, offset)
  local index = 0

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.order_id

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.quote_result

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.quote_liquidity_indicator

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.reserved_6

  return index
end

-- Display: Quote Result Group
cboe_futures_orderentry_boe_v1_3_display.quote_result_group = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Result Group
cboe_futures_orderentry_boe_v1_3_dissect.quote_result_group_fields = function(buffer, offset, packet, parent)
  local index = offset

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_futures_orderentry_boe_v1_3_dissect.order_id(buffer, index, packet, parent)

  -- Quote Result: 1 Byte Ascii String Enum with 14 values
  index, quote_result = cboe_futures_orderentry_boe_v1_3_dissect.quote_result(buffer, index, packet, parent)

  -- Quote Liquidity Indicator: 1 Byte Ascii String Enum with 3 values
  index, quote_liquidity_indicator = cboe_futures_orderentry_boe_v1_3_dissect.quote_liquidity_indicator(buffer, index, packet, parent)

  -- Reserved 6: 6 Byte
  index, reserved_6 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_6(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Result Group
cboe_futures_orderentry_boe_v1_3_dissect.quote_result_group = function(buffer, offset, packet, parent)
  if show.quote_result_group then
    -- Optionally add element to protocol tree
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_result_group, buffer(offset, 0))
    local index = cboe_futures_orderentry_boe_v1_3_dissect.quote_result_group_fields(buffer, offset, packet, parent)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_result_group(packet, parent, length)
    parent:append_text(display)

    return index
  else
    -- Skip element, add fields directly
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_result_group_fields(buffer, offset, packet, parent)
  end
end

-- Size: Number Of Quote Results
cboe_futures_orderentry_boe_v1_3_size_of.number_of_quote_results = 1

-- Display: Number Of Quote Results
cboe_futures_orderentry_boe_v1_3_display.number_of_quote_results = function(value)
  return "Number Of Quote Results: "..value
end

-- Dissect: Number Of Quote Results
cboe_futures_orderentry_boe_v1_3_dissect.number_of_quote_results = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.number_of_quote_results
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.number_of_quote_results(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.number_of_quote_results, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Quote Update Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_size_of.quote_update_acknowledgment_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Update Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_display.quote_update_acknowledgment_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Update Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_update_acknowledgment_message_fields = function(buffer, offset, packet, parent, size_of_quote_update_acknowledgment_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Quote Reject Reason: 1 Byte Ascii String
  index, quote_reject_reason = cboe_futures_orderentry_boe_v1_3_dissect.quote_reject_reason(buffer, index, packet, parent)

  -- Reserved 17: 17 Byte
  index, reserved_17 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_17(buffer, index, packet, parent)

  -- Number Of Quote Results: 1 Byte Unsigned Fixed Width Integer
  index, number_of_quote_results = cboe_futures_orderentry_boe_v1_3_dissect.number_of_quote_results(buffer, index, packet, parent)

  -- Quote Result Group: Struct of 4 fields
  for i = 1, number_of_quote_results do
    index = cboe_futures_orderentry_boe_v1_3_dissect.quote_result_group(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Quote Update Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_update_acknowledgment_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_update_acknowledgment_message = cboe_futures_orderentry_boe_v1_3_size_of.quote_update_acknowledgment_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_update_acknowledgment_message then
    local range = buffer(offset, size_of_quote_update_acknowledgment_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_update_acknowledgment_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_update_acknowledgment_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.quote_update_acknowledgment_message_fields(buffer, offset, packet, parent, size_of_quote_update_acknowledgment_message)

  return offset + size_of_quote_update_acknowledgment_message
end

-- Size: Order Acknowledgment Byte 17
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_17 = 1

-- Display: Order Acknowledgment Byte 17
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_17 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_17_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 17
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_17 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_17(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_17, range, display)

  if show.order_acknowledgment_byte_17 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_17_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 16
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_16 = 1

-- Display: Order Acknowledgment Byte 16
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_16 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Frequent Trader Id Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Frequent Trader Id Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_16_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_frequent_trader_id_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 16
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_16 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_16(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_16, range, display)

  if show.order_acknowledgment_byte_16 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_16_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 15
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_15 = 1

-- Display: Order Acknowledgment Byte 15
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_15 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_15_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 15
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_15 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_15(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_15, range, display)

  if show.order_acknowledgment_byte_15 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_15_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 14
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_14 = 1

-- Display: Order Acknowledgment Byte 14
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_14 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_14_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 14
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_14 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_14(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_14, range, display)

  if show.order_acknowledgment_byte_14 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_14_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 13
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_13 = 1

-- Display: Order Acknowledgment Byte 13
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_13 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Day Avg Px Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Day Avg Px Exists|"
  end
  -- Is Order Acknowledgment Avg Px Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Avg Px Exists|"
  end
  -- Is Order Acknowledgment Day Cum Qty Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Day Cum Qty Exists|"
  end
  -- Is Order Acknowledgment Day Order Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Day Order Qty Exists|"
  end
  -- Is Order Acknowledgment Cum Qty Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Cum Qty Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_13_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Day Avg Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_day_avg_px_exists, buffer(offset, 1))

  -- Order Acknowledgment Avg Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_avg_px_exists, buffer(offset, 1))

  -- Order Acknowledgment Day Cum Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_day_cum_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Day Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_day_order_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Cum Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_cum_qty_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 13
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_13 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_13(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_13, range, display)

  if show.order_acknowledgment_byte_13 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_13_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 12
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_12 = 1

-- Display: Order Acknowledgment Byte 12
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_12 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Oeoid Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Oeoid Exists|"
  end
  -- Is Order Acknowledgment Manual Order Indicator Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Manual Order Indicator Exists|"
  end
  -- Is Order Acknowledgment Cti Code Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Cti Code Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_12_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_oeoid_exists, buffer(offset, 1))

  -- Order Acknowledgment Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_manual_order_indicator_exists, buffer(offset, 1))

  -- Order Acknowledgment Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_cti_code_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 12
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_12 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_12(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_12, range, display)

  if show.order_acknowledgment_byte_12 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_12_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 11
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_11 = 1

-- Display: Order Acknowledgment Byte 11
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_11 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_11_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 11
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_11 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_11(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_11, range, display)

  if show.order_acknowledgment_byte_11 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_11_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 10
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_10 = 1

-- Display: Order Acknowledgment Byte 10
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_10 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_10_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 10
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_10 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_10(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_10, range, display)

  if show.order_acknowledgment_byte_10 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_10_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 9
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_9 = 1

-- Display: Order Acknowledgment Byte 9
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_9 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Cmta Number Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_9_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_cmta_number_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 9
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_9 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_9(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_9, range, display)

  if show.order_acknowledgment_byte_9 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_9_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_8 = 1

-- Display: Order Acknowledgment Byte 8
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Stop Px Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Stop Px Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_8_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_stop_px_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_8, range, display)

  if show.order_acknowledgment_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_7 = 1

-- Display: Order Acknowledgment Byte 7
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Sub Liquidity Indicator Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Sub Liquidity Indicator Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_7_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Sub Liquidity Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_sub_liquidity_indicator_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_7, range, display)

  if show.order_acknowledgment_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_6 = 1

-- Display: Order Acknowledgment Byte 6
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_6_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_6, range, display)

  if show.order_acknowledgment_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_5 = 1

-- Display: Order Acknowledgment Byte 5
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Expire Time Exists|"
  end
  -- Is Order Acknowledgment Base Liquidity Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Base Liquidity Indicator Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Leaves Qty Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Leaves Qty Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_5_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Expire Time Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_expire_time_exists, buffer(offset, 1))

  -- Order Acknowledgment Base Liquidity Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_base_liquidity_indicator_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Leaves Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_leaves_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_5, range, display)

  if show.order_acknowledgment_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_4 = 1

-- Display: Order Acknowledgment Byte 4
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 7 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Open Close Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Open Close Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_4_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_7_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_open_close_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_4, range, display)

  if show.order_acknowledgment_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_3 = 1

-- Display: Order Acknowledgment Byte 3
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Prevent Match Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Prevent Match Exists|"
  end
  -- Is Order Acknowledgment Order Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Order Qty Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Clearing Account Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Clearing Account Exists|"
  end
  -- Is Order Acknowledgment Clearing Firm Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Clearing Firm Exists|"
  end
  -- Is Order Acknowledgment Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_3_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_prevent_match_exists, buffer(offset, 1))

  -- Order Acknowledgment Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_order_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_clearing_account_exists, buffer(offset, 1))

  -- Order Acknowledgment Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_clearing_firm_exists, buffer(offset, 1))

  -- Order Acknowledgment Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_account_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_3, range, display)

  if show.order_acknowledgment_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_2 = 1

-- Display: Order Acknowledgment Byte 2
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Capacity Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 6 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 5 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 3 Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_2_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_capacity_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_6_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_5_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_3_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_symbol_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_2, range, display)

  if show.order_acknowledgment_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_byte_1 = 1

-- Display: Order Acknowledgment Byte 1
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Order Acknowledgment Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 8 Exists|"
  end
  -- Is Order Acknowledgment Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Order Acknowledgment Min Qty Exists|"
  end
  -- Is Order Acknowledgment Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Order Acknowledgment Time In Force Exists|"
  end
  -- Is Order Acknowledgment Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Order Acknowledgment Ord Type Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 4 Exists|"
  end
  -- Is Order Acknowledgment Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Order Acknowledgment Price Exists|"
  end
  -- Is Order Acknowledgment Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Order Acknowledgment Reserved Bit 2 Exists|"
  end
  -- Is Order Acknowledgment Side Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Order Acknowledgment Side Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Order Acknowledgment Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_1_bits = function(buffer, offset, packet, parent)

  -- Order Acknowledgment Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_8_exists, buffer(offset, 1))

  -- Order Acknowledgment Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_min_qty_exists, buffer(offset, 1))

  -- Order Acknowledgment Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_time_in_force_exists, buffer(offset, 1))

  -- Order Acknowledgment Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_ord_type_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_4_exists, buffer(offset, 1))

  -- Order Acknowledgment Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_price_exists, buffer(offset, 1))

  -- Order Acknowledgment Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_reserved_bit_2_exists, buffer(offset, 1))

  -- Order Acknowledgment Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_side_exists, buffer(offset, 1))
end

-- Dissect: Order Acknowledgment Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_byte_1, range, display)

  if show.order_acknowledgment_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Order Acknowledgment Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_bitfield_count = 1

-- Display: Order Acknowledgment Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_bitfield_count = function(value)
  return "Order Acknowledgment Bitfield Count: "..value
end

-- Dissect: Order Acknowledgment Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Order Acknowledgment Optional Fields
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Acknowledgment Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_optional_fields_fields = function(buffer, offset, packet, parent, size_of_order_acknowledgment_optional_fields)
  local index = offset

  -- Order Acknowledgment Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_acknowledgment_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Acknowledgment Byte 1
  local order_acknowledgment_byte_1_exists = order_acknowledgment_bitfield_count >= 1

  -- Runtime optional field: Order Acknowledgment Byte 1
  if order_acknowledgment_byte_1_exists then

    -- Order Acknowledgment Byte 1: Struct of 8 fields
    index, order_acknowledgment_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 2
  local order_acknowledgment_byte_2_exists = order_acknowledgment_bitfield_count >= 2

  -- Runtime optional field: Order Acknowledgment Byte 2
  if order_acknowledgment_byte_2_exists then

    -- Order Acknowledgment Byte 2: Struct of 8 fields
    index, order_acknowledgment_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 3
  local order_acknowledgment_byte_3_exists = order_acknowledgment_bitfield_count >= 3

  -- Runtime optional field: Order Acknowledgment Byte 3
  if order_acknowledgment_byte_3_exists then

    -- Order Acknowledgment Byte 3: Struct of 8 fields
    index, order_acknowledgment_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 4
  local order_acknowledgment_byte_4_exists = order_acknowledgment_bitfield_count >= 4

  -- Runtime optional field: Order Acknowledgment Byte 4
  if order_acknowledgment_byte_4_exists then

    -- Order Acknowledgment Byte 4: Struct of 8 fields
    index, order_acknowledgment_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 5
  local order_acknowledgment_byte_5_exists = order_acknowledgment_bitfield_count >= 5

  -- Runtime optional field: Order Acknowledgment Byte 5
  if order_acknowledgment_byte_5_exists then

    -- Order Acknowledgment Byte 5: Struct of 8 fields
    index, order_acknowledgment_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 6
  local order_acknowledgment_byte_6_exists = order_acknowledgment_bitfield_count >= 6

  -- Runtime optional field: Order Acknowledgment Byte 6
  if order_acknowledgment_byte_6_exists then

    -- Order Acknowledgment Byte 6: Struct of 8 fields
    index, order_acknowledgment_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 7
  local order_acknowledgment_byte_7_exists = order_acknowledgment_bitfield_count >= 7

  -- Runtime optional field: Order Acknowledgment Byte 7
  if order_acknowledgment_byte_7_exists then

    -- Order Acknowledgment Byte 7: Struct of 8 fields
    index, order_acknowledgment_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 8
  local order_acknowledgment_byte_8_exists = order_acknowledgment_bitfield_count >= 8

  -- Runtime optional field: Order Acknowledgment Byte 8
  if order_acknowledgment_byte_8_exists then

    -- Order Acknowledgment Byte 8: Struct of 8 fields
    index, order_acknowledgment_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 9
  local order_acknowledgment_byte_9_exists = order_acknowledgment_bitfield_count >= 9

  -- Runtime optional field: Order Acknowledgment Byte 9
  if order_acknowledgment_byte_9_exists then

    -- Order Acknowledgment Byte 9: Struct of 8 fields
    index, order_acknowledgment_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 10
  local order_acknowledgment_byte_10_exists = order_acknowledgment_bitfield_count >= 10

  -- Runtime optional field: Order Acknowledgment Byte 10
  if order_acknowledgment_byte_10_exists then

    -- Order Acknowledgment Byte 10: Struct of 8 fields
    index, order_acknowledgment_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 11
  local order_acknowledgment_byte_11_exists = order_acknowledgment_bitfield_count >= 11

  -- Runtime optional field: Order Acknowledgment Byte 11
  if order_acknowledgment_byte_11_exists then

    -- Order Acknowledgment Byte 11: Struct of 8 fields
    index, order_acknowledgment_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 12
  local order_acknowledgment_byte_12_exists = order_acknowledgment_bitfield_count >= 12

  -- Runtime optional field: Order Acknowledgment Byte 12
  if order_acknowledgment_byte_12_exists then

    -- Order Acknowledgment Byte 12: Struct of 8 fields
    index, order_acknowledgment_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 13
  local order_acknowledgment_byte_13_exists = order_acknowledgment_bitfield_count >= 13

  -- Runtime optional field: Order Acknowledgment Byte 13
  if order_acknowledgment_byte_13_exists then

    -- Order Acknowledgment Byte 13: Struct of 8 fields
    index, order_acknowledgment_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 14
  local order_acknowledgment_byte_14_exists = order_acknowledgment_bitfield_count >= 14

  -- Runtime optional field: Order Acknowledgment Byte 14
  if order_acknowledgment_byte_14_exists then

    -- Order Acknowledgment Byte 14: Struct of 8 fields
    index, order_acknowledgment_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 15
  local order_acknowledgment_byte_15_exists = order_acknowledgment_bitfield_count >= 15

  -- Runtime optional field: Order Acknowledgment Byte 15
  if order_acknowledgment_byte_15_exists then

    -- Order Acknowledgment Byte 15: Struct of 8 fields
    index, order_acknowledgment_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 16
  local order_acknowledgment_byte_16_exists = order_acknowledgment_bitfield_count >= 16

  -- Runtime optional field: Order Acknowledgment Byte 16
  if order_acknowledgment_byte_16_exists then

    -- Order Acknowledgment Byte 16: Struct of 8 fields
    index, order_acknowledgment_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 17
  local order_acknowledgment_byte_17_exists = order_acknowledgment_bitfield_count >= 17

  -- Runtime optional field: Order Acknowledgment Byte 17
  if order_acknowledgment_byte_17_exists then

    -- Order Acknowledgment Byte 17: Struct of 8 fields
    index, order_acknowledgment_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_17(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(7) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = order_acknowledgment_bitfield_count >= 1 and order_acknowledgment_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = order_acknowledgment_bitfield_count >= 2 and order_acknowledgment_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = order_acknowledgment_bitfield_count >= 2 and order_acknowledgment_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(6) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(5) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Qty
  local order_qty_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(1) > 0

  -- Runtime optional field: Order Qty
  if order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = order_acknowledgment_bitfield_count >= 3 and order_acknowledgment_byte_3:bitfield(0) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = order_acknowledgment_bitfield_count >= 4 and order_acknowledgment_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = order_acknowledgment_bitfield_count >= 4 and order_acknowledgment_byte_4:bitfield(4) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Leaves Qty
  local leaves_qty_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(6) > 0

  -- Runtime optional field: Leaves Qty
  if leaves_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.leaves_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Base Liquidity Indicator
  local base_liquidity_indicator_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(1) > 0

  -- Runtime optional field: Base Liquidity Indicator
  if base_liquidity_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.base_liquidity_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Expire Time
  local expire_time_exists = order_acknowledgment_bitfield_count >= 5 and order_acknowledgment_byte_5:bitfield(0) > 0

  -- Runtime optional field: Expire Time
  if expire_time_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.expire_time(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Sub Liquidity Indicator
  local sub_liquidity_indicator_exists = order_acknowledgment_bitfield_count >= 7 and order_acknowledgment_byte_7:bitfield(7) > 0

  -- Runtime optional field: Sub Liquidity Indicator
  if sub_liquidity_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.sub_liquidity_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = order_acknowledgment_bitfield_count >= 8 and order_acknowledgment_byte_8:bitfield(5) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = order_acknowledgment_bitfield_count >= 9 and order_acknowledgment_byte_9:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = order_acknowledgment_bitfield_count >= 12 and order_acknowledgment_byte_12:bitfield(7) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = order_acknowledgment_bitfield_count >= 12 and order_acknowledgment_byte_12:bitfield(6) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = order_acknowledgment_bitfield_count >= 12 and order_acknowledgment_byte_12:bitfield(5) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cum Qty
  local cum_qty_exists = order_acknowledgment_bitfield_count >= 13 and order_acknowledgment_byte_13:bitfield(7) > 0

  -- Runtime optional field: Cum Qty
  if cum_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cum_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Day Order Qty
  local day_order_qty_exists = order_acknowledgment_bitfield_count >= 13 and order_acknowledgment_byte_13:bitfield(6) > 0

  -- Runtime optional field: Day Order Qty
  if day_order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.day_order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Day Cum Qty
  local day_cum_qty_exists = order_acknowledgment_bitfield_count >= 13 and order_acknowledgment_byte_13:bitfield(5) > 0

  -- Runtime optional field: Day Cum Qty
  if day_cum_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.day_cum_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Avg Px
  local avg_px_exists = order_acknowledgment_bitfield_count >= 13 and order_acknowledgment_byte_13:bitfield(4) > 0

  -- Runtime optional field: Avg Px
  if avg_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.avg_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Day Avg Px
  local day_avg_px_exists = order_acknowledgment_bitfield_count >= 13 and order_acknowledgment_byte_13:bitfield(3) > 0

  -- Runtime optional field: Day Avg Px
  if day_avg_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.day_avg_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = order_acknowledgment_bitfield_count >= 16 and order_acknowledgment_byte_16:bitfield(7) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Acknowledgment Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_optional_fields = function(buffer, offset, packet, parent, size_of_order_acknowledgment_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.order_acknowledgment_optional_fields then
    local range = buffer(offset, size_of_order_acknowledgment_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_optional_fields_fields(buffer, offset, packet, parent, size_of_order_acknowledgment_optional_fields)

  return offset + size_of_order_acknowledgment_optional_fields
end

-- Read runtime size of: Order Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Order Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_message_fields = function(buffer, offset, packet, parent, size_of_order_acknowledgment_message)
  local index = offset

  -- Transaction Time: 8 Byte Unsigned Fixed Width Integer
  index, transaction_time = cboe_futures_orderentry_boe_v1_3_dissect.transaction_time(buffer, index, packet, parent)

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Order Id: 8 Byte Unsigned Fixed Width Integer
  index, order_id = cboe_futures_orderentry_boe_v1_3_dissect.order_id(buffer, index, packet, parent)

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Order Acknowledgment Optional Fields
  local size_of_order_acknowledgment_optional_fields = message_length - (index - offset) - 8

  -- Order Acknowledgment Optional Fields: Struct of 47 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_optional_fields(buffer, index, packet, parent, size_of_order_acknowledgment_optional_fields)

  return index
end

-- Dissect: Order Acknowledgment Message
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_acknowledgment_message = cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_acknowledgment_message then
    local range = buffer(offset, size_of_order_acknowledgment_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_message_fields(buffer, offset, packet, parent, size_of_order_acknowledgment_message)

  return offset + size_of_order_acknowledgment_message
end

-- Size: Custom Group Id
cboe_futures_orderentry_boe_v1_3_size_of.custom_group_id = 2

-- Display: Custom Group Id
cboe_futures_orderentry_boe_v1_3_display.custom_group_id = function(value)
  return "Custom Group Id: "..value
end

-- Dissect: Custom Group Id
cboe_futures_orderentry_boe_v1_3_dissect.custom_group_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.custom_group_id
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.custom_group_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.custom_group_id, range, value, display)

  return offset + length, value
end

-- Size: Product Name
cboe_futures_orderentry_boe_v1_3_size_of.product_name = 6

-- Display: Product Name
cboe_futures_orderentry_boe_v1_3_display.product_name = function(value)
  return "Product Name: "..value
end

-- Dissect: Product Name
cboe_futures_orderentry_boe_v1_3_dissect.product_name = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.product_name
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.product_name(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.product_name, range, value, display)

  return offset + length, value
end

-- Size: Reserved 4
cboe_futures_orderentry_boe_v1_3_size_of.reserved_4 = 4

-- Display: Reserved 4
cboe_futures_orderentry_boe_v1_3_display.reserved_4 = function(value)
  return "Reserved 4: "..value
end

-- Dissect: Reserved 4
cboe_futures_orderentry_boe_v1_3_dissect.reserved_4 = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.reserved_4
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_futures_orderentry_boe_v1_3_display.reserved_4(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.reserved_4, range, value, display)

  return offset + length, value
end

-- Size: Risk Reset
cboe_futures_orderentry_boe_v1_3_size_of.risk_reset = 8

-- Display: Risk Reset
cboe_futures_orderentry_boe_v1_3_display.risk_reset = function(value)
  if value == "S" then
    return "Risk Reset: Productlevel Risk Lockout Reset (S)"
  end
  if value == "F" then
    return "Risk Reset: Firmlevel Lockout Reset (F)"
  end
  if value == "C" then
    return "Risk Reset: Custom Group Id Lockout Reset (C)"
  end

  return "Risk Reset: Unknown("..value..")"
end

-- Dissect: Risk Reset
cboe_futures_orderentry_boe_v1_3_dissect.risk_reset = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.risk_reset
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.risk_reset(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.risk_reset, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Reset Risk Message
cboe_futures_orderentry_boe_v1_3_size_of.reset_risk_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Reset Risk Message
cboe_futures_orderentry_boe_v1_3_display.reset_risk_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Reset Risk Message
cboe_futures_orderentry_boe_v1_3_dissect.reset_risk_message_fields = function(buffer, offset, packet, parent, size_of_reset_risk_message)
  local index = offset

  -- Risk Status Id: 16 Byte Ascii String
  index, risk_status_id = cboe_futures_orderentry_boe_v1_3_dissect.risk_status_id(buffer, index, packet, parent)

  -- Risk Reset: 8 Byte Ascii String Enum with 3 values
  index, risk_reset = cboe_futures_orderentry_boe_v1_3_dissect.risk_reset(buffer, index, packet, parent)

  -- Risk Reset: 8 Byte Ascii String Enum with 3 values
  index, risk_reset = cboe_futures_orderentry_boe_v1_3_dissect.risk_reset(buffer, index, packet, parent)

  -- Reserved 4: 4 Byte
  index, reserved_4 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_4(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)

  -- Product Name: 6 Byte Ascii String
  index, product_name = cboe_futures_orderentry_boe_v1_3_dissect.product_name(buffer, index, packet, parent)

  -- Custom Group Id: 2 Byte Unsigned Fixed Width Integer
  index, custom_group_id = cboe_futures_orderentry_boe_v1_3_dissect.custom_group_id(buffer, index, packet, parent)

  return index
end

-- Dissect: Reset Risk Message
cboe_futures_orderentry_boe_v1_3_dissect.reset_risk_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_reset_risk_message = cboe_futures_orderentry_boe_v1_3_size_of.reset_risk_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.reset_risk_message then
    local range = buffer(offset, size_of_reset_risk_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.reset_risk_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.reset_risk_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.reset_risk_message_fields(buffer, offset, packet, parent, size_of_reset_risk_message)

  return offset + size_of_reset_risk_message
end

-- Size: Mass Cancel Inst
cboe_futures_orderentry_boe_v1_3_size_of.mass_cancel_inst = 16

-- Display: Mass Cancel Inst
cboe_futures_orderentry_boe_v1_3_display.mass_cancel_inst = function(value)
  return "Mass Cancel Inst: "..value
end

-- Dissect: Mass Cancel Inst
cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_inst = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.mass_cancel_inst
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.mass_cancel_inst(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.mass_cancel_inst, range, value, display)

  return offset + length, value
end

-- Size: Purge Order Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.purge_order_byte_2 = 1

-- Display: Purge Order Byte 2
cboe_futures_orderentry_boe_v1_3_display.purge_order_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Order Reserved Bit 8 Exists|"
  end
  -- Is Purge Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Order Reserved Bit 7 Exists|"
  end
  -- Is Purge Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Order Reserved Bit 6 Exists|"
  end
  -- Is Purge Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Order Reserved Bit 5 Exists|"
  end
  -- Is Purge Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Order Reserved Bit 4 Exists|"
  end
  -- Is Purge Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Order Reserved Bit 3 Exists|"
  end
  -- Is Purge Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Order Reserved Bit 2 Exists|"
  end
  -- Is Purge Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_2_bits = function(buffer, offset, packet, parent)

  -- Purge Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_8_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_7_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_5_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_4_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_3_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Purge Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_order_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_byte_2, range, display)

  if show.purge_order_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Order Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.purge_order_byte_1 = 1

-- Display: Purge Order Byte 1
cboe_futures_orderentry_boe_v1_3_display.purge_order_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Purge Order Oeoid Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Purge Order Oeoid Exists|"
  end
  -- Is Purge Order Manual Order Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Purge Order Manual Order Indicator Exists|"
  end
  -- Is Purge Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Purge Order Reserved Bit 6 Exists|"
  end
  -- Is Purge Order Mass Cancel Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Purge Order Mass Cancel Id Exists|"
  end
  -- Is Purge Order Product Name Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Purge Order Product Name Exists|"
  end
  -- Is Purge Order Mass Cancel Inst Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Purge Order Mass Cancel Inst Exists|"
  end
  -- Is Purge Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Purge Order Reserved Bit 2 Exists|"
  end
  -- Is Purge Order Clearing Firm Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Purge Order Clearing Firm Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Purge Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_1_bits = function(buffer, offset, packet, parent)

  -- Purge Order Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_oeoid_exists, buffer(offset, 1))

  -- Purge Order Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_manual_order_indicator_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_6_exists, buffer(offset, 1))

  -- Purge Order Mass Cancel Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_mass_cancel_id_exists, buffer(offset, 1))

  -- Purge Order Product Name Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_product_name_exists, buffer(offset, 1))

  -- Purge Order Mass Cancel Inst Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_mass_cancel_inst_exists, buffer(offset, 1))

  -- Purge Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_reserved_bit_2_exists, buffer(offset, 1))

  -- Purge Order Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_clearing_firm_exists, buffer(offset, 1))
end

-- Dissect: Purge Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_order_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_byte_1, range, display)

  if show.purge_order_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Purge Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.purge_order_bitfield_count = 1

-- Display: Purge Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.purge_order_bitfield_count = function(value)
  return "Purge Order Bitfield Count: "..value
end

-- Dissect: Purge Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.purge_order_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.purge_order_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Purge Order Optional Fields
cboe_futures_orderentry_boe_v1_3_display.purge_order_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_optional_fields_fields = function(buffer, offset, packet, parent, size_of_purge_order_optional_fields)
  local index = offset

  -- Purge Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, purge_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.purge_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Purge Order Byte 1
  local purge_order_byte_1_exists = purge_order_bitfield_count >= 1

  -- Runtime optional field: Purge Order Byte 1
  if purge_order_byte_1_exists then

    -- Purge Order Byte 1: Struct of 8 fields
    index, purge_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Order Byte 2
  local purge_order_byte_2_exists = purge_order_bitfield_count >= 2

  -- Runtime optional field: Purge Order Byte 2
  if purge_order_byte_2_exists then

    -- Purge Order Byte 2: Struct of 8 fields
    index, purge_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = purge_order_bitfield_count >= 1 and purge_order_byte_1:bitfield(7) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Mass Cancel Inst
  local mass_cancel_inst_exists = purge_order_bitfield_count >= 1 and purge_order_byte_1:bitfield(5) > 0

  -- Runtime optional field: Mass Cancel Inst
  if mass_cancel_inst_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_inst(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Product Name
  local product_name_exists = purge_order_bitfield_count >= 1 and purge_order_byte_1:bitfield(4) > 0

  -- Runtime optional field: Product Name
  if product_name_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.product_name(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Mass Cancel Id
  local mass_cancel_id_exists = purge_order_bitfield_count >= 1 and purge_order_byte_1:bitfield(3) > 0

  -- Runtime optional field: Mass Cancel Id
  if mass_cancel_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = purge_order_bitfield_count >= 1 and purge_order_byte_1:bitfield(1) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = purge_order_bitfield_count >= 1 and purge_order_byte_1:bitfield(0) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Purge Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_optional_fields = function(buffer, offset, packet, parent, size_of_purge_order_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.purge_order_optional_fields then
    local range = buffer(offset, size_of_purge_order_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.purge_order_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.purge_order_optional_fields_fields(buffer, offset, packet, parent, size_of_purge_order_optional_fields)

  return offset + size_of_purge_order_optional_fields
end

-- Read runtime size of: Purge Order Message
cboe_futures_orderentry_boe_v1_3_size_of.purge_order_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Purge Order Message
cboe_futures_orderentry_boe_v1_3_display.purge_order_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Order Message
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_message_fields = function(buffer, offset, packet, parent, size_of_purge_order_message)
  local index = offset

  -- Reserved Internal: 1 Byte Ascii String
  index, reserved_internal = cboe_futures_orderentry_boe_v1_3_dissect.reserved_internal(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Purge Order Optional Fields
  local size_of_purge_order_optional_fields = message_length - (index - offset) - 8

  -- Purge Order Optional Fields: Struct of 9 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.purge_order_optional_fields(buffer, index, packet, parent, size_of_purge_order_optional_fields)

  return index
end

-- Dissect: Purge Order Message
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_purge_order_message = cboe_futures_orderentry_boe_v1_3_size_of.purge_order_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.purge_order_message then
    local range = buffer(offset, size_of_purge_order_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.purge_order_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.purge_order_message_fields(buffer, offset, packet, parent, size_of_purge_order_message)

  return offset + size_of_purge_order_message
end

-- Size: Reserved 12
cboe_futures_orderentry_boe_v1_3_size_of.reserved_12 = 12

-- Display: Reserved 12
cboe_futures_orderentry_boe_v1_3_display.reserved_12 = function(value)
  return "Reserved 12: "..value
end

-- Dissect: Reserved 12
cboe_futures_orderentry_boe_v1_3_dissect.reserved_12 = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.reserved_12
  local range = buffer(offset, length)
  local value = range:bytes():tohex(false, " ")
  local display = cboe_futures_orderentry_boe_v1_3_display.reserved_12(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.reserved_12, range, value, display)

  return offset + length, value
end

-- Calculate size of: Quote Group
cboe_futures_orderentry_boe_v1_3_size_of.quote_group = function(buffer, offset)
  local index = 0

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.symbol

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.side

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.open_close

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.price

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.order_qty

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.reserved_12

  return index
end

-- Display: Quote Group
cboe_futures_orderentry_boe_v1_3_display.quote_group = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Group
cboe_futures_orderentry_boe_v1_3_dissect.quote_group_fields = function(buffer, offset, packet, parent)
  local index = offset

  -- Symbol: 6 Byte Ascii String
  index, symbol = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 2 values
  index, side = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)

  -- Open Close: 1 Byte Ascii String Enum with 3 values
  index, open_close = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)

  -- Price: 8 Byte Signed Fixed Width Integer
  index, price = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)

  -- Reserved 12: 12 Byte
  index, reserved_12 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_12(buffer, index, packet, parent)

  return index
end

-- Dissect: Quote Group
cboe_futures_orderentry_boe_v1_3_dissect.quote_group = function(buffer, offset, packet, parent)
  if show.quote_group then
    -- Optionally add element to protocol tree
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_group, buffer(offset, 0))
    local index = cboe_futures_orderentry_boe_v1_3_dissect.quote_group_fields(buffer, offset, packet, parent)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_group(packet, parent, length)
    parent:append_text(display)

    return index
  else
    -- Skip element, add fields directly
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_group_fields(buffer, offset, packet, parent)
  end
end

-- Size: Number Of Quotes
cboe_futures_orderentry_boe_v1_3_size_of.number_of_quotes = 1

-- Display: Number Of Quotes
cboe_futures_orderentry_boe_v1_3_display.number_of_quotes = function(value)
  return "Number Of Quotes: "..value
end

-- Dissect: Number Of Quotes
cboe_futures_orderentry_boe_v1_3_dissect.number_of_quotes = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.number_of_quotes
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.number_of_quotes(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.number_of_quotes, range, value, display)

  return offset + length, value
end

-- Size: Size Modifier
cboe_futures_orderentry_boe_v1_3_size_of.size_modifier = 1

-- Display: Size Modifier
cboe_futures_orderentry_boe_v1_3_display.size_modifier = function(value)
  if value == "R" then
    return "Size Modifier: Reduce (R)"
  end

  return "Size Modifier: Unknown("..value..")"
end

-- Dissect: Size Modifier
cboe_futures_orderentry_boe_v1_3_dissect.size_modifier = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.size_modifier
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.size_modifier(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.size_modifier, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Quote Update Message
cboe_futures_orderentry_boe_v1_3_size_of.quote_update_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Quote Update Message
cboe_futures_orderentry_boe_v1_3_display.quote_update_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Quote Update Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_update_message_fields = function(buffer, offset, packet, parent, size_of_quote_update_message)
  local index = offset

  -- Quote Update Id: 16 Byte Ascii String
  index, quote_update_id = cboe_futures_orderentry_boe_v1_3_dissect.quote_update_id(buffer, index, packet, parent)

  -- Clearing Firm: 4 Byte Ascii String
  index, clearing_firm = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)

  -- Clearing Account: 4 Byte Ascii String
  index, clearing_account = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)

  -- Cmta Number: 4 Byte Unsigned Fixed Width Integer
  index, cmta_number = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)

  -- Account: 16 Byte Ascii String
  index, account = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)

  -- Custom Group Id: 2 Byte Unsigned Fixed Width Integer
  index, custom_group_id = cboe_futures_orderentry_boe_v1_3_dissect.custom_group_id(buffer, index, packet, parent)

  -- Capacity: 1 Byte Ascii String Enum with 2 values
  index, capacity = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)

  -- Cti Code: 1 Byte Ascii String Enum with 4 values
  index, cti_code = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)

  -- Manual Order Indicator: 1 Byte Ascii String Enum with 5 values
  index, manual_order_indicator = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)

  -- Oeoid: 18 Byte Ascii String
  index, oeoid = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)

  -- Size Modifier: 1 Byte Ascii String Enum with 1 values
  index, size_modifier = cboe_futures_orderentry_boe_v1_3_dissect.size_modifier(buffer, index, packet, parent)

  -- Reserved 6: 6 Byte
  index, reserved_6 = cboe_futures_orderentry_boe_v1_3_dissect.reserved_6(buffer, index, packet, parent)

  -- Number Of Quotes: 1 Byte Unsigned Fixed Width Integer
  index, number_of_quotes = cboe_futures_orderentry_boe_v1_3_dissect.number_of_quotes(buffer, index, packet, parent)

  -- Quote Group: Struct of 6 fields
  for i = 1, number_of_quotes do
    index = cboe_futures_orderentry_boe_v1_3_dissect.quote_group(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Quote Update Message
cboe_futures_orderentry_boe_v1_3_dissect.quote_update_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_quote_update_message = cboe_futures_orderentry_boe_v1_3_size_of.quote_update_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.quote_update_message then
    local range = buffer(offset, size_of_quote_update_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.quote_update_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.quote_update_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.quote_update_message_fields(buffer, offset, packet, parent, size_of_quote_update_message)

  return offset + size_of_quote_update_message
end

-- Size: Cancel Orig On Reject
cboe_futures_orderentry_boe_v1_3_size_of.cancel_orig_on_reject = 1

-- Display: Cancel Orig On Reject
cboe_futures_orderentry_boe_v1_3_display.cancel_orig_on_reject = function(value)
  if value == "N" then
    return "Cancel Orig On Reject: Leave Original Order Alone (N)"
  end
  if value == "Y" then
    return "Cancel Orig On Reject: Cancel Original Order If Modification Fails (Y)"
  end

  return "Cancel Orig On Reject: Unknown("..value..")"
end

-- Dissect: Cancel Orig On Reject
cboe_futures_orderentry_boe_v1_3_dissect.cancel_orig_on_reject = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cancel_orig_on_reject
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_orig_on_reject(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_orig_on_reject, range, value, display)

  return offset + length, value
end

-- Size: Modify Order Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.modify_order_byte_2 = 1

-- Display: Modify Order Byte 2
cboe_futures_orderentry_boe_v1_3_display.modify_order_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Modify Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Modify Order Reserved Bit 8 Exists|"
  end
  -- Is Modify Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Modify Order Reserved Bit 7 Exists|"
  end
  -- Is Modify Order Frequent Trader Id Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Modify Order Frequent Trader Id Exists|"
  end
  -- Is Modify Order Oeoid Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Modify Order Oeoid Exists|"
  end
  -- Is Modify Order Manual Order Indicator Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Modify Order Manual Order Indicator Exists|"
  end
  -- Is Modify Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Modify Order Reserved Bit 3 Exists|"
  end
  -- Is Modify Order Stop Px Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Modify Order Stop Px Exists|"
  end
  -- Is Modify Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Modify Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Modify Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_2_bits = function(buffer, offset, packet, parent)

  -- Modify Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_8_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_7_exists, buffer(offset, 1))

  -- Modify Order Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_frequent_trader_id_exists, buffer(offset, 1))

  -- Modify Order Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_oeoid_exists, buffer(offset, 1))

  -- Modify Order Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_manual_order_indicator_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_3_exists, buffer(offset, 1))

  -- Modify Order Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_stop_px_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: Modify Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.modify_order_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_byte_2, range, display)

  if show.modify_order_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Modify Order Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.modify_order_byte_1 = 1

-- Display: Modify Order Byte 1
cboe_futures_orderentry_boe_v1_3_display.modify_order_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Modify Order Side Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Modify Order Side Exists|"
  end
  -- Is Modify Order Exec Inst Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Modify Order Exec Inst Exists|"
  end
  -- Is Modify Order Cancel Orig On Reject Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Modify Order Cancel Orig On Reject Exists|"
  end
  -- Is Modify Order Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Modify Order Ord Type Exists|"
  end
  -- Is Modify Order Price Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Modify Order Price Exists|"
  end
  -- Is Modify Order Order Qty Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Modify Order Order Qty Exists|"
  end
  -- Is Modify Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Modify Order Reserved Bit 2 Exists|"
  end
  -- Is Modify Order Clearing Firm Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Modify Order Clearing Firm Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Modify Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_1_bits = function(buffer, offset, packet, parent)

  -- Modify Order Side Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_side_exists, buffer(offset, 1))

  -- Modify Order Exec Inst Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_exec_inst_exists, buffer(offset, 1))

  -- Modify Order Cancel Orig On Reject Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_cancel_orig_on_reject_exists, buffer(offset, 1))

  -- Modify Order Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_ord_type_exists, buffer(offset, 1))

  -- Modify Order Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_price_exists, buffer(offset, 1))

  -- Modify Order Order Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_order_qty_exists, buffer(offset, 1))

  -- Modify Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_reserved_bit_2_exists, buffer(offset, 1))

  -- Modify Order Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_clearing_firm_exists, buffer(offset, 1))
end

-- Dissect: Modify Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.modify_order_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_byte_1, range, display)

  if show.modify_order_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Modify Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.modify_order_bitfield_count = 1

-- Display: Modify Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.modify_order_bitfield_count = function(value)
  return "Modify Order Bitfield Count: "..value
end

-- Dissect: Modify Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.modify_order_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.modify_order_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Modify Order Optional Fields
cboe_futures_orderentry_boe_v1_3_display.modify_order_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Modify Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_optional_fields_fields = function(buffer, offset, packet, parent, size_of_modify_order_optional_fields)
  local index = offset

  -- Modify Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, modify_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.modify_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Modify Order Byte 1
  local modify_order_byte_1_exists = modify_order_bitfield_count >= 1

  -- Runtime optional field: Modify Order Byte 1
  if modify_order_byte_1_exists then

    -- Modify Order Byte 1: Struct of 8 fields
    index, modify_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Modify Order Byte 2
  local modify_order_byte_2_exists = modify_order_bitfield_count >= 2

  -- Runtime optional field: Modify Order Byte 2
  if modify_order_byte_2_exists then

    -- Modify Order Byte 2: Struct of 8 fields
    index, modify_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(7) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Qty
  local order_qty_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(5) > 0

  -- Runtime optional field: Order Qty
  if order_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(4) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Orig On Reject
  local cancel_orig_on_reject_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(2) > 0

  -- Runtime optional field: Cancel Orig On Reject
  if cancel_orig_on_reject_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cancel_orig_on_reject(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Exec Inst
  local exec_inst_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(1) > 0

  -- Runtime optional field: Exec Inst
  if exec_inst_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.exec_inst(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Side
  local side_exists = modify_order_bitfield_count >= 1 and modify_order_byte_1:bitfield(0) > 0

  -- Runtime optional field: Side
  if side_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Reserved Bit 1
  local reserved_bit_1_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(7) > 0

  -- Runtime optional field: Reserved Bit 1
  if reserved_bit_1_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.reserved_bit_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(6) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(4) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(3) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = modify_order_bitfield_count >= 2 and modify_order_byte_2:bitfield(2) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Modify Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_optional_fields = function(buffer, offset, packet, parent, size_of_modify_order_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.modify_order_optional_fields then
    local range = buffer(offset, size_of_modify_order_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.modify_order_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.modify_order_optional_fields_fields(buffer, offset, packet, parent, size_of_modify_order_optional_fields)

  return offset + size_of_modify_order_optional_fields
end

-- Read runtime size of: Modify Order Message
cboe_futures_orderentry_boe_v1_3_size_of.modify_order_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Modify Order Message
cboe_futures_orderentry_boe_v1_3_display.modify_order_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Modify Order Message
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_message_fields = function(buffer, offset, packet, parent, size_of_modify_order_message)
  local index = offset

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Orig Cl Ord Id: 20 Byte Ascii String
  index, orig_cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.orig_cl_ord_id(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Modify Order Optional Fields
  local size_of_modify_order_optional_fields = message_length - (index - offset) - 8

  -- Modify Order Optional Fields: Struct of 15 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.modify_order_optional_fields(buffer, index, packet, parent, size_of_modify_order_optional_fields)

  return index
end

-- Dissect: Modify Order Message
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_modify_order_message = cboe_futures_orderentry_boe_v1_3_size_of.modify_order_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.modify_order_message then
    local range = buffer(offset, size_of_modify_order_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.modify_order_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.modify_order_message_fields(buffer, offset, packet, parent, size_of_modify_order_message)

  return offset + size_of_modify_order_message
end

-- Size: Cancel Order Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_byte_2 = 1

-- Display: Cancel Order Byte 2
cboe_futures_orderentry_boe_v1_3_display.cancel_order_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Order Reserved Bit 8 Exists|"
  end
  -- Is Cancel Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Order Reserved Bit 7 Exists|"
  end
  -- Is Cancel Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Order Reserved Bit 6 Exists|"
  end
  -- Is Cancel Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Order Reserved Bit 5 Exists|"
  end
  -- Is Cancel Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Order Reserved Bit 4 Exists|"
  end
  -- Is Cancel Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Order Reserved Bit 3 Exists|"
  end
  -- Is Cancel Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Order Reserved Bit 2 Exists|"
  end
  -- Is Cancel Order Mass Cancel Inst Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Order Mass Cancel Inst Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_2_bits = function(buffer, offset, packet, parent)

  -- Cancel Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_8_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_7_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_5_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_4_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Order Mass Cancel Inst Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_mass_cancel_inst_exists, buffer(offset, 1))
end

-- Dissect: Cancel Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_order_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_byte_2, range, display)

  if show.cancel_order_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Order Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_byte_1 = 1

-- Display: Cancel Order Byte 1
cboe_futures_orderentry_boe_v1_3_display.cancel_order_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is Cancel Order Oeoid Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."Cancel Order Oeoid Exists|"
  end
  -- Is Cancel Order Manual Order Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."Cancel Order Manual Order Indicator Exists|"
  end
  -- Is Cancel Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."Cancel Order Reserved Bit 6 Exists|"
  end
  -- Is Cancel Order Mass Cancel Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."Cancel Order Mass Cancel Id Exists|"
  end
  -- Is Cancel Order Product Name Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."Cancel Order Product Name Exists|"
  end
  -- Is Cancel Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."Cancel Order Reserved Bit 3 Exists|"
  end
  -- Is Cancel Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."Cancel Order Reserved Bit 2 Exists|"
  end
  -- Is Cancel Order Clearing Firm Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."Cancel Order Clearing Firm Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: Cancel Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_1_bits = function(buffer, offset, packet, parent)

  -- Cancel Order Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_oeoid_exists, buffer(offset, 1))

  -- Cancel Order Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_manual_order_indicator_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_6_exists, buffer(offset, 1))

  -- Cancel Order Mass Cancel Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_mass_cancel_id_exists, buffer(offset, 1))

  -- Cancel Order Product Name Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_product_name_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_3_exists, buffer(offset, 1))

  -- Cancel Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_reserved_bit_2_exists, buffer(offset, 1))

  -- Cancel Order Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_clearing_firm_exists, buffer(offset, 1))
end

-- Dissect: Cancel Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_order_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_byte_1, range, display)

  if show.cancel_order_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: Cancel Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_bitfield_count = 1

-- Display: Cancel Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.cancel_order_bitfield_count = function(value)
  return "Cancel Order Bitfield Count: "..value
end

-- Dissect: Cancel Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.cancel_order_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: Cancel Order Optional Fields
cboe_futures_orderentry_boe_v1_3_display.cancel_order_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_optional_fields_fields = function(buffer, offset, packet, parent, size_of_cancel_order_optional_fields)
  local index = offset

  -- Cancel Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cancel_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Cancel Order Byte 1
  local cancel_order_byte_1_exists = cancel_order_bitfield_count >= 1

  -- Runtime optional field: Cancel Order Byte 1
  if cancel_order_byte_1_exists then

    -- Cancel Order Byte 1: Struct of 8 fields
    index, cancel_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Order Byte 2
  local cancel_order_byte_2_exists = cancel_order_bitfield_count >= 2

  -- Runtime optional field: Cancel Order Byte 2
  if cancel_order_byte_2_exists then

    -- Cancel Order Byte 2: Struct of 8 fields
    index, cancel_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(7) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Product Name
  local product_name_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(4) > 0

  -- Runtime optional field: Product Name
  if product_name_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.product_name(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Mass Cancel Id
  local mass_cancel_id_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(3) > 0

  -- Runtime optional field: Mass Cancel Id
  if mass_cancel_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(1) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = cancel_order_bitfield_count >= 1 and cancel_order_byte_1:bitfield(0) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Mass Cancel Inst
  local mass_cancel_inst_exists = cancel_order_bitfield_count >= 2 and cancel_order_byte_2:bitfield(7) > 0

  -- Runtime optional field: Mass Cancel Inst
  if mass_cancel_inst_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_inst(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cancel Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_optional_fields = function(buffer, offset, packet, parent, size_of_cancel_order_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.cancel_order_optional_fields then
    local range = buffer(offset, size_of_cancel_order_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.cancel_order_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_optional_fields_fields(buffer, offset, packet, parent, size_of_cancel_order_optional_fields)

  return offset + size_of_cancel_order_optional_fields
end

-- Read runtime size of: Cancel Order Message
cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Cancel Order Message
cboe_futures_orderentry_boe_v1_3_display.cancel_order_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Order Message
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_message_fields = function(buffer, offset, packet, parent, size_of_cancel_order_message)
  local index = offset

  -- Orig Cl Ord Id: 20 Byte Ascii String
  index, orig_cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.orig_cl_ord_id(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: Cancel Order Optional Fields
  local size_of_cancel_order_optional_fields = message_length - (index - offset) - 8

  -- Cancel Order Optional Fields: Struct of 9 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_optional_fields(buffer, index, packet, parent, size_of_cancel_order_optional_fields)

  return index
end

-- Dissect: Cancel Order Message
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cancel_order_message = cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cancel_order_message then
    local range = buffer(offset, size_of_cancel_order_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.cancel_order_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_message_fields(buffer, offset, packet, parent, size_of_cancel_order_message)

  return offset + size_of_cancel_order_message
end

-- Size: New Order Byte 8
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_8 = 1

-- Display: New Order Byte 8
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_8 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Frequent Trader Id Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Frequent Trader Id Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Reserved Bit 2 Exists|"
  end
  -- Is New Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_8_bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Frequent Trader Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_frequent_trader_id_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_2_exists, buffer(offset, 1))

  -- New Order Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 8
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_8 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_8(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_8, range, display)

  if show.new_order_byte_8 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_8_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Byte 7
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_7 = 1

-- Display: New Order Byte 7
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_7 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Oeoid Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Oeoid Exists|"
  end
  -- Is New Order Manual Order Indicator Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Manual Order Indicator Exists|"
  end
  -- Is New Order Cti Code Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cti Code Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Custom Group Id Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Custom Group Id Exists|"
  end
  -- Is New Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_7_bits = function(buffer, offset, packet, parent)

  -- New Order Oeoid Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_oeoid_exists, buffer(offset, 1))

  -- New Order Manual Order Indicator Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_manual_order_indicator_exists, buffer(offset, 1))

  -- New Order Cti Code Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_cti_code_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Custom Group Id Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_custom_group_id_exists, buffer(offset, 1))

  -- New Order Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 7
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_7 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_7(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_7, range, display)

  if show.new_order_byte_7 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_7_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Byte 6
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_6 = 1

-- Display: New Order Byte 6
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_6 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Stop Px Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Stop Px Exists|"
  end
  -- Is New Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_6_bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Stop Px Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_stop_px_exists, buffer(offset, 1))

  -- New Order Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 6
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_6 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_6(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_6, range, display)

  if show.new_order_byte_6 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_6_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Byte 5
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_5 = 1

-- Display: New Order Byte 5
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_5 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Reserved Bit 2 Exists|"
  end
  -- Is New Order Reserved Bit 1 Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Reserved Bit 1 Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_5_bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_2_exists, buffer(offset, 1))

  -- New Order Reserved Bit 1 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_1_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 5
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_5 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_5(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_5, range, display)

  if show.new_order_byte_5 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_5_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Byte 4
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_4 = 1

-- Display: New Order Byte 4
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_4 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Cmta Number Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Cmta Number Exists|"
  end
  -- Is New Order Open Close Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Open Close Exists|"
  end
  -- Is New Order Risk Reset Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Risk Reset Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Reserved Bit 2 Exists|"
  end
  -- Is New Order Maturity Date Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Maturity Date Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_4_bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Cmta Number Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_cmta_number_exists, buffer(offset, 1))

  -- New Order Open Close Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_open_close_exists, buffer(offset, 1))

  -- New Order Risk Reset Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_risk_reset_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_2_exists, buffer(offset, 1))

  -- New Order Maturity Date Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_maturity_date_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 4
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_4 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_4(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_4, range, display)

  if show.new_order_byte_4 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_4_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Byte 3
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_3 = 1

-- Display: New Order Byte 3
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_3 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Expire Time Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Expire Time Exists|"
  end
  -- Is New Order Reserved Bit 7 Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Reserved Bit 7 Exists|"
  end
  -- Is New Order Prevent Match Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Prevent Match Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Reserved Bit 2 Exists|"
  end
  -- Is New Order Account Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Account Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_3_bits = function(buffer, offset, packet, parent)

  -- New Order Expire Time Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_expire_time_exists, buffer(offset, 1))

  -- New Order Reserved Bit 7 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_7_exists, buffer(offset, 1))

  -- New Order Prevent Match Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_prevent_match_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_2_exists, buffer(offset, 1))

  -- New Order Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_account_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 3
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_3 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_3(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_3, range, display)

  if show.new_order_byte_3 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_3_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Byte 2
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_2 = 1

-- Display: New Order Byte 2
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_2 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Capacity Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Capacity Exists|"
  end
  -- Is New Order Reserved Bit 6 Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Reserved Bit 6 Exists|"
  end
  -- Is New Order Reserved Bit 5 Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Reserved Bit 5 Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Reserved Bit 3 Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Reserved Bit 3 Exists|"
  end
  -- Is New Order Reserved Bit 2 Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Reserved Bit 2 Exists|"
  end
  -- Is New Order Symbol Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Symbol Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_2_bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Capacity Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_capacity_exists, buffer(offset, 1))

  -- New Order Reserved Bit 6 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_6_exists, buffer(offset, 1))

  -- New Order Reserved Bit 5 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_5_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Reserved Bit 3 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_3_exists, buffer(offset, 1))

  -- New Order Reserved Bit 2 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_2_exists, buffer(offset, 1))

  -- New Order Symbol Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_symbol_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 2
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_2 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_2(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_2, range, display)

  if show.new_order_byte_2 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_2_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Byte 1
cboe_futures_orderentry_boe_v1_3_size_of.new_order_byte_1 = 1

-- Display: New Order Byte 1
cboe_futures_orderentry_boe_v1_3_display.new_order_byte_1 = function(buffer, packet, parent)
  local display = ""

  -- Is New Order Reserved Bit 8 Exists flag set?
  if buffer:bitfield(0) > 0 then
    display = display.."New Order Reserved Bit 8 Exists|"
  end
  -- Is New Order Min Qty Exists flag set?
  if buffer:bitfield(1) > 0 then
    display = display.."New Order Min Qty Exists|"
  end
  -- Is New Order Time In Force Exists flag set?
  if buffer:bitfield(2) > 0 then
    display = display.."New Order Time In Force Exists|"
  end
  -- Is New Order Ord Type Exists flag set?
  if buffer:bitfield(3) > 0 then
    display = display.."New Order Ord Type Exists|"
  end
  -- Is New Order Reserved Bit 4 Exists flag set?
  if buffer:bitfield(4) > 0 then
    display = display.."New Order Reserved Bit 4 Exists|"
  end
  -- Is New Order Price Exists flag set?
  if buffer:bitfield(5) > 0 then
    display = display.."New Order Price Exists|"
  end
  -- Is New Order Clearing Account Exists flag set?
  if buffer:bitfield(6) > 0 then
    display = display.."New Order Clearing Account Exists|"
  end
  -- Is New Order Clearing Firm Exists flag set?
  if buffer:bitfield(7) > 0 then
    display = display.."New Order Clearing Firm Exists|"
  end

  return display:sub(1, -2)
end

-- Dissect Bit Fields: New Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_1_bits = function(buffer, offset, packet, parent)

  -- New Order Reserved Bit 8 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_8_exists, buffer(offset, 1))

  -- New Order Min Qty Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_min_qty_exists, buffer(offset, 1))

  -- New Order Time In Force Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_time_in_force_exists, buffer(offset, 1))

  -- New Order Ord Type Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_ord_type_exists, buffer(offset, 1))

  -- New Order Reserved Bit 4 Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_reserved_bit_4_exists, buffer(offset, 1))

  -- New Order Price Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_price_exists, buffer(offset, 1))

  -- New Order Clearing Account Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_clearing_account_exists, buffer(offset, 1))

  -- New Order Clearing Firm Exists: 1 Bit
  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_clearing_firm_exists, buffer(offset, 1))
end

-- Dissect: New Order Byte 1
cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_1 = function(buffer, offset, packet, parent)
  local size = 1
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_byte_1(range, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_byte_1, range, display)

  if show.new_order_byte_1 then
    cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_1_bits(buffer, offset, packet, element)
  end

  return offset + 1, range
end

-- Size: New Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_size_of.new_order_bitfield_count = 1

-- Display: New Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_display.new_order_bitfield_count = function(value)
  return "New Order Bitfield Count: "..value
end

-- Dissect: New Order Bitfield Count
cboe_futures_orderentry_boe_v1_3_dissect.new_order_bitfield_count = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.new_order_bitfield_count
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.new_order_bitfield_count(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_bitfield_count, range, value, display)

  return offset + length, value
end

-- Display: New Order Optional Fields
cboe_futures_orderentry_boe_v1_3_display.new_order_optional_fields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.new_order_optional_fields_fields = function(buffer, offset, packet, parent, size_of_new_order_optional_fields)
  local index = offset

  -- New Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, new_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.new_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: New Order Byte 1
  local new_order_byte_1_exists = new_order_bitfield_count >= 1

  -- Runtime optional field: New Order Byte 1
  if new_order_byte_1_exists then

    -- New Order Byte 1: Struct of 8 fields
    index, new_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 2
  local new_order_byte_2_exists = new_order_bitfield_count >= 2

  -- Runtime optional field: New Order Byte 2
  if new_order_byte_2_exists then

    -- New Order Byte 2: Struct of 8 fields
    index, new_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 3
  local new_order_byte_3_exists = new_order_bitfield_count >= 3

  -- Runtime optional field: New Order Byte 3
  if new_order_byte_3_exists then

    -- New Order Byte 3: Struct of 8 fields
    index, new_order_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 4
  local new_order_byte_4_exists = new_order_bitfield_count >= 4

  -- Runtime optional field: New Order Byte 4
  if new_order_byte_4_exists then

    -- New Order Byte 4: Struct of 8 fields
    index, new_order_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 5
  local new_order_byte_5_exists = new_order_bitfield_count >= 5

  -- Runtime optional field: New Order Byte 5
  if new_order_byte_5_exists then

    -- New Order Byte 5: Struct of 8 fields
    index, new_order_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 6
  local new_order_byte_6_exists = new_order_bitfield_count >= 6

  -- Runtime optional field: New Order Byte 6
  if new_order_byte_6_exists then

    -- New Order Byte 6: Struct of 8 fields
    index, new_order_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 7
  local new_order_byte_7_exists = new_order_bitfield_count >= 7

  -- Runtime optional field: New Order Byte 7
  if new_order_byte_7_exists then

    -- New Order Byte 7: Struct of 8 fields
    index, new_order_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 8
  local new_order_byte_8_exists = new_order_bitfield_count >= 8

  -- Runtime optional field: New Order Byte 8
  if new_order_byte_8_exists then

    -- New Order Byte 8: Struct of 8 fields
    index, new_order_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Firm
  local clearing_firm_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(7) > 0

  -- Runtime optional field: Clearing Firm
  if clearing_firm_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_firm(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Clearing Account
  local clearing_account_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(6) > 0

  -- Runtime optional field: Clearing Account
  if clearing_account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.clearing_account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Price
  local price_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(5) > 0

  -- Runtime optional field: Price
  if price_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.price(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Ord Type
  local ord_type_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(3) > 0

  -- Runtime optional field: Ord Type
  if ord_type_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.ord_type(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Time In Force
  local time_in_force_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(2) > 0

  -- Runtime optional field: Time In Force
  if time_in_force_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.time_in_force(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Min Qty
  local min_qty_exists = new_order_bitfield_count >= 1 and new_order_byte_1:bitfield(1) > 0

  -- Runtime optional field: Min Qty
  if min_qty_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.min_qty(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Symbol
  local symbol_exists = new_order_bitfield_count >= 2 and new_order_byte_2:bitfield(7) > 0

  -- Runtime optional field: Symbol
  if symbol_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.symbol(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Capacity
  local capacity_exists = new_order_bitfield_count >= 2 and new_order_byte_2:bitfield(1) > 0

  -- Runtime optional field: Capacity
  if capacity_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.capacity(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Account
  local account_exists = new_order_bitfield_count >= 3 and new_order_byte_3:bitfield(7) > 0

  -- Runtime optional field: Account
  if account_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.account(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Prevent Match
  local prevent_match_exists = new_order_bitfield_count >= 3 and new_order_byte_3:bitfield(2) > 0

  -- Runtime optional field: Prevent Match
  if prevent_match_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.prevent_match(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Expire Time
  local expire_time_exists = new_order_bitfield_count >= 3 and new_order_byte_3:bitfield(0) > 0

  -- Runtime optional field: Expire Time
  if expire_time_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.expire_time(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Maturity Date
  local maturity_date_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(7) > 0

  -- Runtime optional field: Maturity Date
  if maturity_date_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.maturity_date(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Risk Reset
  local risk_reset_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(4) > 0

  -- Runtime optional field: Risk Reset
  if risk_reset_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.risk_reset(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Open Close
  local open_close_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(3) > 0

  -- Runtime optional field: Open Close
  if open_close_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.open_close(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cmta Number
  local cmta_number_exists = new_order_bitfield_count >= 4 and new_order_byte_4:bitfield(2) > 0

  -- Runtime optional field: Cmta Number
  if cmta_number_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cmta_number(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Stop Px
  local stop_px_exists = new_order_bitfield_count >= 6 and new_order_byte_6:bitfield(6) > 0

  -- Runtime optional field: Stop Px
  if stop_px_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.stop_px(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Custom Group Id
  local custom_group_id_exists = new_order_bitfield_count >= 7 and new_order_byte_7:bitfield(6) > 0

  -- Runtime optional field: Custom Group Id
  if custom_group_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.custom_group_id(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cti Code
  local cti_code_exists = new_order_bitfield_count >= 7 and new_order_byte_7:bitfield(2) > 0

  -- Runtime optional field: Cti Code
  if cti_code_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.cti_code(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Manual Order Indicator
  local manual_order_indicator_exists = new_order_bitfield_count >= 7 and new_order_byte_7:bitfield(1) > 0

  -- Runtime optional field: Manual Order Indicator
  if manual_order_indicator_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.manual_order_indicator(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Oeoid
  local oeoid_exists = new_order_bitfield_count >= 7 and new_order_byte_7:bitfield(0) > 0

  -- Runtime optional field: Oeoid
  if oeoid_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.oeoid(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Reserved Bit 2
  local reserved_bit_2_exists = new_order_bitfield_count >= 8 and new_order_byte_8:bitfield(6) > 0

  -- Runtime optional field: Reserved Bit 2
  if reserved_bit_2_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.reserved_bit_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Frequent Trader Id
  local frequent_trader_id_exists = new_order_bitfield_count >= 8 and new_order_byte_8:bitfield(3) > 0

  -- Runtime optional field: Frequent Trader Id
  if frequent_trader_id_exists then
    index = cboe_futures_orderentry_boe_v1_3_dissect.frequent_trader_id(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: New Order Optional Fields
cboe_futures_orderentry_boe_v1_3_dissect.new_order_optional_fields = function(buffer, offset, packet, parent, size_of_new_order_optional_fields)
  -- Optionally add struct element to protocol tree
  if show.new_order_optional_fields then
    local range = buffer(offset, size_of_new_order_optional_fields)
    local display = cboe_futures_orderentry_boe_v1_3_display.new_order_optional_fields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_optional_fields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.new_order_optional_fields_fields(buffer, offset, packet, parent, size_of_new_order_optional_fields)

  return offset + size_of_new_order_optional_fields
end

-- Read runtime size of: New Order Message
cboe_futures_orderentry_boe_v1_3_size_of.new_order_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: New Order Message
cboe_futures_orderentry_boe_v1_3_display.new_order_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Message
cboe_futures_orderentry_boe_v1_3_dissect.new_order_message_fields = function(buffer, offset, packet, parent, size_of_new_order_message)
  local index = offset

  -- Cl Ord Id: 20 Byte Ascii String
  index, cl_ord_id = cboe_futures_orderentry_boe_v1_3_dissect.cl_ord_id(buffer, index, packet, parent)

  -- Side: 1 Byte Ascii String Enum with 2 values
  index, side = cboe_futures_orderentry_boe_v1_3_dissect.side(buffer, index, packet, parent)

  -- Order Qty: 4 Byte Unsigned Fixed Width Integer
  index, order_qty = cboe_futures_orderentry_boe_v1_3_dissect.order_qty(buffer, index, packet, parent)

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  -- Runtime Size Of: New Order Optional Fields
  local size_of_new_order_optional_fields = message_length - (index - offset) - 8

  -- New Order Optional Fields: Struct of 31 fields
  index = cboe_futures_orderentry_boe_v1_3_dissect.new_order_optional_fields(buffer, index, packet, parent, size_of_new_order_optional_fields)

  return index
end

-- Dissect: New Order Message
cboe_futures_orderentry_boe_v1_3_dissect.new_order_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_new_order_message = cboe_futures_orderentry_boe_v1_3_size_of.new_order_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.new_order_message then
    local range = buffer(offset, size_of_new_order_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.new_order_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.new_order_message_fields(buffer, offset, packet, parent, size_of_new_order_message)

  return offset + size_of_new_order_message
end

-- Size: Sequence Number
cboe_futures_orderentry_boe_v1_3_size_of.sequence_number = 4

-- Display: Sequence Number
cboe_futures_orderentry_boe_v1_3_display.sequence_number = function(value)
  return "Sequence Number: "..value
end

-- Dissect: Sequence Number
cboe_futures_orderentry_boe_v1_3_dissect.sequence_number = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.sequence_number
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.sequence_number(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.sequence_number, range, value, display)

  return offset + length, value
end

-- Size: Unit Number
cboe_futures_orderentry_boe_v1_3_size_of.unit_number = 1

-- Display: Unit Number
cboe_futures_orderentry_boe_v1_3_display.unit_number = function(value)
  return "Unit Number: "..value
end

-- Dissect: Unit Number
cboe_futures_orderentry_boe_v1_3_dissect.unit_number = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.unit_number
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.unit_number(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.unit_number, range, value, display)

  return offset + length, value
end

-- Calculate size of: Unit Sequence
cboe_futures_orderentry_boe_v1_3_size_of.unit_sequence = function(buffer, offset)
  local index = 0

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.unit_number

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.sequence_number

  return index
end

-- Display: Unit Sequence
cboe_futures_orderentry_boe_v1_3_display.unit_sequence = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Unit Sequence
cboe_futures_orderentry_boe_v1_3_dissect.unit_sequence_fields = function(buffer, offset, packet, parent)
  local index = offset

  -- Unit Number: 1 Byte Unsigned Fixed Width Integer
  index, unit_number = cboe_futures_orderentry_boe_v1_3_dissect.unit_number(buffer, index, packet, parent)

  -- Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, sequence_number = cboe_futures_orderentry_boe_v1_3_dissect.sequence_number(buffer, index, packet, parent)

  return index
end

-- Dissect: Unit Sequence
cboe_futures_orderentry_boe_v1_3_dissect.unit_sequence = function(buffer, offset, packet, parent)
  if show.unit_sequence then
    -- Optionally add element to protocol tree
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.unit_sequence, buffer(offset, 0))
    local index = cboe_futures_orderentry_boe_v1_3_dissect.unit_sequence_fields(buffer, offset, packet, parent)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_futures_orderentry_boe_v1_3_display.unit_sequence(packet, parent, length)
    parent:append_text(display)

    return index
  else
    -- Skip element, add fields directly
    return cboe_futures_orderentry_boe_v1_3_dissect.unit_sequence_fields(buffer, offset, packet, parent)
  end
end

-- Size: Number Of Units
cboe_futures_orderentry_boe_v1_3_size_of.number_of_units = 1

-- Display: Number Of Units
cboe_futures_orderentry_boe_v1_3_display.number_of_units = function(value)
  return "Number Of Units: "..value
end

-- Dissect: Number Of Units
cboe_futures_orderentry_boe_v1_3_dissect.number_of_units = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.number_of_units
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.number_of_units(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.number_of_units, range, value, display)

  return offset + length, value
end

-- Size: Last Received Sequence Number
cboe_futures_orderentry_boe_v1_3_size_of.last_received_sequence_number = 4

-- Display: Last Received Sequence Number
cboe_futures_orderentry_boe_v1_3_display.last_received_sequence_number = function(value)
  return "Last Received Sequence Number: "..value
end

-- Dissect: Last Received Sequence Number
cboe_futures_orderentry_boe_v1_3_dissect.last_received_sequence_number = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.last_received_sequence_number
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.last_received_sequence_number(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.last_received_sequence_number, range, value, display)

  return offset + length, value
end

-- Size: Logout Reason Text
cboe_futures_orderentry_boe_v1_3_size_of.logout_reason_text = 60

-- Display: Logout Reason Text
cboe_futures_orderentry_boe_v1_3_display.logout_reason_text = function(value)
  return "Logout Reason Text: "..value
end

-- Dissect: Logout Reason Text
cboe_futures_orderentry_boe_v1_3_dissect.logout_reason_text = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.logout_reason_text
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.logout_reason_text(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.logout_reason_text, range, value, display)

  return offset + length, value
end

-- Size: Logout Reason
cboe_futures_orderentry_boe_v1_3_size_of.logout_reason = 1

-- Display: Logout Reason
cboe_futures_orderentry_boe_v1_3_display.logout_reason = function(value)
  if value == "U" then
    return "Logout Reason: User Requested (U)"
  end
  if value == "E" then
    return "Logout Reason: End Of Day (E)"
  end
  if value == "A" then
    return "Logout Reason: Administrative (A)"
  end
  if value == "!" then
    return "Logout Reason: Protocol Violation (!)"
  end

  return "Logout Reason: Unknown("..value..")"
end

-- Dissect: Logout Reason
cboe_futures_orderentry_boe_v1_3_dissect.logout_reason = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.logout_reason
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.logout_reason(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.logout_reason, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Logout Message
cboe_futures_orderentry_boe_v1_3_size_of.logout_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Logout Message
cboe_futures_orderentry_boe_v1_3_display.logout_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Logout Message
cboe_futures_orderentry_boe_v1_3_dissect.logout_message_fields = function(buffer, offset, packet, parent, size_of_logout_message)
  local index = offset

  -- Logout Reason: 1 Byte Ascii String Enum with 4 values
  index, logout_reason = cboe_futures_orderentry_boe_v1_3_dissect.logout_reason(buffer, index, packet, parent)

  -- Logout Reason Text: 60 Byte Ascii String
  index, logout_reason_text = cboe_futures_orderentry_boe_v1_3_dissect.logout_reason_text(buffer, index, packet, parent)

  -- Last Received Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, last_received_sequence_number = cboe_futures_orderentry_boe_v1_3_dissect.last_received_sequence_number(buffer, index, packet, parent)

  -- Number Of Units: 1 Byte Unsigned Fixed Width Integer
  index, number_of_units = cboe_futures_orderentry_boe_v1_3_dissect.number_of_units(buffer, index, packet, parent)

  -- Unit Sequence: Struct of 2 fields
  for i = 1, number_of_units do
    index = cboe_futures_orderentry_boe_v1_3_dissect.unit_sequence(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Logout Message
cboe_futures_orderentry_boe_v1_3_dissect.logout_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_logout_message = cboe_futures_orderentry_boe_v1_3_size_of.logout_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.logout_message then
    local range = buffer(offset, size_of_logout_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.logout_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.logout_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.logout_message_fields(buffer, offset, packet, parent, size_of_logout_message)

  return offset + size_of_logout_message
end

-- Read runtime size of: Variance Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Variance Restatement Bitfield Count
  local variance_restatement_bitfield_count = buffer(offset, 1):le_uint()

  return variance_restatement_bitfield_count + 1
end

-- Display: Variance Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.variance_restatement_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Variance Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_variance_restatement_return_bitfields)
  local index = offset

  -- Variance Restatement Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, variance_restatement_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Variance Restatement Byte 1
  local variance_restatement_byte_1_exists = variance_restatement_bitfield_count >= 1

  -- Runtime optional field: Variance Restatement Byte 1
  if variance_restatement_byte_1_exists then

    -- Variance Restatement Byte 1: Struct of 8 fields
    index, variance_restatement_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 2
  local variance_restatement_byte_2_exists = variance_restatement_bitfield_count >= 2

  -- Runtime optional field: Variance Restatement Byte 2
  if variance_restatement_byte_2_exists then

    -- Variance Restatement Byte 2: Struct of 8 fields
    index, variance_restatement_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 3
  local variance_restatement_byte_3_exists = variance_restatement_bitfield_count >= 3

  -- Runtime optional field: Variance Restatement Byte 3
  if variance_restatement_byte_3_exists then

    -- Variance Restatement Byte 3: Struct of 8 fields
    index, variance_restatement_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 4
  local variance_restatement_byte_4_exists = variance_restatement_bitfield_count >= 4

  -- Runtime optional field: Variance Restatement Byte 4
  if variance_restatement_byte_4_exists then

    -- Variance Restatement Byte 4: Struct of 8 fields
    index, variance_restatement_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 5
  local variance_restatement_byte_5_exists = variance_restatement_bitfield_count >= 5

  -- Runtime optional field: Variance Restatement Byte 5
  if variance_restatement_byte_5_exists then

    -- Variance Restatement Byte 5: Struct of 8 fields
    index, variance_restatement_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 6
  local variance_restatement_byte_6_exists = variance_restatement_bitfield_count >= 6

  -- Runtime optional field: Variance Restatement Byte 6
  if variance_restatement_byte_6_exists then

    -- Variance Restatement Byte 6: Struct of 8 fields
    index, variance_restatement_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 7
  local variance_restatement_byte_7_exists = variance_restatement_bitfield_count >= 7

  -- Runtime optional field: Variance Restatement Byte 7
  if variance_restatement_byte_7_exists then

    -- Variance Restatement Byte 7: Struct of 8 fields
    index, variance_restatement_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 8
  local variance_restatement_byte_8_exists = variance_restatement_bitfield_count >= 8

  -- Runtime optional field: Variance Restatement Byte 8
  if variance_restatement_byte_8_exists then

    -- Variance Restatement Byte 8: Struct of 8 fields
    index, variance_restatement_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 9
  local variance_restatement_byte_9_exists = variance_restatement_bitfield_count >= 9

  -- Runtime optional field: Variance Restatement Byte 9
  if variance_restatement_byte_9_exists then

    -- Variance Restatement Byte 9: Struct of 8 fields
    index, variance_restatement_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 10
  local variance_restatement_byte_10_exists = variance_restatement_bitfield_count >= 10

  -- Runtime optional field: Variance Restatement Byte 10
  if variance_restatement_byte_10_exists then

    -- Variance Restatement Byte 10: Struct of 8 fields
    index, variance_restatement_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 11
  local variance_restatement_byte_11_exists = variance_restatement_bitfield_count >= 11

  -- Runtime optional field: Variance Restatement Byte 11
  if variance_restatement_byte_11_exists then

    -- Variance Restatement Byte 11: Struct of 8 fields
    index, variance_restatement_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 12
  local variance_restatement_byte_12_exists = variance_restatement_bitfield_count >= 12

  -- Runtime optional field: Variance Restatement Byte 12
  if variance_restatement_byte_12_exists then

    -- Variance Restatement Byte 12: Struct of 8 fields
    index, variance_restatement_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 13
  local variance_restatement_byte_13_exists = variance_restatement_bitfield_count >= 13

  -- Runtime optional field: Variance Restatement Byte 13
  if variance_restatement_byte_13_exists then

    -- Variance Restatement Byte 13: Struct of 8 fields
    index, variance_restatement_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 14
  local variance_restatement_byte_14_exists = variance_restatement_bitfield_count >= 14

  -- Runtime optional field: Variance Restatement Byte 14
  if variance_restatement_byte_14_exists then

    -- Variance Restatement Byte 14: Struct of 8 fields
    index, variance_restatement_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 15
  local variance_restatement_byte_15_exists = variance_restatement_bitfield_count >= 15

  -- Runtime optional field: Variance Restatement Byte 15
  if variance_restatement_byte_15_exists then

    -- Variance Restatement Byte 15: Struct of 8 fields
    index, variance_restatement_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 16
  local variance_restatement_byte_16_exists = variance_restatement_bitfield_count >= 16

  -- Runtime optional field: Variance Restatement Byte 16
  if variance_restatement_byte_16_exists then

    -- Variance Restatement Byte 16: Struct of 8 fields
    index, variance_restatement_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Variance Restatement Byte 17
  local variance_restatement_byte_17_exists = variance_restatement_bitfield_count >= 17

  -- Runtime optional field: Variance Restatement Byte 17
  if variance_restatement_byte_17_exists then

    -- Variance Restatement Byte 17: Struct of 8 fields
    index, variance_restatement_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Variance Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_variance_restatement_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.variance_restatement_return_bitfields then
    local range = buffer(offset, size_of_variance_restatement_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.variance_restatement_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.variance_restatement_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_return_bitfields_fields(buffer, offset, packet, parent, size_of_variance_restatement_return_bitfields)

  return offset + size_of_variance_restatement_return_bitfields
end

-- Read runtime size of: Tas Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Tas Restatement Bitfield Count
  local tas_restatement_bitfield_count = buffer(offset, 1):le_uint()

  return tas_restatement_bitfield_count + 1
end

-- Display: Tas Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.tas_restatement_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Tas Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_tas_restatement_return_bitfields)
  local index = offset

  -- Tas Restatement Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, tas_restatement_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Tas Restatement Byte 1
  local tas_restatement_byte_1_exists = tas_restatement_bitfield_count >= 1

  -- Runtime optional field: Tas Restatement Byte 1
  if tas_restatement_byte_1_exists then

    -- Tas Restatement Byte 1: Struct of 8 fields
    index, tas_restatement_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 2
  local tas_restatement_byte_2_exists = tas_restatement_bitfield_count >= 2

  -- Runtime optional field: Tas Restatement Byte 2
  if tas_restatement_byte_2_exists then

    -- Tas Restatement Byte 2: Struct of 8 fields
    index, tas_restatement_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 3
  local tas_restatement_byte_3_exists = tas_restatement_bitfield_count >= 3

  -- Runtime optional field: Tas Restatement Byte 3
  if tas_restatement_byte_3_exists then

    -- Tas Restatement Byte 3: Struct of 8 fields
    index, tas_restatement_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 4
  local tas_restatement_byte_4_exists = tas_restatement_bitfield_count >= 4

  -- Runtime optional field: Tas Restatement Byte 4
  if tas_restatement_byte_4_exists then

    -- Tas Restatement Byte 4: Struct of 8 fields
    index, tas_restatement_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 5
  local tas_restatement_byte_5_exists = tas_restatement_bitfield_count >= 5

  -- Runtime optional field: Tas Restatement Byte 5
  if tas_restatement_byte_5_exists then

    -- Tas Restatement Byte 5: Struct of 8 fields
    index, tas_restatement_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 6
  local tas_restatement_byte_6_exists = tas_restatement_bitfield_count >= 6

  -- Runtime optional field: Tas Restatement Byte 6
  if tas_restatement_byte_6_exists then

    -- Tas Restatement Byte 6: Struct of 8 fields
    index, tas_restatement_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 7
  local tas_restatement_byte_7_exists = tas_restatement_bitfield_count >= 7

  -- Runtime optional field: Tas Restatement Byte 7
  if tas_restatement_byte_7_exists then

    -- Tas Restatement Byte 7: Struct of 8 fields
    index, tas_restatement_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 8
  local tas_restatement_byte_8_exists = tas_restatement_bitfield_count >= 8

  -- Runtime optional field: Tas Restatement Byte 8
  if tas_restatement_byte_8_exists then

    -- Tas Restatement Byte 8: Struct of 8 fields
    index, tas_restatement_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 9
  local tas_restatement_byte_9_exists = tas_restatement_bitfield_count >= 9

  -- Runtime optional field: Tas Restatement Byte 9
  if tas_restatement_byte_9_exists then

    -- Tas Restatement Byte 9: Struct of 8 fields
    index, tas_restatement_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 10
  local tas_restatement_byte_10_exists = tas_restatement_bitfield_count >= 10

  -- Runtime optional field: Tas Restatement Byte 10
  if tas_restatement_byte_10_exists then

    -- Tas Restatement Byte 10: Struct of 8 fields
    index, tas_restatement_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 11
  local tas_restatement_byte_11_exists = tas_restatement_bitfield_count >= 11

  -- Runtime optional field: Tas Restatement Byte 11
  if tas_restatement_byte_11_exists then

    -- Tas Restatement Byte 11: Struct of 8 fields
    index, tas_restatement_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 12
  local tas_restatement_byte_12_exists = tas_restatement_bitfield_count >= 12

  -- Runtime optional field: Tas Restatement Byte 12
  if tas_restatement_byte_12_exists then

    -- Tas Restatement Byte 12: Struct of 8 fields
    index, tas_restatement_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 13
  local tas_restatement_byte_13_exists = tas_restatement_bitfield_count >= 13

  -- Runtime optional field: Tas Restatement Byte 13
  if tas_restatement_byte_13_exists then

    -- Tas Restatement Byte 13: Struct of 8 fields
    index, tas_restatement_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 14
  local tas_restatement_byte_14_exists = tas_restatement_bitfield_count >= 14

  -- Runtime optional field: Tas Restatement Byte 14
  if tas_restatement_byte_14_exists then

    -- Tas Restatement Byte 14: Struct of 8 fields
    index, tas_restatement_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 15
  local tas_restatement_byte_15_exists = tas_restatement_bitfield_count >= 15

  -- Runtime optional field: Tas Restatement Byte 15
  if tas_restatement_byte_15_exists then

    -- Tas Restatement Byte 15: Struct of 8 fields
    index, tas_restatement_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 16
  local tas_restatement_byte_16_exists = tas_restatement_bitfield_count >= 16

  -- Runtime optional field: Tas Restatement Byte 16
  if tas_restatement_byte_16_exists then

    -- Tas Restatement Byte 16: Struct of 8 fields
    index, tas_restatement_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Tas Restatement Byte 17
  local tas_restatement_byte_17_exists = tas_restatement_bitfield_count >= 17

  -- Runtime optional field: Tas Restatement Byte 17
  if tas_restatement_byte_17_exists then

    -- Tas Restatement Byte 17: Struct of 8 fields
    index, tas_restatement_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Tas Restatement Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_tas_restatement_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.tas_restatement_return_bitfields then
    local range = buffer(offset, size_of_tas_restatement_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.tas_restatement_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.tas_restatement_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_return_bitfields_fields(buffer, offset, packet, parent, size_of_tas_restatement_return_bitfields)

  return offset + size_of_tas_restatement_return_bitfields
end

-- Read runtime size of: Purge Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Purge Rejected Bitfield Count
  local purge_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return purge_rejected_bitfield_count + 1
end

-- Display: Purge Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.purge_rejected_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_purge_rejected_return_bitfields)
  local index = offset

  -- Purge Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, purge_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Purge Rejected Byte 1
  local purge_rejected_byte_1_exists = purge_rejected_bitfield_count >= 1

  -- Runtime optional field: Purge Rejected Byte 1
  if purge_rejected_byte_1_exists then

    -- Purge Rejected Byte 1: Struct of 8 fields
    index, purge_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 2
  local purge_rejected_byte_2_exists = purge_rejected_bitfield_count >= 2

  -- Runtime optional field: Purge Rejected Byte 2
  if purge_rejected_byte_2_exists then

    -- Purge Rejected Byte 2: Struct of 8 fields
    index, purge_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 3
  local purge_rejected_byte_3_exists = purge_rejected_bitfield_count >= 3

  -- Runtime optional field: Purge Rejected Byte 3
  if purge_rejected_byte_3_exists then

    -- Purge Rejected Byte 3: Struct of 8 fields
    index, purge_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 4
  local purge_rejected_byte_4_exists = purge_rejected_bitfield_count >= 4

  -- Runtime optional field: Purge Rejected Byte 4
  if purge_rejected_byte_4_exists then

    -- Purge Rejected Byte 4: Struct of 8 fields
    index, purge_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 5
  local purge_rejected_byte_5_exists = purge_rejected_bitfield_count >= 5

  -- Runtime optional field: Purge Rejected Byte 5
  if purge_rejected_byte_5_exists then

    -- Purge Rejected Byte 5: Struct of 8 fields
    index, purge_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 6
  local purge_rejected_byte_6_exists = purge_rejected_bitfield_count >= 6

  -- Runtime optional field: Purge Rejected Byte 6
  if purge_rejected_byte_6_exists then

    -- Purge Rejected Byte 6: Struct of 8 fields
    index, purge_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 7
  local purge_rejected_byte_7_exists = purge_rejected_bitfield_count >= 7

  -- Runtime optional field: Purge Rejected Byte 7
  if purge_rejected_byte_7_exists then

    -- Purge Rejected Byte 7: Struct of 8 fields
    index, purge_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 8
  local purge_rejected_byte_8_exists = purge_rejected_bitfield_count >= 8

  -- Runtime optional field: Purge Rejected Byte 8
  if purge_rejected_byte_8_exists then

    -- Purge Rejected Byte 8: Struct of 8 fields
    index, purge_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 9
  local purge_rejected_byte_9_exists = purge_rejected_bitfield_count >= 9

  -- Runtime optional field: Purge Rejected Byte 9
  if purge_rejected_byte_9_exists then

    -- Purge Rejected Byte 9: Struct of 8 fields
    index, purge_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 10
  local purge_rejected_byte_10_exists = purge_rejected_bitfield_count >= 10

  -- Runtime optional field: Purge Rejected Byte 10
  if purge_rejected_byte_10_exists then

    -- Purge Rejected Byte 10: Struct of 8 fields
    index, purge_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 11
  local purge_rejected_byte_11_exists = purge_rejected_bitfield_count >= 11

  -- Runtime optional field: Purge Rejected Byte 11
  if purge_rejected_byte_11_exists then

    -- Purge Rejected Byte 11: Struct of 8 fields
    index, purge_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 12
  local purge_rejected_byte_12_exists = purge_rejected_bitfield_count >= 12

  -- Runtime optional field: Purge Rejected Byte 12
  if purge_rejected_byte_12_exists then

    -- Purge Rejected Byte 12: Struct of 8 fields
    index, purge_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 13
  local purge_rejected_byte_13_exists = purge_rejected_bitfield_count >= 13

  -- Runtime optional field: Purge Rejected Byte 13
  if purge_rejected_byte_13_exists then

    -- Purge Rejected Byte 13: Struct of 8 fields
    index, purge_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 14
  local purge_rejected_byte_14_exists = purge_rejected_bitfield_count >= 14

  -- Runtime optional field: Purge Rejected Byte 14
  if purge_rejected_byte_14_exists then

    -- Purge Rejected Byte 14: Struct of 8 fields
    index, purge_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 15
  local purge_rejected_byte_15_exists = purge_rejected_bitfield_count >= 15

  -- Runtime optional field: Purge Rejected Byte 15
  if purge_rejected_byte_15_exists then

    -- Purge Rejected Byte 15: Struct of 8 fields
    index, purge_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 16
  local purge_rejected_byte_16_exists = purge_rejected_bitfield_count >= 16

  -- Runtime optional field: Purge Rejected Byte 16
  if purge_rejected_byte_16_exists then

    -- Purge Rejected Byte 16: Struct of 8 fields
    index, purge_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Rejected Byte 17
  local purge_rejected_byte_17_exists = purge_rejected_bitfield_count >= 17

  -- Runtime optional field: Purge Rejected Byte 17
  if purge_rejected_byte_17_exists then

    -- Purge Rejected Byte 17: Struct of 8 fields
    index, purge_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Purge Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_purge_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.purge_rejected_return_bitfields then
    local range = buffer(offset, size_of_purge_rejected_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.purge_rejected_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_rejected_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_return_bitfields_fields(buffer, offset, packet, parent, size_of_purge_rejected_return_bitfields)

  return offset + size_of_purge_rejected_return_bitfields
end

-- Read runtime size of: Trade Cancel Or Correct Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Trade Cancel Or Correct Bitfield Count
  local trade_cancel_or_correct_bitfield_count = buffer(offset, 1):le_uint()

  return trade_cancel_or_correct_bitfield_count + 1
end

-- Display: Trade Cancel Or Correct Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Trade Cancel Or Correct Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_return_bitfields)
  local index = offset

  -- Trade Cancel Or Correct Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, trade_cancel_or_correct_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 1
  local trade_cancel_or_correct_byte_1_exists = trade_cancel_or_correct_bitfield_count >= 1

  -- Runtime optional field: Trade Cancel Or Correct Byte 1
  if trade_cancel_or_correct_byte_1_exists then

    -- Trade Cancel Or Correct Byte 1: Struct of 8 fields
    index, trade_cancel_or_correct_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 2
  local trade_cancel_or_correct_byte_2_exists = trade_cancel_or_correct_bitfield_count >= 2

  -- Runtime optional field: Trade Cancel Or Correct Byte 2
  if trade_cancel_or_correct_byte_2_exists then

    -- Trade Cancel Or Correct Byte 2: Struct of 8 fields
    index, trade_cancel_or_correct_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 3
  local trade_cancel_or_correct_byte_3_exists = trade_cancel_or_correct_bitfield_count >= 3

  -- Runtime optional field: Trade Cancel Or Correct Byte 3
  if trade_cancel_or_correct_byte_3_exists then

    -- Trade Cancel Or Correct Byte 3: Struct of 8 fields
    index, trade_cancel_or_correct_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 4
  local trade_cancel_or_correct_byte_4_exists = trade_cancel_or_correct_bitfield_count >= 4

  -- Runtime optional field: Trade Cancel Or Correct Byte 4
  if trade_cancel_or_correct_byte_4_exists then

    -- Trade Cancel Or Correct Byte 4: Struct of 8 fields
    index, trade_cancel_or_correct_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 5
  local trade_cancel_or_correct_byte_5_exists = trade_cancel_or_correct_bitfield_count >= 5

  -- Runtime optional field: Trade Cancel Or Correct Byte 5
  if trade_cancel_or_correct_byte_5_exists then

    -- Trade Cancel Or Correct Byte 5: Struct of 8 fields
    index, trade_cancel_or_correct_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 6
  local trade_cancel_or_correct_byte_6_exists = trade_cancel_or_correct_bitfield_count >= 6

  -- Runtime optional field: Trade Cancel Or Correct Byte 6
  if trade_cancel_or_correct_byte_6_exists then

    -- Trade Cancel Or Correct Byte 6: Struct of 8 fields
    index, trade_cancel_or_correct_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 7
  local trade_cancel_or_correct_byte_7_exists = trade_cancel_or_correct_bitfield_count >= 7

  -- Runtime optional field: Trade Cancel Or Correct Byte 7
  if trade_cancel_or_correct_byte_7_exists then

    -- Trade Cancel Or Correct Byte 7: Struct of 8 fields
    index, trade_cancel_or_correct_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 8
  local trade_cancel_or_correct_byte_8_exists = trade_cancel_or_correct_bitfield_count >= 8

  -- Runtime optional field: Trade Cancel Or Correct Byte 8
  if trade_cancel_or_correct_byte_8_exists then

    -- Trade Cancel Or Correct Byte 8: Struct of 8 fields
    index, trade_cancel_or_correct_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 9
  local trade_cancel_or_correct_byte_9_exists = trade_cancel_or_correct_bitfield_count >= 9

  -- Runtime optional field: Trade Cancel Or Correct Byte 9
  if trade_cancel_or_correct_byte_9_exists then

    -- Trade Cancel Or Correct Byte 9: Struct of 8 fields
    index, trade_cancel_or_correct_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 10
  local trade_cancel_or_correct_byte_10_exists = trade_cancel_or_correct_bitfield_count >= 10

  -- Runtime optional field: Trade Cancel Or Correct Byte 10
  if trade_cancel_or_correct_byte_10_exists then

    -- Trade Cancel Or Correct Byte 10: Struct of 8 fields
    index, trade_cancel_or_correct_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 11
  local trade_cancel_or_correct_byte_11_exists = trade_cancel_or_correct_bitfield_count >= 11

  -- Runtime optional field: Trade Cancel Or Correct Byte 11
  if trade_cancel_or_correct_byte_11_exists then

    -- Trade Cancel Or Correct Byte 11: Struct of 8 fields
    index, trade_cancel_or_correct_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 12
  local trade_cancel_or_correct_byte_12_exists = trade_cancel_or_correct_bitfield_count >= 12

  -- Runtime optional field: Trade Cancel Or Correct Byte 12
  if trade_cancel_or_correct_byte_12_exists then

    -- Trade Cancel Or Correct Byte 12: Struct of 8 fields
    index, trade_cancel_or_correct_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 13
  local trade_cancel_or_correct_byte_13_exists = trade_cancel_or_correct_bitfield_count >= 13

  -- Runtime optional field: Trade Cancel Or Correct Byte 13
  if trade_cancel_or_correct_byte_13_exists then

    -- Trade Cancel Or Correct Byte 13: Struct of 8 fields
    index, trade_cancel_or_correct_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 14
  local trade_cancel_or_correct_byte_14_exists = trade_cancel_or_correct_bitfield_count >= 14

  -- Runtime optional field: Trade Cancel Or Correct Byte 14
  if trade_cancel_or_correct_byte_14_exists then

    -- Trade Cancel Or Correct Byte 14: Struct of 8 fields
    index, trade_cancel_or_correct_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 15
  local trade_cancel_or_correct_byte_15_exists = trade_cancel_or_correct_bitfield_count >= 15

  -- Runtime optional field: Trade Cancel Or Correct Byte 15
  if trade_cancel_or_correct_byte_15_exists then

    -- Trade Cancel Or Correct Byte 15: Struct of 8 fields
    index, trade_cancel_or_correct_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 16
  local trade_cancel_or_correct_byte_16_exists = trade_cancel_or_correct_bitfield_count >= 16

  -- Runtime optional field: Trade Cancel Or Correct Byte 16
  if trade_cancel_or_correct_byte_16_exists then

    -- Trade Cancel Or Correct Byte 16: Struct of 8 fields
    index, trade_cancel_or_correct_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Trade Cancel Or Correct Byte 17
  local trade_cancel_or_correct_byte_17_exists = trade_cancel_or_correct_bitfield_count >= 17

  -- Runtime optional field: Trade Cancel Or Correct Byte 17
  if trade_cancel_or_correct_byte_17_exists then

    -- Trade Cancel Or Correct Byte 17: Struct of 8 fields
    index, trade_cancel_or_correct_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Trade Cancel Or Correct Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_trade_cancel_or_correct_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.trade_cancel_or_correct_return_bitfields then
    local range = buffer(offset, size_of_trade_cancel_or_correct_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.trade_cancel_or_correct_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.trade_cancel_or_correct_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_return_bitfields_fields(buffer, offset, packet, parent, size_of_trade_cancel_or_correct_return_bitfields)

  return offset + size_of_trade_cancel_or_correct_return_bitfields
end

-- Read runtime size of: Order Execution Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.order_execution_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Execution Bitfield Count
  local order_execution_bitfield_count = buffer(offset, 1):le_uint()

  return order_execution_bitfield_count + 1
end

-- Display: Order Execution Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.order_execution_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Execution Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_order_execution_return_bitfields)
  local index = offset

  -- Order Execution Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_execution_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Execution Byte 1
  local order_execution_byte_1_exists = order_execution_bitfield_count >= 1

  -- Runtime optional field: Order Execution Byte 1
  if order_execution_byte_1_exists then

    -- Order Execution Byte 1: Struct of 8 fields
    index, order_execution_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 2
  local order_execution_byte_2_exists = order_execution_bitfield_count >= 2

  -- Runtime optional field: Order Execution Byte 2
  if order_execution_byte_2_exists then

    -- Order Execution Byte 2: Struct of 8 fields
    index, order_execution_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 3
  local order_execution_byte_3_exists = order_execution_bitfield_count >= 3

  -- Runtime optional field: Order Execution Byte 3
  if order_execution_byte_3_exists then

    -- Order Execution Byte 3: Struct of 8 fields
    index, order_execution_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 4
  local order_execution_byte_4_exists = order_execution_bitfield_count >= 4

  -- Runtime optional field: Order Execution Byte 4
  if order_execution_byte_4_exists then

    -- Order Execution Byte 4: Struct of 8 fields
    index, order_execution_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 5
  local order_execution_byte_5_exists = order_execution_bitfield_count >= 5

  -- Runtime optional field: Order Execution Byte 5
  if order_execution_byte_5_exists then

    -- Order Execution Byte 5: Struct of 8 fields
    index, order_execution_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 6
  local order_execution_byte_6_exists = order_execution_bitfield_count >= 6

  -- Runtime optional field: Order Execution Byte 6
  if order_execution_byte_6_exists then

    -- Order Execution Byte 6: Struct of 8 fields
    index, order_execution_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 7
  local order_execution_byte_7_exists = order_execution_bitfield_count >= 7

  -- Runtime optional field: Order Execution Byte 7
  if order_execution_byte_7_exists then

    -- Order Execution Byte 7: Struct of 8 fields
    index, order_execution_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 8
  local order_execution_byte_8_exists = order_execution_bitfield_count >= 8

  -- Runtime optional field: Order Execution Byte 8
  if order_execution_byte_8_exists then

    -- Order Execution Byte 8: Struct of 8 fields
    index, order_execution_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 9
  local order_execution_byte_9_exists = order_execution_bitfield_count >= 9

  -- Runtime optional field: Order Execution Byte 9
  if order_execution_byte_9_exists then

    -- Order Execution Byte 9: Struct of 8 fields
    index, order_execution_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 10
  local order_execution_byte_10_exists = order_execution_bitfield_count >= 10

  -- Runtime optional field: Order Execution Byte 10
  if order_execution_byte_10_exists then

    -- Order Execution Byte 10: Struct of 8 fields
    index, order_execution_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 11
  local order_execution_byte_11_exists = order_execution_bitfield_count >= 11

  -- Runtime optional field: Order Execution Byte 11
  if order_execution_byte_11_exists then

    -- Order Execution Byte 11: Struct of 8 fields
    index, order_execution_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 12
  local order_execution_byte_12_exists = order_execution_bitfield_count >= 12

  -- Runtime optional field: Order Execution Byte 12
  if order_execution_byte_12_exists then

    -- Order Execution Byte 12: Struct of 8 fields
    index, order_execution_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 13
  local order_execution_byte_13_exists = order_execution_bitfield_count >= 13

  -- Runtime optional field: Order Execution Byte 13
  if order_execution_byte_13_exists then

    -- Order Execution Byte 13: Struct of 8 fields
    index, order_execution_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 14
  local order_execution_byte_14_exists = order_execution_bitfield_count >= 14

  -- Runtime optional field: Order Execution Byte 14
  if order_execution_byte_14_exists then

    -- Order Execution Byte 14: Struct of 8 fields
    index, order_execution_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 15
  local order_execution_byte_15_exists = order_execution_bitfield_count >= 15

  -- Runtime optional field: Order Execution Byte 15
  if order_execution_byte_15_exists then

    -- Order Execution Byte 15: Struct of 8 fields
    index, order_execution_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 16
  local order_execution_byte_16_exists = order_execution_bitfield_count >= 16

  -- Runtime optional field: Order Execution Byte 16
  if order_execution_byte_16_exists then

    -- Order Execution Byte 16: Struct of 8 fields
    index, order_execution_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Execution Byte 17
  local order_execution_byte_17_exists = order_execution_bitfield_count >= 17

  -- Runtime optional field: Order Execution Byte 17
  if order_execution_byte_17_exists then

    -- Order Execution Byte 17: Struct of 8 fields
    index, order_execution_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_execution_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Execution Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_execution_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_execution_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.order_execution_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_execution_return_bitfields then
    local range = buffer(offset, size_of_order_execution_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_execution_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_execution_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_execution_return_bitfields_fields(buffer, offset, packet, parent, size_of_order_execution_return_bitfields)

  return offset + size_of_order_execution_return_bitfields
end

-- Read runtime size of: Cancel Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Cancel Rejected Bitfield Count
  local cancel_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return cancel_rejected_bitfield_count + 1
end

-- Display: Cancel Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_cancel_rejected_return_bitfields)
  local index = offset

  -- Cancel Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cancel_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Cancel Rejected Byte 1
  local cancel_rejected_byte_1_exists = cancel_rejected_bitfield_count >= 1

  -- Runtime optional field: Cancel Rejected Byte 1
  if cancel_rejected_byte_1_exists then

    -- Cancel Rejected Byte 1: Struct of 8 fields
    index, cancel_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 2
  local cancel_rejected_byte_2_exists = cancel_rejected_bitfield_count >= 2

  -- Runtime optional field: Cancel Rejected Byte 2
  if cancel_rejected_byte_2_exists then

    -- Cancel Rejected Byte 2: Struct of 8 fields
    index, cancel_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 3
  local cancel_rejected_byte_3_exists = cancel_rejected_bitfield_count >= 3

  -- Runtime optional field: Cancel Rejected Byte 3
  if cancel_rejected_byte_3_exists then

    -- Cancel Rejected Byte 3: Struct of 8 fields
    index, cancel_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 4
  local cancel_rejected_byte_4_exists = cancel_rejected_bitfield_count >= 4

  -- Runtime optional field: Cancel Rejected Byte 4
  if cancel_rejected_byte_4_exists then

    -- Cancel Rejected Byte 4: Struct of 8 fields
    index, cancel_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 5
  local cancel_rejected_byte_5_exists = cancel_rejected_bitfield_count >= 5

  -- Runtime optional field: Cancel Rejected Byte 5
  if cancel_rejected_byte_5_exists then

    -- Cancel Rejected Byte 5: Struct of 8 fields
    index, cancel_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 6
  local cancel_rejected_byte_6_exists = cancel_rejected_bitfield_count >= 6

  -- Runtime optional field: Cancel Rejected Byte 6
  if cancel_rejected_byte_6_exists then

    -- Cancel Rejected Byte 6: Struct of 8 fields
    index, cancel_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 7
  local cancel_rejected_byte_7_exists = cancel_rejected_bitfield_count >= 7

  -- Runtime optional field: Cancel Rejected Byte 7
  if cancel_rejected_byte_7_exists then

    -- Cancel Rejected Byte 7: Struct of 8 fields
    index, cancel_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 8
  local cancel_rejected_byte_8_exists = cancel_rejected_bitfield_count >= 8

  -- Runtime optional field: Cancel Rejected Byte 8
  if cancel_rejected_byte_8_exists then

    -- Cancel Rejected Byte 8: Struct of 8 fields
    index, cancel_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 9
  local cancel_rejected_byte_9_exists = cancel_rejected_bitfield_count >= 9

  -- Runtime optional field: Cancel Rejected Byte 9
  if cancel_rejected_byte_9_exists then

    -- Cancel Rejected Byte 9: Struct of 8 fields
    index, cancel_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 10
  local cancel_rejected_byte_10_exists = cancel_rejected_bitfield_count >= 10

  -- Runtime optional field: Cancel Rejected Byte 10
  if cancel_rejected_byte_10_exists then

    -- Cancel Rejected Byte 10: Struct of 8 fields
    index, cancel_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 11
  local cancel_rejected_byte_11_exists = cancel_rejected_bitfield_count >= 11

  -- Runtime optional field: Cancel Rejected Byte 11
  if cancel_rejected_byte_11_exists then

    -- Cancel Rejected Byte 11: Struct of 8 fields
    index, cancel_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 12
  local cancel_rejected_byte_12_exists = cancel_rejected_bitfield_count >= 12

  -- Runtime optional field: Cancel Rejected Byte 12
  if cancel_rejected_byte_12_exists then

    -- Cancel Rejected Byte 12: Struct of 8 fields
    index, cancel_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 13
  local cancel_rejected_byte_13_exists = cancel_rejected_bitfield_count >= 13

  -- Runtime optional field: Cancel Rejected Byte 13
  if cancel_rejected_byte_13_exists then

    -- Cancel Rejected Byte 13: Struct of 8 fields
    index, cancel_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 14
  local cancel_rejected_byte_14_exists = cancel_rejected_bitfield_count >= 14

  -- Runtime optional field: Cancel Rejected Byte 14
  if cancel_rejected_byte_14_exists then

    -- Cancel Rejected Byte 14: Struct of 8 fields
    index, cancel_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 15
  local cancel_rejected_byte_15_exists = cancel_rejected_bitfield_count >= 15

  -- Runtime optional field: Cancel Rejected Byte 15
  if cancel_rejected_byte_15_exists then

    -- Cancel Rejected Byte 15: Struct of 8 fields
    index, cancel_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 16
  local cancel_rejected_byte_16_exists = cancel_rejected_bitfield_count >= 16

  -- Runtime optional field: Cancel Rejected Byte 16
  if cancel_rejected_byte_16_exists then

    -- Cancel Rejected Byte 16: Struct of 8 fields
    index, cancel_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Rejected Byte 17
  local cancel_rejected_byte_17_exists = cancel_rejected_bitfield_count >= 17

  -- Runtime optional field: Cancel Rejected Byte 17
  if cancel_rejected_byte_17_exists then

    -- Cancel Rejected Byte 17: Struct of 8 fields
    index, cancel_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cancel Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cancel_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cancel_rejected_return_bitfields then
    local range = buffer(offset, size_of_cancel_rejected_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.cancel_rejected_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_rejected_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_return_bitfields_fields(buffer, offset, packet, parent, size_of_cancel_rejected_return_bitfields)

  return offset + size_of_cancel_rejected_return_bitfields
end

-- Read runtime size of: Order Cancelled Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Cancelled Bitfield Count
  local order_cancelled_bitfield_count = buffer(offset, 1):le_uint()

  return order_cancelled_bitfield_count + 1
end

-- Display: Order Cancelled Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.order_cancelled_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Cancelled Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_order_cancelled_return_bitfields)
  local index = offset

  -- Order Cancelled Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_cancelled_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Cancelled Byte 1
  local order_cancelled_byte_1_exists = order_cancelled_bitfield_count >= 1

  -- Runtime optional field: Order Cancelled Byte 1
  if order_cancelled_byte_1_exists then

    -- Order Cancelled Byte 1: Struct of 8 fields
    index, order_cancelled_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 2
  local order_cancelled_byte_2_exists = order_cancelled_bitfield_count >= 2

  -- Runtime optional field: Order Cancelled Byte 2
  if order_cancelled_byte_2_exists then

    -- Order Cancelled Byte 2: Struct of 8 fields
    index, order_cancelled_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 3
  local order_cancelled_byte_3_exists = order_cancelled_bitfield_count >= 3

  -- Runtime optional field: Order Cancelled Byte 3
  if order_cancelled_byte_3_exists then

    -- Order Cancelled Byte 3: Struct of 8 fields
    index, order_cancelled_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 4
  local order_cancelled_byte_4_exists = order_cancelled_bitfield_count >= 4

  -- Runtime optional field: Order Cancelled Byte 4
  if order_cancelled_byte_4_exists then

    -- Order Cancelled Byte 4: Struct of 8 fields
    index, order_cancelled_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 5
  local order_cancelled_byte_5_exists = order_cancelled_bitfield_count >= 5

  -- Runtime optional field: Order Cancelled Byte 5
  if order_cancelled_byte_5_exists then

    -- Order Cancelled Byte 5: Struct of 8 fields
    index, order_cancelled_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 6
  local order_cancelled_byte_6_exists = order_cancelled_bitfield_count >= 6

  -- Runtime optional field: Order Cancelled Byte 6
  if order_cancelled_byte_6_exists then

    -- Order Cancelled Byte 6: Struct of 8 fields
    index, order_cancelled_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 7
  local order_cancelled_byte_7_exists = order_cancelled_bitfield_count >= 7

  -- Runtime optional field: Order Cancelled Byte 7
  if order_cancelled_byte_7_exists then

    -- Order Cancelled Byte 7: Struct of 8 fields
    index, order_cancelled_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 8
  local order_cancelled_byte_8_exists = order_cancelled_bitfield_count >= 8

  -- Runtime optional field: Order Cancelled Byte 8
  if order_cancelled_byte_8_exists then

    -- Order Cancelled Byte 8: Struct of 8 fields
    index, order_cancelled_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 9
  local order_cancelled_byte_9_exists = order_cancelled_bitfield_count >= 9

  -- Runtime optional field: Order Cancelled Byte 9
  if order_cancelled_byte_9_exists then

    -- Order Cancelled Byte 9: Struct of 8 fields
    index, order_cancelled_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 10
  local order_cancelled_byte_10_exists = order_cancelled_bitfield_count >= 10

  -- Runtime optional field: Order Cancelled Byte 10
  if order_cancelled_byte_10_exists then

    -- Order Cancelled Byte 10: Struct of 8 fields
    index, order_cancelled_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 11
  local order_cancelled_byte_11_exists = order_cancelled_bitfield_count >= 11

  -- Runtime optional field: Order Cancelled Byte 11
  if order_cancelled_byte_11_exists then

    -- Order Cancelled Byte 11: Struct of 8 fields
    index, order_cancelled_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 12
  local order_cancelled_byte_12_exists = order_cancelled_bitfield_count >= 12

  -- Runtime optional field: Order Cancelled Byte 12
  if order_cancelled_byte_12_exists then

    -- Order Cancelled Byte 12: Struct of 8 fields
    index, order_cancelled_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 13
  local order_cancelled_byte_13_exists = order_cancelled_bitfield_count >= 13

  -- Runtime optional field: Order Cancelled Byte 13
  if order_cancelled_byte_13_exists then

    -- Order Cancelled Byte 13: Struct of 8 fields
    index, order_cancelled_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 14
  local order_cancelled_byte_14_exists = order_cancelled_bitfield_count >= 14

  -- Runtime optional field: Order Cancelled Byte 14
  if order_cancelled_byte_14_exists then

    -- Order Cancelled Byte 14: Struct of 8 fields
    index, order_cancelled_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 15
  local order_cancelled_byte_15_exists = order_cancelled_bitfield_count >= 15

  -- Runtime optional field: Order Cancelled Byte 15
  if order_cancelled_byte_15_exists then

    -- Order Cancelled Byte 15: Struct of 8 fields
    index, order_cancelled_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 16
  local order_cancelled_byte_16_exists = order_cancelled_bitfield_count >= 16

  -- Runtime optional field: Order Cancelled Byte 16
  if order_cancelled_byte_16_exists then

    -- Order Cancelled Byte 16: Struct of 8 fields
    index, order_cancelled_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Cancelled Byte 17
  local order_cancelled_byte_17_exists = order_cancelled_bitfield_count >= 17

  -- Runtime optional field: Order Cancelled Byte 17
  if order_cancelled_byte_17_exists then

    -- Order Cancelled Byte 17: Struct of 8 fields
    index, order_cancelled_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Cancelled Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_cancelled_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_cancelled_return_bitfields then
    local range = buffer(offset, size_of_order_cancelled_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_cancelled_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_cancelled_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_return_bitfields_fields(buffer, offset, packet, parent, size_of_order_cancelled_return_bitfields)

  return offset + size_of_order_cancelled_return_bitfields
end

-- Read runtime size of: User Modify Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: User Modify Rejected Bitfield Count
  local user_modify_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return user_modify_rejected_bitfield_count + 1
end

-- Display: User Modify Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: User Modify Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_user_modify_rejected_return_bitfields)
  local index = offset

  -- User Modify Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, user_modify_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: User Modify Rejected Byte 1
  local user_modify_rejected_byte_1_exists = user_modify_rejected_bitfield_count >= 1

  -- Runtime optional field: User Modify Rejected Byte 1
  if user_modify_rejected_byte_1_exists then

    -- User Modify Rejected Byte 1: Struct of 8 fields
    index, user_modify_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 2
  local user_modify_rejected_byte_2_exists = user_modify_rejected_bitfield_count >= 2

  -- Runtime optional field: User Modify Rejected Byte 2
  if user_modify_rejected_byte_2_exists then

    -- User Modify Rejected Byte 2: Struct of 8 fields
    index, user_modify_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 3
  local user_modify_rejected_byte_3_exists = user_modify_rejected_bitfield_count >= 3

  -- Runtime optional field: User Modify Rejected Byte 3
  if user_modify_rejected_byte_3_exists then

    -- User Modify Rejected Byte 3: Struct of 8 fields
    index, user_modify_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 4
  local user_modify_rejected_byte_4_exists = user_modify_rejected_bitfield_count >= 4

  -- Runtime optional field: User Modify Rejected Byte 4
  if user_modify_rejected_byte_4_exists then

    -- User Modify Rejected Byte 4: Struct of 8 fields
    index, user_modify_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 5
  local user_modify_rejected_byte_5_exists = user_modify_rejected_bitfield_count >= 5

  -- Runtime optional field: User Modify Rejected Byte 5
  if user_modify_rejected_byte_5_exists then

    -- User Modify Rejected Byte 5: Struct of 8 fields
    index, user_modify_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 6
  local user_modify_rejected_byte_6_exists = user_modify_rejected_bitfield_count >= 6

  -- Runtime optional field: User Modify Rejected Byte 6
  if user_modify_rejected_byte_6_exists then

    -- User Modify Rejected Byte 6: Struct of 8 fields
    index, user_modify_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 7
  local user_modify_rejected_byte_7_exists = user_modify_rejected_bitfield_count >= 7

  -- Runtime optional field: User Modify Rejected Byte 7
  if user_modify_rejected_byte_7_exists then

    -- User Modify Rejected Byte 7: Struct of 8 fields
    index, user_modify_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 8
  local user_modify_rejected_byte_8_exists = user_modify_rejected_bitfield_count >= 8

  -- Runtime optional field: User Modify Rejected Byte 8
  if user_modify_rejected_byte_8_exists then

    -- User Modify Rejected Byte 8: Struct of 8 fields
    index, user_modify_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 9
  local user_modify_rejected_byte_9_exists = user_modify_rejected_bitfield_count >= 9

  -- Runtime optional field: User Modify Rejected Byte 9
  if user_modify_rejected_byte_9_exists then

    -- User Modify Rejected Byte 9: Struct of 8 fields
    index, user_modify_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 10
  local user_modify_rejected_byte_10_exists = user_modify_rejected_bitfield_count >= 10

  -- Runtime optional field: User Modify Rejected Byte 10
  if user_modify_rejected_byte_10_exists then

    -- User Modify Rejected Byte 10: Struct of 8 fields
    index, user_modify_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 11
  local user_modify_rejected_byte_11_exists = user_modify_rejected_bitfield_count >= 11

  -- Runtime optional field: User Modify Rejected Byte 11
  if user_modify_rejected_byte_11_exists then

    -- User Modify Rejected Byte 11: Struct of 8 fields
    index, user_modify_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 12
  local user_modify_rejected_byte_12_exists = user_modify_rejected_bitfield_count >= 12

  -- Runtime optional field: User Modify Rejected Byte 12
  if user_modify_rejected_byte_12_exists then

    -- User Modify Rejected Byte 12: Struct of 8 fields
    index, user_modify_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 13
  local user_modify_rejected_byte_13_exists = user_modify_rejected_bitfield_count >= 13

  -- Runtime optional field: User Modify Rejected Byte 13
  if user_modify_rejected_byte_13_exists then

    -- User Modify Rejected Byte 13: Struct of 8 fields
    index, user_modify_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 14
  local user_modify_rejected_byte_14_exists = user_modify_rejected_bitfield_count >= 14

  -- Runtime optional field: User Modify Rejected Byte 14
  if user_modify_rejected_byte_14_exists then

    -- User Modify Rejected Byte 14: Struct of 8 fields
    index, user_modify_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 15
  local user_modify_rejected_byte_15_exists = user_modify_rejected_bitfield_count >= 15

  -- Runtime optional field: User Modify Rejected Byte 15
  if user_modify_rejected_byte_15_exists then

    -- User Modify Rejected Byte 15: Struct of 8 fields
    index, user_modify_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 16
  local user_modify_rejected_byte_16_exists = user_modify_rejected_bitfield_count >= 16

  -- Runtime optional field: User Modify Rejected Byte 16
  if user_modify_rejected_byte_16_exists then

    -- User Modify Rejected Byte 16: Struct of 8 fields
    index, user_modify_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: User Modify Rejected Byte 17
  local user_modify_rejected_byte_17_exists = user_modify_rejected_bitfield_count >= 17

  -- Runtime optional field: User Modify Rejected Byte 17
  if user_modify_rejected_byte_17_exists then

    -- User Modify Rejected Byte 17: Struct of 8 fields
    index, user_modify_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: User Modify Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_user_modify_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.user_modify_rejected_return_bitfields then
    local range = buffer(offset, size_of_user_modify_rejected_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.user_modify_rejected_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.user_modify_rejected_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_return_bitfields_fields(buffer, offset, packet, parent, size_of_user_modify_rejected_return_bitfields)

  return offset + size_of_user_modify_rejected_return_bitfields
end

-- Read runtime size of: Order Modified Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.order_modified_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Modified Bitfield Count
  local order_modified_bitfield_count = buffer(offset, 1):le_uint()

  return order_modified_bitfield_count + 1
end

-- Display: Order Modified Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.order_modified_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Modified Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_order_modified_return_bitfields)
  local index = offset

  -- Order Modified Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_modified_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Modified Byte 1
  local order_modified_byte_1_exists = order_modified_bitfield_count >= 1

  -- Runtime optional field: Order Modified Byte 1
  if order_modified_byte_1_exists then

    -- Order Modified Byte 1: Struct of 8 fields
    index, order_modified_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 2
  local order_modified_byte_2_exists = order_modified_bitfield_count >= 2

  -- Runtime optional field: Order Modified Byte 2
  if order_modified_byte_2_exists then

    -- Order Modified Byte 2: Struct of 8 fields
    index, order_modified_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 3
  local order_modified_byte_3_exists = order_modified_bitfield_count >= 3

  -- Runtime optional field: Order Modified Byte 3
  if order_modified_byte_3_exists then

    -- Order Modified Byte 3: Struct of 8 fields
    index, order_modified_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 4
  local order_modified_byte_4_exists = order_modified_bitfield_count >= 4

  -- Runtime optional field: Order Modified Byte 4
  if order_modified_byte_4_exists then

    -- Order Modified Byte 4: Struct of 8 fields
    index, order_modified_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 5
  local order_modified_byte_5_exists = order_modified_bitfield_count >= 5

  -- Runtime optional field: Order Modified Byte 5
  if order_modified_byte_5_exists then

    -- Order Modified Byte 5: Struct of 8 fields
    index, order_modified_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 6
  local order_modified_byte_6_exists = order_modified_bitfield_count >= 6

  -- Runtime optional field: Order Modified Byte 6
  if order_modified_byte_6_exists then

    -- Order Modified Byte 6: Struct of 8 fields
    index, order_modified_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 7
  local order_modified_byte_7_exists = order_modified_bitfield_count >= 7

  -- Runtime optional field: Order Modified Byte 7
  if order_modified_byte_7_exists then

    -- Order Modified Byte 7: Struct of 8 fields
    index, order_modified_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 8
  local order_modified_byte_8_exists = order_modified_bitfield_count >= 8

  -- Runtime optional field: Order Modified Byte 8
  if order_modified_byte_8_exists then

    -- Order Modified Byte 8: Struct of 8 fields
    index, order_modified_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 9
  local order_modified_byte_9_exists = order_modified_bitfield_count >= 9

  -- Runtime optional field: Order Modified Byte 9
  if order_modified_byte_9_exists then

    -- Order Modified Byte 9: Struct of 8 fields
    index, order_modified_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 10
  local order_modified_byte_10_exists = order_modified_bitfield_count >= 10

  -- Runtime optional field: Order Modified Byte 10
  if order_modified_byte_10_exists then

    -- Order Modified Byte 10: Struct of 8 fields
    index, order_modified_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 11
  local order_modified_byte_11_exists = order_modified_bitfield_count >= 11

  -- Runtime optional field: Order Modified Byte 11
  if order_modified_byte_11_exists then

    -- Order Modified Byte 11: Struct of 8 fields
    index, order_modified_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 12
  local order_modified_byte_12_exists = order_modified_bitfield_count >= 12

  -- Runtime optional field: Order Modified Byte 12
  if order_modified_byte_12_exists then

    -- Order Modified Byte 12: Struct of 8 fields
    index, order_modified_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 13
  local order_modified_byte_13_exists = order_modified_bitfield_count >= 13

  -- Runtime optional field: Order Modified Byte 13
  if order_modified_byte_13_exists then

    -- Order Modified Byte 13: Struct of 8 fields
    index, order_modified_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 14
  local order_modified_byte_14_exists = order_modified_bitfield_count >= 14

  -- Runtime optional field: Order Modified Byte 14
  if order_modified_byte_14_exists then

    -- Order Modified Byte 14: Struct of 8 fields
    index, order_modified_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 15
  local order_modified_byte_15_exists = order_modified_bitfield_count >= 15

  -- Runtime optional field: Order Modified Byte 15
  if order_modified_byte_15_exists then

    -- Order Modified Byte 15: Struct of 8 fields
    index, order_modified_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 16
  local order_modified_byte_16_exists = order_modified_bitfield_count >= 16

  -- Runtime optional field: Order Modified Byte 16
  if order_modified_byte_16_exists then

    -- Order Modified Byte 16: Struct of 8 fields
    index, order_modified_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Modified Byte 17
  local order_modified_byte_17_exists = order_modified_bitfield_count >= 17

  -- Runtime optional field: Order Modified Byte 17
  if order_modified_byte_17_exists then

    -- Order Modified Byte 17: Struct of 8 fields
    index, order_modified_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_modified_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Modified Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_modified_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_modified_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.order_modified_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_modified_return_bitfields then
    local range = buffer(offset, size_of_order_modified_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_modified_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_modified_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_modified_return_bitfields_fields(buffer, offset, packet, parent, size_of_order_modified_return_bitfields)

  return offset + size_of_order_modified_return_bitfields
end

-- Read runtime size of: Order Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Rejected Bitfield Count
  local order_rejected_bitfield_count = buffer(offset, 1):le_uint()

  return order_rejected_bitfield_count + 1
end

-- Display: Order Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.order_rejected_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_order_rejected_return_bitfields)
  local index = offset

  -- Order Rejected Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_rejected_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Rejected Byte 1
  local order_rejected_byte_1_exists = order_rejected_bitfield_count >= 1

  -- Runtime optional field: Order Rejected Byte 1
  if order_rejected_byte_1_exists then

    -- Order Rejected Byte 1: Struct of 8 fields
    index, order_rejected_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 2
  local order_rejected_byte_2_exists = order_rejected_bitfield_count >= 2

  -- Runtime optional field: Order Rejected Byte 2
  if order_rejected_byte_2_exists then

    -- Order Rejected Byte 2: Struct of 8 fields
    index, order_rejected_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 3
  local order_rejected_byte_3_exists = order_rejected_bitfield_count >= 3

  -- Runtime optional field: Order Rejected Byte 3
  if order_rejected_byte_3_exists then

    -- Order Rejected Byte 3: Struct of 8 fields
    index, order_rejected_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 4
  local order_rejected_byte_4_exists = order_rejected_bitfield_count >= 4

  -- Runtime optional field: Order Rejected Byte 4
  if order_rejected_byte_4_exists then

    -- Order Rejected Byte 4: Struct of 8 fields
    index, order_rejected_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 5
  local order_rejected_byte_5_exists = order_rejected_bitfield_count >= 5

  -- Runtime optional field: Order Rejected Byte 5
  if order_rejected_byte_5_exists then

    -- Order Rejected Byte 5: Struct of 8 fields
    index, order_rejected_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 6
  local order_rejected_byte_6_exists = order_rejected_bitfield_count >= 6

  -- Runtime optional field: Order Rejected Byte 6
  if order_rejected_byte_6_exists then

    -- Order Rejected Byte 6: Struct of 8 fields
    index, order_rejected_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 7
  local order_rejected_byte_7_exists = order_rejected_bitfield_count >= 7

  -- Runtime optional field: Order Rejected Byte 7
  if order_rejected_byte_7_exists then

    -- Order Rejected Byte 7: Struct of 8 fields
    index, order_rejected_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 8
  local order_rejected_byte_8_exists = order_rejected_bitfield_count >= 8

  -- Runtime optional field: Order Rejected Byte 8
  if order_rejected_byte_8_exists then

    -- Order Rejected Byte 8: Struct of 8 fields
    index, order_rejected_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 9
  local order_rejected_byte_9_exists = order_rejected_bitfield_count >= 9

  -- Runtime optional field: Order Rejected Byte 9
  if order_rejected_byte_9_exists then

    -- Order Rejected Byte 9: Struct of 8 fields
    index, order_rejected_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 10
  local order_rejected_byte_10_exists = order_rejected_bitfield_count >= 10

  -- Runtime optional field: Order Rejected Byte 10
  if order_rejected_byte_10_exists then

    -- Order Rejected Byte 10: Struct of 8 fields
    index, order_rejected_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 11
  local order_rejected_byte_11_exists = order_rejected_bitfield_count >= 11

  -- Runtime optional field: Order Rejected Byte 11
  if order_rejected_byte_11_exists then

    -- Order Rejected Byte 11: Struct of 8 fields
    index, order_rejected_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 12
  local order_rejected_byte_12_exists = order_rejected_bitfield_count >= 12

  -- Runtime optional field: Order Rejected Byte 12
  if order_rejected_byte_12_exists then

    -- Order Rejected Byte 12: Struct of 8 fields
    index, order_rejected_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 13
  local order_rejected_byte_13_exists = order_rejected_bitfield_count >= 13

  -- Runtime optional field: Order Rejected Byte 13
  if order_rejected_byte_13_exists then

    -- Order Rejected Byte 13: Struct of 8 fields
    index, order_rejected_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 14
  local order_rejected_byte_14_exists = order_rejected_bitfield_count >= 14

  -- Runtime optional field: Order Rejected Byte 14
  if order_rejected_byte_14_exists then

    -- Order Rejected Byte 14: Struct of 8 fields
    index, order_rejected_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 15
  local order_rejected_byte_15_exists = order_rejected_bitfield_count >= 15

  -- Runtime optional field: Order Rejected Byte 15
  if order_rejected_byte_15_exists then

    -- Order Rejected Byte 15: Struct of 8 fields
    index, order_rejected_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 16
  local order_rejected_byte_16_exists = order_rejected_bitfield_count >= 16

  -- Runtime optional field: Order Rejected Byte 16
  if order_rejected_byte_16_exists then

    -- Order Rejected Byte 16: Struct of 8 fields
    index, order_rejected_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Rejected Byte 17
  local order_rejected_byte_17_exists = order_rejected_bitfield_count >= 17

  -- Runtime optional field: Order Rejected Byte 17
  if order_rejected_byte_17_exists then

    -- Order Rejected Byte 17: Struct of 8 fields
    index, order_rejected_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Rejected Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_rejected_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_rejected_return_bitfields then
    local range = buffer(offset, size_of_order_rejected_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_rejected_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_rejected_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_return_bitfields_fields(buffer, offset, packet, parent, size_of_order_rejected_return_bitfields)

  return offset + size_of_order_rejected_return_bitfields
end

-- Read runtime size of: Order Acknowledgment Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Order Acknowledgment Bitfield Count
  local order_acknowledgment_bitfield_count = buffer(offset, 1):le_uint()

  return order_acknowledgment_bitfield_count + 1
end

-- Display: Order Acknowledgment Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Order Acknowledgment Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_order_acknowledgment_return_bitfields)
  local index = offset

  -- Order Acknowledgment Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, order_acknowledgment_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Order Acknowledgment Byte 1
  local order_acknowledgment_byte_1_exists = order_acknowledgment_bitfield_count >= 1

  -- Runtime optional field: Order Acknowledgment Byte 1
  if order_acknowledgment_byte_1_exists then

    -- Order Acknowledgment Byte 1: Struct of 8 fields
    index, order_acknowledgment_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 2
  local order_acknowledgment_byte_2_exists = order_acknowledgment_bitfield_count >= 2

  -- Runtime optional field: Order Acknowledgment Byte 2
  if order_acknowledgment_byte_2_exists then

    -- Order Acknowledgment Byte 2: Struct of 8 fields
    index, order_acknowledgment_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 3
  local order_acknowledgment_byte_3_exists = order_acknowledgment_bitfield_count >= 3

  -- Runtime optional field: Order Acknowledgment Byte 3
  if order_acknowledgment_byte_3_exists then

    -- Order Acknowledgment Byte 3: Struct of 8 fields
    index, order_acknowledgment_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 4
  local order_acknowledgment_byte_4_exists = order_acknowledgment_bitfield_count >= 4

  -- Runtime optional field: Order Acknowledgment Byte 4
  if order_acknowledgment_byte_4_exists then

    -- Order Acknowledgment Byte 4: Struct of 8 fields
    index, order_acknowledgment_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 5
  local order_acknowledgment_byte_5_exists = order_acknowledgment_bitfield_count >= 5

  -- Runtime optional field: Order Acknowledgment Byte 5
  if order_acknowledgment_byte_5_exists then

    -- Order Acknowledgment Byte 5: Struct of 8 fields
    index, order_acknowledgment_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 6
  local order_acknowledgment_byte_6_exists = order_acknowledgment_bitfield_count >= 6

  -- Runtime optional field: Order Acknowledgment Byte 6
  if order_acknowledgment_byte_6_exists then

    -- Order Acknowledgment Byte 6: Struct of 8 fields
    index, order_acknowledgment_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 7
  local order_acknowledgment_byte_7_exists = order_acknowledgment_bitfield_count >= 7

  -- Runtime optional field: Order Acknowledgment Byte 7
  if order_acknowledgment_byte_7_exists then

    -- Order Acknowledgment Byte 7: Struct of 8 fields
    index, order_acknowledgment_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 8
  local order_acknowledgment_byte_8_exists = order_acknowledgment_bitfield_count >= 8

  -- Runtime optional field: Order Acknowledgment Byte 8
  if order_acknowledgment_byte_8_exists then

    -- Order Acknowledgment Byte 8: Struct of 8 fields
    index, order_acknowledgment_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_8(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 9
  local order_acknowledgment_byte_9_exists = order_acknowledgment_bitfield_count >= 9

  -- Runtime optional field: Order Acknowledgment Byte 9
  if order_acknowledgment_byte_9_exists then

    -- Order Acknowledgment Byte 9: Struct of 8 fields
    index, order_acknowledgment_byte_9 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_9(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 10
  local order_acknowledgment_byte_10_exists = order_acknowledgment_bitfield_count >= 10

  -- Runtime optional field: Order Acknowledgment Byte 10
  if order_acknowledgment_byte_10_exists then

    -- Order Acknowledgment Byte 10: Struct of 8 fields
    index, order_acknowledgment_byte_10 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_10(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 11
  local order_acknowledgment_byte_11_exists = order_acknowledgment_bitfield_count >= 11

  -- Runtime optional field: Order Acknowledgment Byte 11
  if order_acknowledgment_byte_11_exists then

    -- Order Acknowledgment Byte 11: Struct of 8 fields
    index, order_acknowledgment_byte_11 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_11(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 12
  local order_acknowledgment_byte_12_exists = order_acknowledgment_bitfield_count >= 12

  -- Runtime optional field: Order Acknowledgment Byte 12
  if order_acknowledgment_byte_12_exists then

    -- Order Acknowledgment Byte 12: Struct of 8 fields
    index, order_acknowledgment_byte_12 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_12(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 13
  local order_acknowledgment_byte_13_exists = order_acknowledgment_bitfield_count >= 13

  -- Runtime optional field: Order Acknowledgment Byte 13
  if order_acknowledgment_byte_13_exists then

    -- Order Acknowledgment Byte 13: Struct of 8 fields
    index, order_acknowledgment_byte_13 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_13(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 14
  local order_acknowledgment_byte_14_exists = order_acknowledgment_bitfield_count >= 14

  -- Runtime optional field: Order Acknowledgment Byte 14
  if order_acknowledgment_byte_14_exists then

    -- Order Acknowledgment Byte 14: Struct of 8 fields
    index, order_acknowledgment_byte_14 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_14(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 15
  local order_acknowledgment_byte_15_exists = order_acknowledgment_bitfield_count >= 15

  -- Runtime optional field: Order Acknowledgment Byte 15
  if order_acknowledgment_byte_15_exists then

    -- Order Acknowledgment Byte 15: Struct of 8 fields
    index, order_acknowledgment_byte_15 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_15(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 16
  local order_acknowledgment_byte_16_exists = order_acknowledgment_bitfield_count >= 16

  -- Runtime optional field: Order Acknowledgment Byte 16
  if order_acknowledgment_byte_16_exists then

    -- Order Acknowledgment Byte 16: Struct of 8 fields
    index, order_acknowledgment_byte_16 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_16(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Order Acknowledgment Byte 17
  local order_acknowledgment_byte_17_exists = order_acknowledgment_bitfield_count >= 17

  -- Runtime optional field: Order Acknowledgment Byte 17
  if order_acknowledgment_byte_17_exists then

    -- Order Acknowledgment Byte 17: Struct of 8 fields
    index, order_acknowledgment_byte_17 = cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_byte_17(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Order Acknowledgment Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_order_acknowledgment_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.order_acknowledgment_return_bitfields then
    local range = buffer(offset, size_of_order_acknowledgment_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.order_acknowledgment_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.order_acknowledgment_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_return_bitfields_fields(buffer, offset, packet, parent, size_of_order_acknowledgment_return_bitfields)

  return offset + size_of_order_acknowledgment_return_bitfields
end

-- Read runtime size of: Purge Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.purge_order_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Purge Order Bitfield Count
  local purge_order_bitfield_count = buffer(offset, 1):le_uint()

  return purge_order_bitfield_count + 1
end

-- Display: Purge Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.purge_order_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Purge Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_purge_order_return_bitfields)
  local index = offset

  -- Purge Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, purge_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.purge_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Purge Order Byte 1
  local purge_order_byte_1_exists = purge_order_bitfield_count >= 1

  -- Runtime optional field: Purge Order Byte 1
  if purge_order_byte_1_exists then

    -- Purge Order Byte 1: Struct of 8 fields
    index, purge_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Purge Order Byte 2
  local purge_order_byte_2_exists = purge_order_bitfield_count >= 2

  -- Runtime optional field: Purge Order Byte 2
  if purge_order_byte_2_exists then

    -- Purge Order Byte 2: Struct of 8 fields
    index, purge_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.purge_order_byte_2(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Purge Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.purge_order_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_purge_order_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.purge_order_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.purge_order_return_bitfields then
    local range = buffer(offset, size_of_purge_order_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.purge_order_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.purge_order_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.purge_order_return_bitfields_fields(buffer, offset, packet, parent, size_of_purge_order_return_bitfields)

  return offset + size_of_purge_order_return_bitfields
end

-- Read runtime size of: Modify Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.modify_order_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Modify Order Bitfield Count
  local modify_order_bitfield_count = buffer(offset, 1):le_uint()

  return modify_order_bitfield_count + 1
end

-- Display: Modify Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.modify_order_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Modify Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_modify_order_return_bitfields)
  local index = offset

  -- Modify Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, modify_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.modify_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Modify Order Byte 1
  local modify_order_byte_1_exists = modify_order_bitfield_count >= 1

  -- Runtime optional field: Modify Order Byte 1
  if modify_order_byte_1_exists then

    -- Modify Order Byte 1: Struct of 8 fields
    index, modify_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Modify Order Byte 2
  local modify_order_byte_2_exists = modify_order_bitfield_count >= 2

  -- Runtime optional field: Modify Order Byte 2
  if modify_order_byte_2_exists then

    -- Modify Order Byte 2: Struct of 8 fields
    index, modify_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.modify_order_byte_2(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Modify Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.modify_order_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_modify_order_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.modify_order_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.modify_order_return_bitfields then
    local range = buffer(offset, size_of_modify_order_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.modify_order_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.modify_order_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.modify_order_return_bitfields_fields(buffer, offset, packet, parent, size_of_modify_order_return_bitfields)

  return offset + size_of_modify_order_return_bitfields
end

-- Read runtime size of: Cancel Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Cancel Order Bitfield Count
  local cancel_order_bitfield_count = buffer(offset, 1):le_uint()

  return cancel_order_bitfield_count + 1
end

-- Display: Cancel Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.cancel_order_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Cancel Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_cancel_order_return_bitfields)
  local index = offset

  -- Cancel Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, cancel_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: Cancel Order Byte 1
  local cancel_order_byte_1_exists = cancel_order_bitfield_count >= 1

  -- Runtime optional field: Cancel Order Byte 1
  if cancel_order_byte_1_exists then

    -- Cancel Order Byte 1: Struct of 8 fields
    index, cancel_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: Cancel Order Byte 2
  local cancel_order_byte_2_exists = cancel_order_bitfield_count >= 2

  -- Runtime optional field: Cancel Order Byte 2
  if cancel_order_byte_2_exists then

    -- Cancel Order Byte 2: Struct of 8 fields
    index, cancel_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_byte_2(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Cancel Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_cancel_order_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.cancel_order_return_bitfields then
    local range = buffer(offset, size_of_cancel_order_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.cancel_order_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.cancel_order_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_return_bitfields_fields(buffer, offset, packet, parent, size_of_cancel_order_return_bitfields)

  return offset + size_of_cancel_order_return_bitfields
end

-- Read runtime size of: New Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.new_order_return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: New Order Bitfield Count
  local new_order_bitfield_count = buffer(offset, 1):le_uint()

  return new_order_bitfield_count + 1
end

-- Display: New Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.new_order_return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: New Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.new_order_return_bitfields_fields = function(buffer, offset, packet, parent, size_of_new_order_return_bitfields)
  local index = offset

  -- New Order Bitfield Count: 1 Byte Unsigned Fixed Width Integer
  index, new_order_bitfield_count = cboe_futures_orderentry_boe_v1_3_dissect.new_order_bitfield_count(buffer, index, packet, parent)

  -- Runtime optional field exists: New Order Byte 1
  local new_order_byte_1_exists = new_order_bitfield_count >= 1

  -- Runtime optional field: New Order Byte 1
  if new_order_byte_1_exists then

    -- New Order Byte 1: Struct of 8 fields
    index, new_order_byte_1 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_1(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 2
  local new_order_byte_2_exists = new_order_bitfield_count >= 2

  -- Runtime optional field: New Order Byte 2
  if new_order_byte_2_exists then

    -- New Order Byte 2: Struct of 8 fields
    index, new_order_byte_2 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_2(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 3
  local new_order_byte_3_exists = new_order_bitfield_count >= 3

  -- Runtime optional field: New Order Byte 3
  if new_order_byte_3_exists then

    -- New Order Byte 3: Struct of 8 fields
    index, new_order_byte_3 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_3(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 4
  local new_order_byte_4_exists = new_order_bitfield_count >= 4

  -- Runtime optional field: New Order Byte 4
  if new_order_byte_4_exists then

    -- New Order Byte 4: Struct of 8 fields
    index, new_order_byte_4 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_4(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 5
  local new_order_byte_5_exists = new_order_bitfield_count >= 5

  -- Runtime optional field: New Order Byte 5
  if new_order_byte_5_exists then

    -- New Order Byte 5: Struct of 8 fields
    index, new_order_byte_5 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_5(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 6
  local new_order_byte_6_exists = new_order_bitfield_count >= 6

  -- Runtime optional field: New Order Byte 6
  if new_order_byte_6_exists then

    -- New Order Byte 6: Struct of 8 fields
    index, new_order_byte_6 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_6(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 7
  local new_order_byte_7_exists = new_order_bitfield_count >= 7

  -- Runtime optional field: New Order Byte 7
  if new_order_byte_7_exists then

    -- New Order Byte 7: Struct of 8 fields
    index, new_order_byte_7 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_7(buffer, index, packet, parent)
  end

  -- Runtime optional field exists: New Order Byte 8
  local new_order_byte_8_exists = new_order_bitfield_count >= 8

  -- Runtime optional field: New Order Byte 8
  if new_order_byte_8_exists then

    -- New Order Byte 8: Struct of 8 fields
    index, new_order_byte_8 = cboe_futures_orderentry_boe_v1_3_dissect.new_order_byte_8(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: New Order Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.new_order_return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_new_order_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.new_order_return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.new_order_return_bitfields then
    local range = buffer(offset, size_of_new_order_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.new_order_return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.new_order_return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.new_order_return_bitfields_fields(buffer, offset, packet, parent, size_of_new_order_return_bitfields)

  return offset + size_of_new_order_return_bitfields
end

-- Calculate runtime size of: Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.bitfields = function(buffer, offset, application_message_type)
  -- Size of New Order Return Bitfields
  if application_message_type == 0x38 then
    return cboe_futures_orderentry_boe_v1_3_size_of.new_order_return_bitfields(buffer, offset)
  end
  -- Size of Cancel Order Return Bitfields
  if application_message_type == 0x39 then
    return cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_return_bitfields(buffer, offset)
  end
  -- Size of Modify Order Return Bitfields
  if application_message_type == 0x3A then
    return cboe_futures_orderentry_boe_v1_3_size_of.modify_order_return_bitfields(buffer, offset)
  end
  -- Size of Purge Order Return Bitfields
  if application_message_type == 0x47 then
    return cboe_futures_orderentry_boe_v1_3_size_of.purge_order_return_bitfields(buffer, offset)
  end
  -- Size of Order Acknowledgment Return Bitfields
  if application_message_type == 0x25 then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_return_bitfields(buffer, offset)
  end
  -- Size of Order Rejected Return Bitfields
  if application_message_type == 0x26 then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_return_bitfields(buffer, offset)
  end
  -- Size of Order Modified Return Bitfields
  if application_message_type == 0x27 then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_modified_return_bitfields(buffer, offset)
  end
  -- Size of User Modify Rejected Return Bitfields
  if application_message_type == 0x29 then
    return cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_return_bitfields(buffer, offset)
  end
  -- Size of Order Cancelled Return Bitfields
  if application_message_type == 0x2A then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_return_bitfields(buffer, offset)
  end
  -- Size of Cancel Rejected Return Bitfields
  if application_message_type == 0x2B then
    return cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_return_bitfields(buffer, offset)
  end
  -- Size of Order Execution Return Bitfields
  if application_message_type == 0x2C then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_execution_return_bitfields(buffer, offset)
  end
  -- Size of Trade Cancel Or Correct Return Bitfields
  if application_message_type == 0x2D then
    return cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_return_bitfields(buffer, offset)
  end
  -- Size of Purge Rejected Return Bitfields
  if application_message_type == 0x48 then
    return cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_return_bitfields(buffer, offset)
  end
  -- Size of Tas Restatement Return Bitfields
  if application_message_type == 0x49 then
    return cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_return_bitfields(buffer, offset)
  end
  -- Size of Variance Restatement Return Bitfields
  if application_message_type == 0x4A then
    return cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_return_bitfields(buffer, offset)
  end

  return 0
end

-- Display: Bitfields
cboe_futures_orderentry_boe_v1_3_display.bitfields = function(buffer, offset, packet, parent)
  return ""
end

-- Dissect Branches: Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.bitfields_branches = function(buffer, offset, packet, parent, application_message_type)
  -- Dissect New Order Return Bitfields
  if application_message_type == 0x38 then
    return cboe_futures_orderentry_boe_v1_3_dissect.new_order_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Cancel Order Return Bitfields
  if application_message_type == 0x39 then
    return cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Modify Order Return Bitfields
  if application_message_type == 0x3A then
    return cboe_futures_orderentry_boe_v1_3_dissect.modify_order_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Purge Order Return Bitfields
  if application_message_type == 0x47 then
    return cboe_futures_orderentry_boe_v1_3_dissect.purge_order_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Order Acknowledgment Return Bitfields
  if application_message_type == 0x25 then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Order Rejected Return Bitfields
  if application_message_type == 0x26 then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Order Modified Return Bitfields
  if application_message_type == 0x27 then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_modified_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect User Modify Rejected Return Bitfields
  if application_message_type == 0x29 then
    return cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Order Cancelled Return Bitfields
  if application_message_type == 0x2A then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Cancel Rejected Return Bitfields
  if application_message_type == 0x2B then
    return cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Order Execution Return Bitfields
  if application_message_type == 0x2C then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_execution_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Trade Cancel Or Correct Return Bitfields
  if application_message_type == 0x2D then
    return cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Purge Rejected Return Bitfields
  if application_message_type == 0x48 then
    return cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Tas Restatement Return Bitfields
  if application_message_type == 0x49 then
    return cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_return_bitfields(buffer, offset, packet, parent)
  end
  -- Dissect Variance Restatement Return Bitfields
  if application_message_type == 0x4A then
    return cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_return_bitfields(buffer, offset, packet, parent)
  end

  return offset
end

-- Dissect: Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.bitfields = function(buffer, offset, packet, parent, application_message_type)
  if not show.bitfields then
    return cboe_futures_orderentry_boe_v1_3_dissect.bitfields_branches(buffer, offset, packet, parent, application_message_type)
  end

  -- Calculate size and check that branch is not empty
  local size = cboe_futures_orderentry_boe_v1_3_size_of.bitfields(buffer, offset, application_message_type)
  if size == 0 then
    return offset
  end

  -- Dissect Element
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.bitfields(buffer, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.bitfields, range, display)

  return cboe_futures_orderentry_boe_v1_3_dissect.bitfields_branches(buffer, offset, packet, parent, application_message_type)
end

-- Size: Application Message Type
cboe_futures_orderentry_boe_v1_3_size_of.application_message_type = 1

-- Display: Application Message Type
cboe_futures_orderentry_boe_v1_3_display.application_message_type = function(value)
  if value == 0x38 then
    return "Application Message Type: New Order (0x38)"
  end
  if value == 0x39 then
    return "Application Message Type: Cancel Order (0x39)"
  end
  if value == 0x3A then
    return "Application Message Type: Modify Order (0x3A)"
  end
  if value == 0x47 then
    return "Application Message Type: Purge Order (0x47)"
  end
  if value == 0x25 then
    return "Application Message Type: Order Acknowledgment (0x25)"
  end
  if value == 0x26 then
    return "Application Message Type: Order Rejected (0x26)"
  end
  if value == 0x27 then
    return "Application Message Type: Order Modified (0x27)"
  end
  if value == 0x29 then
    return "Application Message Type: User Modify Rejected (0x29)"
  end
  if value == 0x2A then
    return "Application Message Type: Order Cancelled (0x2A)"
  end
  if value == 0x2B then
    return "Application Message Type: Cancel Rejected (0x2B)"
  end
  if value == 0x2C then
    return "Application Message Type: Order Execution (0x2C)"
  end
  if value == 0x2D then
    return "Application Message Type: Trade Cancel Or Correct (0x2D)"
  end
  if value == 0x48 then
    return "Application Message Type: Purge Rejected (0x48)"
  end
  if value == 0x49 then
    return "Application Message Type: Tas Restatement (0x49)"
  end
  if value == 0x4A then
    return "Application Message Type: Variance Restatement (0x4A)"
  end

  return "Application Message Type: Unknown("..value..")"
end

-- Dissect: Application Message Type
cboe_futures_orderentry_boe_v1_3_dissect.application_message_type = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.application_message_type
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.application_message_type(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.application_message_type, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Return Bitfields
cboe_futures_orderentry_boe_v1_3_size_of.return_bitfields = function(buffer, offset)
  local index = offset

  -- Dependency element: Param Group Length
  local param_group_length = buffer(offset - 3, 2):le_uint()

  return param_group_length - 3
end

-- Display: Return Bitfields
cboe_futures_orderentry_boe_v1_3_display.return_bitfields = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.return_bitfields_fields = function(buffer, offset, packet, parent, size_of_return_bitfields)
  local index = offset

  -- Application Message Type: 1 Byte Unsigned Fixed Width Integer Enum with 15 values
  index, application_message_type = cboe_futures_orderentry_boe_v1_3_dissect.application_message_type(buffer, index, packet, parent)

  -- Bitfields: Runtime Type with 15 branches
  index = cboe_futures_orderentry_boe_v1_3_dissect.bitfields(buffer, index, packet, parent, application_message_type)

  return index
end

-- Dissect: Return Bitfields
cboe_futures_orderentry_boe_v1_3_dissect.return_bitfields = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_return_bitfields = cboe_futures_orderentry_boe_v1_3_size_of.return_bitfields(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.return_bitfields then
    local range = buffer(offset, size_of_return_bitfields)
    local display = cboe_futures_orderentry_boe_v1_3_display.return_bitfields(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.return_bitfields, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.return_bitfields_fields(buffer, offset, packet, parent, size_of_return_bitfields)

  return offset + size_of_return_bitfields
end

-- Size: No Unspecified Unit Replay
cboe_futures_orderentry_boe_v1_3_size_of.no_unspecified_unit_replay = 1

-- Display: No Unspecified Unit Replay
cboe_futures_orderentry_boe_v1_3_display.no_unspecified_unit_replay = function(value)
  if value == "0" then
    return "No Unspecified Unit Replay: False (0)"
  end
  if value == "1" then
    return "No Unspecified Unit Replay: True (1)"
  end

  return "No Unspecified Unit Replay: Unknown("..value..")"
end

-- Dissect: No Unspecified Unit Replay
cboe_futures_orderentry_boe_v1_3_dissect.no_unspecified_unit_replay = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.no_unspecified_unit_replay
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.no_unspecified_unit_replay(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.no_unspecified_unit_replay, range, value, display)

  return offset + length, value
end

-- Calculate size of: Unit Sequences
cboe_futures_orderentry_boe_v1_3_size_of.unit_sequences = function(buffer, offset)
  local index = 0

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.no_unspecified_unit_replay

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.number_of_units

  -- Calculate field size from count
  local unit_sequence_count = buffer(offset + index - 1, 1):le_uint()
  index = index + unit_sequence_count * 5

  return index
end

-- Display: Unit Sequences
cboe_futures_orderentry_boe_v1_3_display.unit_sequences = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Unit Sequences
cboe_futures_orderentry_boe_v1_3_dissect.unit_sequences_fields = function(buffer, offset, packet, parent)
  local index = offset

  -- No Unspecified Unit Replay: 1 Byte Ascii String Enum with 2 values
  index, no_unspecified_unit_replay = cboe_futures_orderentry_boe_v1_3_dissect.no_unspecified_unit_replay(buffer, index, packet, parent)

  -- Number Of Units: 1 Byte Unsigned Fixed Width Integer
  index, number_of_units = cboe_futures_orderentry_boe_v1_3_dissect.number_of_units(buffer, index, packet, parent)

  -- Unit Sequence: Struct of 2 fields
  for i = 1, number_of_units do
    index = cboe_futures_orderentry_boe_v1_3_dissect.unit_sequence(buffer, index, packet, parent)
  end

  return index
end

-- Dissect: Unit Sequences
cboe_futures_orderentry_boe_v1_3_dissect.unit_sequences = function(buffer, offset, packet, parent)
  -- Optionally add dynamic struct element to protocol tree
  if show.unit_sequences then
    local length = cboe_futures_orderentry_boe_v1_3_size_of.unit_sequences(buffer, offset)
    local range = buffer(offset, length)
    local display = cboe_futures_orderentry_boe_v1_3_display.unit_sequences(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.unit_sequences, range, display)
  end

  return cboe_futures_orderentry_boe_v1_3_dissect.unit_sequences_fields(buffer, offset, packet, parent)
end

-- Calculate runtime size of: Parameter
cboe_futures_orderentry_boe_v1_3_size_of.parameter = function(buffer, offset, param_group_type)
  -- Size of Unit Sequences
  if param_group_type == 0x80 then
    return cboe_futures_orderentry_boe_v1_3_size_of.unit_sequences(buffer, offset)
  end
  -- Size of Return Bitfields
  if param_group_type == 0x81 then
    return cboe_futures_orderentry_boe_v1_3_size_of.return_bitfields(buffer, offset)
  end

  return 0
end

-- Display: Parameter
cboe_futures_orderentry_boe_v1_3_display.parameter = function(buffer, offset, packet, parent)
  return ""
end

-- Dissect Branches: Parameter
cboe_futures_orderentry_boe_v1_3_dissect.parameter_branches = function(buffer, offset, packet, parent, param_group_type)
  -- Dissect Unit Sequences
  if param_group_type == 0x80 then
    return cboe_futures_orderentry_boe_v1_3_dissect.unit_sequences(buffer, offset, packet, parent)
  end
  -- Dissect Return Bitfields
  if param_group_type == 0x81 then
    return cboe_futures_orderentry_boe_v1_3_dissect.return_bitfields(buffer, offset, packet, parent)
  end

  return offset
end

-- Dissect: Parameter
cboe_futures_orderentry_boe_v1_3_dissect.parameter = function(buffer, offset, packet, parent, param_group_type)
  if not show.parameter then
    return cboe_futures_orderentry_boe_v1_3_dissect.parameter_branches(buffer, offset, packet, parent, param_group_type)
  end

  -- Calculate size and check that branch is not empty
  local size = cboe_futures_orderentry_boe_v1_3_size_of.parameter(buffer, offset, param_group_type)
  if size == 0 then
    return offset
  end

  -- Dissect Element
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.parameter(buffer, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.parameter, range, display)

  return cboe_futures_orderentry_boe_v1_3_dissect.parameter_branches(buffer, offset, packet, parent, param_group_type)
end

-- Size: Param Group Type
cboe_futures_orderentry_boe_v1_3_size_of.param_group_type = 1

-- Display: Param Group Type
cboe_futures_orderentry_boe_v1_3_display.param_group_type = function(value)
  if value == 0x80 then
    return "Param Group Type: Unit Sequences (0x80)"
  end
  if value == 0x81 then
    return "Param Group Type: Return Bitfields (0x81)"
  end

  return "Param Group Type: Unknown("..value..")"
end

-- Dissect: Param Group Type
cboe_futures_orderentry_boe_v1_3_dissect.param_group_type = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.param_group_type
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.param_group_type(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.param_group_type, range, value, display)

  return offset + length, value
end

-- Size: Param Group Length
cboe_futures_orderentry_boe_v1_3_size_of.param_group_length = 2

-- Display: Param Group Length
cboe_futures_orderentry_boe_v1_3_display.param_group_length = function(value)
  return "Param Group Length: "..value
end

-- Dissect: Param Group Length
cboe_futures_orderentry_boe_v1_3_dissect.param_group_length = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.param_group_length
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.param_group_length(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.param_group_length, range, value, display)

  return offset + length, value
end

-- Calculate size of: Param Header
cboe_futures_orderentry_boe_v1_3_size_of.param_header = function(buffer, offset)
  local index = 0

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.param_group_length

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.param_group_type

  return index
end

-- Display: Param Header
cboe_futures_orderentry_boe_v1_3_display.param_header = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Param Header
cboe_futures_orderentry_boe_v1_3_dissect.param_header_fields = function(buffer, offset, packet, parent)
  local index = offset

  -- Param Group Length: 2 Byte Unsigned Fixed Width Integer
  index, param_group_length = cboe_futures_orderentry_boe_v1_3_dissect.param_group_length(buffer, index, packet, parent)

  -- Param Group Type: 1 Byte Unsigned Fixed Width Integer Enum with 2 values
  index, param_group_type = cboe_futures_orderentry_boe_v1_3_dissect.param_group_type(buffer, index, packet, parent)

  return index
end

-- Dissect: Param Header
cboe_futures_orderentry_boe_v1_3_dissect.param_header = function(buffer, offset, packet, parent)
  if show.param_header then
    -- Optionally add element to protocol tree
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.param_header, buffer(offset, 0))
    local index = cboe_futures_orderentry_boe_v1_3_dissect.param_header_fields(buffer, offset, packet, parent)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_futures_orderentry_boe_v1_3_display.param_header(packet, parent, length)
    parent:append_text(display)

    return index
  else
    -- Skip element, add fields directly
    return cboe_futures_orderentry_boe_v1_3_dissect.param_header_fields(buffer, offset, packet, parent)
  end
end

-- Display: Param Group
cboe_futures_orderentry_boe_v1_3_display.param_group = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Param Group
cboe_futures_orderentry_boe_v1_3_dissect.param_group_fields = function(buffer, offset, packet, parent, size_of_param_group)
  local index = offset

  -- Param Header: Struct of 2 fields
  index, param_header = cboe_futures_orderentry_boe_v1_3_dissect.param_header(buffer, index, packet, parent)

  -- Dependency element: Param Group Type
  local param_group_type = buffer(index - 1, 1):le_uint()

  -- Parameter: Runtime Type with 2 branches
  index = cboe_futures_orderentry_boe_v1_3_dissect.parameter(buffer, index, packet, parent, param_group_type)

  return index
end

-- Dissect: Param Group
cboe_futures_orderentry_boe_v1_3_dissect.param_group = function(buffer, offset, packet, parent, size_of_param_group)
  -- Optionally add struct element to protocol tree
  if show.param_group then
    local range = buffer(offset, size_of_param_group)
    local display = cboe_futures_orderentry_boe_v1_3_display.param_group(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.param_group, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.param_group_fields(buffer, offset, packet, parent, size_of_param_group)

  return offset + size_of_param_group
end

-- Size: Number Of Param Groups
cboe_futures_orderentry_boe_v1_3_size_of.number_of_param_groups = 1

-- Display: Number Of Param Groups
cboe_futures_orderentry_boe_v1_3_display.number_of_param_groups = function(value)
  return "Number Of Param Groups: "..value
end

-- Dissect: Number Of Param Groups
cboe_futures_orderentry_boe_v1_3_dissect.number_of_param_groups = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.number_of_param_groups
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.number_of_param_groups(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.number_of_param_groups, range, value, display)

  return offset + length, value
end

-- Size: Login Response Text
cboe_futures_orderentry_boe_v1_3_size_of.login_response_text = 60

-- Display: Login Response Text
cboe_futures_orderentry_boe_v1_3_display.login_response_text = function(value)
  return "Login Response Text: "..value
end

-- Dissect: Login Response Text
cboe_futures_orderentry_boe_v1_3_dissect.login_response_text = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.login_response_text
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.login_response_text(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.login_response_text, range, value, display)

  return offset + length, value
end

-- Size: Login Response Status
cboe_futures_orderentry_boe_v1_3_size_of.login_response_status = 1

-- Display: Login Response Status
cboe_futures_orderentry_boe_v1_3_display.login_response_status = function(value)
  if value == "A" then
    return "Login Response Status: Login Accepted (A)"
  end
  if value == "N" then
    return "Login Response Status: Not Authorized (N)"
  end
  if value == "D" then
    return "Login Response Status: Session Is Disabled (D)"
  end
  if value == "B" then
    return "Login Response Status: Session In Use (B)"
  end
  if value == "S" then
    return "Login Response Status: Invalid Session (S)"
  end
  if value == "Q" then
    return "Login Response Status: Sequence Ahead In Login Message (Q)"
  end
  if value == "I" then
    return "Login Response Status: Invalid Unit Given In Login Message (I)"
  end
  if value == "F" then
    return "Login Response Status: Invalid Return Bit Field In Login Message (F)"
  end
  if value == "M" then
    return "Login Response Status: Invalid Login Request Message Structure (M)"
  end

  return "Login Response Status: Unknown("..value..")"
end

-- Dissect: Login Response Status
cboe_futures_orderentry_boe_v1_3_dissect.login_response_status = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.login_response_status
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.login_response_status(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.login_response_status, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Login Response Message
cboe_futures_orderentry_boe_v1_3_size_of.login_response_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Login Response Message
cboe_futures_orderentry_boe_v1_3_display.login_response_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Login Response Message
cboe_futures_orderentry_boe_v1_3_dissect.login_response_message_fields = function(buffer, offset, packet, parent, size_of_login_response_message)
  local index = offset

  -- Login Response Status: 1 Byte Ascii String Enum with 9 values
  index, login_response_status = cboe_futures_orderentry_boe_v1_3_dissect.login_response_status(buffer, index, packet, parent)

  -- Login Response Text: 60 Byte Ascii String
  index, login_response_text = cboe_futures_orderentry_boe_v1_3_dissect.login_response_text(buffer, index, packet, parent)

  -- No Unspecified Unit Replay: 1 Byte Ascii String Enum with 2 values
  index, no_unspecified_unit_replay = cboe_futures_orderentry_boe_v1_3_dissect.no_unspecified_unit_replay(buffer, index, packet, parent)

  -- Last Received Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, last_received_sequence_number = cboe_futures_orderentry_boe_v1_3_dissect.last_received_sequence_number(buffer, index, packet, parent)

  -- Number Of Units: 1 Byte Unsigned Fixed Width Integer
  index, number_of_units = cboe_futures_orderentry_boe_v1_3_dissect.number_of_units(buffer, index, packet, parent)

  -- Unit Sequence: Struct of 2 fields
  for i = 1, number_of_units do
    index = cboe_futures_orderentry_boe_v1_3_dissect.unit_sequence(buffer, index, packet, parent)
  end

  -- Number Of Param Groups: 1 Byte Unsigned Fixed Width Integer
  index, number_of_param_groups = cboe_futures_orderentry_boe_v1_3_dissect.number_of_param_groups(buffer, index, packet, parent)

  -- Param Group: Struct of 2 fields
  for i = 1, number_of_param_groups do

    -- Dependency element: Param Group Length
    local param_group_length = buffer(index, 2):le_uint()

    -- Param Group: Struct of 2 fields
    index = cboe_futures_orderentry_boe_v1_3_dissect.param_group(buffer, index, packet, parent, param_group_length)
  end

  return index
end

-- Dissect: Login Response Message
cboe_futures_orderentry_boe_v1_3_dissect.login_response_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_login_response_message = cboe_futures_orderentry_boe_v1_3_size_of.login_response_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.login_response_message then
    local range = buffer(offset, size_of_login_response_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.login_response_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.login_response_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.login_response_message_fields(buffer, offset, packet, parent, size_of_login_response_message)

  return offset + size_of_login_response_message
end

-- Size: Password
cboe_futures_orderentry_boe_v1_3_size_of.password = 10

-- Display: Password
cboe_futures_orderentry_boe_v1_3_display.password = function(value)
  return "Password: "..value
end

-- Dissect: Password
cboe_futures_orderentry_boe_v1_3_dissect.password = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.password
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.password(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.password, range, value, display)

  return offset + length, value
end

-- Size: Username
cboe_futures_orderentry_boe_v1_3_size_of.username = 4

-- Display: Username
cboe_futures_orderentry_boe_v1_3_display.username = function(value)
  return "Username: "..value
end

-- Dissect: Username
cboe_futures_orderentry_boe_v1_3_dissect.username = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.username
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.username(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.username, range, value, display)

  return offset + length, value
end

-- Size: Session Sub Id
cboe_futures_orderentry_boe_v1_3_size_of.session_sub_id = 4

-- Display: Session Sub Id
cboe_futures_orderentry_boe_v1_3_display.session_sub_id = function(value)
  return "Session Sub Id: "..value
end

-- Dissect: Session Sub Id
cboe_futures_orderentry_boe_v1_3_dissect.session_sub_id = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.session_sub_id
  local range = buffer(offset, length)
  local value = range:string()
  local display = cboe_futures_orderentry_boe_v1_3_display.session_sub_id(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.session_sub_id, range, value, display)

  return offset + length, value
end

-- Read runtime size of: Login Request Message
cboe_futures_orderentry_boe_v1_3_size_of.login_request_message = function(buffer, offset)
  local index = offset

  -- Dependency element: Message Length
  local message_length = buffer(offset - 8, 2):le_uint()

  return message_length - 8
end

-- Display: Login Request Message
cboe_futures_orderentry_boe_v1_3_display.login_request_message = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Login Request Message
cboe_futures_orderentry_boe_v1_3_dissect.login_request_message_fields = function(buffer, offset, packet, parent, size_of_login_request_message)
  local index = offset

  -- Session Sub Id: 4 Byte Ascii String
  index, session_sub_id = cboe_futures_orderentry_boe_v1_3_dissect.session_sub_id(buffer, index, packet, parent)

  -- Username: 4 Byte Ascii String
  index, username = cboe_futures_orderentry_boe_v1_3_dissect.username(buffer, index, packet, parent)

  -- Password: 10 Byte Ascii String
  index, password = cboe_futures_orderentry_boe_v1_3_dissect.password(buffer, index, packet, parent)

  -- Number Of Param Groups: 1 Byte Unsigned Fixed Width Integer
  index, number_of_param_groups = cboe_futures_orderentry_boe_v1_3_dissect.number_of_param_groups(buffer, index, packet, parent)

  -- Param Group: Struct of 2 fields
  for i = 1, number_of_param_groups do

    -- Dependency element: Param Group Length
    local param_group_length = buffer(index, 2):le_uint()

    -- Param Group: Struct of 2 fields
    index = cboe_futures_orderentry_boe_v1_3_dissect.param_group(buffer, index, packet, parent, param_group_length)
  end

  return index
end

-- Dissect: Login Request Message
cboe_futures_orderentry_boe_v1_3_dissect.login_request_message = function(buffer, offset, packet, parent)
  -- Parse runtime size
  local size_of_login_request_message = cboe_futures_orderentry_boe_v1_3_size_of.login_request_message(buffer, offset)

  -- Optionally add struct element to protocol tree
  if show.login_request_message then
    local range = buffer(offset, size_of_login_request_message)
    local display = cboe_futures_orderentry_boe_v1_3_display.login_request_message(buffer, packet, parent)
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.login_request_message, range, display)
  end

  cboe_futures_orderentry_boe_v1_3_dissect.login_request_message_fields(buffer, offset, packet, parent, size_of_login_request_message)

  return offset + size_of_login_request_message
end

-- Calculate runtime size of: Message
cboe_futures_orderentry_boe_v1_3_size_of.message = function(buffer, offset, message_type)
  -- Size of Login Request Message
  if message_type == 0x37 then
    return cboe_futures_orderentry_boe_v1_3_size_of.login_request_message(buffer, offset)
  end
  -- Size of Logout Request Message
  if message_type == 0x02 then
    return 0
  end
  -- Size of Client Heartbeat Message
  if message_type == 0x03 then
    return 0
  end
  -- Size of Login Response Message
  if message_type == 0x24 then
    return cboe_futures_orderentry_boe_v1_3_size_of.login_response_message(buffer, offset)
  end
  -- Size of Logout Message
  if message_type == 0x08 then
    return cboe_futures_orderentry_boe_v1_3_size_of.logout_message(buffer, offset)
  end
  -- Size of Server Heartbeat Message
  if message_type == 0x09 then
    return 0
  end
  -- Size of Replay Complete Message
  if message_type == 0x13 then
    return 0
  end
  -- Size of New Order Message
  if message_type == 0x38 then
    return cboe_futures_orderentry_boe_v1_3_size_of.new_order_message(buffer, offset)
  end
  -- Size of Cancel Order Message
  if message_type == 0x39 then
    return cboe_futures_orderentry_boe_v1_3_size_of.cancel_order_message(buffer, offset)
  end
  -- Size of Modify Order Message
  if message_type == 0x3A then
    return cboe_futures_orderentry_boe_v1_3_size_of.modify_order_message(buffer, offset)
  end
  -- Size of Quote Update Message
  if message_type == 0x70 then
    return cboe_futures_orderentry_boe_v1_3_size_of.quote_update_message(buffer, offset)
  end
  -- Size of Purge Order Message
  if message_type == 0x47 then
    return cboe_futures_orderentry_boe_v1_3_size_of.purge_order_message(buffer, offset)
  end
  -- Size of Reset Risk Message
  if message_type == 0x56 then
    return cboe_futures_orderentry_boe_v1_3_size_of.reset_risk_message(buffer, offset)
  end
  -- Size of Order Acknowledgment Message
  if message_type == 0x25 then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_acknowledgment_message(buffer, offset)
  end
  -- Size of Quote Update Acknowledgment Message
  if message_type == 0x71 then
    return cboe_futures_orderentry_boe_v1_3_size_of.quote_update_acknowledgment_message(buffer, offset)
  end
  -- Size of Order Rejected Message
  if message_type == 0x26 then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_rejected_message(buffer, offset)
  end
  -- Size of Quote Update Rejected Message
  if message_type == 0x78 then
    return cboe_futures_orderentry_boe_v1_3_size_of.quote_update_rejected_message(buffer, offset)
  end
  -- Size of Order Modified Message
  if message_type == 0x27 then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_modified_message(buffer, offset)
  end
  -- Size of Quote Restated Message
  if message_type == 0x72 then
    return cboe_futures_orderentry_boe_v1_3_size_of.quote_restated_message(buffer, offset)
  end
  -- Size of User Modify Rejected Message
  if message_type == 0x29 then
    return cboe_futures_orderentry_boe_v1_3_size_of.user_modify_rejected_message(buffer, offset)
  end
  -- Size of Order Cancelled Message
  if message_type == 0x2A then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_cancelled_message(buffer, offset)
  end
  -- Size of Quote Cancelled Message
  if message_type == 0x73 then
    return cboe_futures_orderentry_boe_v1_3_size_of.quote_cancelled_message(buffer, offset)
  end
  -- Size of Cancel Rejected Message
  if message_type == 0x2B then
    return cboe_futures_orderentry_boe_v1_3_size_of.cancel_rejected_message(buffer, offset)
  end
  -- Size of Order Execution Message
  if message_type == 0x2C then
    return cboe_futures_orderentry_boe_v1_3_size_of.order_execution_message(buffer, offset)
  end
  -- Size of Quote Execution Message
  if message_type == 0x74 then
    return cboe_futures_orderentry_boe_v1_3_size_of.quote_execution_message(buffer, offset)
  end
  -- Size of Trade Cancel Or Correct Message
  if message_type == 0x2D then
    return cboe_futures_orderentry_boe_v1_3_size_of.trade_cancel_or_correct_message(buffer, offset)
  end
  -- Size of Purge Rejected Message
  if message_type == 0x48 then
    return cboe_futures_orderentry_boe_v1_3_size_of.purge_rejected_message(buffer, offset)
  end
  -- Size of Risk Reset Acknowledgment Message
  if message_type == 0x57 then
    return cboe_futures_orderentry_boe_v1_3_size_of.risk_reset_acknowledgment_message(buffer, offset)
  end
  -- Size of Mass Cancel Acknowledgment Message
  if message_type == 0x36 then
    return cboe_futures_orderentry_boe_v1_3_size_of.mass_cancel_acknowledgment_message(buffer, offset)
  end
  -- Size of Tas Restatement Message
  if message_type == 0x49 then
    return cboe_futures_orderentry_boe_v1_3_size_of.tas_restatement_message(buffer, offset)
  end
  -- Size of Variance Restatement Message
  if message_type == 0x4A then
    return cboe_futures_orderentry_boe_v1_3_size_of.variance_restatement_message(buffer, offset)
  end
  -- Size of Tas Quote Restatement Message
  if message_type == 0x75 then
    return cboe_futures_orderentry_boe_v1_3_size_of.tas_quote_restatement_message(buffer, offset)
  end
  -- Size of Variance Quote Restatement Message
  if message_type == 0x76 then
    return cboe_futures_orderentry_boe_v1_3_size_of.variance_quote_restatement_message(buffer, offset)
  end

  return 0
end

-- Display: Message
cboe_futures_orderentry_boe_v1_3_display.message = function(buffer, offset, packet, parent)
  return ""
end

-- Dissect Branches: Message
cboe_futures_orderentry_boe_v1_3_dissect.message_branches = function(buffer, offset, packet, parent, message_type)
  -- Dissect Login Request Message
  if message_type == 0x37 then
    return cboe_futures_orderentry_boe_v1_3_dissect.login_request_message(buffer, offset, packet, parent)
  end
  -- Dissect Logout Request Message
  if message_type == 0x02 then
  end
  -- Dissect Client Heartbeat Message
  if message_type == 0x03 then
  end
  -- Dissect Login Response Message
  if message_type == 0x24 then
    return cboe_futures_orderentry_boe_v1_3_dissect.login_response_message(buffer, offset, packet, parent)
  end
  -- Dissect Logout Message
  if message_type == 0x08 then
    return cboe_futures_orderentry_boe_v1_3_dissect.logout_message(buffer, offset, packet, parent)
  end
  -- Dissect Server Heartbeat Message
  if message_type == 0x09 then
  end
  -- Dissect Replay Complete Message
  if message_type == 0x13 then
  end
  -- Dissect New Order Message
  if message_type == 0x38 then
    return cboe_futures_orderentry_boe_v1_3_dissect.new_order_message(buffer, offset, packet, parent)
  end
  -- Dissect Cancel Order Message
  if message_type == 0x39 then
    return cboe_futures_orderentry_boe_v1_3_dissect.cancel_order_message(buffer, offset, packet, parent)
  end
  -- Dissect Modify Order Message
  if message_type == 0x3A then
    return cboe_futures_orderentry_boe_v1_3_dissect.modify_order_message(buffer, offset, packet, parent)
  end
  -- Dissect Quote Update Message
  if message_type == 0x70 then
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_update_message(buffer, offset, packet, parent)
  end
  -- Dissect Purge Order Message
  if message_type == 0x47 then
    return cboe_futures_orderentry_boe_v1_3_dissect.purge_order_message(buffer, offset, packet, parent)
  end
  -- Dissect Reset Risk Message
  if message_type == 0x56 then
    return cboe_futures_orderentry_boe_v1_3_dissect.reset_risk_message(buffer, offset, packet, parent)
  end
  -- Dissect Order Acknowledgment Message
  if message_type == 0x25 then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_acknowledgment_message(buffer, offset, packet, parent)
  end
  -- Dissect Quote Update Acknowledgment Message
  if message_type == 0x71 then
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_update_acknowledgment_message(buffer, offset, packet, parent)
  end
  -- Dissect Order Rejected Message
  if message_type == 0x26 then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_rejected_message(buffer, offset, packet, parent)
  end
  -- Dissect Quote Update Rejected Message
  if message_type == 0x78 then
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_update_rejected_message(buffer, offset, packet, parent)
  end
  -- Dissect Order Modified Message
  if message_type == 0x27 then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_modified_message(buffer, offset, packet, parent)
  end
  -- Dissect Quote Restated Message
  if message_type == 0x72 then
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_restated_message(buffer, offset, packet, parent)
  end
  -- Dissect User Modify Rejected Message
  if message_type == 0x29 then
    return cboe_futures_orderentry_boe_v1_3_dissect.user_modify_rejected_message(buffer, offset, packet, parent)
  end
  -- Dissect Order Cancelled Message
  if message_type == 0x2A then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_cancelled_message(buffer, offset, packet, parent)
  end
  -- Dissect Quote Cancelled Message
  if message_type == 0x73 then
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_cancelled_message(buffer, offset, packet, parent)
  end
  -- Dissect Cancel Rejected Message
  if message_type == 0x2B then
    return cboe_futures_orderentry_boe_v1_3_dissect.cancel_rejected_message(buffer, offset, packet, parent)
  end
  -- Dissect Order Execution Message
  if message_type == 0x2C then
    return cboe_futures_orderentry_boe_v1_3_dissect.order_execution_message(buffer, offset, packet, parent)
  end
  -- Dissect Quote Execution Message
  if message_type == 0x74 then
    return cboe_futures_orderentry_boe_v1_3_dissect.quote_execution_message(buffer, offset, packet, parent)
  end
  -- Dissect Trade Cancel Or Correct Message
  if message_type == 0x2D then
    return cboe_futures_orderentry_boe_v1_3_dissect.trade_cancel_or_correct_message(buffer, offset, packet, parent)
  end
  -- Dissect Purge Rejected Message
  if message_type == 0x48 then
    return cboe_futures_orderentry_boe_v1_3_dissect.purge_rejected_message(buffer, offset, packet, parent)
  end
  -- Dissect Risk Reset Acknowledgment Message
  if message_type == 0x57 then
    return cboe_futures_orderentry_boe_v1_3_dissect.risk_reset_acknowledgment_message(buffer, offset, packet, parent)
  end
  -- Dissect Mass Cancel Acknowledgment Message
  if message_type == 0x36 then
    return cboe_futures_orderentry_boe_v1_3_dissect.mass_cancel_acknowledgment_message(buffer, offset, packet, parent)
  end
  -- Dissect Tas Restatement Message
  if message_type == 0x49 then
    return cboe_futures_orderentry_boe_v1_3_dissect.tas_restatement_message(buffer, offset, packet, parent)
  end
  -- Dissect Variance Restatement Message
  if message_type == 0x4A then
    return cboe_futures_orderentry_boe_v1_3_dissect.variance_restatement_message(buffer, offset, packet, parent)
  end
  -- Dissect Tas Quote Restatement Message
  if message_type == 0x75 then
    return cboe_futures_orderentry_boe_v1_3_dissect.tas_quote_restatement_message(buffer, offset, packet, parent)
  end
  -- Dissect Variance Quote Restatement Message
  if message_type == 0x76 then
    return cboe_futures_orderentry_boe_v1_3_dissect.variance_quote_restatement_message(buffer, offset, packet, parent)
  end

  return offset
end

-- Dissect: Message
cboe_futures_orderentry_boe_v1_3_dissect.message = function(buffer, offset, packet, parent, message_type)
  if not show.message then
    return cboe_futures_orderentry_boe_v1_3_dissect.message_branches(buffer, offset, packet, parent, message_type)
  end

  -- Calculate size and check that branch is not empty
  local size = cboe_futures_orderentry_boe_v1_3_size_of.message(buffer, offset, message_type)
  if size == 0 then
    return offset
  end

  -- Dissect Element
  local range = buffer(offset, size)
  local display = cboe_futures_orderentry_boe_v1_3_display.message(buffer, packet, parent)
  local element = parent:add(cboe_futures_orderentry_boe_v1_3.fields.message, range, display)

  return cboe_futures_orderentry_boe_v1_3_dissect.message_branches(buffer, offset, packet, parent, message_type)
end

-- Size: Matching Unit
cboe_futures_orderentry_boe_v1_3_size_of.matching_unit = 1

-- Display: Matching Unit
cboe_futures_orderentry_boe_v1_3_display.matching_unit = function(value)
  return "Matching Unit: "..value
end

-- Dissect: Matching Unit
cboe_futures_orderentry_boe_v1_3_dissect.matching_unit = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.matching_unit
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.matching_unit(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.matching_unit, range, value, display)

  return offset + length, value
end

-- Size: Message Type
cboe_futures_orderentry_boe_v1_3_size_of.message_type = 1

-- Display: Message Type
cboe_futures_orderentry_boe_v1_3_display.message_type = function(value)
  if value == 0x37 then
    return "Message Type: Login Request Message (0x37)"
  end
  if value == 0x02 then
    return "Message Type: Logout Request Message (0x02)"
  end
  if value == 0x03 then
    return "Message Type: Client Heartbeat Message (0x03)"
  end
  if value == 0x24 then
    return "Message Type: Login Response Message (0x24)"
  end
  if value == 0x08 then
    return "Message Type: Logout Message (0x08)"
  end
  if value == 0x09 then
    return "Message Type: Server Heartbeat Message (0x09)"
  end
  if value == 0x13 then
    return "Message Type: Replay Complete Message (0x13)"
  end
  if value == 0x38 then
    return "Message Type: New Order Message (0x38)"
  end
  if value == 0x39 then
    return "Message Type: Cancel Order Message (0x39)"
  end
  if value == 0x3A then
    return "Message Type: Modify Order Message (0x3A)"
  end
  if value == 0x70 then
    return "Message Type: Quote Update Message (0x70)"
  end
  if value == 0x47 then
    return "Message Type: Purge Order Message (0x47)"
  end
  if value == 0x56 then
    return "Message Type: Reset Risk Message (0x56)"
  end
  if value == 0x25 then
    return "Message Type: Order Acknowledgment Message (0x25)"
  end
  if value == 0x71 then
    return "Message Type: Quote Update Acknowledgment Message (0x71)"
  end
  if value == 0x26 then
    return "Message Type: Order Rejected Message (0x26)"
  end
  if value == 0x78 then
    return "Message Type: Quote Update Rejected Message (0x78)"
  end
  if value == 0x27 then
    return "Message Type: Order Modified Message (0x27)"
  end
  if value == 0x72 then
    return "Message Type: Quote Restated Message (0x72)"
  end
  if value == 0x29 then
    return "Message Type: User Modify Rejected Message (0x29)"
  end
  if value == 0x2A then
    return "Message Type: Order Cancelled Message (0x2A)"
  end
  if value == 0x73 then
    return "Message Type: Quote Cancelled Message (0x73)"
  end
  if value == 0x2B then
    return "Message Type: Cancel Rejected Message (0x2B)"
  end
  if value == 0x2C then
    return "Message Type: Order Execution Message (0x2C)"
  end
  if value == 0x74 then
    return "Message Type: Quote Execution Message (0x74)"
  end
  if value == 0x2D then
    return "Message Type: Trade Cancel Or Correct Message (0x2D)"
  end
  if value == 0x48 then
    return "Message Type: Purge Rejected Message (0x48)"
  end
  if value == 0x57 then
    return "Message Type: Risk Reset Acknowledgment Message (0x57)"
  end
  if value == 0x36 then
    return "Message Type: Mass Cancel Acknowledgment Message (0x36)"
  end
  if value == 0x49 then
    return "Message Type: Tas Restatement Message (0x49)"
  end
  if value == 0x4A then
    return "Message Type: Variance Restatement Message (0x4A)"
  end
  if value == 0x75 then
    return "Message Type: Tas Quote Restatement Message (0x75)"
  end
  if value == 0x76 then
    return "Message Type: Variance Quote Restatement Message (0x76)"
  end

  return "Message Type: Unknown("..value..")"
end

-- Dissect: Message Type
cboe_futures_orderentry_boe_v1_3_dissect.message_type = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.message_type
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.message_type(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.message_type, range, value, display)

  return offset + length, value
end

-- Size: Message Length
cboe_futures_orderentry_boe_v1_3_size_of.message_length = 2

-- Display: Message Length
cboe_futures_orderentry_boe_v1_3_display.message_length = function(value)
  return "Message Length: "..value
end

-- Dissect: Message Length
cboe_futures_orderentry_boe_v1_3_dissect.message_length = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.message_length
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.message_length(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.message_length, range, value, display)

  return offset + length, value
end

-- Size: Start Of Message
cboe_futures_orderentry_boe_v1_3_size_of.start_of_message = 2

-- Display: Start Of Message
cboe_futures_orderentry_boe_v1_3_display.start_of_message = function(value)
  return "Start Of Message: "..value
end

-- Dissect: Start Of Message
cboe_futures_orderentry_boe_v1_3_dissect.start_of_message = function(buffer, offset, packet, parent)
  local length = cboe_futures_orderentry_boe_v1_3_size_of.start_of_message
  local range = buffer(offset, length)
  local value = range:le_uint()
  local display = cboe_futures_orderentry_boe_v1_3_display.start_of_message(value, buffer, offset, packet, parent)

  parent:add(cboe_futures_orderentry_boe_v1_3.fields.start_of_message, range, value, display)

  return offset + length, value
end

-- Calculate size of: Message Header
cboe_futures_orderentry_boe_v1_3_size_of.message_header = function(buffer, offset)
  local index = 0

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.start_of_message

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.message_length

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.message_type

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.matching_unit

  index = index + cboe_futures_orderentry_boe_v1_3_size_of.sequence_number

  return index
end

-- Display: Message Header
cboe_futures_orderentry_boe_v1_3_display.message_header = function(packet, parent, length)
  return ""
end

-- Dissect Fields: Message Header
cboe_futures_orderentry_boe_v1_3_dissect.message_header_fields = function(buffer, offset, packet, parent)
  local index = offset

  -- Start Of Message: 2 Byte Unsigned Fixed Width Integer
  index, start_of_message = cboe_futures_orderentry_boe_v1_3_dissect.start_of_message(buffer, index, packet, parent)

  -- Message Length: 2 Byte Unsigned Fixed Width Integer
  index, message_length = cboe_futures_orderentry_boe_v1_3_dissect.message_length(buffer, index, packet, parent)

  -- Message Type: 1 Byte Unsigned Fixed Width Integer Enum with 33 values
  index, message_type = cboe_futures_orderentry_boe_v1_3_dissect.message_type(buffer, index, packet, parent)

  -- Matching Unit: 1 Byte Unsigned Fixed Width Integer
  index, matching_unit = cboe_futures_orderentry_boe_v1_3_dissect.matching_unit(buffer, index, packet, parent)

  -- Sequence Number: 4 Byte Unsigned Fixed Width Integer
  index, sequence_number = cboe_futures_orderentry_boe_v1_3_dissect.sequence_number(buffer, index, packet, parent)

  return index
end

-- Dissect: Message Header
cboe_futures_orderentry_boe_v1_3_dissect.message_header = function(buffer, offset, packet, parent)
  if show.message_header then
    -- Optionally add element to protocol tree
    parent = parent:add(cboe_futures_orderentry_boe_v1_3.fields.message_header, buffer(offset, 0))
    local index = cboe_futures_orderentry_boe_v1_3_dissect.message_header_fields(buffer, offset, packet, parent)
    local length = index - offset
    parent:set_len(length)
    local display = cboe_futures_orderentry_boe_v1_3_display.message_header(packet, parent, length)
    parent:append_text(display)

    return index
  else
    -- Skip element, add fields directly
    return cboe_futures_orderentry_boe_v1_3_dissect.message_header_fields(buffer, offset, packet, parent)
  end
end

-- Dissect Packet
cboe_futures_orderentry_boe_v1_3_dissect.packet = function(buffer, packet, parent)
  local index = 0

  -- Message Header: Struct of 5 fields
  index, message_header = cboe_futures_orderentry_boe_v1_3_dissect.message_header(buffer, index, packet, parent)

  -- Dependency element: Message Type
  local message_type = buffer(index - 6, 1):le_uint()

  -- Message: Runtime Type with 33 branches
  index = cboe_futures_orderentry_boe_v1_3_dissect.message(buffer, index, packet, parent, message_type)

  return index
end


-----------------------------------------------------------------------
-- Protocol Dissector and Components
-----------------------------------------------------------------------

-- Initialize Dissector
function cboe_futures_orderentry_boe_v1_3.init()
end

-- Dissector for Cboe Futures OrderEntry Boe 1.3
function cboe_futures_orderentry_boe_v1_3.dissector(buffer, packet, parent)

  -- Set protocol name
  packet.cols.protocol = cboe_futures_orderentry_boe_v1_3.name

  -- Dissect protocol
  local protocol = parent:add(cboe_futures_orderentry_boe_v1_3, buffer(), cboe_futures_orderentry_boe_v1_3.description, "("..buffer:len().." Bytes)")
  return cboe_futures_orderentry_boe_v1_3_dissect.packet(buffer, packet, protocol)
end

-- Register With Tcp Table
local tcp_table = DissectorTable.get("tcp.port")
tcp_table:add(65333, cboe_futures_orderentry_boe_v1_3)


-----------------------------------------------------------------------
-- Protocol Heuristics
-----------------------------------------------------------------------

-- Verify size of packet
verify.cboe_futures_orderentry_boe_v1_3_packet_size = function(buffer)

  return true
end

-- Dissector Heuristic for Cboe Futures OrderEntry Boe 1.3
local function cboe_futures_orderentry_boe_v1_3_heuristic(buffer, packet, parent)
  -- Verify packet length
  if not verify.cboe_futures_orderentry_boe_v1_3_packet_size(buffer) then return false end

  -- Protocol is valid, set conversation and dissect this packet
  packet.conversation = cboe_futures_orderentry_boe_v1_3
  cboe_futures_orderentry_boe_v1_3.dissector(buffer, packet, parent)

  return true
end

-- Register Heuristic for Cboe Futures OrderEntry Boe 1.3
cboe_futures_orderentry_boe_v1_3:register_heuristic("tcp", cboe_futures_orderentry_boe_v1_3_heuristic)

-----------------------------------------------------------------------
-- Lua dissectors are an easily edited and modified cross platform dissection solution.
-- Feel free to modify. Enjoy.
-----------------------------------------------------------------------
-- 
-- Protocol:
--   Organization: Chicago Board Options Exchange
--   Version: 1.3
--   Date: Tuesday, April 21, 2020
--   Specification: CBOE_FUTURES_EXCHANGE_BOE_SPECIFICATION.pdf
-- 
-- Script:
--   Generator: 1.5.0.0
--   Compiler: 2.0
--   License: Public/GPLv3
--   Authors: Omi Developers
-- 
-- This script was generated by the Open Markets Initiative (Omi).
-- 
-- For full Omi information:
-- https://github.com/Open-Markets-Initiative/Directory
-----------------------------------------------------------------------
